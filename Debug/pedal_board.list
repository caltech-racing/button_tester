
pedal_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f74  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08009138  08009138  0000a138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091e0  080091e0  0000b10c  2**0
                  CONTENTS
  4 .ARM          00000008  080091e0  080091e0  0000a1e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080091e8  080091e8  0000b10c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091e8  080091e8  0000a1e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080091ec  080091ec  0000a1ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  080091f0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d04  2000010c  080092fc  0000b10c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e10  080092fc  0000be10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b10c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012273  00000000  00000000  0000b13c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003457  00000000  00000000  0001d3af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e70  00000000  00000000  00020808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000abf  00000000  00000000  00021678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023101  00000000  00000000  00022137  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013f22  00000000  00000000  00045238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9ab8  00000000  00000000  0005915a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00122c12  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003adc  00000000  00000000  00122c58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  00126734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000010c 	.word	0x2000010c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08009120 	.word	0x08009120

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000110 	.word	0x20000110
 8000200:	08009120 	.word	0x08009120

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b96a 	b.w	8000500 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	460c      	mov	r4, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14e      	bne.n	80002ee <__udivmoddi4+0xaa>
 8000250:	4694      	mov	ip, r2
 8000252:	458c      	cmp	ip, r1
 8000254:	4686      	mov	lr, r0
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	d962      	bls.n	8000322 <__udivmoddi4+0xde>
 800025c:	b14a      	cbz	r2, 8000272 <__udivmoddi4+0x2e>
 800025e:	f1c2 0320 	rsb	r3, r2, #32
 8000262:	4091      	lsls	r1, r2
 8000264:	fa20 f303 	lsr.w	r3, r0, r3
 8000268:	fa0c fc02 	lsl.w	ip, ip, r2
 800026c:	4319      	orrs	r1, r3
 800026e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000272:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000276:	fa1f f68c 	uxth.w	r6, ip
 800027a:	fbb1 f4f7 	udiv	r4, r1, r7
 800027e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000282:	fb07 1114 	mls	r1, r7, r4, r1
 8000286:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028a:	fb04 f106 	mul.w	r1, r4, r6
 800028e:	4299      	cmp	r1, r3
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x64>
 8000292:	eb1c 0303 	adds.w	r3, ip, r3
 8000296:	f104 30ff 	add.w	r0, r4, #4294967295
 800029a:	f080 8112 	bcs.w	80004c2 <__udivmoddi4+0x27e>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 810f 	bls.w	80004c2 <__udivmoddi4+0x27e>
 80002a4:	3c02      	subs	r4, #2
 80002a6:	4463      	add	r3, ip
 80002a8:	1a59      	subs	r1, r3, r1
 80002aa:	fa1f f38e 	uxth.w	r3, lr
 80002ae:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b2:	fb07 1110 	mls	r1, r7, r0, r1
 80002b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ba:	fb00 f606 	mul.w	r6, r0, r6
 80002be:	429e      	cmp	r6, r3
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x94>
 80002c2:	eb1c 0303 	adds.w	r3, ip, r3
 80002c6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ca:	f080 80fc 	bcs.w	80004c6 <__udivmoddi4+0x282>
 80002ce:	429e      	cmp	r6, r3
 80002d0:	f240 80f9 	bls.w	80004c6 <__udivmoddi4+0x282>
 80002d4:	4463      	add	r3, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	1b9b      	subs	r3, r3, r6
 80002da:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa6>
 80002e2:	40d3      	lsrs	r3, r2
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xba>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb4>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa6>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x150>
 8000306:	42a3      	cmp	r3, r4
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xcc>
 800030a:	4290      	cmp	r0, r2
 800030c:	f0c0 80f0 	bcc.w	80004f0 <__udivmoddi4+0x2ac>
 8000310:	1a86      	subs	r6, r0, r2
 8000312:	eb64 0303 	sbc.w	r3, r4, r3
 8000316:	2001      	movs	r0, #1
 8000318:	2d00      	cmp	r5, #0
 800031a:	d0e6      	beq.n	80002ea <__udivmoddi4+0xa6>
 800031c:	e9c5 6300 	strd	r6, r3, [r5]
 8000320:	e7e3      	b.n	80002ea <__udivmoddi4+0xa6>
 8000322:	2a00      	cmp	r2, #0
 8000324:	f040 8090 	bne.w	8000448 <__udivmoddi4+0x204>
 8000328:	eba1 040c 	sub.w	r4, r1, ip
 800032c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000330:	fa1f f78c 	uxth.w	r7, ip
 8000334:	2101      	movs	r1, #1
 8000336:	fbb4 f6f8 	udiv	r6, r4, r8
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb08 4416 	mls	r4, r8, r6, r4
 8000342:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000346:	fb07 f006 	mul.w	r0, r7, r6
 800034a:	4298      	cmp	r0, r3
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x11c>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f106 34ff 	add.w	r4, r6, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x11a>
 8000358:	4298      	cmp	r0, r3
 800035a:	f200 80cd 	bhi.w	80004f8 <__udivmoddi4+0x2b4>
 800035e:	4626      	mov	r6, r4
 8000360:	1a1c      	subs	r4, r3, r0
 8000362:	fa1f f38e 	uxth.w	r3, lr
 8000366:	fbb4 f0f8 	udiv	r0, r4, r8
 800036a:	fb08 4410 	mls	r4, r8, r0, r4
 800036e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000372:	fb00 f707 	mul.w	r7, r0, r7
 8000376:	429f      	cmp	r7, r3
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x148>
 800037a:	eb1c 0303 	adds.w	r3, ip, r3
 800037e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x146>
 8000384:	429f      	cmp	r7, r3
 8000386:	f200 80b0 	bhi.w	80004ea <__udivmoddi4+0x2a6>
 800038a:	4620      	mov	r0, r4
 800038c:	1bdb      	subs	r3, r3, r7
 800038e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x9c>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a4:	fa04 f301 	lsl.w	r3, r4, r1
 80003a8:	ea43 030c 	orr.w	r3, r3, ip
 80003ac:	40f4      	lsrs	r4, r6
 80003ae:	fa00 f801 	lsl.w	r8, r0, r1
 80003b2:	0c38      	lsrs	r0, r7, #16
 80003b4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b8:	fbb4 fef0 	udiv	lr, r4, r0
 80003bc:	fa1f fc87 	uxth.w	ip, r7
 80003c0:	fb00 441e 	mls	r4, r0, lr, r4
 80003c4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c8:	fb0e f90c 	mul.w	r9, lr, ip
 80003cc:	45a1      	cmp	r9, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d90a      	bls.n	80003ea <__udivmoddi4+0x1a6>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003da:	f080 8084 	bcs.w	80004e6 <__udivmoddi4+0x2a2>
 80003de:	45a1      	cmp	r9, r4
 80003e0:	f240 8081 	bls.w	80004e6 <__udivmoddi4+0x2a2>
 80003e4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	eba4 0409 	sub.w	r4, r4, r9
 80003ee:	fa1f f983 	uxth.w	r9, r3
 80003f2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f6:	fb00 4413 	mls	r4, r0, r3, r4
 80003fa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000402:	45a4      	cmp	ip, r4
 8000404:	d907      	bls.n	8000416 <__udivmoddi4+0x1d2>
 8000406:	193c      	adds	r4, r7, r4
 8000408:	f103 30ff 	add.w	r0, r3, #4294967295
 800040c:	d267      	bcs.n	80004de <__udivmoddi4+0x29a>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d965      	bls.n	80004de <__udivmoddi4+0x29a>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041a:	fba0 9302 	umull	r9, r3, r0, r2
 800041e:	eba4 040c 	sub.w	r4, r4, ip
 8000422:	429c      	cmp	r4, r3
 8000424:	46ce      	mov	lr, r9
 8000426:	469c      	mov	ip, r3
 8000428:	d351      	bcc.n	80004ce <__udivmoddi4+0x28a>
 800042a:	d04e      	beq.n	80004ca <__udivmoddi4+0x286>
 800042c:	b155      	cbz	r5, 8000444 <__udivmoddi4+0x200>
 800042e:	ebb8 030e 	subs.w	r3, r8, lr
 8000432:	eb64 040c 	sbc.w	r4, r4, ip
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	40cb      	lsrs	r3, r1
 800043c:	431e      	orrs	r6, r3
 800043e:	40cc      	lsrs	r4, r1
 8000440:	e9c5 6400 	strd	r6, r4, [r5]
 8000444:	2100      	movs	r1, #0
 8000446:	e750      	b.n	80002ea <__udivmoddi4+0xa6>
 8000448:	f1c2 0320 	rsb	r3, r2, #32
 800044c:	fa20 f103 	lsr.w	r1, r0, r3
 8000450:	fa0c fc02 	lsl.w	ip, ip, r2
 8000454:	fa24 f303 	lsr.w	r3, r4, r3
 8000458:	4094      	lsls	r4, r2
 800045a:	430c      	orrs	r4, r1
 800045c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000460:	fa00 fe02 	lsl.w	lr, r0, r2
 8000464:	fa1f f78c 	uxth.w	r7, ip
 8000468:	fbb3 f0f8 	udiv	r0, r3, r8
 800046c:	fb08 3110 	mls	r1, r8, r0, r3
 8000470:	0c23      	lsrs	r3, r4, #16
 8000472:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000476:	fb00 f107 	mul.w	r1, r0, r7
 800047a:	4299      	cmp	r1, r3
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x24c>
 800047e:	eb1c 0303 	adds.w	r3, ip, r3
 8000482:	f100 36ff 	add.w	r6, r0, #4294967295
 8000486:	d22c      	bcs.n	80004e2 <__udivmoddi4+0x29e>
 8000488:	4299      	cmp	r1, r3
 800048a:	d92a      	bls.n	80004e2 <__udivmoddi4+0x29e>
 800048c:	3802      	subs	r0, #2
 800048e:	4463      	add	r3, ip
 8000490:	1a5b      	subs	r3, r3, r1
 8000492:	b2a4      	uxth	r4, r4
 8000494:	fbb3 f1f8 	udiv	r1, r3, r8
 8000498:	fb08 3311 	mls	r3, r8, r1, r3
 800049c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a0:	fb01 f307 	mul.w	r3, r1, r7
 80004a4:	42a3      	cmp	r3, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x276>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b0:	d213      	bcs.n	80004da <__udivmoddi4+0x296>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d911      	bls.n	80004da <__udivmoddi4+0x296>
 80004b6:	3902      	subs	r1, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	1ae4      	subs	r4, r4, r3
 80004bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c0:	e739      	b.n	8000336 <__udivmoddi4+0xf2>
 80004c2:	4604      	mov	r4, r0
 80004c4:	e6f0      	b.n	80002a8 <__udivmoddi4+0x64>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e706      	b.n	80002d8 <__udivmoddi4+0x94>
 80004ca:	45c8      	cmp	r8, r9
 80004cc:	d2ae      	bcs.n	800042c <__udivmoddi4+0x1e8>
 80004ce:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d6:	3801      	subs	r0, #1
 80004d8:	e7a8      	b.n	800042c <__udivmoddi4+0x1e8>
 80004da:	4631      	mov	r1, r6
 80004dc:	e7ed      	b.n	80004ba <__udivmoddi4+0x276>
 80004de:	4603      	mov	r3, r0
 80004e0:	e799      	b.n	8000416 <__udivmoddi4+0x1d2>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e7d4      	b.n	8000490 <__udivmoddi4+0x24c>
 80004e6:	46d6      	mov	lr, sl
 80004e8:	e77f      	b.n	80003ea <__udivmoddi4+0x1a6>
 80004ea:	4463      	add	r3, ip
 80004ec:	3802      	subs	r0, #2
 80004ee:	e74d      	b.n	800038c <__udivmoddi4+0x148>
 80004f0:	4606      	mov	r6, r0
 80004f2:	4623      	mov	r3, r4
 80004f4:	4608      	mov	r0, r1
 80004f6:	e70f      	b.n	8000318 <__udivmoddi4+0xd4>
 80004f8:	3e02      	subs	r6, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	e730      	b.n	8000360 <__udivmoddi4+0x11c>
 80004fe:	bf00      	nop

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <shift_reg_init>:
 * @param	hspi	The pointer to the SPI handle. This should be directly available from the cubeMX setup code
 * @param 	latch_port	A pointer to latch signal port on the chip.
 * @param	latch_pin	The pin number of the latch signal pin
 */
void shift_reg_init(GPIO_TypeDef *shcp_port, GPIO_TypeDef *stcp_port, GPIO_TypeDef *data_port,
                    uint16_t shcp_pin, uint16_t stcp_pin, uint16_t data_pin) {
 8000504:	b480      	push	{r7}
 8000506:	b085      	sub	sp, #20
 8000508:	af00      	add	r7, sp, #0
 800050a:	60f8      	str	r0, [r7, #12]
 800050c:	60b9      	str	r1, [r7, #8]
 800050e:	607a      	str	r2, [r7, #4]
 8000510:	807b      	strh	r3, [r7, #2]
    sr_stcp_port = stcp_port;
 8000512:	4a0c      	ldr	r2, [pc, #48]	@ (8000544 <shift_reg_init+0x40>)
 8000514:	68bb      	ldr	r3, [r7, #8]
 8000516:	6013      	str	r3, [r2, #0]
    sr_shcp_port = shcp_port;
 8000518:	4a0b      	ldr	r2, [pc, #44]	@ (8000548 <shift_reg_init+0x44>)
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	6013      	str	r3, [r2, #0]
    sr_data_port = data_port;
 800051e:	4a0b      	ldr	r2, [pc, #44]	@ (800054c <shift_reg_init+0x48>)
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	6013      	str	r3, [r2, #0]
    sr_stcp_pin = stcp_pin;
 8000524:	4a0a      	ldr	r2, [pc, #40]	@ (8000550 <shift_reg_init+0x4c>)
 8000526:	8b3b      	ldrh	r3, [r7, #24]
 8000528:	8013      	strh	r3, [r2, #0]
    sr_shcp_pin = shcp_pin;
 800052a:	4a0a      	ldr	r2, [pc, #40]	@ (8000554 <shift_reg_init+0x50>)
 800052c:	887b      	ldrh	r3, [r7, #2]
 800052e:	8013      	strh	r3, [r2, #0]
    sr_data_pin = data_pin;
 8000530:	4a09      	ldr	r2, [pc, #36]	@ (8000558 <shift_reg_init+0x54>)
 8000532:	8bbb      	ldrh	r3, [r7, #28]
 8000534:	8013      	strh	r3, [r2, #0]
}
 8000536:	bf00      	nop
 8000538:	3714      	adds	r7, #20
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	20000128 	.word	0x20000128
 8000548:	2000012c 	.word	0x2000012c
 800054c:	20000130 	.word	0x20000130
 8000550:	20000134 	.word	0x20000134
 8000554:	20000136 	.word	0x20000136
 8000558:	20000138 	.word	0x20000138

0800055c <shift_reg_display>:
 * 					is passed, then it is written to the right digit on the display.
 * @param	dp1		the left decimal point on the LED display, should be either DP1 or 0
 * @param	dp2 	the right decimal point on the LED display, should be either DP2 or 0
 * @retval	-1 if an error occurred, 0 if success
 */
int shift_reg_display(uint8_t num, uint8_t dp1, uint8_t dp2) {
 800055c:	b580      	push	{r7, lr}
 800055e:	b08a      	sub	sp, #40	@ 0x28
 8000560:	af00      	add	r7, sp, #0
 8000562:	4603      	mov	r3, r0
 8000564:	71fb      	strb	r3, [r7, #7]
 8000566:	460b      	mov	r3, r1
 8000568:	71bb      	strb	r3, [r7, #6]
 800056a:	4613      	mov	r3, r2
 800056c:	717b      	strb	r3, [r7, #5]
	char num_str[8];
	if (num >= 100 || num < 0) {
 800056e:	79fb      	ldrb	r3, [r7, #7]
 8000570:	2b63      	cmp	r3, #99	@ 0x63
 8000572:	d902      	bls.n	800057a <shift_reg_display+0x1e>
		return -1;
 8000574:	f04f 33ff 	mov.w	r3, #4294967295
 8000578:	e087      	b.n	800068a <shift_reg_display+0x12e>
	}
	itoa(num, num_str, 10);
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	f107 0110 	add.w	r1, r7, #16
 8000580:	220a      	movs	r2, #10
 8000582:	4618      	mov	r0, r3
 8000584:	f008 fd5c 	bl	8009040 <itoa>
	unsigned int len = strlen(num_str);
 8000588:	f107 0310 	add.w	r3, r7, #16
 800058c:	4618      	mov	r0, r3
 800058e:	f7ff fe39 	bl	8000204 <strlen>
 8000592:	61f8      	str	r0, [r7, #28]
	uint8_t spi_data[2];
	if (len == 1) {
 8000594:	69fb      	ldr	r3, [r7, #28]
 8000596:	2b01      	cmp	r3, #1
 8000598:	d10a      	bne.n	80005b0 <shift_reg_display+0x54>
		// defaults to displaying on the lowest digit
		spi_data[0] = DIGITS1[num_str[0]-'0'] | dp1;
 800059a:	7c3b      	ldrb	r3, [r7, #16]
 800059c:	3b30      	subs	r3, #48	@ 0x30
 800059e:	4a3d      	ldr	r2, [pc, #244]	@ (8000694 <shift_reg_display+0x138>)
 80005a0:	5cd2      	ldrb	r2, [r2, r3]
 80005a2:	79bb      	ldrb	r3, [r7, #6]
 80005a4:	4313      	orrs	r3, r2
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	733b      	strb	r3, [r7, #12]
		spi_data[1] = dp2;
 80005aa:	797b      	ldrb	r3, [r7, #5]
 80005ac:	737b      	strb	r3, [r7, #13]
 80005ae:	e016      	b.n	80005de <shift_reg_display+0x82>
	} else if (len == 2) {
 80005b0:	69fb      	ldr	r3, [r7, #28]
 80005b2:	2b02      	cmp	r3, #2
 80005b4:	d110      	bne.n	80005d8 <shift_reg_display+0x7c>
		spi_data[0] = DIGITS1[num_str[1]-'0'] | dp1;
 80005b6:	7c7b      	ldrb	r3, [r7, #17]
 80005b8:	3b30      	subs	r3, #48	@ 0x30
 80005ba:	4a36      	ldr	r2, [pc, #216]	@ (8000694 <shift_reg_display+0x138>)
 80005bc:	5cd2      	ldrb	r2, [r2, r3]
 80005be:	79bb      	ldrb	r3, [r7, #6]
 80005c0:	4313      	orrs	r3, r2
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	733b      	strb	r3, [r7, #12]
		spi_data[1] = DIGITS2[num_str[0]-'0'] | dp2;
 80005c6:	7c3b      	ldrb	r3, [r7, #16]
 80005c8:	3b30      	subs	r3, #48	@ 0x30
 80005ca:	4a33      	ldr	r2, [pc, #204]	@ (8000698 <shift_reg_display+0x13c>)
 80005cc:	5cd2      	ldrb	r2, [r2, r3]
 80005ce:	797b      	ldrb	r3, [r7, #5]
 80005d0:	4313      	orrs	r3, r2
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	737b      	strb	r3, [r7, #13]
 80005d6:	e002      	b.n	80005de <shift_reg_display+0x82>
	} else {
		return -1;
 80005d8:	f04f 33ff 	mov.w	r3, #4294967295
 80005dc:	e055      	b.n	800068a <shift_reg_display+0x12e>
	}
//	spi_data[0] = 128;
//	spi_data[1] = dp2;
	// set stcp (storage clock) pin to low, as the data goes to the storage register
    // on the rising edge of the clock
	HAL_GPIO_WritePin(sr_stcp_port, sr_stcp_pin, GPIO_PIN_RESET);
 80005de:	4b2f      	ldr	r3, [pc, #188]	@ (800069c <shift_reg_display+0x140>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4a2f      	ldr	r2, [pc, #188]	@ (80006a0 <shift_reg_display+0x144>)
 80005e4:	8811      	ldrh	r1, [r2, #0]
 80005e6:	2200      	movs	r2, #0
 80005e8:	4618      	mov	r0, r3
 80005ea:	f002 fa67 	bl	8002abc <HAL_GPIO_WritePin>
	// write using SPI
	for (int i = 0; i < 2; i++) {
 80005ee:	2300      	movs	r3, #0
 80005f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80005f2:	e03e      	b.n	8000672 <shift_reg_display+0x116>
        for (int j = 0; j < 8; j++) {
 80005f4:	2300      	movs	r3, #0
 80005f6:	623b      	str	r3, [r7, #32]
 80005f8:	e035      	b.n	8000666 <shift_reg_display+0x10a>
            // Lower the shift register clock. The shift happens on the rising edge.
            HAL_GPIO_WritePin(sr_shcp_port, sr_shcp_pin, GPIO_PIN_RESET);
 80005fa:	4b2a      	ldr	r3, [pc, #168]	@ (80006a4 <shift_reg_display+0x148>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a2a      	ldr	r2, [pc, #168]	@ (80006a8 <shift_reg_display+0x14c>)
 8000600:	8811      	ldrh	r1, [r2, #0]
 8000602:	2200      	movs	r2, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f002 fa59 	bl	8002abc <HAL_GPIO_WritePin>
            uint8_t lsb = spi_data[i] & 1;
 800060a:	f107 020c 	add.w	r2, r7, #12
 800060e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000610:	4413      	add	r3, r2
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	f003 0301 	and.w	r3, r3, #1
 8000618:	76fb      	strb	r3, [r7, #27]
            spi_data[i] >>= 1;
 800061a:	f107 020c 	add.w	r2, r7, #12
 800061e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000620:	4413      	add	r3, r2
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	085b      	lsrs	r3, r3, #1
 8000626:	b2d9      	uxtb	r1, r3
 8000628:	f107 020c 	add.w	r2, r7, #12
 800062c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800062e:	4413      	add	r3, r2
 8000630:	460a      	mov	r2, r1
 8000632:	701a      	strb	r2, [r3, #0]
            HAL_GPIO_WritePin(sr_data_port, sr_data_pin, lsb);
 8000634:	4b1d      	ldr	r3, [pc, #116]	@ (80006ac <shift_reg_display+0x150>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a1d      	ldr	r2, [pc, #116]	@ (80006b0 <shift_reg_display+0x154>)
 800063a:	8811      	ldrh	r1, [r2, #0]
 800063c:	7efa      	ldrb	r2, [r7, #27]
 800063e:	4618      	mov	r0, r3
 8000640:	f002 fa3c 	bl	8002abc <HAL_GPIO_WritePin>
            HAL_Delay(1);
 8000644:	2001      	movs	r0, #1
 8000646:	f000 fd23 	bl	8001090 <HAL_Delay>
            HAL_GPIO_WritePin(sr_shcp_port, sr_shcp_pin, GPIO_PIN_SET);
 800064a:	4b16      	ldr	r3, [pc, #88]	@ (80006a4 <shift_reg_display+0x148>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4a16      	ldr	r2, [pc, #88]	@ (80006a8 <shift_reg_display+0x14c>)
 8000650:	8811      	ldrh	r1, [r2, #0]
 8000652:	2201      	movs	r2, #1
 8000654:	4618      	mov	r0, r3
 8000656:	f002 fa31 	bl	8002abc <HAL_GPIO_WritePin>
            HAL_Delay(1);
 800065a:	2001      	movs	r0, #1
 800065c:	f000 fd18 	bl	8001090 <HAL_Delay>
        for (int j = 0; j < 8; j++) {
 8000660:	6a3b      	ldr	r3, [r7, #32]
 8000662:	3301      	adds	r3, #1
 8000664:	623b      	str	r3, [r7, #32]
 8000666:	6a3b      	ldr	r3, [r7, #32]
 8000668:	2b07      	cmp	r3, #7
 800066a:	ddc6      	ble.n	80005fa <shift_reg_display+0x9e>
	for (int i = 0; i < 2; i++) {
 800066c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800066e:	3301      	adds	r3, #1
 8000670:	627b      	str	r3, [r7, #36]	@ 0x24
 8000672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000674:	2b01      	cmp	r3, #1
 8000676:	ddbd      	ble.n	80005f4 <shift_reg_display+0x98>
        }
	}
	// once data is ready set latch pin to high
    HAL_GPIO_WritePin(sr_stcp_port, sr_stcp_pin, GPIO_PIN_SET);
 8000678:	4b08      	ldr	r3, [pc, #32]	@ (800069c <shift_reg_display+0x140>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a08      	ldr	r2, [pc, #32]	@ (80006a0 <shift_reg_display+0x144>)
 800067e:	8811      	ldrh	r1, [r2, #0]
 8000680:	2201      	movs	r2, #1
 8000682:	4618      	mov	r0, r3
 8000684:	f002 fa1a 	bl	8002abc <HAL_GPIO_WritePin>
	return 0;
 8000688:	2300      	movs	r3, #0
}
 800068a:	4618      	mov	r0, r3
 800068c:	3728      	adds	r7, #40	@ 0x28
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	08009180 	.word	0x08009180
 8000698:	0800918c 	.word	0x0800918c
 800069c:	20000128 	.word	0x20000128
 80006a0:	20000134 	.word	0x20000134
 80006a4:	2000012c 	.word	0x2000012c
 80006a8:	20000136 	.word	0x20000136
 80006ac:	20000130 	.word	0x20000130
 80006b0:	20000138 	.word	0x20000138

080006b4 <ADC_channel_select>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ADC_channel_select(int channel)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006bc:	f107 0308 	add.w	r3, r7, #8
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
  sConfig.Channel = channel;
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = 1;
 80006ce:	2301      	movs	r3, #1
 80006d0:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006d2:	2300      	movs	r3, #0
 80006d4:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006d6:	f107 0308 	add.w	r3, r7, #8
 80006da:	4619      	mov	r1, r3
 80006dc:	4805      	ldr	r0, [pc, #20]	@ (80006f4 <ADC_channel_select+0x40>)
 80006de:	f000 febf 	bl	8001460 <HAL_ADC_ConfigChannel>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <ADC_channel_select+0x38>
  {
    Error_Handler();
 80006e8:	f000 faca 	bl	8000c80 <Error_Handler>
  }
}
 80006ec:	bf00      	nop
 80006ee:	3718      	adds	r7, #24
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	2000013c 	.word	0x2000013c

080006f8 <HAL_CAN_RxFifo0MsgPendingCallback>:
	HAL_GPIO_TogglePin(GPIOA, DEBUG_LED_0_Pin);
}


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);	// don't delay after this!
 8000700:	4b04      	ldr	r3, [pc, #16]	@ (8000714 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>)
 8000702:	4a05      	ldr	r2, [pc, #20]	@ (8000718 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 8000704:	2100      	movs	r1, #0
 8000706:	6878      	ldr	r0, [r7, #4]
 8000708:	f001 fbc3 	bl	8001e92 <HAL_CAN_GetRxMessage>
}
 800070c:	bf00      	nop
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	200001b8 	.word	0x200001b8
 8000718:	200001e0 	.word	0x200001e0

0800071c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000722:	f000 fc43 	bl	8000fac <HAL_Init>

  /* USER CODE BEGIN Init */
  TxHeader.IDE = CAN_ID_STD;
 8000726:	4b5a      	ldr	r3, [pc, #360]	@ (8000890 <main+0x174>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  TxHeader.StdId = 0x466;
 800072c:	4b58      	ldr	r3, [pc, #352]	@ (8000890 <main+0x174>)
 800072e:	f240 4266 	movw	r2, #1126	@ 0x466
 8000732:	601a      	str	r2, [r3, #0]
  TxHeader.RTR = CAN_RTR_DATA;
 8000734:	4b56      	ldr	r3, [pc, #344]	@ (8000890 <main+0x174>)
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]
  TxHeader.DLC = 5;
 800073a:	4b55      	ldr	r3, [pc, #340]	@ (8000890 <main+0x174>)
 800073c:	2205      	movs	r2, #5
 800073e:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 8000740:	4b53      	ldr	r3, [pc, #332]	@ (8000890 <main+0x174>)
 8000742:	2200      	movs	r2, #0
 8000744:	751a      	strb	r2, [r3, #20]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000746:	f000 f8bd 	bl	80008c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800074a:	f000 f9cb 	bl	8000ae4 <MX_GPIO_Init>
  MX_ADC1_Init();
 800074e:	f000 f925 	bl	800099c <MX_ADC1_Init>
  MX_CAN1_Init();
 8000752:	f000 f975 	bl	8000a40 <MX_CAN1_Init>
  MX_USB_DEVICE_Init();
 8000756:	f007 fef7 	bl	8008548 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 800075a:	484e      	ldr	r0, [pc, #312]	@ (8000894 <main+0x178>)
 800075c:	f001 fa7a 	bl	8001c54 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000760:	2102      	movs	r1, #2
 8000762:	484c      	ldr	r0, [pc, #304]	@ (8000894 <main+0x178>)
 8000764:	f001 fca7 	bl	80020b6 <HAL_CAN_ActivateNotification>

  shift_reg_init(ShiftRegSHCP_GPIO_Port, ShiftRegSTCP_GPIO_Port, ShiftRegDAT_GPIO_Port,
 8000768:	2310      	movs	r3, #16
 800076a:	9301      	str	r3, [sp, #4]
 800076c:	2340      	movs	r3, #64	@ 0x40
 800076e:	9300      	str	r3, [sp, #0]
 8000770:	2320      	movs	r3, #32
 8000772:	4a49      	ldr	r2, [pc, #292]	@ (8000898 <main+0x17c>)
 8000774:	4948      	ldr	r1, [pc, #288]	@ (8000898 <main+0x17c>)
 8000776:	4848      	ldr	r0, [pc, #288]	@ (8000898 <main+0x17c>)
 8000778:	f7ff fec4 	bl	8000504 <shift_reg_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  hvil_out = HAL_GPIO_ReadPin(GPIOE, HVIL_OUT_OBSERVE_Pin);
 800077c:	2104      	movs	r1, #4
 800077e:	4847      	ldr	r0, [pc, #284]	@ (800089c <main+0x180>)
 8000780:	f002 f984 	bl	8002a8c <HAL_GPIO_ReadPin>
 8000784:	4603      	mov	r3, r0
 8000786:	461a      	mov	r2, r3
 8000788:	4b45      	ldr	r3, [pc, #276]	@ (80008a0 <main+0x184>)
 800078a:	701a      	strb	r2, [r3, #0]
	  hvil_logic = HAL_GPIO_ReadPin(GPIOE, HVIL_LOGIC_OBSERVE_Pin);
 800078c:	2140      	movs	r1, #64	@ 0x40
 800078e:	4843      	ldr	r0, [pc, #268]	@ (800089c <main+0x180>)
 8000790:	f002 f97c 	bl	8002a8c <HAL_GPIO_ReadPin>
 8000794:	4603      	mov	r3, r0
 8000796:	461a      	mov	r2, r3
 8000798:	4b42      	ldr	r3, [pc, #264]	@ (80008a4 <main+0x188>)
 800079a:	701a      	strb	r2, [r3, #0]
	  hvil_in = HAL_GPIO_ReadPin(GPIOE, HVIL_IN_OBSERVE_Pin);
 800079c:	2110      	movs	r1, #16
 800079e:	483f      	ldr	r0, [pc, #252]	@ (800089c <main+0x180>)
 80007a0:	f002 f974 	bl	8002a8c <HAL_GPIO_ReadPin>
 80007a4:	4603      	mov	r3, r0
 80007a6:	461a      	mov	r2, r3
 80007a8:	4b3f      	ldr	r3, [pc, #252]	@ (80008a8 <main+0x18c>)
 80007aa:	701a      	strb	r2, [r3, #0]
	  brakes_on = !HAL_GPIO_ReadPin(GPIOE, N_BRAKES_ON_Pin);
 80007ac:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007b0:	483a      	ldr	r0, [pc, #232]	@ (800089c <main+0x180>)
 80007b2:	f002 f96b 	bl	8002a8c <HAL_GPIO_ReadPin>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	bf0c      	ite	eq
 80007bc:	2301      	moveq	r3, #1
 80007be:	2300      	movne	r3, #0
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	461a      	mov	r2, r3
 80007c4:	4b39      	ldr	r3, [pc, #228]	@ (80008ac <main+0x190>)
 80007c6:	701a      	strb	r2, [r3, #0]

	  if (HAL_GPIO_ReadPin(GPIOE, RANGE_ANOMALY_Pin)) {
 80007c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007cc:	4833      	ldr	r0, [pc, #204]	@ (800089c <main+0x180>)
 80007ce:	f002 f95d 	bl	8002a8c <HAL_GPIO_ReadPin>
//		  Error_Handler();
	  }

	  /* Read petal sensor values from ADC */
	  for (int i = 0; i < 4; i++) {
 80007d2:	2300      	movs	r3, #0
 80007d4:	60fb      	str	r3, [r7, #12]
 80007d6:	e01d      	b.n	8000814 <main+0xf8>
		  HAL_ADC_Start(&hadc1);
 80007d8:	4835      	ldr	r0, [pc, #212]	@ (80008b0 <main+0x194>)
 80007da:	f000 fcc1 	bl	8001160 <HAL_ADC_Start>
		  ADC_channel_select(sensor_channels[i]);
 80007de:	4a35      	ldr	r2, [pc, #212]	@ (80008b4 <main+0x198>)
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff ff64 	bl	80006b4 <ADC_channel_select>
		  HAL_ADC_PollForConversion(&hadc1, ADC_TIMEOUT_MS);
 80007ec:	2164      	movs	r1, #100	@ 0x64
 80007ee:	4830      	ldr	r0, [pc, #192]	@ (80008b0 <main+0x194>)
 80007f0:	f000 fd9d 	bl	800132e <HAL_ADC_PollForConversion>
		  pedal_vals[i] = HAL_ADC_GetValue(&hadc1);
 80007f4:	482e      	ldr	r0, [pc, #184]	@ (80008b0 <main+0x194>)
 80007f6:	f000 fe25 	bl	8001444 <HAL_ADC_GetValue>
 80007fa:	4603      	mov	r3, r0
 80007fc:	b2d9      	uxtb	r1, r3
 80007fe:	4a2e      	ldr	r2, [pc, #184]	@ (80008b8 <main+0x19c>)
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	4413      	add	r3, r2
 8000804:	460a      	mov	r2, r1
 8000806:	701a      	strb	r2, [r3, #0]
		  HAL_ADC_Stop(&hadc1);
 8000808:	4829      	ldr	r0, [pc, #164]	@ (80008b0 <main+0x194>)
 800080a:	f000 fd5d 	bl	80012c8 <HAL_ADC_Stop>
	  for (int i = 0; i < 4; i++) {
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	3301      	adds	r3, #1
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	2b03      	cmp	r3, #3
 8000818:	ddde      	ble.n	80007d8 <main+0xbc>
	  }
	  pedal_vals[4] = brakes_on;
 800081a:	4b24      	ldr	r3, [pc, #144]	@ (80008ac <main+0x190>)
 800081c:	781a      	ldrb	r2, [r3, #0]
 800081e:	4b26      	ldr	r3, [pc, #152]	@ (80008b8 <main+0x19c>)
 8000820:	711a      	strb	r2, [r3, #4]


	  for (int i = 0; i < 5; i++) {
 8000822:	2300      	movs	r3, #0
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	e00b      	b.n	8000840 <main+0x124>
		  TxData[i] = pedal_vals[i];
 8000828:	4a23      	ldr	r2, [pc, #140]	@ (80008b8 <main+0x19c>)
 800082a:	68bb      	ldr	r3, [r7, #8]
 800082c:	4413      	add	r3, r2
 800082e:	7819      	ldrb	r1, [r3, #0]
 8000830:	4a22      	ldr	r2, [pc, #136]	@ (80008bc <main+0x1a0>)
 8000832:	68bb      	ldr	r3, [r7, #8]
 8000834:	4413      	add	r3, r2
 8000836:	460a      	mov	r2, r1
 8000838:	701a      	strb	r2, [r3, #0]
	  for (int i = 0; i < 5; i++) {
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	3301      	adds	r3, #1
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	2b04      	cmp	r3, #4
 8000844:	ddf0      	ble.n	8000828 <main+0x10c>
	  }

	  HAL_Delay(1);	// so that the CAN transmissions don't pile up
 8000846:	2001      	movs	r0, #1
 8000848:	f000 fc22 	bl	8001090 <HAL_Delay>
	  if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK) {
 800084c:	4b1c      	ldr	r3, [pc, #112]	@ (80008c0 <main+0x1a4>)
 800084e:	4a1b      	ldr	r2, [pc, #108]	@ (80008bc <main+0x1a0>)
 8000850:	490f      	ldr	r1, [pc, #60]	@ (8000890 <main+0x174>)
 8000852:	4810      	ldr	r0, [pc, #64]	@ (8000894 <main+0x178>)
 8000854:	f001 fa42 	bl	8001cdc <HAL_CAN_AddTxMessage>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d004      	beq.n	8000868 <main+0x14c>
		  HAL_GPIO_WritePin(GPIOA, DEBUG_LED_1_Pin, GPIO_PIN_SET);
 800085e:	2201      	movs	r2, #1
 8000860:	2108      	movs	r1, #8
 8000862:	480d      	ldr	r0, [pc, #52]	@ (8000898 <main+0x17c>)
 8000864:	f002 f92a 	bl	8002abc <HAL_GPIO_WritePin>
	//	   Error_Handler ();
	  }
//	  HAL_GPIO_WritePin(DEBUG_LED_0_GPIO_Port, DEBUG_LED_0_Pin, GPIO_PIN_SET);

//	  Number cycling demo
	  for (int i = 0; i < 100; i++){
 8000868:	2300      	movs	r3, #0
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	e00c      	b.n	8000888 <main+0x16c>
	  shift_reg_display(i, DPOFF, DPOFF);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	b2db      	uxtb	r3, r3
 8000872:	2100      	movs	r1, #0
 8000874:	2200      	movs	r2, #0
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff fe70 	bl	800055c <shift_reg_display>
	  HAL_Delay(100);
 800087c:	2064      	movs	r0, #100	@ 0x64
 800087e:	f000 fc07 	bl	8001090 <HAL_Delay>
	  for (int i = 0; i < 100; i++){
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	3301      	adds	r3, #1
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2b63      	cmp	r3, #99	@ 0x63
 800088c:	ddef      	ble.n	800086e <main+0x152>
	  hvil_out = HAL_GPIO_ReadPin(GPIOE, HVIL_OUT_OBSERVE_Pin);
 800088e:	e775      	b.n	800077c <main+0x60>
 8000890:	200001c8 	.word	0x200001c8
 8000894:	20000184 	.word	0x20000184
 8000898:	40020000 	.word	0x40020000
 800089c:	40021000 	.word	0x40021000
 80008a0:	200001ac 	.word	0x200001ac
 80008a4:	200001ad 	.word	0x200001ad
 80008a8:	200001ae 	.word	0x200001ae
 80008ac:	200001af 	.word	0x200001af
 80008b0:	2000013c 	.word	0x2000013c
 80008b4:	08009198 	.word	0x08009198
 80008b8:	200001c0 	.word	0x200001c0
 80008bc:	200001b0 	.word	0x200001b0
 80008c0:	200001fc 	.word	0x200001fc

080008c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b094      	sub	sp, #80	@ 0x50
 80008c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ca:	f107 031c 	add.w	r3, r7, #28
 80008ce:	2234      	movs	r2, #52	@ 0x34
 80008d0:	2100      	movs	r1, #0
 80008d2:	4618      	mov	r0, r3
 80008d4:	f008 fbf8 	bl	80090c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d8:	f107 0308 	add.w	r3, r7, #8
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]
 80008e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e8:	2300      	movs	r3, #0
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	4b29      	ldr	r3, [pc, #164]	@ (8000994 <SystemClock_Config+0xd0>)
 80008ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f0:	4a28      	ldr	r2, [pc, #160]	@ (8000994 <SystemClock_Config+0xd0>)
 80008f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80008f8:	4b26      	ldr	r3, [pc, #152]	@ (8000994 <SystemClock_Config+0xd0>)
 80008fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000904:	2300      	movs	r3, #0
 8000906:	603b      	str	r3, [r7, #0]
 8000908:	4b23      	ldr	r3, [pc, #140]	@ (8000998 <SystemClock_Config+0xd4>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a22      	ldr	r2, [pc, #136]	@ (8000998 <SystemClock_Config+0xd4>)
 800090e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000912:	6013      	str	r3, [r2, #0]
 8000914:	4b20      	ldr	r3, [pc, #128]	@ (8000998 <SystemClock_Config+0xd4>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800091c:	603b      	str	r3, [r7, #0]
 800091e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000920:	2301      	movs	r3, #1
 8000922:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000924:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000928:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800092a:	2302      	movs	r3, #2
 800092c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800092e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000932:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000934:	2304      	movs	r3, #4
 8000936:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000938:	2348      	movs	r3, #72	@ 0x48
 800093a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800093c:	2302      	movs	r3, #2
 800093e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000940:	2303      	movs	r3, #3
 8000942:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000944:	2302      	movs	r3, #2
 8000946:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000948:	f107 031c 	add.w	r3, r7, #28
 800094c:	4618      	mov	r0, r3
 800094e:	f003 ff85 	bl	800485c <HAL_RCC_OscConfig>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000958:	f000 f992 	bl	8000c80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800095c:	230f      	movs	r3, #15
 800095e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000960:	2302      	movs	r3, #2
 8000962:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000964:	2300      	movs	r3, #0
 8000966:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000968:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800096c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800096e:	2300      	movs	r3, #0
 8000970:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000972:	f107 0308 	add.w	r3, r7, #8
 8000976:	2102      	movs	r1, #2
 8000978:	4618      	mov	r0, r3
 800097a:	f003 fb81 	bl	8004080 <HAL_RCC_ClockConfig>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000984:	f000 f97c 	bl	8000c80 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000988:	f003 fc60 	bl	800424c <HAL_RCC_EnableCSS>
}
 800098c:	bf00      	nop
 800098e:	3750      	adds	r7, #80	@ 0x50
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40023800 	.word	0x40023800
 8000998:	40007000 	.word	0x40007000

0800099c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009a2:	463b      	mov	r3, r7
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009ae:	4b21      	ldr	r3, [pc, #132]	@ (8000a34 <MX_ADC1_Init+0x98>)
 80009b0:	4a21      	ldr	r2, [pc, #132]	@ (8000a38 <MX_ADC1_Init+0x9c>)
 80009b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80009b4:	4b1f      	ldr	r3, [pc, #124]	@ (8000a34 <MX_ADC1_Init+0x98>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009ba:	4b1e      	ldr	r3, [pc, #120]	@ (8000a34 <MX_ADC1_Init+0x98>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80009c0:	4b1c      	ldr	r3, [pc, #112]	@ (8000a34 <MX_ADC1_Init+0x98>)
 80009c2:	2201      	movs	r2, #1
 80009c4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80009c6:	4b1b      	ldr	r3, [pc, #108]	@ (8000a34 <MX_ADC1_Init+0x98>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009cc:	4b19      	ldr	r3, [pc, #100]	@ (8000a34 <MX_ADC1_Init+0x98>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009d4:	4b17      	ldr	r3, [pc, #92]	@ (8000a34 <MX_ADC1_Init+0x98>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009da:	4b16      	ldr	r3, [pc, #88]	@ (8000a34 <MX_ADC1_Init+0x98>)
 80009dc:	4a17      	ldr	r2, [pc, #92]	@ (8000a3c <MX_ADC1_Init+0xa0>)
 80009de:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009e0:	4b14      	ldr	r3, [pc, #80]	@ (8000a34 <MX_ADC1_Init+0x98>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80009e6:	4b13      	ldr	r3, [pc, #76]	@ (8000a34 <MX_ADC1_Init+0x98>)
 80009e8:	2201      	movs	r2, #1
 80009ea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009ec:	4b11      	ldr	r3, [pc, #68]	@ (8000a34 <MX_ADC1_Init+0x98>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000a34 <MX_ADC1_Init+0x98>)
 80009f6:	2201      	movs	r2, #1
 80009f8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009fa:	480e      	ldr	r0, [pc, #56]	@ (8000a34 <MX_ADC1_Init+0x98>)
 80009fc:	f000 fb6c 	bl	80010d8 <HAL_ADC_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000a06:	f000 f93b 	bl	8000c80 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000a0a:	2307      	movs	r3, #7
 8000a0c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a12:	2300      	movs	r3, #0
 8000a14:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a16:	463b      	mov	r3, r7
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4806      	ldr	r0, [pc, #24]	@ (8000a34 <MX_ADC1_Init+0x98>)
 8000a1c:	f000 fd20 	bl	8001460 <HAL_ADC_ConfigChannel>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000a26:	f000 f92b 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a2a:	bf00      	nop
 8000a2c:	3710      	adds	r7, #16
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	2000013c 	.word	0x2000013c
 8000a38:	40012000 	.word	0x40012000
 8000a3c:	0f000001 	.word	0x0f000001

08000a40 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08a      	sub	sp, #40	@ 0x28
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000a46:	4b25      	ldr	r3, [pc, #148]	@ (8000adc <MX_CAN1_Init+0x9c>)
 8000a48:	4a25      	ldr	r2, [pc, #148]	@ (8000ae0 <MX_CAN1_Init+0xa0>)
 8000a4a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 8000a4c:	4b23      	ldr	r3, [pc, #140]	@ (8000adc <MX_CAN1_Init+0x9c>)
 8000a4e:	2212      	movs	r2, #18
 8000a50:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 8000a52:	4b22      	ldr	r3, [pc, #136]	@ (8000adc <MX_CAN1_Init+0x9c>)
 8000a54:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a58:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a5a:	4b20      	ldr	r3, [pc, #128]	@ (8000adc <MX_CAN1_Init+0x9c>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000a60:	4b1e      	ldr	r3, [pc, #120]	@ (8000adc <MX_CAN1_Init+0x9c>)
 8000a62:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000a66:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000a68:	4b1c      	ldr	r3, [pc, #112]	@ (8000adc <MX_CAN1_Init+0x9c>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a6e:	4b1b      	ldr	r3, [pc, #108]	@ (8000adc <MX_CAN1_Init+0x9c>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a74:	4b19      	ldr	r3, [pc, #100]	@ (8000adc <MX_CAN1_Init+0x9c>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a7a:	4b18      	ldr	r3, [pc, #96]	@ (8000adc <MX_CAN1_Init+0x9c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a80:	4b16      	ldr	r3, [pc, #88]	@ (8000adc <MX_CAN1_Init+0x9c>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a86:	4b15      	ldr	r3, [pc, #84]	@ (8000adc <MX_CAN1_Init+0x9c>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a8c:	4b13      	ldr	r3, [pc, #76]	@ (8000adc <MX_CAN1_Init+0x9c>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a92:	4812      	ldr	r0, [pc, #72]	@ (8000adc <MX_CAN1_Init+0x9c>)
 8000a94:	f000 ff02 	bl	800189c <HAL_CAN_Init>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000a9e:	f000 f8ef 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;
  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 10;
 8000aa6:	230a      	movs	r3, #10
 8000aa8:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0x000;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x000;
 8000aba:	2300      	movs	r3, #0
 8000abc:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 0;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8000aca:	463b      	mov	r3, r7
 8000acc:	4619      	mov	r1, r3
 8000ace:	4803      	ldr	r0, [pc, #12]	@ (8000adc <MX_CAN1_Init+0x9c>)
 8000ad0:	f000 ffe0 	bl	8001a94 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 8000ad4:	bf00      	nop
 8000ad6:	3728      	adds	r7, #40	@ 0x28
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	20000184 	.word	0x20000184
 8000ae0:	40006400 	.word	0x40006400

08000ae4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08a      	sub	sp, #40	@ 0x28
 8000ae8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aea:	f107 0314 	add.w	r3, r7, #20
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]
 8000af4:	609a      	str	r2, [r3, #8]
 8000af6:	60da      	str	r2, [r3, #12]
 8000af8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	613b      	str	r3, [r7, #16]
 8000afe:	4b5c      	ldr	r3, [pc, #368]	@ (8000c70 <MX_GPIO_Init+0x18c>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b02:	4a5b      	ldr	r2, [pc, #364]	@ (8000c70 <MX_GPIO_Init+0x18c>)
 8000b04:	f043 0310 	orr.w	r3, r3, #16
 8000b08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b0a:	4b59      	ldr	r3, [pc, #356]	@ (8000c70 <MX_GPIO_Init+0x18c>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0e:	f003 0310 	and.w	r3, r3, #16
 8000b12:	613b      	str	r3, [r7, #16]
 8000b14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	4b55      	ldr	r3, [pc, #340]	@ (8000c70 <MX_GPIO_Init+0x18c>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1e:	4a54      	ldr	r2, [pc, #336]	@ (8000c70 <MX_GPIO_Init+0x18c>)
 8000b20:	f043 0304 	orr.w	r3, r3, #4
 8000b24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b26:	4b52      	ldr	r3, [pc, #328]	@ (8000c70 <MX_GPIO_Init+0x18c>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2a:	f003 0304 	and.w	r3, r3, #4
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	60bb      	str	r3, [r7, #8]
 8000b36:	4b4e      	ldr	r3, [pc, #312]	@ (8000c70 <MX_GPIO_Init+0x18c>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3a:	4a4d      	ldr	r2, [pc, #308]	@ (8000c70 <MX_GPIO_Init+0x18c>)
 8000b3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b42:	4b4b      	ldr	r3, [pc, #300]	@ (8000c70 <MX_GPIO_Init+0x18c>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b4a:	60bb      	str	r3, [r7, #8]
 8000b4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	607b      	str	r3, [r7, #4]
 8000b52:	4b47      	ldr	r3, [pc, #284]	@ (8000c70 <MX_GPIO_Init+0x18c>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b56:	4a46      	ldr	r2, [pc, #280]	@ (8000c70 <MX_GPIO_Init+0x18c>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b5e:	4b44      	ldr	r3, [pc, #272]	@ (8000c70 <MX_GPIO_Init+0x18c>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	603b      	str	r3, [r7, #0]
 8000b6e:	4b40      	ldr	r3, [pc, #256]	@ (8000c70 <MX_GPIO_Init+0x18c>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b72:	4a3f      	ldr	r2, [pc, #252]	@ (8000c70 <MX_GPIO_Init+0x18c>)
 8000b74:	f043 0302 	orr.w	r3, r3, #2
 8000b78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b7a:	4b3d      	ldr	r3, [pc, #244]	@ (8000c70 <MX_GPIO_Init+0x18c>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7e:	f003 0302 	and.w	r3, r3, #2
 8000b82:	603b      	str	r3, [r7, #0]
 8000b84:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, N_HVIL_FLOAT_Pin|N_HVIL_RESET_Pin, GPIO_PIN_SET);
 8000b86:	2201      	movs	r2, #1
 8000b88:	2128      	movs	r1, #40	@ 0x28
 8000b8a:	483a      	ldr	r0, [pc, #232]	@ (8000c74 <MX_GPIO_Init+0x190>)
 8000b8c:	f001 ff96 	bl	8002abc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8000b90:	2200      	movs	r2, #0
 8000b92:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b96:	4838      	ldr	r0, [pc, #224]	@ (8000c78 <MX_GPIO_Init+0x194>)
 8000b98:	f001 ff90 	bl	8002abc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED_0_Pin|DEBUG_LED_1_Pin|ShiftRegDAT_Pin|ShiftRegSHCP_Pin
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	2179      	movs	r1, #121	@ 0x79
 8000ba0:	4836      	ldr	r0, [pc, #216]	@ (8000c7c <MX_GPIO_Init+0x198>)
 8000ba2:	f001 ff8b 	bl	8002abc <HAL_GPIO_WritePin>
                          |ShiftRegSTCP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : HVIL_OUT_OBSERVE_Pin HVIL_IN_OBSERVE_Pin HVIL_LOGIC_OBSERVE_Pin RANGE_ANOMALY_Pin */
  GPIO_InitStruct.Pin = HVIL_OUT_OBSERVE_Pin|HVIL_IN_OBSERVE_Pin|HVIL_LOGIC_OBSERVE_Pin|RANGE_ANOMALY_Pin;
 8000ba6:	f248 0354 	movw	r3, #32852	@ 0x8054
 8000baa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bac:	2300      	movs	r3, #0
 8000bae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	4619      	mov	r1, r3
 8000bba:	482e      	ldr	r0, [pc, #184]	@ (8000c74 <MX_GPIO_Init+0x190>)
 8000bbc:	f001 fde2 	bl	8002784 <HAL_GPIO_Init>

  /*Configure GPIO pins : N_HVIL_FLOAT_Pin N_HVIL_RESET_Pin */
  GPIO_InitStruct.Pin = N_HVIL_FLOAT_Pin|N_HVIL_RESET_Pin;
 8000bc0:	2328      	movs	r3, #40	@ 0x28
 8000bc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4827      	ldr	r0, [pc, #156]	@ (8000c74 <MX_GPIO_Init+0x190>)
 8000bd8:	f001 fdd4 	bl	8002784 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000bdc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000be0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be2:	2301      	movs	r3, #1
 8000be4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bea:	2300      	movs	r3, #0
 8000bec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bee:	f107 0314 	add.w	r3, r7, #20
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4820      	ldr	r0, [pc, #128]	@ (8000c78 <MX_GPIO_Init+0x194>)
 8000bf6:	f001 fdc5 	bl	8002784 <HAL_GPIO_Init>

  /*Configure GPIO pins : DEBUG_LED_0_Pin DEBUG_LED_1_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_0_Pin|DEBUG_LED_1_Pin;
 8000bfa:	2309      	movs	r3, #9
 8000bfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c02:	2302      	movs	r3, #2
 8000c04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	2300      	movs	r3, #0
 8000c08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0a:	f107 0314 	add.w	r3, r7, #20
 8000c0e:	4619      	mov	r1, r3
 8000c10:	481a      	ldr	r0, [pc, #104]	@ (8000c7c <MX_GPIO_Init+0x198>)
 8000c12:	f001 fdb7 	bl	8002784 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN0_EXTI_Pin BTN1_EXTI_Pin */
  GPIO_InitStruct.Pin = BTN0_EXTI_Pin|BTN1_EXTI_Pin;
 8000c16:	2306      	movs	r3, #6
 8000c18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c1a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4814      	ldr	r0, [pc, #80]	@ (8000c7c <MX_GPIO_Init+0x198>)
 8000c2c:	f001 fdaa 	bl	8002784 <HAL_GPIO_Init>

  /*Configure GPIO pins : ShiftRegDAT_Pin ShiftRegSHCP_Pin ShiftRegSTCP_Pin */
  GPIO_InitStruct.Pin = ShiftRegDAT_Pin|ShiftRegSHCP_Pin|ShiftRegSTCP_Pin;
 8000c30:	2370      	movs	r3, #112	@ 0x70
 8000c32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c34:	2301      	movs	r3, #1
 8000c36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	4619      	mov	r1, r3
 8000c46:	480d      	ldr	r0, [pc, #52]	@ (8000c7c <MX_GPIO_Init+0x198>)
 8000c48:	f001 fd9c 	bl	8002784 <HAL_GPIO_Init>

  /*Configure GPIO pin : N_BRAKES_ON_Pin */
  GPIO_InitStruct.Pin = N_BRAKES_ON_Pin;
 8000c4c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000c50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c56:	2301      	movs	r3, #1
 8000c58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(N_BRAKES_ON_GPIO_Port, &GPIO_InitStruct);
 8000c5a:	f107 0314 	add.w	r3, r7, #20
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4804      	ldr	r0, [pc, #16]	@ (8000c74 <MX_GPIO_Init+0x190>)
 8000c62:	f001 fd8f 	bl	8002784 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c66:	bf00      	nop
 8000c68:	3728      	adds	r7, #40	@ 0x28
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40023800 	.word	0x40023800
 8000c74:	40021000 	.word	0x40021000
 8000c78:	40020800 	.word	0x40020800
 8000c7c:	40020000 	.word	0x40020000

08000c80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c84:	b672      	cpsid	i
}
 8000c86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_GPIO_WritePin(GPIOE, N_HVIL_FLOAT_Pin, GPIO_PIN_SET);
 8000c88:	2201      	movs	r2, #1
 8000c8a:	2108      	movs	r1, #8
 8000c8c:	4802      	ldr	r0, [pc, #8]	@ (8000c98 <Error_Handler+0x18>)
 8000c8e:	f001 ff15 	bl	8002abc <HAL_GPIO_WritePin>
  while (1)
 8000c92:	bf00      	nop
 8000c94:	e7fd      	b.n	8000c92 <Error_Handler+0x12>
 8000c96:	bf00      	nop
 8000c98:	40021000 	.word	0x40021000

08000c9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	607b      	str	r3, [r7, #4]
 8000ca6:	4b10      	ldr	r3, [pc, #64]	@ (8000ce8 <HAL_MspInit+0x4c>)
 8000ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000caa:	4a0f      	ldr	r2, [pc, #60]	@ (8000ce8 <HAL_MspInit+0x4c>)
 8000cac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ce8 <HAL_MspInit+0x4c>)
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	603b      	str	r3, [r7, #0]
 8000cc2:	4b09      	ldr	r3, [pc, #36]	@ (8000ce8 <HAL_MspInit+0x4c>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc6:	4a08      	ldr	r2, [pc, #32]	@ (8000ce8 <HAL_MspInit+0x4c>)
 8000cc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ccc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cce:	4b06      	ldr	r3, [pc, #24]	@ (8000ce8 <HAL_MspInit+0x4c>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cd6:	603b      	str	r3, [r7, #0]
 8000cd8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	40023800 	.word	0x40023800

08000cec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08c      	sub	sp, #48	@ 0x30
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf4:	f107 031c 	add.w	r3, r7, #28
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a31      	ldr	r2, [pc, #196]	@ (8000dd0 <HAL_ADC_MspInit+0xe4>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d15b      	bne.n	8000dc6 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61bb      	str	r3, [r7, #24]
 8000d12:	4b30      	ldr	r3, [pc, #192]	@ (8000dd4 <HAL_ADC_MspInit+0xe8>)
 8000d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d16:	4a2f      	ldr	r2, [pc, #188]	@ (8000dd4 <HAL_ADC_MspInit+0xe8>)
 8000d18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d1e:	4b2d      	ldr	r3, [pc, #180]	@ (8000dd4 <HAL_ADC_MspInit+0xe8>)
 8000d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d26:	61bb      	str	r3, [r7, #24]
 8000d28:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	617b      	str	r3, [r7, #20]
 8000d2e:	4b29      	ldr	r3, [pc, #164]	@ (8000dd4 <HAL_ADC_MspInit+0xe8>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d32:	4a28      	ldr	r2, [pc, #160]	@ (8000dd4 <HAL_ADC_MspInit+0xe8>)
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d3a:	4b26      	ldr	r3, [pc, #152]	@ (8000dd4 <HAL_ADC_MspInit+0xe8>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	617b      	str	r3, [r7, #20]
 8000d44:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	613b      	str	r3, [r7, #16]
 8000d4a:	4b22      	ldr	r3, [pc, #136]	@ (8000dd4 <HAL_ADC_MspInit+0xe8>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4e:	4a21      	ldr	r2, [pc, #132]	@ (8000dd4 <HAL_ADC_MspInit+0xe8>)
 8000d50:	f043 0304 	orr.w	r3, r3, #4
 8000d54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d56:	4b1f      	ldr	r3, [pc, #124]	@ (8000dd4 <HAL_ADC_MspInit+0xe8>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5a:	f003 0304 	and.w	r3, r3, #4
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	4b1b      	ldr	r3, [pc, #108]	@ (8000dd4 <HAL_ADC_MspInit+0xe8>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6a:	4a1a      	ldr	r2, [pc, #104]	@ (8000dd4 <HAL_ADC_MspInit+0xe8>)
 8000d6c:	f043 0302 	orr.w	r3, r3, #2
 8000d70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d72:	4b18      	ldr	r3, [pc, #96]	@ (8000dd4 <HAL_ADC_MspInit+0xe8>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d76:	f003 0302 	and.w	r3, r3, #2
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d7e:	2380      	movs	r3, #128	@ 0x80
 8000d80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d82:	2303      	movs	r3, #3
 8000d84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8a:	f107 031c 	add.w	r3, r7, #28
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4811      	ldr	r0, [pc, #68]	@ (8000dd8 <HAL_ADC_MspInit+0xec>)
 8000d92:	f001 fcf7 	bl	8002784 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000d96:	2330      	movs	r3, #48	@ 0x30
 8000d98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000da2:	f107 031c 	add.w	r3, r7, #28
 8000da6:	4619      	mov	r1, r3
 8000da8:	480c      	ldr	r0, [pc, #48]	@ (8000ddc <HAL_ADC_MspInit+0xf0>)
 8000daa:	f001 fceb 	bl	8002784 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000dae:	2301      	movs	r3, #1
 8000db0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000db2:	2303      	movs	r3, #3
 8000db4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dba:	f107 031c 	add.w	r3, r7, #28
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4807      	ldr	r0, [pc, #28]	@ (8000de0 <HAL_ADC_MspInit+0xf4>)
 8000dc2:	f001 fcdf 	bl	8002784 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000dc6:	bf00      	nop
 8000dc8:	3730      	adds	r7, #48	@ 0x30
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40012000 	.word	0x40012000
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	40020000 	.word	0x40020000
 8000ddc:	40020800 	.word	0x40020800
 8000de0:	40020400 	.word	0x40020400

08000de4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08a      	sub	sp, #40	@ 0x28
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a21      	ldr	r2, [pc, #132]	@ (8000e88 <HAL_CAN_MspInit+0xa4>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d13c      	bne.n	8000e80 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	613b      	str	r3, [r7, #16]
 8000e0a:	4b20      	ldr	r3, [pc, #128]	@ (8000e8c <HAL_CAN_MspInit+0xa8>)
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e0e:	4a1f      	ldr	r2, [pc, #124]	@ (8000e8c <HAL_CAN_MspInit+0xa8>)
 8000e10:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e14:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e16:	4b1d      	ldr	r3, [pc, #116]	@ (8000e8c <HAL_CAN_MspInit+0xa8>)
 8000e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e1e:	613b      	str	r3, [r7, #16]
 8000e20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	4b19      	ldr	r3, [pc, #100]	@ (8000e8c <HAL_CAN_MspInit+0xa8>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2a:	4a18      	ldr	r2, [pc, #96]	@ (8000e8c <HAL_CAN_MspInit+0xa8>)
 8000e2c:	f043 0302 	orr.w	r3, r3, #2
 8000e30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e32:	4b16      	ldr	r3, [pc, #88]	@ (8000e8c <HAL_CAN_MspInit+0xa8>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e36:	f003 0302 	and.w	r3, r3, #2
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e3e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e44:	2302      	movs	r3, #2
 8000e46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_CAN1;
 8000e50:	2308      	movs	r3, #8
 8000e52:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e54:	f107 0314 	add.w	r3, r7, #20
 8000e58:	4619      	mov	r1, r3
 8000e5a:	480d      	ldr	r0, [pc, #52]	@ (8000e90 <HAL_CAN_MspInit+0xac>)
 8000e5c:	f001 fc92 	bl	8002784 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000e60:	2200      	movs	r2, #0
 8000e62:	2100      	movs	r1, #0
 8000e64:	2014      	movs	r0, #20
 8000e66:	f001 fc56 	bl	8002716 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000e6a:	2014      	movs	r0, #20
 8000e6c:	f001 fc6f 	bl	800274e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000e70:	2200      	movs	r2, #0
 8000e72:	2100      	movs	r1, #0
 8000e74:	2015      	movs	r0, #21
 8000e76:	f001 fc4e 	bl	8002716 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000e7a:	2015      	movs	r0, #21
 8000e7c:	f001 fc67 	bl	800274e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000e80:	bf00      	nop
 8000e82:	3728      	adds	r7, #40	@ 0x28
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40006400 	.word	0x40006400
 8000e8c:	40023800 	.word	0x40023800
 8000e90:	40020400 	.word	0x40020400

08000e94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000e98:	f003 faf6 	bl	8004488 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e9c:	bf00      	nop
 8000e9e:	e7fd      	b.n	8000e9c <NMI_Handler+0x8>

08000ea0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ea4:	bf00      	nop
 8000ea6:	e7fd      	b.n	8000ea4 <HardFault_Handler+0x4>

08000ea8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eac:	bf00      	nop
 8000eae:	e7fd      	b.n	8000eac <MemManage_Handler+0x4>

08000eb0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eb4:	bf00      	nop
 8000eb6:	e7fd      	b.n	8000eb4 <BusFault_Handler+0x4>

08000eb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ebc:	bf00      	nop
 8000ebe:	e7fd      	b.n	8000ebc <UsageFault_Handler+0x4>

08000ec0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr

08000eea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eee:	f000 f8af 	bl	8001050 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
	...

08000ef8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000efc:	4802      	ldr	r0, [pc, #8]	@ (8000f08 <CAN1_RX0_IRQHandler+0x10>)
 8000efe:	f001 f900 	bl	8002102 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000184 	.word	0x20000184

08000f0c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000f10:	4802      	ldr	r0, [pc, #8]	@ (8000f1c <CAN1_RX1_IRQHandler+0x10>)
 8000f12:	f001 f8f6 	bl	8002102 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000184 	.word	0x20000184

08000f20 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000f24:	4802      	ldr	r0, [pc, #8]	@ (8000f30 <OTG_FS_IRQHandler+0x10>)
 8000f26:	f001 ff39 	bl	8002d9c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	200016e4 	.word	0x200016e4

08000f34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f38:	4b06      	ldr	r3, [pc, #24]	@ (8000f54 <SystemInit+0x20>)
 8000f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f3e:	4a05      	ldr	r2, [pc, #20]	@ (8000f54 <SystemInit+0x20>)
 8000f40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000f58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f5c:	480d      	ldr	r0, [pc, #52]	@ (8000f94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f5e:	490e      	ldr	r1, [pc, #56]	@ (8000f98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f60:	4a0e      	ldr	r2, [pc, #56]	@ (8000f9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f64:	e002      	b.n	8000f6c <LoopCopyDataInit>

08000f66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f6a:	3304      	adds	r3, #4

08000f6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f70:	d3f9      	bcc.n	8000f66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f72:	4a0b      	ldr	r2, [pc, #44]	@ (8000fa0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f74:	4c0b      	ldr	r4, [pc, #44]	@ (8000fa4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f78:	e001      	b.n	8000f7e <LoopFillZerobss>

08000f7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f7c:	3204      	adds	r2, #4

08000f7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f80:	d3fb      	bcc.n	8000f7a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f82:	f7ff ffd7 	bl	8000f34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f86:	f008 f8a7 	bl	80090d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f8a:	f7ff fbc7 	bl	800071c <main>
  bx  lr    
 8000f8e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000f90:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8000f94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f98:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 8000f9c:	080091f0 	.word	0x080091f0
  ldr r2, =_sbss
 8000fa0:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 8000fa4:	20001e10 	.word	0x20001e10

08000fa8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fa8:	e7fe      	b.n	8000fa8 <ADC_IRQHandler>
	...

08000fac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fb0:	4b0e      	ldr	r3, [pc, #56]	@ (8000fec <HAL_Init+0x40>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a0d      	ldr	r2, [pc, #52]	@ (8000fec <HAL_Init+0x40>)
 8000fb6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8000fec <HAL_Init+0x40>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a0a      	ldr	r2, [pc, #40]	@ (8000fec <HAL_Init+0x40>)
 8000fc2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fc8:	4b08      	ldr	r3, [pc, #32]	@ (8000fec <HAL_Init+0x40>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a07      	ldr	r2, [pc, #28]	@ (8000fec <HAL_Init+0x40>)
 8000fce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd4:	2003      	movs	r0, #3
 8000fd6:	f001 fb93 	bl	8002700 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fda:	200f      	movs	r0, #15
 8000fdc:	f000 f808 	bl	8000ff0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fe0:	f7ff fe5c 	bl	8000c9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fe4:	2300      	movs	r3, #0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40023c00 	.word	0x40023c00

08000ff0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ff8:	4b12      	ldr	r3, [pc, #72]	@ (8001044 <HAL_InitTick+0x54>)
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	4b12      	ldr	r3, [pc, #72]	@ (8001048 <HAL_InitTick+0x58>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	4619      	mov	r1, r3
 8001002:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001006:	fbb3 f3f1 	udiv	r3, r3, r1
 800100a:	fbb2 f3f3 	udiv	r3, r2, r3
 800100e:	4618      	mov	r0, r3
 8001010:	f001 fbab 	bl	800276a <HAL_SYSTICK_Config>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e00e      	b.n	800103c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2b0f      	cmp	r3, #15
 8001022:	d80a      	bhi.n	800103a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001024:	2200      	movs	r2, #0
 8001026:	6879      	ldr	r1, [r7, #4]
 8001028:	f04f 30ff 	mov.w	r0, #4294967295
 800102c:	f001 fb73 	bl	8002716 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001030:	4a06      	ldr	r2, [pc, #24]	@ (800104c <HAL_InitTick+0x5c>)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001036:	2300      	movs	r3, #0
 8001038:	e000      	b.n	800103c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
}
 800103c:	4618      	mov	r0, r3
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20000000 	.word	0x20000000
 8001048:	20000008 	.word	0x20000008
 800104c:	20000004 	.word	0x20000004

08001050 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001054:	4b06      	ldr	r3, [pc, #24]	@ (8001070 <HAL_IncTick+0x20>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	461a      	mov	r2, r3
 800105a:	4b06      	ldr	r3, [pc, #24]	@ (8001074 <HAL_IncTick+0x24>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4413      	add	r3, r2
 8001060:	4a04      	ldr	r2, [pc, #16]	@ (8001074 <HAL_IncTick+0x24>)
 8001062:	6013      	str	r3, [r2, #0]
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	20000008 	.word	0x20000008
 8001074:	20000200 	.word	0x20000200

08001078 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  return uwTick;
 800107c:	4b03      	ldr	r3, [pc, #12]	@ (800108c <HAL_GetTick+0x14>)
 800107e:	681b      	ldr	r3, [r3, #0]
}
 8001080:	4618      	mov	r0, r3
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	20000200 	.word	0x20000200

08001090 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001098:	f7ff ffee 	bl	8001078 <HAL_GetTick>
 800109c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010a8:	d005      	beq.n	80010b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010aa:	4b0a      	ldr	r3, [pc, #40]	@ (80010d4 <HAL_Delay+0x44>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	461a      	mov	r2, r3
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	4413      	add	r3, r2
 80010b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010b6:	bf00      	nop
 80010b8:	f7ff ffde 	bl	8001078 <HAL_GetTick>
 80010bc:	4602      	mov	r2, r0
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	68fa      	ldr	r2, [r7, #12]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d8f7      	bhi.n	80010b8 <HAL_Delay+0x28>
  {
  }
}
 80010c8:	bf00      	nop
 80010ca:	bf00      	nop
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000008 	.word	0x20000008

080010d8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010e0:	2300      	movs	r3, #0
 80010e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d101      	bne.n	80010ee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e033      	b.n	8001156 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d109      	bne.n	800110a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f7ff fdf8 	bl	8000cec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2200      	movs	r2, #0
 8001100:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2200      	movs	r2, #0
 8001106:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800110e:	f003 0310 	and.w	r3, r3, #16
 8001112:	2b00      	cmp	r3, #0
 8001114:	d118      	bne.n	8001148 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800111e:	f023 0302 	bic.w	r3, r3, #2
 8001122:	f043 0202 	orr.w	r2, r3, #2
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f000 faba 	bl	80016a4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2200      	movs	r2, #0
 8001134:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113a:	f023 0303 	bic.w	r3, r3, #3
 800113e:	f043 0201 	orr.w	r2, r3, #1
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	641a      	str	r2, [r3, #64]	@ 0x40
 8001146:	e001      	b.n	800114c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2200      	movs	r2, #0
 8001150:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001154:	7bfb      	ldrb	r3, [r7, #15]
}
 8001156:	4618      	mov	r0, r3
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
	...

08001160 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001168:	2300      	movs	r3, #0
 800116a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001172:	2b01      	cmp	r3, #1
 8001174:	d101      	bne.n	800117a <HAL_ADC_Start+0x1a>
 8001176:	2302      	movs	r3, #2
 8001178:	e097      	b.n	80012aa <HAL_ADC_Start+0x14a>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2201      	movs	r2, #1
 800117e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	f003 0301 	and.w	r3, r3, #1
 800118c:	2b01      	cmp	r3, #1
 800118e:	d018      	beq.n	80011c2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	689a      	ldr	r2, [r3, #8]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f042 0201 	orr.w	r2, r2, #1
 800119e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80011a0:	4b45      	ldr	r3, [pc, #276]	@ (80012b8 <HAL_ADC_Start+0x158>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a45      	ldr	r2, [pc, #276]	@ (80012bc <HAL_ADC_Start+0x15c>)
 80011a6:	fba2 2303 	umull	r2, r3, r2, r3
 80011aa:	0c9a      	lsrs	r2, r3, #18
 80011ac:	4613      	mov	r3, r2
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	4413      	add	r3, r2
 80011b2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80011b4:	e002      	b.n	80011bc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	3b01      	subs	r3, #1
 80011ba:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d1f9      	bne.n	80011b6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	f003 0301 	and.w	r3, r3, #1
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d15f      	bne.n	8001290 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80011d8:	f023 0301 	bic.w	r3, r3, #1
 80011dc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d007      	beq.n	8001202 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80011fa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001206:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800120a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800120e:	d106      	bne.n	800121e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001214:	f023 0206 	bic.w	r2, r3, #6
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	645a      	str	r2, [r3, #68]	@ 0x44
 800121c:	e002      	b.n	8001224 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2200      	movs	r2, #0
 8001222:	645a      	str	r2, [r3, #68]	@ 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2200      	movs	r2, #0
 8001228:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800122c:	4b24      	ldr	r3, [pc, #144]	@ (80012c0 <HAL_ADC_Start+0x160>)
 800122e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001238:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f003 031f 	and.w	r3, r3, #31
 8001242:	2b00      	cmp	r3, #0
 8001244:	d10f      	bne.n	8001266 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001250:	2b00      	cmp	r3, #0
 8001252:	d129      	bne.n	80012a8 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	689a      	ldr	r2, [r3, #8]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	e020      	b.n	80012a8 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a16      	ldr	r2, [pc, #88]	@ (80012c4 <HAL_ADC_Start+0x164>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d11b      	bne.n	80012a8 <HAL_ADC_Start+0x148>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d114      	bne.n	80012a8 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	689a      	ldr	r2, [r3, #8]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800128c:	609a      	str	r2, [r3, #8]
 800128e:	e00b      	b.n	80012a8 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001294:	f043 0210 	orr.w	r2, r3, #16
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012a0:	f043 0201 	orr.w	r2, r3, #1
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3714      	adds	r7, #20
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	20000000 	.word	0x20000000
 80012bc:	431bde83 	.word	0x431bde83
 80012c0:	40012300 	.word	0x40012300
 80012c4:	40012000 	.word	0x40012000

080012c8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d101      	bne.n	80012de <HAL_ADC_Stop+0x16>
 80012da:	2302      	movs	r3, #2
 80012dc:	e021      	b.n	8001322 <HAL_ADC_Stop+0x5a>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2201      	movs	r2, #1
 80012e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	689a      	ldr	r2, [r3, #8]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f022 0201 	bic.w	r2, r2, #1
 80012f4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	f003 0301 	and.w	r3, r3, #1
 8001300:	2b00      	cmp	r3, #0
 8001302:	d109      	bne.n	8001318 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001308:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800130c:	f023 0301 	bic.w	r3, r3, #1
 8001310:	f043 0201 	orr.w	r2, r3, #1
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2200      	movs	r2, #0
 800131c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr

0800132e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b084      	sub	sp, #16
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
 8001336:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001338:	2300      	movs	r3, #0
 800133a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001346:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800134a:	d113      	bne.n	8001374 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001356:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800135a:	d10b      	bne.n	8001374 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001360:	f043 0220 	orr.w	r2, r3, #32
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2200      	movs	r2, #0
 800136c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e063      	b.n	800143c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001374:	f7ff fe80 	bl	8001078 <HAL_GetTick>
 8001378:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800137a:	e021      	b.n	80013c0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001382:	d01d      	beq.n	80013c0 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d007      	beq.n	800139a <HAL_ADC_PollForConversion+0x6c>
 800138a:	f7ff fe75 	bl	8001078 <HAL_GetTick>
 800138e:	4602      	mov	r2, r0
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	683a      	ldr	r2, [r7, #0]
 8001396:	429a      	cmp	r2, r3
 8001398:	d212      	bcs.n	80013c0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 0302 	and.w	r3, r3, #2
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d00b      	beq.n	80013c0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ac:	f043 0204 	orr.w	r2, r3, #4
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	e03d      	b.n	800143c <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d1d6      	bne.n	800137c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f06f 0212 	mvn.w	r2, #18
 80013d6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013dc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d123      	bne.n	800143a <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d11f      	bne.n	800143a <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001400:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001404:	2b00      	cmp	r3, #0
 8001406:	d006      	beq.n	8001416 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001412:	2b00      	cmp	r3, #0
 8001414:	d111      	bne.n	800143a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800141a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001426:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d105      	bne.n	800143a <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001432:	f043 0201 	orr.w	r2, r3, #1
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800143a:	2300      	movs	r3, #0
}
 800143c:	4618      	mov	r0, r3
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001452:	4618      	mov	r0, r3
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
	...

08001460 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800146a:	2300      	movs	r3, #0
 800146c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001474:	2b01      	cmp	r3, #1
 8001476:	d101      	bne.n	800147c <HAL_ADC_ConfigChannel+0x1c>
 8001478:	2302      	movs	r3, #2
 800147a:	e105      	b.n	8001688 <HAL_ADC_ConfigChannel+0x228>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2201      	movs	r2, #1
 8001480:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2b09      	cmp	r3, #9
 800148a:	d925      	bls.n	80014d8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	68d9      	ldr	r1, [r3, #12]
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	b29b      	uxth	r3, r3
 8001498:	461a      	mov	r2, r3
 800149a:	4613      	mov	r3, r2
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	4413      	add	r3, r2
 80014a0:	3b1e      	subs	r3, #30
 80014a2:	2207      	movs	r2, #7
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	43da      	mvns	r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	400a      	ands	r2, r1
 80014b0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	68d9      	ldr	r1, [r3, #12]
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	689a      	ldr	r2, [r3, #8]
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	4618      	mov	r0, r3
 80014c4:	4603      	mov	r3, r0
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	4403      	add	r3, r0
 80014ca:	3b1e      	subs	r3, #30
 80014cc:	409a      	lsls	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	430a      	orrs	r2, r1
 80014d4:	60da      	str	r2, [r3, #12]
 80014d6:	e022      	b.n	800151e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	6919      	ldr	r1, [r3, #16]
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	461a      	mov	r2, r3
 80014e6:	4613      	mov	r3, r2
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	4413      	add	r3, r2
 80014ec:	2207      	movs	r2, #7
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	43da      	mvns	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	400a      	ands	r2, r1
 80014fa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	6919      	ldr	r1, [r3, #16]
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	689a      	ldr	r2, [r3, #8]
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	b29b      	uxth	r3, r3
 800150c:	4618      	mov	r0, r3
 800150e:	4603      	mov	r3, r0
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	4403      	add	r3, r0
 8001514:	409a      	lsls	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	430a      	orrs	r2, r1
 800151c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	2b06      	cmp	r3, #6
 8001524:	d824      	bhi.n	8001570 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685a      	ldr	r2, [r3, #4]
 8001530:	4613      	mov	r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	4413      	add	r3, r2
 8001536:	3b05      	subs	r3, #5
 8001538:	221f      	movs	r2, #31
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	43da      	mvns	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	400a      	ands	r2, r1
 8001546:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	b29b      	uxth	r3, r3
 8001554:	4618      	mov	r0, r3
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685a      	ldr	r2, [r3, #4]
 800155a:	4613      	mov	r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	4413      	add	r3, r2
 8001560:	3b05      	subs	r3, #5
 8001562:	fa00 f203 	lsl.w	r2, r0, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	430a      	orrs	r2, r1
 800156c:	635a      	str	r2, [r3, #52]	@ 0x34
 800156e:	e04c      	b.n	800160a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	2b0c      	cmp	r3, #12
 8001576:	d824      	bhi.n	80015c2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685a      	ldr	r2, [r3, #4]
 8001582:	4613      	mov	r3, r2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	4413      	add	r3, r2
 8001588:	3b23      	subs	r3, #35	@ 0x23
 800158a:	221f      	movs	r2, #31
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	43da      	mvns	r2, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	400a      	ands	r2, r1
 8001598:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	4618      	mov	r0, r3
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685a      	ldr	r2, [r3, #4]
 80015ac:	4613      	mov	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	4413      	add	r3, r2
 80015b2:	3b23      	subs	r3, #35	@ 0x23
 80015b4:	fa00 f203 	lsl.w	r2, r0, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	430a      	orrs	r2, r1
 80015be:	631a      	str	r2, [r3, #48]	@ 0x30
 80015c0:	e023      	b.n	800160a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685a      	ldr	r2, [r3, #4]
 80015cc:	4613      	mov	r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4413      	add	r3, r2
 80015d2:	3b41      	subs	r3, #65	@ 0x41
 80015d4:	221f      	movs	r2, #31
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	43da      	mvns	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	400a      	ands	r2, r1
 80015e2:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	4618      	mov	r0, r3
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685a      	ldr	r2, [r3, #4]
 80015f6:	4613      	mov	r3, r2
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	4413      	add	r3, r2
 80015fc:	3b41      	subs	r3, #65	@ 0x41
 80015fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	430a      	orrs	r2, r1
 8001608:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800160a:	4b22      	ldr	r3, [pc, #136]	@ (8001694 <HAL_ADC_ConfigChannel+0x234>)
 800160c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a21      	ldr	r2, [pc, #132]	@ (8001698 <HAL_ADC_ConfigChannel+0x238>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d109      	bne.n	800162c <HAL_ADC_ConfigChannel+0x1cc>
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2b12      	cmp	r3, #18
 800161e:	d105      	bne.n	800162c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a19      	ldr	r2, [pc, #100]	@ (8001698 <HAL_ADC_ConfigChannel+0x238>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d123      	bne.n	800167e <HAL_ADC_ConfigChannel+0x21e>
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2b10      	cmp	r3, #16
 800163c:	d003      	beq.n	8001646 <HAL_ADC_ConfigChannel+0x1e6>
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2b11      	cmp	r3, #17
 8001644:	d11b      	bne.n	800167e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2b10      	cmp	r3, #16
 8001658:	d111      	bne.n	800167e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800165a:	4b10      	ldr	r3, [pc, #64]	@ (800169c <HAL_ADC_ConfigChannel+0x23c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a10      	ldr	r2, [pc, #64]	@ (80016a0 <HAL_ADC_ConfigChannel+0x240>)
 8001660:	fba2 2303 	umull	r2, r3, r2, r3
 8001664:	0c9a      	lsrs	r2, r3, #18
 8001666:	4613      	mov	r3, r2
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	4413      	add	r3, r2
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001670:	e002      	b.n	8001678 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	3b01      	subs	r3, #1
 8001676:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1f9      	bne.n	8001672 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001686:	2300      	movs	r3, #0
}
 8001688:	4618      	mov	r0, r3
 800168a:	3714      	adds	r7, #20
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	40012300 	.word	0x40012300
 8001698:	40012000 	.word	0x40012000
 800169c:	20000000 	.word	0x20000000
 80016a0:	431bde83 	.word	0x431bde83

080016a4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016ac:	4b79      	ldr	r3, [pc, #484]	@ (8001894 <ADC_Init+0x1f0>)
 80016ae:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	685a      	ldr	r2, [r3, #4]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	431a      	orrs	r2, r3
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	685a      	ldr	r2, [r3, #4]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80016d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	6859      	ldr	r1, [r3, #4]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	691b      	ldr	r3, [r3, #16]
 80016e4:	021a      	lsls	r2, r3, #8
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	430a      	orrs	r2, r1
 80016ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	685a      	ldr	r2, [r3, #4]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80016fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	6859      	ldr	r1, [r3, #4]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689a      	ldr	r2, [r3, #8]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	430a      	orrs	r2, r1
 800170e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	689a      	ldr	r2, [r3, #8]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800171e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6899      	ldr	r1, [r3, #8]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	68da      	ldr	r2, [r3, #12]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	430a      	orrs	r2, r1
 8001730:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001736:	4a58      	ldr	r2, [pc, #352]	@ (8001898 <ADC_Init+0x1f4>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d022      	beq.n	8001782 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	689a      	ldr	r2, [r3, #8]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800174a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	6899      	ldr	r1, [r3, #8]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	430a      	orrs	r2, r1
 800175c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	689a      	ldr	r2, [r3, #8]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800176c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6899      	ldr	r1, [r3, #8]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	430a      	orrs	r2, r1
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	e00f      	b.n	80017a2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	689a      	ldr	r2, [r3, #8]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001790:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	689a      	ldr	r2, [r3, #8]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80017a0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	689a      	ldr	r2, [r3, #8]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f022 0202 	bic.w	r2, r2, #2
 80017b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6899      	ldr	r1, [r3, #8]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	7e1b      	ldrb	r3, [r3, #24]
 80017bc:	005a      	lsls	r2, r3, #1
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	430a      	orrs	r2, r1
 80017c4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d01b      	beq.n	8001808 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	685a      	ldr	r2, [r3, #4]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80017de:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	685a      	ldr	r2, [r3, #4]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80017ee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	6859      	ldr	r1, [r3, #4]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017fa:	3b01      	subs	r3, #1
 80017fc:	035a      	lsls	r2, r3, #13
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	430a      	orrs	r2, r1
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	e007      	b.n	8001818 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	685a      	ldr	r2, [r3, #4]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001816:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001826:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	69db      	ldr	r3, [r3, #28]
 8001832:	3b01      	subs	r3, #1
 8001834:	051a      	lsls	r2, r3, #20
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	430a      	orrs	r2, r1
 800183c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	689a      	ldr	r2, [r3, #8]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800184c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	6899      	ldr	r1, [r3, #8]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800185a:	025a      	lsls	r2, r3, #9
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	430a      	orrs	r2, r1
 8001862:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	689a      	ldr	r2, [r3, #8]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001872:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	6899      	ldr	r1, [r3, #8]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	029a      	lsls	r2, r3, #10
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	430a      	orrs	r2, r1
 8001886:	609a      	str	r2, [r3, #8]
}
 8001888:	bf00      	nop
 800188a:	3714      	adds	r7, #20
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	40012300 	.word	0x40012300
 8001898:	0f000001 	.word	0x0f000001

0800189c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d101      	bne.n	80018ae <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e0ed      	b.n	8001a8a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d102      	bne.n	80018c0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f7ff fa92 	bl	8000de4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f042 0201 	orr.w	r2, r2, #1
 80018ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018d0:	f7ff fbd2 	bl	8001078 <HAL_GetTick>
 80018d4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80018d6:	e012      	b.n	80018fe <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018d8:	f7ff fbce 	bl	8001078 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b0a      	cmp	r3, #10
 80018e4:	d90b      	bls.n	80018fe <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ea:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2205      	movs	r2, #5
 80018f6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e0c5      	b.n	8001a8a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	2b00      	cmp	r3, #0
 800190a:	d0e5      	beq.n	80018d8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f022 0202 	bic.w	r2, r2, #2
 800191a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800191c:	f7ff fbac 	bl	8001078 <HAL_GetTick>
 8001920:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001922:	e012      	b.n	800194a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001924:	f7ff fba8 	bl	8001078 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b0a      	cmp	r3, #10
 8001930:	d90b      	bls.n	800194a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001936:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2205      	movs	r2, #5
 8001942:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e09f      	b.n	8001a8a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f003 0302 	and.w	r3, r3, #2
 8001954:	2b00      	cmp	r3, #0
 8001956:	d1e5      	bne.n	8001924 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	7e1b      	ldrb	r3, [r3, #24]
 800195c:	2b01      	cmp	r3, #1
 800195e:	d108      	bne.n	8001972 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	e007      	b.n	8001982 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001980:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	7e5b      	ldrb	r3, [r3, #25]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d108      	bne.n	800199c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	e007      	b.n	80019ac <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80019aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	7e9b      	ldrb	r3, [r3, #26]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d108      	bne.n	80019c6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f042 0220 	orr.w	r2, r2, #32
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	e007      	b.n	80019d6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f022 0220 	bic.w	r2, r2, #32
 80019d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	7edb      	ldrb	r3, [r3, #27]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d108      	bne.n	80019f0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f022 0210 	bic.w	r2, r2, #16
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	e007      	b.n	8001a00 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f042 0210 	orr.w	r2, r2, #16
 80019fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	7f1b      	ldrb	r3, [r3, #28]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d108      	bne.n	8001a1a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f042 0208 	orr.w	r2, r2, #8
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	e007      	b.n	8001a2a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f022 0208 	bic.w	r2, r2, #8
 8001a28:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	7f5b      	ldrb	r3, [r3, #29]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d108      	bne.n	8001a44 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f042 0204 	orr.w	r2, r2, #4
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	e007      	b.n	8001a54 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f022 0204 	bic.w	r2, r2, #4
 8001a52:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	431a      	orrs	r2, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	431a      	orrs	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	695b      	ldr	r3, [r3, #20]
 8001a68:	ea42 0103 	orr.w	r1, r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	1e5a      	subs	r2, r3, #1
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	430a      	orrs	r2, r1
 8001a78:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2201      	movs	r2, #1
 8001a84:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
	...

08001a94 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b087      	sub	sp, #28
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001aaa:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001aac:	7cfb      	ldrb	r3, [r7, #19]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d003      	beq.n	8001aba <HAL_CAN_ConfigFilter+0x26>
 8001ab2:	7cfb      	ldrb	r3, [r7, #19]
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	f040 80be 	bne.w	8001c36 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001aba:	4b65      	ldr	r3, [pc, #404]	@ (8001c50 <HAL_CAN_ConfigFilter+0x1bc>)
 8001abc:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001ac4:	f043 0201 	orr.w	r2, r3, #1
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001ad4:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ae8:	021b      	lsls	r3, r3, #8
 8001aea:	431a      	orrs	r2, r3
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	f003 031f 	and.w	r3, r3, #31
 8001afa:	2201      	movs	r2, #1
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	401a      	ands	r2, r3
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	69db      	ldr	r3, [r3, #28]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d123      	bne.n	8001b64 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	43db      	mvns	r3, r3
 8001b26:	401a      	ands	r2, r3
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b3a:	683a      	ldr	r2, [r7, #0]
 8001b3c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b3e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	3248      	adds	r2, #72	@ 0x48
 8001b44:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b58:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b5a:	6979      	ldr	r1, [r7, #20]
 8001b5c:	3348      	adds	r3, #72	@ 0x48
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	440b      	add	r3, r1
 8001b62:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	69db      	ldr	r3, [r3, #28]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d122      	bne.n	8001bb2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	431a      	orrs	r2, r3
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001b8c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	3248      	adds	r2, #72	@ 0x48
 8001b92:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ba6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ba8:	6979      	ldr	r1, [r7, #20]
 8001baa:	3348      	adds	r3, #72	@ 0x48
 8001bac:	00db      	lsls	r3, r3, #3
 8001bae:	440b      	add	r3, r1
 8001bb0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	699b      	ldr	r3, [r3, #24]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d109      	bne.n	8001bce <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	43db      	mvns	r3, r3
 8001bc4:	401a      	ands	r2, r3
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001bcc:	e007      	b.n	8001bde <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	431a      	orrs	r2, r3
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d109      	bne.n	8001bfa <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	401a      	ands	r2, r3
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001bf8:	e007      	b.n	8001c0a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	431a      	orrs	r2, r3
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	6a1b      	ldr	r3, [r3, #32]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d107      	bne.n	8001c22 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	431a      	orrs	r2, r3
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001c28:	f023 0201 	bic.w	r2, r3, #1
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001c32:	2300      	movs	r3, #0
 8001c34:	e006      	b.n	8001c44 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c3a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
  }
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	371c      	adds	r7, #28
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	40006400 	.word	0x40006400

08001c54 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d12e      	bne.n	8001cc6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2202      	movs	r2, #2
 8001c6c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 0201 	bic.w	r2, r2, #1
 8001c7e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001c80:	f7ff f9fa 	bl	8001078 <HAL_GetTick>
 8001c84:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c86:	e012      	b.n	8001cae <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c88:	f7ff f9f6 	bl	8001078 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b0a      	cmp	r3, #10
 8001c94:	d90b      	bls.n	8001cae <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c9a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2205      	movs	r2, #5
 8001ca6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e012      	b.n	8001cd4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f003 0301 	and.w	r3, r3, #1
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d1e5      	bne.n	8001c88 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	e006      	b.n	8001cd4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cca:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
  }
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3710      	adds	r7, #16
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b089      	sub	sp, #36	@ 0x24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
 8001ce8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cf0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001cfa:	7ffb      	ldrb	r3, [r7, #31]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d003      	beq.n	8001d08 <HAL_CAN_AddTxMessage+0x2c>
 8001d00:	7ffb      	ldrb	r3, [r7, #31]
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	f040 80b8 	bne.w	8001e78 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d10a      	bne.n	8001d28 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d105      	bne.n	8001d28 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f000 80a0 	beq.w	8001e68 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	0e1b      	lsrs	r3, r3, #24
 8001d2c:	f003 0303 	and.w	r3, r3, #3
 8001d30:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d907      	bls.n	8001d48 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d3c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e09e      	b.n	8001e86 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001d48:	2201      	movs	r2, #1
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	409a      	lsls	r2, r3
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d10d      	bne.n	8001d76 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001d64:	68f9      	ldr	r1, [r7, #12]
 8001d66:	6809      	ldr	r1, [r1, #0]
 8001d68:	431a      	orrs	r2, r3
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	3318      	adds	r3, #24
 8001d6e:	011b      	lsls	r3, r3, #4
 8001d70:	440b      	add	r3, r1
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	e00f      	b.n	8001d96 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d80:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d86:	68f9      	ldr	r1, [r7, #12]
 8001d88:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001d8a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	3318      	adds	r3, #24
 8001d90:	011b      	lsls	r3, r3, #4
 8001d92:	440b      	add	r3, r1
 8001d94:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	6819      	ldr	r1, [r3, #0]
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	691a      	ldr	r2, [r3, #16]
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	3318      	adds	r3, #24
 8001da2:	011b      	lsls	r3, r3, #4
 8001da4:	440b      	add	r3, r1
 8001da6:	3304      	adds	r3, #4
 8001da8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	7d1b      	ldrb	r3, [r3, #20]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d111      	bne.n	8001dd6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	3318      	adds	r3, #24
 8001dba:	011b      	lsls	r3, r3, #4
 8001dbc:	4413      	add	r3, r2
 8001dbe:	3304      	adds	r3, #4
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	68fa      	ldr	r2, [r7, #12]
 8001dc4:	6811      	ldr	r1, [r2, #0]
 8001dc6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	3318      	adds	r3, #24
 8001dce:	011b      	lsls	r3, r3, #4
 8001dd0:	440b      	add	r3, r1
 8001dd2:	3304      	adds	r3, #4
 8001dd4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	3307      	adds	r3, #7
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	061a      	lsls	r2, r3, #24
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	3306      	adds	r3, #6
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	041b      	lsls	r3, r3, #16
 8001de6:	431a      	orrs	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	3305      	adds	r3, #5
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	021b      	lsls	r3, r3, #8
 8001df0:	4313      	orrs	r3, r2
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	3204      	adds	r2, #4
 8001df6:	7812      	ldrb	r2, [r2, #0]
 8001df8:	4610      	mov	r0, r2
 8001dfa:	68fa      	ldr	r2, [r7, #12]
 8001dfc:	6811      	ldr	r1, [r2, #0]
 8001dfe:	ea43 0200 	orr.w	r2, r3, r0
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	011b      	lsls	r3, r3, #4
 8001e06:	440b      	add	r3, r1
 8001e08:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001e0c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	3303      	adds	r3, #3
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	061a      	lsls	r2, r3, #24
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	3302      	adds	r3, #2
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	041b      	lsls	r3, r3, #16
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	3301      	adds	r3, #1
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	021b      	lsls	r3, r3, #8
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	7812      	ldrb	r2, [r2, #0]
 8001e2e:	4610      	mov	r0, r2
 8001e30:	68fa      	ldr	r2, [r7, #12]
 8001e32:	6811      	ldr	r1, [r2, #0]
 8001e34:	ea43 0200 	orr.w	r2, r3, r0
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	011b      	lsls	r3, r3, #4
 8001e3c:	440b      	add	r3, r1
 8001e3e:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001e42:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	3318      	adds	r3, #24
 8001e4c:	011b      	lsls	r3, r3, #4
 8001e4e:	4413      	add	r3, r2
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	6811      	ldr	r1, [r2, #0]
 8001e56:	f043 0201 	orr.w	r2, r3, #1
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	3318      	adds	r3, #24
 8001e5e:	011b      	lsls	r3, r3, #4
 8001e60:	440b      	add	r3, r1
 8001e62:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001e64:	2300      	movs	r3, #0
 8001e66:	e00e      	b.n	8001e86 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e6c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e006      	b.n	8001e86 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e7c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
  }
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3724      	adds	r7, #36	@ 0x24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001e92:	b480      	push	{r7}
 8001e94:	b087      	sub	sp, #28
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	60f8      	str	r0, [r7, #12]
 8001e9a:	60b9      	str	r1, [r7, #8]
 8001e9c:	607a      	str	r2, [r7, #4]
 8001e9e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ea6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ea8:	7dfb      	ldrb	r3, [r7, #23]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d003      	beq.n	8001eb6 <HAL_CAN_GetRxMessage+0x24>
 8001eae:	7dfb      	ldrb	r3, [r7, #23]
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	f040 80f3 	bne.w	800209c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d10e      	bne.n	8001eda <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	f003 0303 	and.w	r3, r3, #3
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d116      	bne.n	8001ef8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ece:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e0e7      	b.n	80020aa <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	691b      	ldr	r3, [r3, #16]
 8001ee0:	f003 0303 	and.w	r3, r3, #3
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d107      	bne.n	8001ef8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eec:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e0d8      	b.n	80020aa <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	331b      	adds	r3, #27
 8001f00:	011b      	lsls	r3, r3, #4
 8001f02:	4413      	add	r3, r2
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0204 	and.w	r2, r3, #4
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d10c      	bne.n	8001f30 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	331b      	adds	r3, #27
 8001f1e:	011b      	lsls	r3, r3, #4
 8001f20:	4413      	add	r3, r2
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	0d5b      	lsrs	r3, r3, #21
 8001f26:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	601a      	str	r2, [r3, #0]
 8001f2e:	e00b      	b.n	8001f48 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	331b      	adds	r3, #27
 8001f38:	011b      	lsls	r3, r3, #4
 8001f3a:	4413      	add	r3, r2
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	08db      	lsrs	r3, r3, #3
 8001f40:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	331b      	adds	r3, #27
 8001f50:	011b      	lsls	r3, r3, #4
 8001f52:	4413      	add	r3, r2
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0202 	and.w	r2, r3, #2
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	331b      	adds	r3, #27
 8001f66:	011b      	lsls	r3, r3, #4
 8001f68:	4413      	add	r3, r2
 8001f6a:	3304      	adds	r3, #4
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 020f 	and.w	r2, r3, #15
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	331b      	adds	r3, #27
 8001f7e:	011b      	lsls	r3, r3, #4
 8001f80:	4413      	add	r3, r2
 8001f82:	3304      	adds	r3, #4
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	0a1b      	lsrs	r3, r3, #8
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	331b      	adds	r3, #27
 8001f96:	011b      	lsls	r3, r3, #4
 8001f98:	4413      	add	r3, r2
 8001f9a:	3304      	adds	r3, #4
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	0c1b      	lsrs	r3, r3, #16
 8001fa0:	b29a      	uxth	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	011b      	lsls	r3, r3, #4
 8001fae:	4413      	add	r3, r2
 8001fb0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	b2da      	uxtb	r2, r3
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	011b      	lsls	r3, r3, #4
 8001fc4:	4413      	add	r3, r2
 8001fc6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	0a1a      	lsrs	r2, r3, #8
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	b2d2      	uxtb	r2, r2
 8001fd4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	011b      	lsls	r3, r3, #4
 8001fde:	4413      	add	r3, r2
 8001fe0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	0c1a      	lsrs	r2, r3, #16
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	3302      	adds	r3, #2
 8001fec:	b2d2      	uxtb	r2, r2
 8001fee:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	011b      	lsls	r3, r3, #4
 8001ff8:	4413      	add	r3, r2
 8001ffa:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	0e1a      	lsrs	r2, r3, #24
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	3303      	adds	r3, #3
 8002006:	b2d2      	uxtb	r2, r2
 8002008:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	011b      	lsls	r3, r3, #4
 8002012:	4413      	add	r3, r2
 8002014:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	3304      	adds	r3, #4
 800201e:	b2d2      	uxtb	r2, r2
 8002020:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	011b      	lsls	r3, r3, #4
 800202a:	4413      	add	r3, r2
 800202c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	0a1a      	lsrs	r2, r3, #8
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	3305      	adds	r3, #5
 8002038:	b2d2      	uxtb	r2, r2
 800203a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	011b      	lsls	r3, r3, #4
 8002044:	4413      	add	r3, r2
 8002046:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	0c1a      	lsrs	r2, r3, #16
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	3306      	adds	r3, #6
 8002052:	b2d2      	uxtb	r2, r2
 8002054:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	011b      	lsls	r3, r3, #4
 800205e:	4413      	add	r3, r2
 8002060:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	0e1a      	lsrs	r2, r3, #24
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	3307      	adds	r3, #7
 800206c:	b2d2      	uxtb	r2, r2
 800206e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d108      	bne.n	8002088 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	68da      	ldr	r2, [r3, #12]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f042 0220 	orr.w	r2, r2, #32
 8002084:	60da      	str	r2, [r3, #12]
 8002086:	e007      	b.n	8002098 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	691a      	ldr	r2, [r3, #16]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f042 0220 	orr.w	r2, r2, #32
 8002096:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002098:	2300      	movs	r3, #0
 800209a:	e006      	b.n	80020aa <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020a0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
  }
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	371c      	adds	r7, #28
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr

080020b6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80020b6:	b480      	push	{r7}
 80020b8:	b085      	sub	sp, #20
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
 80020be:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020c6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80020c8:	7bfb      	ldrb	r3, [r7, #15]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d002      	beq.n	80020d4 <HAL_CAN_ActivateNotification+0x1e>
 80020ce:	7bfb      	ldrb	r3, [r7, #15]
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d109      	bne.n	80020e8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6959      	ldr	r1, [r3, #20]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	683a      	ldr	r2, [r7, #0]
 80020e0:	430a      	orrs	r2, r1
 80020e2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80020e4:	2300      	movs	r3, #0
 80020e6:	e006      	b.n	80020f6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ec:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
  }
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3714      	adds	r7, #20
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b08a      	sub	sp, #40	@ 0x28
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800210a:	2300      	movs	r3, #0
 800210c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	695b      	ldr	r3, [r3, #20]
 8002114:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	691b      	ldr	r3, [r3, #16]
 8002134:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800213e:	6a3b      	ldr	r3, [r7, #32]
 8002140:	f003 0301 	and.w	r3, r3, #1
 8002144:	2b00      	cmp	r3, #0
 8002146:	d07c      	beq.n	8002242 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	2b00      	cmp	r3, #0
 8002150:	d023      	beq.n	800219a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2201      	movs	r2, #1
 8002158:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	f003 0302 	and.w	r3, r3, #2
 8002160:	2b00      	cmp	r3, #0
 8002162:	d003      	beq.n	800216c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f000 f983 	bl	8002470 <HAL_CAN_TxMailbox0CompleteCallback>
 800216a:	e016      	b.n	800219a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	f003 0304 	and.w	r3, r3, #4
 8002172:	2b00      	cmp	r3, #0
 8002174:	d004      	beq.n	8002180 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002178:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800217c:	627b      	str	r3, [r7, #36]	@ 0x24
 800217e:	e00c      	b.n	800219a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	f003 0308 	and.w	r3, r3, #8
 8002186:	2b00      	cmp	r3, #0
 8002188:	d004      	beq.n	8002194 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800218a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800218c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002190:	627b      	str	r3, [r7, #36]	@ 0x24
 8002192:	e002      	b.n	800219a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f000 f989 	bl	80024ac <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d024      	beq.n	80021ee <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021ac:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d003      	beq.n	80021c0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f000 f963 	bl	8002484 <HAL_CAN_TxMailbox1CompleteCallback>
 80021be:	e016      	b.n	80021ee <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d004      	beq.n	80021d4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80021ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021cc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80021d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80021d2:	e00c      	b.n	80021ee <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d004      	beq.n	80021e8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80021de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80021e6:	e002      	b.n	80021ee <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f000 f969 	bl	80024c0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d024      	beq.n	8002242 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002200:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d003      	beq.n	8002214 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f000 f943 	bl	8002498 <HAL_CAN_TxMailbox2CompleteCallback>
 8002212:	e016      	b.n	8002242 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d004      	beq.n	8002228 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800221e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002220:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002224:	627b      	str	r3, [r7, #36]	@ 0x24
 8002226:	e00c      	b.n	8002242 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d004      	beq.n	800223c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002234:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002238:	627b      	str	r3, [r7, #36]	@ 0x24
 800223a:	e002      	b.n	8002242 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f000 f949 	bl	80024d4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002242:	6a3b      	ldr	r3, [r7, #32]
 8002244:	f003 0308 	and.w	r3, r3, #8
 8002248:	2b00      	cmp	r3, #0
 800224a:	d00c      	beq.n	8002266 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	f003 0310 	and.w	r3, r3, #16
 8002252:	2b00      	cmp	r3, #0
 8002254:	d007      	beq.n	8002266 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002258:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800225c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2210      	movs	r2, #16
 8002264:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002266:	6a3b      	ldr	r3, [r7, #32]
 8002268:	f003 0304 	and.w	r3, r3, #4
 800226c:	2b00      	cmp	r3, #0
 800226e:	d00b      	beq.n	8002288 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	f003 0308 	and.w	r3, r3, #8
 8002276:	2b00      	cmp	r3, #0
 8002278:	d006      	beq.n	8002288 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2208      	movs	r2, #8
 8002280:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 f930 	bl	80024e8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002288:	6a3b      	ldr	r3, [r7, #32]
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d009      	beq.n	80022a6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	f003 0303 	and.w	r3, r3, #3
 800229c:	2b00      	cmp	r3, #0
 800229e:	d002      	beq.n	80022a6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f7fe fa29 	bl	80006f8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80022a6:	6a3b      	ldr	r3, [r7, #32]
 80022a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d00c      	beq.n	80022ca <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	f003 0310 	and.w	r3, r3, #16
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d007      	beq.n	80022ca <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80022ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022bc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022c0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2210      	movs	r2, #16
 80022c8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80022ca:	6a3b      	ldr	r3, [r7, #32]
 80022cc:	f003 0320 	and.w	r3, r3, #32
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d00b      	beq.n	80022ec <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	f003 0308 	and.w	r3, r3, #8
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d006      	beq.n	80022ec <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2208      	movs	r2, #8
 80022e4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 f912 	bl	8002510 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80022ec:	6a3b      	ldr	r3, [r7, #32]
 80022ee:	f003 0310 	and.w	r3, r3, #16
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d009      	beq.n	800230a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	f003 0303 	and.w	r3, r3, #3
 8002300:	2b00      	cmp	r3, #0
 8002302:	d002      	beq.n	800230a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f000 f8f9 	bl	80024fc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800230a:	6a3b      	ldr	r3, [r7, #32]
 800230c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d00b      	beq.n	800232c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	f003 0310 	and.w	r3, r3, #16
 800231a:	2b00      	cmp	r3, #0
 800231c:	d006      	beq.n	800232c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2210      	movs	r2, #16
 8002324:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 f8fc 	bl	8002524 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800232c:	6a3b      	ldr	r3, [r7, #32]
 800232e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00b      	beq.n	800234e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	f003 0308 	and.w	r3, r3, #8
 800233c:	2b00      	cmp	r3, #0
 800233e:	d006      	beq.n	800234e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2208      	movs	r2, #8
 8002346:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f000 f8f5 	bl	8002538 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800234e:	6a3b      	ldr	r3, [r7, #32]
 8002350:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d07b      	beq.n	8002450 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	f003 0304 	and.w	r3, r3, #4
 800235e:	2b00      	cmp	r3, #0
 8002360:	d072      	beq.n	8002448 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002362:	6a3b      	ldr	r3, [r7, #32]
 8002364:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002368:	2b00      	cmp	r3, #0
 800236a:	d008      	beq.n	800237e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002372:	2b00      	cmp	r3, #0
 8002374:	d003      	beq.n	800237e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002378:	f043 0301 	orr.w	r3, r3, #1
 800237c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800237e:	6a3b      	ldr	r3, [r7, #32]
 8002380:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002384:	2b00      	cmp	r3, #0
 8002386:	d008      	beq.n	800239a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800238e:	2b00      	cmp	r3, #0
 8002390:	d003      	beq.n	800239a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002394:	f043 0302 	orr.w	r3, r3, #2
 8002398:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800239a:	6a3b      	ldr	r3, [r7, #32]
 800239c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d008      	beq.n	80023b6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d003      	beq.n	80023b6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80023ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b0:	f043 0304 	orr.w	r3, r3, #4
 80023b4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80023b6:	6a3b      	ldr	r3, [r7, #32]
 80023b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d043      	beq.n	8002448 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d03e      	beq.n	8002448 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80023d0:	2b60      	cmp	r3, #96	@ 0x60
 80023d2:	d02b      	beq.n	800242c <HAL_CAN_IRQHandler+0x32a>
 80023d4:	2b60      	cmp	r3, #96	@ 0x60
 80023d6:	d82e      	bhi.n	8002436 <HAL_CAN_IRQHandler+0x334>
 80023d8:	2b50      	cmp	r3, #80	@ 0x50
 80023da:	d022      	beq.n	8002422 <HAL_CAN_IRQHandler+0x320>
 80023dc:	2b50      	cmp	r3, #80	@ 0x50
 80023de:	d82a      	bhi.n	8002436 <HAL_CAN_IRQHandler+0x334>
 80023e0:	2b40      	cmp	r3, #64	@ 0x40
 80023e2:	d019      	beq.n	8002418 <HAL_CAN_IRQHandler+0x316>
 80023e4:	2b40      	cmp	r3, #64	@ 0x40
 80023e6:	d826      	bhi.n	8002436 <HAL_CAN_IRQHandler+0x334>
 80023e8:	2b30      	cmp	r3, #48	@ 0x30
 80023ea:	d010      	beq.n	800240e <HAL_CAN_IRQHandler+0x30c>
 80023ec:	2b30      	cmp	r3, #48	@ 0x30
 80023ee:	d822      	bhi.n	8002436 <HAL_CAN_IRQHandler+0x334>
 80023f0:	2b10      	cmp	r3, #16
 80023f2:	d002      	beq.n	80023fa <HAL_CAN_IRQHandler+0x2f8>
 80023f4:	2b20      	cmp	r3, #32
 80023f6:	d005      	beq.n	8002404 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80023f8:	e01d      	b.n	8002436 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80023fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023fc:	f043 0308 	orr.w	r3, r3, #8
 8002400:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002402:	e019      	b.n	8002438 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002406:	f043 0310 	orr.w	r3, r3, #16
 800240a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800240c:	e014      	b.n	8002438 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800240e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002410:	f043 0320 	orr.w	r3, r3, #32
 8002414:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002416:	e00f      	b.n	8002438 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800241e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002420:	e00a      	b.n	8002438 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002424:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002428:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800242a:	e005      	b.n	8002438 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800242c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800242e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002432:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002434:	e000      	b.n	8002438 <HAL_CAN_IRQHandler+0x336>
            break;
 8002436:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	699a      	ldr	r2, [r3, #24]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002446:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2204      	movs	r2, #4
 800244e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002452:	2b00      	cmp	r3, #0
 8002454:	d008      	beq.n	8002468 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800245a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800245c:	431a      	orrs	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 f872 	bl	800254c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002468:	bf00      	nop
 800246a:	3728      	adds	r7, #40	@ 0x28
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80024b4:	bf00      	nop
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002504:	bf00      	nop
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f003 0307 	and.w	r3, r3, #7
 800256e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002570:	4b0c      	ldr	r3, [pc, #48]	@ (80025a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002576:	68ba      	ldr	r2, [r7, #8]
 8002578:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800257c:	4013      	ands	r3, r2
 800257e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002588:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800258c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002590:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002592:	4a04      	ldr	r2, [pc, #16]	@ (80025a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	60d3      	str	r3, [r2, #12]
}
 8002598:	bf00      	nop
 800259a:	3714      	adds	r7, #20
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	e000ed00 	.word	0xe000ed00

080025a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025ac:	4b04      	ldr	r3, [pc, #16]	@ (80025c0 <__NVIC_GetPriorityGrouping+0x18>)
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	0a1b      	lsrs	r3, r3, #8
 80025b2:	f003 0307 	and.w	r3, r3, #7
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	e000ed00 	.word	0xe000ed00

080025c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	4603      	mov	r3, r0
 80025cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	db0b      	blt.n	80025ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025d6:	79fb      	ldrb	r3, [r7, #7]
 80025d8:	f003 021f 	and.w	r2, r3, #31
 80025dc:	4907      	ldr	r1, [pc, #28]	@ (80025fc <__NVIC_EnableIRQ+0x38>)
 80025de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e2:	095b      	lsrs	r3, r3, #5
 80025e4:	2001      	movs	r0, #1
 80025e6:	fa00 f202 	lsl.w	r2, r0, r2
 80025ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	e000e100 	.word	0xe000e100

08002600 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	4603      	mov	r3, r0
 8002608:	6039      	str	r1, [r7, #0]
 800260a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800260c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002610:	2b00      	cmp	r3, #0
 8002612:	db0a      	blt.n	800262a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	b2da      	uxtb	r2, r3
 8002618:	490c      	ldr	r1, [pc, #48]	@ (800264c <__NVIC_SetPriority+0x4c>)
 800261a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261e:	0112      	lsls	r2, r2, #4
 8002620:	b2d2      	uxtb	r2, r2
 8002622:	440b      	add	r3, r1
 8002624:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002628:	e00a      	b.n	8002640 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	b2da      	uxtb	r2, r3
 800262e:	4908      	ldr	r1, [pc, #32]	@ (8002650 <__NVIC_SetPriority+0x50>)
 8002630:	79fb      	ldrb	r3, [r7, #7]
 8002632:	f003 030f 	and.w	r3, r3, #15
 8002636:	3b04      	subs	r3, #4
 8002638:	0112      	lsls	r2, r2, #4
 800263a:	b2d2      	uxtb	r2, r2
 800263c:	440b      	add	r3, r1
 800263e:	761a      	strb	r2, [r3, #24]
}
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	e000e100 	.word	0xe000e100
 8002650:	e000ed00 	.word	0xe000ed00

08002654 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002654:	b480      	push	{r7}
 8002656:	b089      	sub	sp, #36	@ 0x24
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f003 0307 	and.w	r3, r3, #7
 8002666:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	f1c3 0307 	rsb	r3, r3, #7
 800266e:	2b04      	cmp	r3, #4
 8002670:	bf28      	it	cs
 8002672:	2304      	movcs	r3, #4
 8002674:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	3304      	adds	r3, #4
 800267a:	2b06      	cmp	r3, #6
 800267c:	d902      	bls.n	8002684 <NVIC_EncodePriority+0x30>
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	3b03      	subs	r3, #3
 8002682:	e000      	b.n	8002686 <NVIC_EncodePriority+0x32>
 8002684:	2300      	movs	r3, #0
 8002686:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002688:	f04f 32ff 	mov.w	r2, #4294967295
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	fa02 f303 	lsl.w	r3, r2, r3
 8002692:	43da      	mvns	r2, r3
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	401a      	ands	r2, r3
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800269c:	f04f 31ff 	mov.w	r1, #4294967295
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	fa01 f303 	lsl.w	r3, r1, r3
 80026a6:	43d9      	mvns	r1, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026ac:	4313      	orrs	r3, r2
         );
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3724      	adds	r7, #36	@ 0x24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
	...

080026bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	3b01      	subs	r3, #1
 80026c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026cc:	d301      	bcc.n	80026d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026ce:	2301      	movs	r3, #1
 80026d0:	e00f      	b.n	80026f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026d2:	4a0a      	ldr	r2, [pc, #40]	@ (80026fc <SysTick_Config+0x40>)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	3b01      	subs	r3, #1
 80026d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026da:	210f      	movs	r1, #15
 80026dc:	f04f 30ff 	mov.w	r0, #4294967295
 80026e0:	f7ff ff8e 	bl	8002600 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026e4:	4b05      	ldr	r3, [pc, #20]	@ (80026fc <SysTick_Config+0x40>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026ea:	4b04      	ldr	r3, [pc, #16]	@ (80026fc <SysTick_Config+0x40>)
 80026ec:	2207      	movs	r2, #7
 80026ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	e000e010 	.word	0xe000e010

08002700 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f7ff ff29 	bl	8002560 <__NVIC_SetPriorityGrouping>
}
 800270e:	bf00      	nop
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002716:	b580      	push	{r7, lr}
 8002718:	b086      	sub	sp, #24
 800271a:	af00      	add	r7, sp, #0
 800271c:	4603      	mov	r3, r0
 800271e:	60b9      	str	r1, [r7, #8]
 8002720:	607a      	str	r2, [r7, #4]
 8002722:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002724:	2300      	movs	r3, #0
 8002726:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002728:	f7ff ff3e 	bl	80025a8 <__NVIC_GetPriorityGrouping>
 800272c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	68b9      	ldr	r1, [r7, #8]
 8002732:	6978      	ldr	r0, [r7, #20]
 8002734:	f7ff ff8e 	bl	8002654 <NVIC_EncodePriority>
 8002738:	4602      	mov	r2, r0
 800273a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800273e:	4611      	mov	r1, r2
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff ff5d 	bl	8002600 <__NVIC_SetPriority>
}
 8002746:	bf00      	nop
 8002748:	3718      	adds	r7, #24
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b082      	sub	sp, #8
 8002752:	af00      	add	r7, sp, #0
 8002754:	4603      	mov	r3, r0
 8002756:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff ff31 	bl	80025c4 <__NVIC_EnableIRQ>
}
 8002762:	bf00      	nop
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b082      	sub	sp, #8
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f7ff ffa2 	bl	80026bc <SysTick_Config>
 8002778:	4603      	mov	r3, r0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
	...

08002784 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002784:	b480      	push	{r7}
 8002786:	b089      	sub	sp, #36	@ 0x24
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800278e:	2300      	movs	r3, #0
 8002790:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002792:	2300      	movs	r3, #0
 8002794:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002796:	2300      	movs	r3, #0
 8002798:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800279a:	2300      	movs	r3, #0
 800279c:	61fb      	str	r3, [r7, #28]
 800279e:	e159      	b.n	8002a54 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027a0:	2201      	movs	r2, #1
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	697a      	ldr	r2, [r7, #20]
 80027b0:	4013      	ands	r3, r2
 80027b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027b4:	693a      	ldr	r2, [r7, #16]
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	f040 8148 	bne.w	8002a4e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f003 0303 	and.w	r3, r3, #3
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d005      	beq.n	80027d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d130      	bne.n	8002838 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	2203      	movs	r2, #3
 80027e2:	fa02 f303 	lsl.w	r3, r2, r3
 80027e6:	43db      	mvns	r3, r3
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	4013      	ands	r3, r2
 80027ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	68da      	ldr	r2, [r3, #12]
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	fa02 f303 	lsl.w	r3, r2, r3
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800280c:	2201      	movs	r2, #1
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	43db      	mvns	r3, r3
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	4013      	ands	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	091b      	lsrs	r3, r3, #4
 8002822:	f003 0201 	and.w	r2, r3, #1
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	4313      	orrs	r3, r2
 8002830:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f003 0303 	and.w	r3, r3, #3
 8002840:	2b03      	cmp	r3, #3
 8002842:	d017      	beq.n	8002874 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	2203      	movs	r2, #3
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	43db      	mvns	r3, r3
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	4013      	ands	r3, r2
 800285a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	689a      	ldr	r2, [r3, #8]
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	4313      	orrs	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f003 0303 	and.w	r3, r3, #3
 800287c:	2b02      	cmp	r3, #2
 800287e:	d123      	bne.n	80028c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	08da      	lsrs	r2, r3, #3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	3208      	adds	r2, #8
 8002888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800288c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	f003 0307 	and.w	r3, r3, #7
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	220f      	movs	r2, #15
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	43db      	mvns	r3, r3
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	4013      	ands	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	691a      	ldr	r2, [r3, #16]
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	f003 0307 	and.w	r3, r3, #7
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	08da      	lsrs	r2, r3, #3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	3208      	adds	r2, #8
 80028c2:	69b9      	ldr	r1, [r7, #24]
 80028c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	2203      	movs	r2, #3
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	43db      	mvns	r3, r3
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	4013      	ands	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f003 0203 	and.w	r2, r3, #3
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002904:	2b00      	cmp	r3, #0
 8002906:	f000 80a2 	beq.w	8002a4e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800290a:	2300      	movs	r3, #0
 800290c:	60fb      	str	r3, [r7, #12]
 800290e:	4b57      	ldr	r3, [pc, #348]	@ (8002a6c <HAL_GPIO_Init+0x2e8>)
 8002910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002912:	4a56      	ldr	r2, [pc, #344]	@ (8002a6c <HAL_GPIO_Init+0x2e8>)
 8002914:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002918:	6453      	str	r3, [r2, #68]	@ 0x44
 800291a:	4b54      	ldr	r3, [pc, #336]	@ (8002a6c <HAL_GPIO_Init+0x2e8>)
 800291c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800291e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002922:	60fb      	str	r3, [r7, #12]
 8002924:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002926:	4a52      	ldr	r2, [pc, #328]	@ (8002a70 <HAL_GPIO_Init+0x2ec>)
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	089b      	lsrs	r3, r3, #2
 800292c:	3302      	adds	r3, #2
 800292e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002932:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	f003 0303 	and.w	r3, r3, #3
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	220f      	movs	r2, #15
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	43db      	mvns	r3, r3
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	4013      	ands	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a49      	ldr	r2, [pc, #292]	@ (8002a74 <HAL_GPIO_Init+0x2f0>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d019      	beq.n	8002986 <HAL_GPIO_Init+0x202>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a48      	ldr	r2, [pc, #288]	@ (8002a78 <HAL_GPIO_Init+0x2f4>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d013      	beq.n	8002982 <HAL_GPIO_Init+0x1fe>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a47      	ldr	r2, [pc, #284]	@ (8002a7c <HAL_GPIO_Init+0x2f8>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d00d      	beq.n	800297e <HAL_GPIO_Init+0x1fa>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a46      	ldr	r2, [pc, #280]	@ (8002a80 <HAL_GPIO_Init+0x2fc>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d007      	beq.n	800297a <HAL_GPIO_Init+0x1f6>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a45      	ldr	r2, [pc, #276]	@ (8002a84 <HAL_GPIO_Init+0x300>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d101      	bne.n	8002976 <HAL_GPIO_Init+0x1f2>
 8002972:	2304      	movs	r3, #4
 8002974:	e008      	b.n	8002988 <HAL_GPIO_Init+0x204>
 8002976:	2307      	movs	r3, #7
 8002978:	e006      	b.n	8002988 <HAL_GPIO_Init+0x204>
 800297a:	2303      	movs	r3, #3
 800297c:	e004      	b.n	8002988 <HAL_GPIO_Init+0x204>
 800297e:	2302      	movs	r3, #2
 8002980:	e002      	b.n	8002988 <HAL_GPIO_Init+0x204>
 8002982:	2301      	movs	r3, #1
 8002984:	e000      	b.n	8002988 <HAL_GPIO_Init+0x204>
 8002986:	2300      	movs	r3, #0
 8002988:	69fa      	ldr	r2, [r7, #28]
 800298a:	f002 0203 	and.w	r2, r2, #3
 800298e:	0092      	lsls	r2, r2, #2
 8002990:	4093      	lsls	r3, r2
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	4313      	orrs	r3, r2
 8002996:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002998:	4935      	ldr	r1, [pc, #212]	@ (8002a70 <HAL_GPIO_Init+0x2ec>)
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	089b      	lsrs	r3, r3, #2
 800299e:	3302      	adds	r3, #2
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029a6:	4b38      	ldr	r3, [pc, #224]	@ (8002a88 <HAL_GPIO_Init+0x304>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	43db      	mvns	r3, r3
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	4013      	ands	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d003      	beq.n	80029ca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029ca:	4a2f      	ldr	r2, [pc, #188]	@ (8002a88 <HAL_GPIO_Init+0x304>)
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029d0:	4b2d      	ldr	r3, [pc, #180]	@ (8002a88 <HAL_GPIO_Init+0x304>)
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	43db      	mvns	r3, r3
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	4013      	ands	r3, r2
 80029de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d003      	beq.n	80029f4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029f4:	4a24      	ldr	r2, [pc, #144]	@ (8002a88 <HAL_GPIO_Init+0x304>)
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029fa:	4b23      	ldr	r3, [pc, #140]	@ (8002a88 <HAL_GPIO_Init+0x304>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	43db      	mvns	r3, r3
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	4013      	ands	r3, r2
 8002a08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d003      	beq.n	8002a1e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a1e:	4a1a      	ldr	r2, [pc, #104]	@ (8002a88 <HAL_GPIO_Init+0x304>)
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a24:	4b18      	ldr	r3, [pc, #96]	@ (8002a88 <HAL_GPIO_Init+0x304>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	43db      	mvns	r3, r3
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	4013      	ands	r3, r2
 8002a32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d003      	beq.n	8002a48 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a48:	4a0f      	ldr	r2, [pc, #60]	@ (8002a88 <HAL_GPIO_Init+0x304>)
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	3301      	adds	r3, #1
 8002a52:	61fb      	str	r3, [r7, #28]
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	2b0f      	cmp	r3, #15
 8002a58:	f67f aea2 	bls.w	80027a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a5c:	bf00      	nop
 8002a5e:	bf00      	nop
 8002a60:	3724      	adds	r7, #36	@ 0x24
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	40023800 	.word	0x40023800
 8002a70:	40013800 	.word	0x40013800
 8002a74:	40020000 	.word	0x40020000
 8002a78:	40020400 	.word	0x40020400
 8002a7c:	40020800 	.word	0x40020800
 8002a80:	40020c00 	.word	0x40020c00
 8002a84:	40021000 	.word	0x40021000
 8002a88:	40013c00 	.word	0x40013c00

08002a8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	460b      	mov	r3, r1
 8002a96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	691a      	ldr	r2, [r3, #16]
 8002a9c:	887b      	ldrh	r3, [r7, #2]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d002      	beq.n	8002aaa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	73fb      	strb	r3, [r7, #15]
 8002aa8:	e001      	b.n	8002aae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3714      	adds	r7, #20
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	807b      	strh	r3, [r7, #2]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002acc:	787b      	ldrb	r3, [r7, #1]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ad2:	887a      	ldrh	r2, [r7, #2]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ad8:	e003      	b.n	8002ae2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ada:	887b      	ldrh	r3, [r7, #2]
 8002adc:	041a      	lsls	r2, r3, #16
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	619a      	str	r2, [r3, #24]
}
 8002ae2:	bf00      	nop
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr

08002aee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002aee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002af0:	b08f      	sub	sp, #60	@ 0x3c
 8002af2:	af0a      	add	r7, sp, #40	@ 0x28
 8002af4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d101      	bne.n	8002b00 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e116      	b.n	8002d2e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d106      	bne.n	8002b20 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f005 ff06 	bl	800892c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2203      	movs	r2, #3
 8002b24:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d102      	bne.n	8002b3a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f002 fa25 	bl	8004f8e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	603b      	str	r3, [r7, #0]
 8002b4a:	687e      	ldr	r6, [r7, #4]
 8002b4c:	466d      	mov	r5, sp
 8002b4e:	f106 0410 	add.w	r4, r6, #16
 8002b52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b5a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b5e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b62:	1d33      	adds	r3, r6, #4
 8002b64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b66:	6838      	ldr	r0, [r7, #0]
 8002b68:	f002 f8fc 	bl	8004d64 <USB_CoreInit>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d005      	beq.n	8002b7e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2202      	movs	r2, #2
 8002b76:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e0d7      	b.n	8002d2e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2100      	movs	r1, #0
 8002b84:	4618      	mov	r0, r3
 8002b86:	f002 fa13 	bl	8004fb0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	73fb      	strb	r3, [r7, #15]
 8002b8e:	e04a      	b.n	8002c26 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b90:	7bfa      	ldrb	r2, [r7, #15]
 8002b92:	6879      	ldr	r1, [r7, #4]
 8002b94:	4613      	mov	r3, r2
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	4413      	add	r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	440b      	add	r3, r1
 8002b9e:	333d      	adds	r3, #61	@ 0x3d
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ba4:	7bfa      	ldrb	r2, [r7, #15]
 8002ba6:	6879      	ldr	r1, [r7, #4]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	4413      	add	r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	440b      	add	r3, r1
 8002bb2:	333c      	adds	r3, #60	@ 0x3c
 8002bb4:	7bfa      	ldrb	r2, [r7, #15]
 8002bb6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002bb8:	7bfa      	ldrb	r2, [r7, #15]
 8002bba:	7bfb      	ldrb	r3, [r7, #15]
 8002bbc:	b298      	uxth	r0, r3
 8002bbe:	6879      	ldr	r1, [r7, #4]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	4413      	add	r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	440b      	add	r3, r1
 8002bca:	3344      	adds	r3, #68	@ 0x44
 8002bcc:	4602      	mov	r2, r0
 8002bce:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002bd0:	7bfa      	ldrb	r2, [r7, #15]
 8002bd2:	6879      	ldr	r1, [r7, #4]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	4413      	add	r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	440b      	add	r3, r1
 8002bde:	3340      	adds	r3, #64	@ 0x40
 8002be0:	2200      	movs	r2, #0
 8002be2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002be4:	7bfa      	ldrb	r2, [r7, #15]
 8002be6:	6879      	ldr	r1, [r7, #4]
 8002be8:	4613      	mov	r3, r2
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	4413      	add	r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	440b      	add	r3, r1
 8002bf2:	3348      	adds	r3, #72	@ 0x48
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002bf8:	7bfa      	ldrb	r2, [r7, #15]
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	4413      	add	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	440b      	add	r3, r1
 8002c06:	334c      	adds	r3, #76	@ 0x4c
 8002c08:	2200      	movs	r2, #0
 8002c0a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c0c:	7bfa      	ldrb	r2, [r7, #15]
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	4613      	mov	r3, r2
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	4413      	add	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	440b      	add	r3, r1
 8002c1a:	3354      	adds	r3, #84	@ 0x54
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c20:	7bfb      	ldrb	r3, [r7, #15]
 8002c22:	3301      	adds	r3, #1
 8002c24:	73fb      	strb	r3, [r7, #15]
 8002c26:	7bfa      	ldrb	r2, [r7, #15]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d3af      	bcc.n	8002b90 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c30:	2300      	movs	r3, #0
 8002c32:	73fb      	strb	r3, [r7, #15]
 8002c34:	e044      	b.n	8002cc0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c36:	7bfa      	ldrb	r2, [r7, #15]
 8002c38:	6879      	ldr	r1, [r7, #4]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	4413      	add	r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	440b      	add	r3, r1
 8002c44:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8002c48:	2200      	movs	r2, #0
 8002c4a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c4c:	7bfa      	ldrb	r2, [r7, #15]
 8002c4e:	6879      	ldr	r1, [r7, #4]
 8002c50:	4613      	mov	r3, r2
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	4413      	add	r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	440b      	add	r3, r1
 8002c5a:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8002c5e:	7bfa      	ldrb	r2, [r7, #15]
 8002c60:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c62:	7bfa      	ldrb	r2, [r7, #15]
 8002c64:	6879      	ldr	r1, [r7, #4]
 8002c66:	4613      	mov	r3, r2
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	4413      	add	r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	440b      	add	r3, r1
 8002c70:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8002c74:	2200      	movs	r2, #0
 8002c76:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c78:	7bfa      	ldrb	r2, [r7, #15]
 8002c7a:	6879      	ldr	r1, [r7, #4]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	4413      	add	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	440b      	add	r3, r1
 8002c86:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c8e:	7bfa      	ldrb	r2, [r7, #15]
 8002c90:	6879      	ldr	r1, [r7, #4]
 8002c92:	4613      	mov	r3, r2
 8002c94:	00db      	lsls	r3, r3, #3
 8002c96:	4413      	add	r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	440b      	add	r3, r1
 8002c9c:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ca4:	7bfa      	ldrb	r2, [r7, #15]
 8002ca6:	6879      	ldr	r1, [r7, #4]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	4413      	add	r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	440b      	add	r3, r1
 8002cb2:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cba:	7bfb      	ldrb	r3, [r7, #15]
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	73fb      	strb	r3, [r7, #15]
 8002cc0:	7bfa      	ldrb	r2, [r7, #15]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d3b5      	bcc.n	8002c36 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	603b      	str	r3, [r7, #0]
 8002cd0:	687e      	ldr	r6, [r7, #4]
 8002cd2:	466d      	mov	r5, sp
 8002cd4:	f106 0410 	add.w	r4, r6, #16
 8002cd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ce0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ce4:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ce8:	1d33      	adds	r3, r6, #4
 8002cea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cec:	6838      	ldr	r0, [r7, #0]
 8002cee:	f002 f9ab 	bl	8005048 <USB_DevInit>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d005      	beq.n	8002d04 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e014      	b.n	8002d2e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d102      	bne.n	8002d22 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f001 f98b 	bl	8004038 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f003 faed 	bl	8006306 <USB_DevDisconnect>

  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3714      	adds	r7, #20
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d36 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b084      	sub	sp, #16
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d101      	bne.n	8002d52 <HAL_PCD_Start+0x1c>
 8002d4e:	2302      	movs	r3, #2
 8002d50:	e020      	b.n	8002d94 <HAL_PCD_Start+0x5e>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d109      	bne.n	8002d76 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d005      	beq.n	8002d76 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d6e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f002 f8f6 	bl	8004f6c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f003 fa9d 	bl	80062c4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002d9c:	b590      	push	{r4, r7, lr}
 8002d9e:	b08d      	sub	sp, #52	@ 0x34
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002daa:	6a3b      	ldr	r3, [r7, #32]
 8002dac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f003 fb5b 	bl	800646e <USB_GetMode>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f040 84b7 	bne.w	800372e <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f003 fabf 	bl	8006348 <USB_ReadInterrupts>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f000 84ad 	beq.w	800372c <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	0a1b      	lsrs	r3, r3, #8
 8002ddc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f003 faac 	bl	8006348 <USB_ReadInterrupts>
 8002df0:	4603      	mov	r3, r0
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d107      	bne.n	8002e0a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	695a      	ldr	r2, [r3, #20]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f002 0202 	and.w	r2, r2, #2
 8002e08:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f003 fa9a 	bl	8006348 <USB_ReadInterrupts>
 8002e14:	4603      	mov	r3, r0
 8002e16:	f003 0310 	and.w	r3, r3, #16
 8002e1a:	2b10      	cmp	r3, #16
 8002e1c:	d161      	bne.n	8002ee2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	699a      	ldr	r2, [r3, #24]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 0210 	bic.w	r2, r2, #16
 8002e2c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002e2e:	6a3b      	ldr	r3, [r7, #32]
 8002e30:	6a1b      	ldr	r3, [r3, #32]
 8002e32:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	f003 020f 	and.w	r2, r3, #15
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	00db      	lsls	r3, r3, #3
 8002e3e:	4413      	add	r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	4413      	add	r3, r2
 8002e4a:	3304      	adds	r3, #4
 8002e4c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	0c5b      	lsrs	r3, r3, #17
 8002e52:	f003 030f 	and.w	r3, r3, #15
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d124      	bne.n	8002ea4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002e60:	4013      	ands	r3, r2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d035      	beq.n	8002ed2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	091b      	lsrs	r3, r3, #4
 8002e6e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002e70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	461a      	mov	r2, r3
 8002e78:	6a38      	ldr	r0, [r7, #32]
 8002e7a:	f003 f8d1 	bl	8006020 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	691a      	ldr	r2, [r3, #16]
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	091b      	lsrs	r3, r3, #4
 8002e86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e8a:	441a      	add	r2, r3
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	6a1a      	ldr	r2, [r3, #32]
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	091b      	lsrs	r3, r3, #4
 8002e98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e9c:	441a      	add	r2, r3
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	621a      	str	r2, [r3, #32]
 8002ea2:	e016      	b.n	8002ed2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	0c5b      	lsrs	r3, r3, #17
 8002ea8:	f003 030f 	and.w	r3, r3, #15
 8002eac:	2b06      	cmp	r3, #6
 8002eae:	d110      	bne.n	8002ed2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8002eb6:	2208      	movs	r2, #8
 8002eb8:	4619      	mov	r1, r3
 8002eba:	6a38      	ldr	r0, [r7, #32]
 8002ebc:	f003 f8b0 	bl	8006020 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	6a1a      	ldr	r2, [r3, #32]
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	091b      	lsrs	r3, r3, #4
 8002ec8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ecc:	441a      	add	r2, r3
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	699a      	ldr	r2, [r3, #24]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f042 0210 	orr.w	r2, r2, #16
 8002ee0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f003 fa2e 	bl	8006348 <USB_ReadInterrupts>
 8002eec:	4603      	mov	r3, r0
 8002eee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ef2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002ef6:	f040 80a7 	bne.w	8003048 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002efa:	2300      	movs	r3, #0
 8002efc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4618      	mov	r0, r3
 8002f04:	f003 fa33 	bl	800636e <USB_ReadDevAllOutEpInterrupt>
 8002f08:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002f0a:	e099      	b.n	8003040 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f000 808e 	beq.w	8003034 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f1e:	b2d2      	uxtb	r2, r2
 8002f20:	4611      	mov	r1, r2
 8002f22:	4618      	mov	r0, r3
 8002f24:	f003 fa57 	bl	80063d6 <USB_ReadDevOutEPInterrupt>
 8002f28:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	f003 0301 	and.w	r3, r3, #1
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00c      	beq.n	8002f4e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f36:	015a      	lsls	r2, r3, #5
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f40:	461a      	mov	r2, r3
 8002f42:	2301      	movs	r3, #1
 8002f44:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002f46:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 feef 	bl	8003d2c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	f003 0308 	and.w	r3, r3, #8
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00c      	beq.n	8002f72 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f5a:	015a      	lsls	r2, r3, #5
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	4413      	add	r3, r2
 8002f60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f64:	461a      	mov	r2, r3
 8002f66:	2308      	movs	r3, #8
 8002f68:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002f6a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f000 ffc5 	bl	8003efc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	f003 0310 	and.w	r3, r3, #16
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d008      	beq.n	8002f8e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f7e:	015a      	lsls	r2, r3, #5
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	4413      	add	r3, r2
 8002f84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f88:	461a      	mov	r2, r3
 8002f8a:	2310      	movs	r3, #16
 8002f8c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d030      	beq.n	8002ffa <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002f98:	6a3b      	ldr	r3, [r7, #32]
 8002f9a:	695b      	ldr	r3, [r3, #20]
 8002f9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fa0:	2b80      	cmp	r3, #128	@ 0x80
 8002fa2:	d109      	bne.n	8002fb8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	69fa      	ldr	r2, [r7, #28]
 8002fae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002fb2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002fb6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002fb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fba:	4613      	mov	r3, r2
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	4413      	add	r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	4413      	add	r3, r2
 8002fca:	3304      	adds	r3, #4
 8002fcc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	78db      	ldrb	r3, [r3, #3]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d108      	bne.n	8002fe8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f005 fdb4 	bl	8008b50 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fea:	015a      	lsls	r2, r3, #5
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	4413      	add	r3, r2
 8002ff0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	f003 0320 	and.w	r3, r3, #32
 8003000:	2b00      	cmp	r3, #0
 8003002:	d008      	beq.n	8003016 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003006:	015a      	lsls	r2, r3, #5
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	4413      	add	r3, r2
 800300c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003010:	461a      	mov	r2, r3
 8003012:	2320      	movs	r3, #32
 8003014:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d009      	beq.n	8003034 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003022:	015a      	lsls	r2, r3, #5
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	4413      	add	r3, r2
 8003028:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800302c:	461a      	mov	r2, r3
 800302e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003032:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003036:	3301      	adds	r3, #1
 8003038:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800303a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800303c:	085b      	lsrs	r3, r3, #1
 800303e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003042:	2b00      	cmp	r3, #0
 8003044:	f47f af62 	bne.w	8002f0c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4618      	mov	r0, r3
 800304e:	f003 f97b 	bl	8006348 <USB_ReadInterrupts>
 8003052:	4603      	mov	r3, r0
 8003054:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003058:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800305c:	f040 80db 	bne.w	8003216 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4618      	mov	r0, r3
 8003066:	f003 f99c 	bl	80063a2 <USB_ReadDevAllInEpInterrupt>
 800306a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800306c:	2300      	movs	r3, #0
 800306e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003070:	e0cd      	b.n	800320e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003074:	f003 0301 	and.w	r3, r3, #1
 8003078:	2b00      	cmp	r3, #0
 800307a:	f000 80c2 	beq.w	8003202 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003084:	b2d2      	uxtb	r2, r2
 8003086:	4611      	mov	r1, r2
 8003088:	4618      	mov	r0, r3
 800308a:	f003 f9c2 	bl	8006412 <USB_ReadDevInEPInterrupt>
 800308e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	2b00      	cmp	r3, #0
 8003098:	d057      	beq.n	800314a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800309a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800309c:	f003 030f 	and.w	r3, r3, #15
 80030a0:	2201      	movs	r2, #1
 80030a2:	fa02 f303 	lsl.w	r3, r2, r3
 80030a6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	43db      	mvns	r3, r3
 80030b4:	69f9      	ldr	r1, [r7, #28]
 80030b6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80030ba:	4013      	ands	r3, r2
 80030bc:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80030be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c0:	015a      	lsls	r2, r3, #5
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	4413      	add	r3, r2
 80030c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030ca:	461a      	mov	r2, r3
 80030cc:	2301      	movs	r3, #1
 80030ce:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d132      	bne.n	800313e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80030d8:	6879      	ldr	r1, [r7, #4]
 80030da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030dc:	4613      	mov	r3, r2
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	4413      	add	r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	440b      	add	r3, r1
 80030e6:	334c      	adds	r3, #76	@ 0x4c
 80030e8:	6819      	ldr	r1, [r3, #0]
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030ee:	4613      	mov	r3, r2
 80030f0:	00db      	lsls	r3, r3, #3
 80030f2:	4413      	add	r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	4403      	add	r3, r0
 80030f8:	3348      	adds	r3, #72	@ 0x48
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4419      	add	r1, r3
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003102:	4613      	mov	r3, r2
 8003104:	00db      	lsls	r3, r3, #3
 8003106:	4413      	add	r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	4403      	add	r3, r0
 800310c:	334c      	adds	r3, #76	@ 0x4c
 800310e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003112:	2b00      	cmp	r3, #0
 8003114:	d113      	bne.n	800313e <HAL_PCD_IRQHandler+0x3a2>
 8003116:	6879      	ldr	r1, [r7, #4]
 8003118:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800311a:	4613      	mov	r3, r2
 800311c:	00db      	lsls	r3, r3, #3
 800311e:	4413      	add	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	440b      	add	r3, r1
 8003124:	3354      	adds	r3, #84	@ 0x54
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d108      	bne.n	800313e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6818      	ldr	r0, [r3, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003136:	461a      	mov	r2, r3
 8003138:	2101      	movs	r1, #1
 800313a:	f003 f9c9 	bl	80064d0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800313e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003140:	b2db      	uxtb	r3, r3
 8003142:	4619      	mov	r1, r3
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f005 fc88 	bl	8008a5a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	f003 0308 	and.w	r3, r3, #8
 8003150:	2b00      	cmp	r3, #0
 8003152:	d008      	beq.n	8003166 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003156:	015a      	lsls	r2, r3, #5
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	4413      	add	r3, r2
 800315c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003160:	461a      	mov	r2, r3
 8003162:	2308      	movs	r3, #8
 8003164:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	f003 0310 	and.w	r3, r3, #16
 800316c:	2b00      	cmp	r3, #0
 800316e:	d008      	beq.n	8003182 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003172:	015a      	lsls	r2, r3, #5
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	4413      	add	r3, r2
 8003178:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800317c:	461a      	mov	r2, r3
 800317e:	2310      	movs	r3, #16
 8003180:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003188:	2b00      	cmp	r3, #0
 800318a:	d008      	beq.n	800319e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800318c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800318e:	015a      	lsls	r2, r3, #5
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	4413      	add	r3, r2
 8003194:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003198:	461a      	mov	r2, r3
 800319a:	2340      	movs	r3, #64	@ 0x40
 800319c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d023      	beq.n	80031f0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80031a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80031aa:	6a38      	ldr	r0, [r7, #32]
 80031ac:	f002 f8aa 	bl	8005304 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80031b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031b2:	4613      	mov	r3, r2
 80031b4:	00db      	lsls	r3, r3, #3
 80031b6:	4413      	add	r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	3338      	adds	r3, #56	@ 0x38
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	4413      	add	r3, r2
 80031c0:	3304      	adds	r3, #4
 80031c2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	78db      	ldrb	r3, [r3, #3]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d108      	bne.n	80031de <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	2200      	movs	r2, #0
 80031d0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80031d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	4619      	mov	r1, r3
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f005 fccb 	bl	8008b74 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80031de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e0:	015a      	lsls	r2, r3, #5
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	4413      	add	r3, r2
 80031e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80031ea:	461a      	mov	r2, r3
 80031ec:	2302      	movs	r3, #2
 80031ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d003      	beq.n	8003202 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80031fa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 fd08 	bl	8003c12 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003204:	3301      	adds	r3, #1
 8003206:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800320a:	085b      	lsrs	r3, r3, #1
 800320c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800320e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003210:	2b00      	cmp	r3, #0
 8003212:	f47f af2e 	bne.w	8003072 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4618      	mov	r0, r3
 800321c:	f003 f894 	bl	8006348 <USB_ReadInterrupts>
 8003220:	4603      	mov	r3, r0
 8003222:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003226:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800322a:	d122      	bne.n	8003272 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	69fa      	ldr	r2, [r7, #28]
 8003236:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800323a:	f023 0301 	bic.w	r3, r3, #1
 800323e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8003246:	2b01      	cmp	r3, #1
 8003248:	d108      	bne.n	800325c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003252:	2100      	movs	r1, #0
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f005 fe49 	bl	8008eec <HAL_PCDEx_LPM_Callback>
 800325a:	e002      	b.n	8003262 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f005 fc69 	bl	8008b34 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	695a      	ldr	r2, [r3, #20]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003270:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4618      	mov	r0, r3
 8003278:	f003 f866 	bl	8006348 <USB_ReadInterrupts>
 800327c:	4603      	mov	r3, r0
 800327e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003282:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003286:	d112      	bne.n	80032ae <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f003 0301 	and.w	r3, r3, #1
 8003294:	2b01      	cmp	r3, #1
 8003296:	d102      	bne.n	800329e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f005 fc25 	bl	8008ae8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	695a      	ldr	r2, [r3, #20]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80032ac:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f003 f848 	bl	8006348 <USB_ReadInterrupts>
 80032b8:	4603      	mov	r3, r0
 80032ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80032be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80032c2:	d121      	bne.n	8003308 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	695a      	ldr	r2, [r3, #20]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80032d2:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d111      	bne.n	8003302 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2201      	movs	r2, #1
 80032e2:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ec:	089b      	lsrs	r3, r3, #2
 80032ee:	f003 020f 	and.w	r2, r3, #15
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80032f8:	2101      	movs	r1, #1
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f005 fdf6 	bl	8008eec <HAL_PCDEx_LPM_Callback>
 8003300:	e002      	b.n	8003308 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f005 fbf0 	bl	8008ae8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4618      	mov	r0, r3
 800330e:	f003 f81b 	bl	8006348 <USB_ReadInterrupts>
 8003312:	4603      	mov	r3, r0
 8003314:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003318:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800331c:	f040 80b7 	bne.w	800348e <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	69fa      	ldr	r2, [r7, #28]
 800332a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800332e:	f023 0301 	bic.w	r3, r3, #1
 8003332:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2110      	movs	r1, #16
 800333a:	4618      	mov	r0, r3
 800333c:	f001 ffe2 	bl	8005304 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003340:	2300      	movs	r3, #0
 8003342:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003344:	e046      	b.n	80033d4 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003348:	015a      	lsls	r2, r3, #5
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	4413      	add	r3, r2
 800334e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003352:	461a      	mov	r2, r3
 8003354:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003358:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800335a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800335c:	015a      	lsls	r2, r3, #5
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	4413      	add	r3, r2
 8003362:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800336a:	0151      	lsls	r1, r2, #5
 800336c:	69fa      	ldr	r2, [r7, #28]
 800336e:	440a      	add	r2, r1
 8003370:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003374:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003378:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800337a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800337c:	015a      	lsls	r2, r3, #5
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	4413      	add	r3, r2
 8003382:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003386:	461a      	mov	r2, r3
 8003388:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800338c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800338e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003390:	015a      	lsls	r2, r3, #5
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	4413      	add	r3, r2
 8003396:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800339e:	0151      	lsls	r1, r2, #5
 80033a0:	69fa      	ldr	r2, [r7, #28]
 80033a2:	440a      	add	r2, r1
 80033a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80033a8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80033ac:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80033ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033b0:	015a      	lsls	r2, r3, #5
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	4413      	add	r3, r2
 80033b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033be:	0151      	lsls	r1, r2, #5
 80033c0:	69fa      	ldr	r2, [r7, #28]
 80033c2:	440a      	add	r2, r1
 80033c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80033c8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80033cc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033d0:	3301      	adds	r3, #1
 80033d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033da:	429a      	cmp	r2, r3
 80033dc:	d3b3      	bcc.n	8003346 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033e4:	69db      	ldr	r3, [r3, #28]
 80033e6:	69fa      	ldr	r2, [r7, #28]
 80033e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80033ec:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80033f0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d016      	beq.n	8003428 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003400:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003404:	69fa      	ldr	r2, [r7, #28]
 8003406:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800340a:	f043 030b 	orr.w	r3, r3, #11
 800340e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800341a:	69fa      	ldr	r2, [r7, #28]
 800341c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003420:	f043 030b 	orr.w	r3, r3, #11
 8003424:	6453      	str	r3, [r2, #68]	@ 0x44
 8003426:	e015      	b.n	8003454 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800342e:	695b      	ldr	r3, [r3, #20]
 8003430:	69fa      	ldr	r2, [r7, #28]
 8003432:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003436:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800343a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800343e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003446:	691b      	ldr	r3, [r3, #16]
 8003448:	69fa      	ldr	r2, [r7, #28]
 800344a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800344e:	f043 030b 	orr.w	r3, r3, #11
 8003452:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	69fa      	ldr	r2, [r7, #28]
 800345e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003462:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003466:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6818      	ldr	r0, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003478:	461a      	mov	r2, r3
 800347a:	f003 f829 	bl	80064d0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	695a      	ldr	r2, [r3, #20]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800348c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4618      	mov	r0, r3
 8003494:	f002 ff58 	bl	8006348 <USB_ReadInterrupts>
 8003498:	4603      	mov	r3, r0
 800349a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800349e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034a2:	d124      	bne.n	80034ee <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4618      	mov	r0, r3
 80034aa:	f002 ffee 	bl	800648a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f001 ffa3 	bl	80053fe <USB_GetDevSpeed>
 80034b8:	4603      	mov	r3, r0
 80034ba:	461a      	mov	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681c      	ldr	r4, [r3, #0]
 80034c4:	f000 ffd4 	bl	8004470 <HAL_RCC_GetHCLKFreq>
 80034c8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	461a      	mov	r2, r3
 80034d2:	4620      	mov	r0, r4
 80034d4:	f001 fca8 	bl	8004e28 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f005 fae6 	bl	8008aaa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	695a      	ldr	r2, [r3, #20]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80034ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4618      	mov	r0, r3
 80034f4:	f002 ff28 	bl	8006348 <USB_ReadInterrupts>
 80034f8:	4603      	mov	r3, r0
 80034fa:	f003 0308 	and.w	r3, r3, #8
 80034fe:	2b08      	cmp	r3, #8
 8003500:	d10a      	bne.n	8003518 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f005 fac3 	bl	8008a8e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	695a      	ldr	r2, [r3, #20]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f002 0208 	and.w	r2, r2, #8
 8003516:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4618      	mov	r0, r3
 800351e:	f002 ff13 	bl	8006348 <USB_ReadInterrupts>
 8003522:	4603      	mov	r3, r0
 8003524:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003528:	2b80      	cmp	r3, #128	@ 0x80
 800352a:	d122      	bne.n	8003572 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800352c:	6a3b      	ldr	r3, [r7, #32]
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003534:	6a3b      	ldr	r3, [r7, #32]
 8003536:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003538:	2301      	movs	r3, #1
 800353a:	627b      	str	r3, [r7, #36]	@ 0x24
 800353c:	e014      	b.n	8003568 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800353e:	6879      	ldr	r1, [r7, #4]
 8003540:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003542:	4613      	mov	r3, r2
 8003544:	00db      	lsls	r3, r3, #3
 8003546:	4413      	add	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	440b      	add	r3, r1
 800354c:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d105      	bne.n	8003562 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003558:	b2db      	uxtb	r3, r3
 800355a:	4619      	mov	r1, r3
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f000 fb27 	bl	8003bb0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003564:	3301      	adds	r3, #1
 8003566:	627b      	str	r3, [r7, #36]	@ 0x24
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800356e:	429a      	cmp	r2, r3
 8003570:	d3e5      	bcc.n	800353e <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4618      	mov	r0, r3
 8003578:	f002 fee6 	bl	8006348 <USB_ReadInterrupts>
 800357c:	4603      	mov	r3, r0
 800357e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003582:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003586:	d13b      	bne.n	8003600 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003588:	2301      	movs	r3, #1
 800358a:	627b      	str	r3, [r7, #36]	@ 0x24
 800358c:	e02b      	b.n	80035e6 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800358e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003590:	015a      	lsls	r2, r3, #5
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	4413      	add	r3, r2
 8003596:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800359e:	6879      	ldr	r1, [r7, #4]
 80035a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035a2:	4613      	mov	r3, r2
 80035a4:	00db      	lsls	r3, r3, #3
 80035a6:	4413      	add	r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	440b      	add	r3, r1
 80035ac:	3340      	adds	r3, #64	@ 0x40
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d115      	bne.n	80035e0 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80035b4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	da12      	bge.n	80035e0 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80035ba:	6879      	ldr	r1, [r7, #4]
 80035bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035be:	4613      	mov	r3, r2
 80035c0:	00db      	lsls	r3, r3, #3
 80035c2:	4413      	add	r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	440b      	add	r3, r1
 80035c8:	333f      	adds	r3, #63	@ 0x3f
 80035ca:	2201      	movs	r2, #1
 80035cc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80035ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	4619      	mov	r1, r3
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 fae8 	bl	8003bb0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e2:	3301      	adds	r3, #1
 80035e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d3ce      	bcc.n	800358e <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	695a      	ldr	r2, [r3, #20]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80035fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4618      	mov	r0, r3
 8003606:	f002 fe9f 	bl	8006348 <USB_ReadInterrupts>
 800360a:	4603      	mov	r3, r0
 800360c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003610:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003614:	d155      	bne.n	80036c2 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003616:	2301      	movs	r3, #1
 8003618:	627b      	str	r3, [r7, #36]	@ 0x24
 800361a:	e045      	b.n	80036a8 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800361c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800361e:	015a      	lsls	r2, r3, #5
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	4413      	add	r3, r2
 8003624:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800362c:	6879      	ldr	r1, [r7, #4]
 800362e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003630:	4613      	mov	r3, r2
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	4413      	add	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	440b      	add	r3, r1
 800363a:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d12e      	bne.n	80036a2 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003644:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003646:	2b00      	cmp	r3, #0
 8003648:	da2b      	bge.n	80036a2 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8003656:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800365a:	429a      	cmp	r2, r3
 800365c:	d121      	bne.n	80036a2 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800365e:	6879      	ldr	r1, [r7, #4]
 8003660:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003662:	4613      	mov	r3, r2
 8003664:	00db      	lsls	r3, r3, #3
 8003666:	4413      	add	r3, r2
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	440b      	add	r3, r1
 800366c:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8003670:	2201      	movs	r2, #1
 8003672:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003674:	6a3b      	ldr	r3, [r7, #32]
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800367c:	6a3b      	ldr	r3, [r7, #32]
 800367e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003680:	6a3b      	ldr	r3, [r7, #32]
 8003682:	695b      	ldr	r3, [r3, #20]
 8003684:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003688:	2b00      	cmp	r3, #0
 800368a:	d10a      	bne.n	80036a2 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	69fa      	ldr	r2, [r7, #28]
 8003696:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800369a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800369e:	6053      	str	r3, [r2, #4]
            break;
 80036a0:	e007      	b.n	80036b2 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80036a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a4:	3301      	adds	r3, #1
 80036a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d3b4      	bcc.n	800361c <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	695a      	ldr	r2, [r3, #20]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80036c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4618      	mov	r0, r3
 80036c8:	f002 fe3e 	bl	8006348 <USB_ReadInterrupts>
 80036cc:	4603      	mov	r3, r0
 80036ce:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80036d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036d6:	d10a      	bne.n	80036ee <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f005 fa5d 	bl	8008b98 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	695a      	ldr	r2, [r3, #20]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80036ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f002 fe28 	bl	8006348 <USB_ReadInterrupts>
 80036f8:	4603      	mov	r3, r0
 80036fa:	f003 0304 	and.w	r3, r3, #4
 80036fe:	2b04      	cmp	r3, #4
 8003700:	d115      	bne.n	800372e <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	f003 0304 	and.w	r3, r3, #4
 8003710:	2b00      	cmp	r3, #0
 8003712:	d002      	beq.n	800371a <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f005 fa4d 	bl	8008bb4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	6859      	ldr	r1, [r3, #4]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	430a      	orrs	r2, r1
 8003728:	605a      	str	r2, [r3, #4]
 800372a:	e000      	b.n	800372e <HAL_PCD_IRQHandler+0x992>
      return;
 800372c:	bf00      	nop
    }
  }
}
 800372e:	3734      	adds	r7, #52	@ 0x34
 8003730:	46bd      	mov	sp, r7
 8003732:	bd90      	pop	{r4, r7, pc}

08003734 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	460b      	mov	r3, r1
 800373e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003746:	2b01      	cmp	r3, #1
 8003748:	d101      	bne.n	800374e <HAL_PCD_SetAddress+0x1a>
 800374a:	2302      	movs	r3, #2
 800374c:	e013      	b.n	8003776 <HAL_PCD_SetAddress+0x42>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2201      	movs	r2, #1
 8003752:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	78fa      	ldrb	r2, [r7, #3]
 800375a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	78fa      	ldrb	r2, [r7, #3]
 8003764:	4611      	mov	r1, r2
 8003766:	4618      	mov	r0, r3
 8003768:	f002 fd86 	bl	8006278 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3708      	adds	r7, #8
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b084      	sub	sp, #16
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
 8003786:	4608      	mov	r0, r1
 8003788:	4611      	mov	r1, r2
 800378a:	461a      	mov	r2, r3
 800378c:	4603      	mov	r3, r0
 800378e:	70fb      	strb	r3, [r7, #3]
 8003790:	460b      	mov	r3, r1
 8003792:	803b      	strh	r3, [r7, #0]
 8003794:	4613      	mov	r3, r2
 8003796:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003798:	2300      	movs	r3, #0
 800379a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800379c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	da0f      	bge.n	80037c4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037a4:	78fb      	ldrb	r3, [r7, #3]
 80037a6:	f003 020f 	and.w	r2, r3, #15
 80037aa:	4613      	mov	r3, r2
 80037ac:	00db      	lsls	r3, r3, #3
 80037ae:	4413      	add	r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	3338      	adds	r3, #56	@ 0x38
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	4413      	add	r3, r2
 80037b8:	3304      	adds	r3, #4
 80037ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2201      	movs	r2, #1
 80037c0:	705a      	strb	r2, [r3, #1]
 80037c2:	e00f      	b.n	80037e4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037c4:	78fb      	ldrb	r3, [r7, #3]
 80037c6:	f003 020f 	and.w	r2, r3, #15
 80037ca:	4613      	mov	r3, r2
 80037cc:	00db      	lsls	r3, r3, #3
 80037ce:	4413      	add	r3, r2
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	4413      	add	r3, r2
 80037da:	3304      	adds	r3, #4
 80037dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2200      	movs	r2, #0
 80037e2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80037e4:	78fb      	ldrb	r3, [r7, #3]
 80037e6:	f003 030f 	and.w	r3, r3, #15
 80037ea:	b2da      	uxtb	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80037f0:	883a      	ldrh	r2, [r7, #0]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	78ba      	ldrb	r2, [r7, #2]
 80037fa:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	785b      	ldrb	r3, [r3, #1]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d004      	beq.n	800380e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	461a      	mov	r2, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800380e:	78bb      	ldrb	r3, [r7, #2]
 8003810:	2b02      	cmp	r3, #2
 8003812:	d102      	bne.n	800381a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003820:	2b01      	cmp	r3, #1
 8003822:	d101      	bne.n	8003828 <HAL_PCD_EP_Open+0xaa>
 8003824:	2302      	movs	r3, #2
 8003826:	e00e      	b.n	8003846 <HAL_PCD_EP_Open+0xc8>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68f9      	ldr	r1, [r7, #12]
 8003836:	4618      	mov	r0, r3
 8003838:	f001 fe06 	bl	8005448 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 8003844:	7afb      	ldrb	r3, [r7, #11]
}
 8003846:	4618      	mov	r0, r3
 8003848:	3710      	adds	r7, #16
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}

0800384e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800384e:	b580      	push	{r7, lr}
 8003850:	b084      	sub	sp, #16
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
 8003856:	460b      	mov	r3, r1
 8003858:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800385a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800385e:	2b00      	cmp	r3, #0
 8003860:	da0f      	bge.n	8003882 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003862:	78fb      	ldrb	r3, [r7, #3]
 8003864:	f003 020f 	and.w	r2, r3, #15
 8003868:	4613      	mov	r3, r2
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	4413      	add	r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	3338      	adds	r3, #56	@ 0x38
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	4413      	add	r3, r2
 8003876:	3304      	adds	r3, #4
 8003878:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2201      	movs	r2, #1
 800387e:	705a      	strb	r2, [r3, #1]
 8003880:	e00f      	b.n	80038a2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003882:	78fb      	ldrb	r3, [r7, #3]
 8003884:	f003 020f 	and.w	r2, r3, #15
 8003888:	4613      	mov	r3, r2
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	4413      	add	r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	4413      	add	r3, r2
 8003898:	3304      	adds	r3, #4
 800389a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80038a2:	78fb      	ldrb	r3, [r7, #3]
 80038a4:	f003 030f 	and.w	r3, r3, #15
 80038a8:	b2da      	uxtb	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d101      	bne.n	80038bc <HAL_PCD_EP_Close+0x6e>
 80038b8:	2302      	movs	r3, #2
 80038ba:	e00e      	b.n	80038da <HAL_PCD_EP_Close+0x8c>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68f9      	ldr	r1, [r7, #12]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f001 fe44 	bl	8005558 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3710      	adds	r7, #16
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b086      	sub	sp, #24
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	60f8      	str	r0, [r7, #12]
 80038ea:	607a      	str	r2, [r7, #4]
 80038ec:	603b      	str	r3, [r7, #0]
 80038ee:	460b      	mov	r3, r1
 80038f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038f2:	7afb      	ldrb	r3, [r7, #11]
 80038f4:	f003 020f 	and.w	r2, r3, #15
 80038f8:	4613      	mov	r3, r2
 80038fa:	00db      	lsls	r3, r3, #3
 80038fc:	4413      	add	r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	4413      	add	r3, r2
 8003908:	3304      	adds	r3, #4
 800390a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	683a      	ldr	r2, [r7, #0]
 8003916:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	2200      	movs	r2, #0
 800391c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	2200      	movs	r2, #0
 8003922:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003924:	7afb      	ldrb	r3, [r7, #11]
 8003926:	f003 030f 	and.w	r3, r3, #15
 800392a:	b2da      	uxtb	r2, r3
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	2b01      	cmp	r3, #1
 8003936:	d102      	bne.n	800393e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800393e:	7afb      	ldrb	r3, [r7, #11]
 8003940:	f003 030f 	and.w	r3, r3, #15
 8003944:	2b00      	cmp	r3, #0
 8003946:	d109      	bne.n	800395c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6818      	ldr	r0, [r3, #0]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	b2db      	uxtb	r3, r3
 8003952:	461a      	mov	r2, r3
 8003954:	6979      	ldr	r1, [r7, #20]
 8003956:	f002 f923 	bl	8005ba0 <USB_EP0StartXfer>
 800395a:	e008      	b.n	800396e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6818      	ldr	r0, [r3, #0]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	b2db      	uxtb	r3, r3
 8003966:	461a      	mov	r2, r3
 8003968:	6979      	ldr	r1, [r7, #20]
 800396a:	f001 fed1 	bl	8005710 <USB_EPStartXfer>
  }

  return HAL_OK;
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	3718      	adds	r7, #24
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	460b      	mov	r3, r1
 8003982:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003984:	78fb      	ldrb	r3, [r7, #3]
 8003986:	f003 020f 	and.w	r2, r3, #15
 800398a:	6879      	ldr	r1, [r7, #4]
 800398c:	4613      	mov	r3, r2
 800398e:	00db      	lsls	r3, r3, #3
 8003990:	4413      	add	r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	440b      	add	r3, r1
 8003996:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800399a:	681b      	ldr	r3, [r3, #0]
}
 800399c:	4618      	mov	r0, r3
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b086      	sub	sp, #24
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	607a      	str	r2, [r7, #4]
 80039b2:	603b      	str	r3, [r7, #0]
 80039b4:	460b      	mov	r3, r1
 80039b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039b8:	7afb      	ldrb	r3, [r7, #11]
 80039ba:	f003 020f 	and.w	r2, r3, #15
 80039be:	4613      	mov	r3, r2
 80039c0:	00db      	lsls	r3, r3, #3
 80039c2:	4413      	add	r3, r2
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	3338      	adds	r3, #56	@ 0x38
 80039c8:	68fa      	ldr	r2, [r7, #12]
 80039ca:	4413      	add	r3, r2
 80039cc:	3304      	adds	r3, #4
 80039ce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	683a      	ldr	r2, [r7, #0]
 80039da:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	2200      	movs	r2, #0
 80039e0:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	2201      	movs	r2, #1
 80039e6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039e8:	7afb      	ldrb	r3, [r7, #11]
 80039ea:	f003 030f 	and.w	r3, r3, #15
 80039ee:	b2da      	uxtb	r2, r3
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d102      	bne.n	8003a02 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a02:	7afb      	ldrb	r3, [r7, #11]
 8003a04:	f003 030f 	and.w	r3, r3, #15
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d109      	bne.n	8003a20 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6818      	ldr	r0, [r3, #0]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	691b      	ldr	r3, [r3, #16]
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	461a      	mov	r2, r3
 8003a18:	6979      	ldr	r1, [r7, #20]
 8003a1a:	f002 f8c1 	bl	8005ba0 <USB_EP0StartXfer>
 8003a1e:	e008      	b.n	8003a32 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6818      	ldr	r0, [r3, #0]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	6979      	ldr	r1, [r7, #20]
 8003a2e:	f001 fe6f 	bl	8005710 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003a32:	2300      	movs	r3, #0
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3718      	adds	r7, #24
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	460b      	mov	r3, r1
 8003a46:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003a48:	78fb      	ldrb	r3, [r7, #3]
 8003a4a:	f003 020f 	and.w	r2, r3, #15
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d901      	bls.n	8003a5a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e050      	b.n	8003afc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	da0f      	bge.n	8003a82 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a62:	78fb      	ldrb	r3, [r7, #3]
 8003a64:	f003 020f 	and.w	r2, r3, #15
 8003a68:	4613      	mov	r3, r2
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	4413      	add	r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	3338      	adds	r3, #56	@ 0x38
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	4413      	add	r3, r2
 8003a76:	3304      	adds	r3, #4
 8003a78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	705a      	strb	r2, [r3, #1]
 8003a80:	e00d      	b.n	8003a9e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003a82:	78fa      	ldrb	r2, [r7, #3]
 8003a84:	4613      	mov	r3, r2
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	4413      	add	r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	4413      	add	r3, r2
 8003a94:	3304      	adds	r3, #4
 8003a96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003aa4:	78fb      	ldrb	r3, [r7, #3]
 8003aa6:	f003 030f 	and.w	r3, r3, #15
 8003aaa:	b2da      	uxtb	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d101      	bne.n	8003abe <HAL_PCD_EP_SetStall+0x82>
 8003aba:	2302      	movs	r3, #2
 8003abc:	e01e      	b.n	8003afc <HAL_PCD_EP_SetStall+0xc0>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68f9      	ldr	r1, [r7, #12]
 8003acc:	4618      	mov	r0, r3
 8003ace:	f002 faff 	bl	80060d0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ad2:	78fb      	ldrb	r3, [r7, #3]
 8003ad4:	f003 030f 	and.w	r3, r3, #15
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d10a      	bne.n	8003af2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6818      	ldr	r0, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	b2d9      	uxtb	r1, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003aec:	461a      	mov	r2, r3
 8003aee:	f002 fcef 	bl	80064d0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3710      	adds	r7, #16
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003b10:	78fb      	ldrb	r3, [r7, #3]
 8003b12:	f003 020f 	and.w	r2, r3, #15
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d901      	bls.n	8003b22 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e042      	b.n	8003ba8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	da0f      	bge.n	8003b4a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b2a:	78fb      	ldrb	r3, [r7, #3]
 8003b2c:	f003 020f 	and.w	r2, r3, #15
 8003b30:	4613      	mov	r3, r2
 8003b32:	00db      	lsls	r3, r3, #3
 8003b34:	4413      	add	r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	3338      	adds	r3, #56	@ 0x38
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	3304      	adds	r3, #4
 8003b40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2201      	movs	r2, #1
 8003b46:	705a      	strb	r2, [r3, #1]
 8003b48:	e00f      	b.n	8003b6a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b4a:	78fb      	ldrb	r3, [r7, #3]
 8003b4c:	f003 020f 	and.w	r2, r3, #15
 8003b50:	4613      	mov	r3, r2
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	4413      	add	r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	4413      	add	r3, r2
 8003b60:	3304      	adds	r3, #4
 8003b62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b70:	78fb      	ldrb	r3, [r7, #3]
 8003b72:	f003 030f 	and.w	r3, r3, #15
 8003b76:	b2da      	uxtb	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d101      	bne.n	8003b8a <HAL_PCD_EP_ClrStall+0x86>
 8003b86:	2302      	movs	r3, #2
 8003b88:	e00e      	b.n	8003ba8 <HAL_PCD_EP_ClrStall+0xa4>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68f9      	ldr	r1, [r7, #12]
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f002 fb07 	bl	80061ac <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3710      	adds	r7, #16
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	460b      	mov	r3, r1
 8003bba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003bbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	da0c      	bge.n	8003bde <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bc4:	78fb      	ldrb	r3, [r7, #3]
 8003bc6:	f003 020f 	and.w	r2, r3, #15
 8003bca:	4613      	mov	r3, r2
 8003bcc:	00db      	lsls	r3, r3, #3
 8003bce:	4413      	add	r3, r2
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	3338      	adds	r3, #56	@ 0x38
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	3304      	adds	r3, #4
 8003bda:	60fb      	str	r3, [r7, #12]
 8003bdc:	e00c      	b.n	8003bf8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bde:	78fb      	ldrb	r3, [r7, #3]
 8003be0:	f003 020f 	and.w	r2, r3, #15
 8003be4:	4613      	mov	r3, r2
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	4413      	add	r3, r2
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	3304      	adds	r3, #4
 8003bf6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68f9      	ldr	r1, [r7, #12]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f002 f926 	bl	8005e50 <USB_EPStopXfer>
 8003c04:	4603      	mov	r3, r0
 8003c06:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003c08:	7afb      	ldrb	r3, [r7, #11]
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3710      	adds	r7, #16
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c12:	b580      	push	{r7, lr}
 8003c14:	b08a      	sub	sp, #40	@ 0x28
 8003c16:	af02      	add	r7, sp, #8
 8003c18:	6078      	str	r0, [r7, #4]
 8003c1a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003c26:	683a      	ldr	r2, [r7, #0]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	00db      	lsls	r3, r3, #3
 8003c2c:	4413      	add	r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	3338      	adds	r3, #56	@ 0x38
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	4413      	add	r3, r2
 8003c36:	3304      	adds	r3, #4
 8003c38:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6a1a      	ldr	r2, [r3, #32]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d901      	bls.n	8003c4a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e06c      	b.n	8003d24 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	699a      	ldr	r2, [r3, #24]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	69fa      	ldr	r2, [r7, #28]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d902      	bls.n	8003c66 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	3303      	adds	r3, #3
 8003c6a:	089b      	lsrs	r3, r3, #2
 8003c6c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c6e:	e02b      	b.n	8003cc8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	699a      	ldr	r2, [r3, #24]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6a1b      	ldr	r3, [r3, #32]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	69fa      	ldr	r2, [r7, #28]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d902      	bls.n	8003c8c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	3303      	adds	r3, #3
 8003c90:	089b      	lsrs	r3, r3, #2
 8003c92:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6919      	ldr	r1, [r3, #16]
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	b2da      	uxtb	r2, r3
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	9300      	str	r3, [sp, #0]
 8003ca8:	4603      	mov	r3, r0
 8003caa:	6978      	ldr	r0, [r7, #20]
 8003cac:	f002 f97a 	bl	8005fa4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	691a      	ldr	r2, [r3, #16]
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	441a      	add	r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6a1a      	ldr	r2, [r3, #32]
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	441a      	add	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	015a      	lsls	r2, r3, #5
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	4413      	add	r3, r2
 8003cd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003cd8:	69ba      	ldr	r2, [r7, #24]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d809      	bhi.n	8003cf2 <PCD_WriteEmptyTxFifo+0xe0>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6a1a      	ldr	r2, [r3, #32]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d203      	bcs.n	8003cf2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1be      	bne.n	8003c70 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	699a      	ldr	r2, [r3, #24]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6a1b      	ldr	r3, [r3, #32]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d811      	bhi.n	8003d22 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	f003 030f 	and.w	r3, r3, #15
 8003d04:	2201      	movs	r2, #1
 8003d06:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	43db      	mvns	r3, r3
 8003d18:	6939      	ldr	r1, [r7, #16]
 8003d1a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003d1e:	4013      	ands	r3, r2
 8003d20:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003d22:	2300      	movs	r3, #0
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3720      	adds	r7, #32
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b088      	sub	sp, #32
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	333c      	adds	r3, #60	@ 0x3c
 8003d44:	3304      	adds	r3, #4
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	015a      	lsls	r2, r3, #5
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	4413      	add	r3, r2
 8003d52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d17b      	bne.n	8003e5a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	f003 0308 	and.w	r3, r3, #8
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d015      	beq.n	8003d98 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	4a61      	ldr	r2, [pc, #388]	@ (8003ef4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	f240 80b9 	bls.w	8003ee8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f000 80b3 	beq.w	8003ee8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	015a      	lsls	r2, r3, #5
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	4413      	add	r3, r2
 8003d8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d8e:	461a      	mov	r2, r3
 8003d90:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d94:	6093      	str	r3, [r2, #8]
 8003d96:	e0a7      	b.n	8003ee8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	f003 0320 	and.w	r3, r3, #32
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d009      	beq.n	8003db6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	015a      	lsls	r2, r3, #5
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	4413      	add	r3, r2
 8003daa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dae:	461a      	mov	r2, r3
 8003db0:	2320      	movs	r3, #32
 8003db2:	6093      	str	r3, [r2, #8]
 8003db4:	e098      	b.n	8003ee8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f040 8093 	bne.w	8003ee8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	4a4b      	ldr	r2, [pc, #300]	@ (8003ef4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d90f      	bls.n	8003dea <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d00a      	beq.n	8003dea <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	015a      	lsls	r2, r3, #5
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	4413      	add	r3, r2
 8003ddc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003de0:	461a      	mov	r2, r3
 8003de2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003de6:	6093      	str	r3, [r2, #8]
 8003de8:	e07e      	b.n	8003ee8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003dea:	683a      	ldr	r2, [r7, #0]
 8003dec:	4613      	mov	r3, r2
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	4413      	add	r3, r2
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	3304      	adds	r3, #4
 8003dfe:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	69da      	ldr	r2, [r3, #28]
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	0159      	lsls	r1, r3, #5
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	440b      	add	r3, r1
 8003e0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e16:	1ad2      	subs	r2, r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d114      	bne.n	8003e4c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d109      	bne.n	8003e3e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6818      	ldr	r0, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003e34:	461a      	mov	r2, r3
 8003e36:	2101      	movs	r1, #1
 8003e38:	f002 fb4a 	bl	80064d0 <USB_EP0_OutStart>
 8003e3c:	e006      	b.n	8003e4c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	691a      	ldr	r2, [r3, #16]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6a1b      	ldr	r3, [r3, #32]
 8003e46:	441a      	add	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	4619      	mov	r1, r3
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f004 fde6 	bl	8008a24 <HAL_PCD_DataOutStageCallback>
 8003e58:	e046      	b.n	8003ee8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	4a26      	ldr	r2, [pc, #152]	@ (8003ef8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d124      	bne.n	8003eac <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d00a      	beq.n	8003e82 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	015a      	lsls	r2, r3, #5
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	4413      	add	r3, r2
 8003e74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e78:	461a      	mov	r2, r3
 8003e7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e7e:	6093      	str	r3, [r2, #8]
 8003e80:	e032      	b.n	8003ee8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	f003 0320 	and.w	r3, r3, #32
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d008      	beq.n	8003e9e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	015a      	lsls	r2, r3, #5
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	4413      	add	r3, r2
 8003e94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e98:	461a      	mov	r2, r3
 8003e9a:	2320      	movs	r3, #32
 8003e9c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f004 fdbd 	bl	8008a24 <HAL_PCD_DataOutStageCallback>
 8003eaa:	e01d      	b.n	8003ee8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d114      	bne.n	8003edc <PCD_EP_OutXfrComplete_int+0x1b0>
 8003eb2:	6879      	ldr	r1, [r7, #4]
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	00db      	lsls	r3, r3, #3
 8003eba:	4413      	add	r3, r2
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	440b      	add	r3, r1
 8003ec0:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d108      	bne.n	8003edc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6818      	ldr	r0, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	f002 fafa 	bl	80064d0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f004 fd9e 	bl	8008a24 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3720      	adds	r7, #32
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	4f54300a 	.word	0x4f54300a
 8003ef8:	4f54310a 	.word	0x4f54310a

08003efc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b086      	sub	sp, #24
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	333c      	adds	r3, #60	@ 0x3c
 8003f14:	3304      	adds	r3, #4
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	015a      	lsls	r2, r3, #5
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	4413      	add	r3, r2
 8003f22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	4a15      	ldr	r2, [pc, #84]	@ (8003f84 <PCD_EP_OutSetupPacket_int+0x88>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d90e      	bls.n	8003f50 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d009      	beq.n	8003f50 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	015a      	lsls	r2, r3, #5
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	4413      	add	r3, r2
 8003f44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f48:	461a      	mov	r2, r3
 8003f4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f4e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f004 fd55 	bl	8008a00 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	4a0a      	ldr	r2, [pc, #40]	@ (8003f84 <PCD_EP_OutSetupPacket_int+0x88>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d90c      	bls.n	8003f78 <PCD_EP_OutSetupPacket_int+0x7c>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d108      	bne.n	8003f78 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6818      	ldr	r0, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003f70:	461a      	mov	r2, r3
 8003f72:	2101      	movs	r1, #1
 8003f74:	f002 faac 	bl	80064d0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3718      	adds	r7, #24
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	4f54300a 	.word	0x4f54300a

08003f88 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	460b      	mov	r3, r1
 8003f92:	70fb      	strb	r3, [r7, #3]
 8003f94:	4613      	mov	r3, r2
 8003f96:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003fa0:	78fb      	ldrb	r3, [r7, #3]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d107      	bne.n	8003fb6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003fa6:	883b      	ldrh	r3, [r7, #0]
 8003fa8:	0419      	lsls	r1, r3, #16
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68ba      	ldr	r2, [r7, #8]
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	629a      	str	r2, [r3, #40]	@ 0x28
 8003fb4:	e028      	b.n	8004008 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fbc:	0c1b      	lsrs	r3, r3, #16
 8003fbe:	68ba      	ldr	r2, [r7, #8]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	73fb      	strb	r3, [r7, #15]
 8003fc8:	e00d      	b.n	8003fe6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	7bfb      	ldrb	r3, [r7, #15]
 8003fd0:	3340      	adds	r3, #64	@ 0x40
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	4413      	add	r3, r2
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	0c1b      	lsrs	r3, r3, #16
 8003fda:	68ba      	ldr	r2, [r7, #8]
 8003fdc:	4413      	add	r3, r2
 8003fde:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003fe0:	7bfb      	ldrb	r3, [r7, #15]
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	73fb      	strb	r3, [r7, #15]
 8003fe6:	7bfa      	ldrb	r2, [r7, #15]
 8003fe8:	78fb      	ldrb	r3, [r7, #3]
 8003fea:	3b01      	subs	r3, #1
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d3ec      	bcc.n	8003fca <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003ff0:	883b      	ldrh	r3, [r7, #0]
 8003ff2:	0418      	lsls	r0, r3, #16
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6819      	ldr	r1, [r3, #0]
 8003ff8:	78fb      	ldrb	r3, [r7, #3]
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	68ba      	ldr	r2, [r7, #8]
 8003ffe:	4302      	orrs	r2, r0
 8004000:	3340      	adds	r3, #64	@ 0x40
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	440b      	add	r3, r1
 8004006:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3714      	adds	r7, #20
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr

08004016 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004016:	b480      	push	{r7}
 8004018:	b083      	sub	sp, #12
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
 800401e:	460b      	mov	r3, r1
 8004020:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	887a      	ldrh	r2, [r7, #2]
 8004028:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800402a:	2300      	movs	r3, #0
}
 800402c:	4618      	mov	r0, r3
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004038:	b480      	push	{r7}
 800403a:	b085      	sub	sp, #20
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2201      	movs	r2, #1
 800404a:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004066:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800406a:	f043 0303 	orr.w	r3, r3, #3
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004072:	2300      	movs	r3, #0
}
 8004074:	4618      	mov	r0, r3
 8004076:	3714      	adds	r7, #20
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d101      	bne.n	8004094 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e0cc      	b.n	800422e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004094:	4b68      	ldr	r3, [pc, #416]	@ (8004238 <HAL_RCC_ClockConfig+0x1b8>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0307 	and.w	r3, r3, #7
 800409c:	683a      	ldr	r2, [r7, #0]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d90c      	bls.n	80040bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040a2:	4b65      	ldr	r3, [pc, #404]	@ (8004238 <HAL_RCC_ClockConfig+0x1b8>)
 80040a4:	683a      	ldr	r2, [r7, #0]
 80040a6:	b2d2      	uxtb	r2, r2
 80040a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040aa:	4b63      	ldr	r3, [pc, #396]	@ (8004238 <HAL_RCC_ClockConfig+0x1b8>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0307 	and.w	r3, r3, #7
 80040b2:	683a      	ldr	r2, [r7, #0]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d001      	beq.n	80040bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e0b8      	b.n	800422e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d020      	beq.n	800410a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0304 	and.w	r3, r3, #4
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d005      	beq.n	80040e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040d4:	4b59      	ldr	r3, [pc, #356]	@ (800423c <HAL_RCC_ClockConfig+0x1bc>)
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	4a58      	ldr	r2, [pc, #352]	@ (800423c <HAL_RCC_ClockConfig+0x1bc>)
 80040da:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80040de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0308 	and.w	r3, r3, #8
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d005      	beq.n	80040f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040ec:	4b53      	ldr	r3, [pc, #332]	@ (800423c <HAL_RCC_ClockConfig+0x1bc>)
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	4a52      	ldr	r2, [pc, #328]	@ (800423c <HAL_RCC_ClockConfig+0x1bc>)
 80040f2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80040f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040f8:	4b50      	ldr	r3, [pc, #320]	@ (800423c <HAL_RCC_ClockConfig+0x1bc>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	494d      	ldr	r1, [pc, #308]	@ (800423c <HAL_RCC_ClockConfig+0x1bc>)
 8004106:	4313      	orrs	r3, r2
 8004108:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	2b00      	cmp	r3, #0
 8004114:	d044      	beq.n	80041a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d107      	bne.n	800412e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800411e:	4b47      	ldr	r3, [pc, #284]	@ (800423c <HAL_RCC_ClockConfig+0x1bc>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d119      	bne.n	800415e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e07f      	b.n	800422e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	2b02      	cmp	r3, #2
 8004134:	d003      	beq.n	800413e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800413a:	2b03      	cmp	r3, #3
 800413c:	d107      	bne.n	800414e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800413e:	4b3f      	ldr	r3, [pc, #252]	@ (800423c <HAL_RCC_ClockConfig+0x1bc>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d109      	bne.n	800415e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e06f      	b.n	800422e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800414e:	4b3b      	ldr	r3, [pc, #236]	@ (800423c <HAL_RCC_ClockConfig+0x1bc>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d101      	bne.n	800415e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e067      	b.n	800422e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800415e:	4b37      	ldr	r3, [pc, #220]	@ (800423c <HAL_RCC_ClockConfig+0x1bc>)
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f023 0203 	bic.w	r2, r3, #3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	4934      	ldr	r1, [pc, #208]	@ (800423c <HAL_RCC_ClockConfig+0x1bc>)
 800416c:	4313      	orrs	r3, r2
 800416e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004170:	f7fc ff82 	bl	8001078 <HAL_GetTick>
 8004174:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004176:	e00a      	b.n	800418e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004178:	f7fc ff7e 	bl	8001078 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004186:	4293      	cmp	r3, r2
 8004188:	d901      	bls.n	800418e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e04f      	b.n	800422e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800418e:	4b2b      	ldr	r3, [pc, #172]	@ (800423c <HAL_RCC_ClockConfig+0x1bc>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f003 020c 	and.w	r2, r3, #12
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	429a      	cmp	r2, r3
 800419e:	d1eb      	bne.n	8004178 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041a0:	4b25      	ldr	r3, [pc, #148]	@ (8004238 <HAL_RCC_ClockConfig+0x1b8>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0307 	and.w	r3, r3, #7
 80041a8:	683a      	ldr	r2, [r7, #0]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d20c      	bcs.n	80041c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ae:	4b22      	ldr	r3, [pc, #136]	@ (8004238 <HAL_RCC_ClockConfig+0x1b8>)
 80041b0:	683a      	ldr	r2, [r7, #0]
 80041b2:	b2d2      	uxtb	r2, r2
 80041b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041b6:	4b20      	ldr	r3, [pc, #128]	@ (8004238 <HAL_RCC_ClockConfig+0x1b8>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0307 	and.w	r3, r3, #7
 80041be:	683a      	ldr	r2, [r7, #0]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d001      	beq.n	80041c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e032      	b.n	800422e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0304 	and.w	r3, r3, #4
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d008      	beq.n	80041e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041d4:	4b19      	ldr	r3, [pc, #100]	@ (800423c <HAL_RCC_ClockConfig+0x1bc>)
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	4916      	ldr	r1, [pc, #88]	@ (800423c <HAL_RCC_ClockConfig+0x1bc>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0308 	and.w	r3, r3, #8
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d009      	beq.n	8004206 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041f2:	4b12      	ldr	r3, [pc, #72]	@ (800423c <HAL_RCC_ClockConfig+0x1bc>)
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	00db      	lsls	r3, r3, #3
 8004200:	490e      	ldr	r1, [pc, #56]	@ (800423c <HAL_RCC_ClockConfig+0x1bc>)
 8004202:	4313      	orrs	r3, r2
 8004204:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004206:	f000 f82d 	bl	8004264 <HAL_RCC_GetSysClockFreq>
 800420a:	4602      	mov	r2, r0
 800420c:	4b0b      	ldr	r3, [pc, #44]	@ (800423c <HAL_RCC_ClockConfig+0x1bc>)
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	091b      	lsrs	r3, r3, #4
 8004212:	f003 030f 	and.w	r3, r3, #15
 8004216:	490a      	ldr	r1, [pc, #40]	@ (8004240 <HAL_RCC_ClockConfig+0x1c0>)
 8004218:	5ccb      	ldrb	r3, [r1, r3]
 800421a:	fa22 f303 	lsr.w	r3, r2, r3
 800421e:	4a09      	ldr	r2, [pc, #36]	@ (8004244 <HAL_RCC_ClockConfig+0x1c4>)
 8004220:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004222:	4b09      	ldr	r3, [pc, #36]	@ (8004248 <HAL_RCC_ClockConfig+0x1c8>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4618      	mov	r0, r3
 8004228:	f7fc fee2 	bl	8000ff0 <HAL_InitTick>

  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3710      	adds	r7, #16
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	40023c00 	.word	0x40023c00
 800423c:	40023800 	.word	0x40023800
 8004240:	080091a8 	.word	0x080091a8
 8004244:	20000000 	.word	0x20000000
 8004248:	20000004 	.word	0x20000004

0800424c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800424c:	b480      	push	{r7}
 800424e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8004250:	4b03      	ldr	r3, [pc, #12]	@ (8004260 <HAL_RCC_EnableCSS+0x14>)
 8004252:	2201      	movs	r2, #1
 8004254:	601a      	str	r2, [r3, #0]
}
 8004256:	bf00      	nop
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr
 8004260:	4247004c 	.word	0x4247004c

08004264 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004264:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004268:	b094      	sub	sp, #80	@ 0x50
 800426a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800426c:	2300      	movs	r3, #0
 800426e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004270:	2300      	movs	r3, #0
 8004272:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004274:	2300      	movs	r3, #0
 8004276:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004278:	2300      	movs	r3, #0
 800427a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800427c:	4b79      	ldr	r3, [pc, #484]	@ (8004464 <HAL_RCC_GetSysClockFreq+0x200>)
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f003 030c 	and.w	r3, r3, #12
 8004284:	2b08      	cmp	r3, #8
 8004286:	d00d      	beq.n	80042a4 <HAL_RCC_GetSysClockFreq+0x40>
 8004288:	2b08      	cmp	r3, #8
 800428a:	f200 80e1 	bhi.w	8004450 <HAL_RCC_GetSysClockFreq+0x1ec>
 800428e:	2b00      	cmp	r3, #0
 8004290:	d002      	beq.n	8004298 <HAL_RCC_GetSysClockFreq+0x34>
 8004292:	2b04      	cmp	r3, #4
 8004294:	d003      	beq.n	800429e <HAL_RCC_GetSysClockFreq+0x3a>
 8004296:	e0db      	b.n	8004450 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004298:	4b73      	ldr	r3, [pc, #460]	@ (8004468 <HAL_RCC_GetSysClockFreq+0x204>)
 800429a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800429c:	e0db      	b.n	8004456 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800429e:	4b73      	ldr	r3, [pc, #460]	@ (800446c <HAL_RCC_GetSysClockFreq+0x208>)
 80042a0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80042a2:	e0d8      	b.n	8004456 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042a4:	4b6f      	ldr	r3, [pc, #444]	@ (8004464 <HAL_RCC_GetSysClockFreq+0x200>)
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80042ac:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042ae:	4b6d      	ldr	r3, [pc, #436]	@ (8004464 <HAL_RCC_GetSysClockFreq+0x200>)
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d063      	beq.n	8004382 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042ba:	4b6a      	ldr	r3, [pc, #424]	@ (8004464 <HAL_RCC_GetSysClockFreq+0x200>)
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	099b      	lsrs	r3, r3, #6
 80042c0:	2200      	movs	r2, #0
 80042c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80042c4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80042c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80042ce:	2300      	movs	r3, #0
 80042d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80042d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80042d6:	4622      	mov	r2, r4
 80042d8:	462b      	mov	r3, r5
 80042da:	f04f 0000 	mov.w	r0, #0
 80042de:	f04f 0100 	mov.w	r1, #0
 80042e2:	0159      	lsls	r1, r3, #5
 80042e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042e8:	0150      	lsls	r0, r2, #5
 80042ea:	4602      	mov	r2, r0
 80042ec:	460b      	mov	r3, r1
 80042ee:	4621      	mov	r1, r4
 80042f0:	1a51      	subs	r1, r2, r1
 80042f2:	6139      	str	r1, [r7, #16]
 80042f4:	4629      	mov	r1, r5
 80042f6:	eb63 0301 	sbc.w	r3, r3, r1
 80042fa:	617b      	str	r3, [r7, #20]
 80042fc:	f04f 0200 	mov.w	r2, #0
 8004300:	f04f 0300 	mov.w	r3, #0
 8004304:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004308:	4659      	mov	r1, fp
 800430a:	018b      	lsls	r3, r1, #6
 800430c:	4651      	mov	r1, sl
 800430e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004312:	4651      	mov	r1, sl
 8004314:	018a      	lsls	r2, r1, #6
 8004316:	4651      	mov	r1, sl
 8004318:	ebb2 0801 	subs.w	r8, r2, r1
 800431c:	4659      	mov	r1, fp
 800431e:	eb63 0901 	sbc.w	r9, r3, r1
 8004322:	f04f 0200 	mov.w	r2, #0
 8004326:	f04f 0300 	mov.w	r3, #0
 800432a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800432e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004332:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004336:	4690      	mov	r8, r2
 8004338:	4699      	mov	r9, r3
 800433a:	4623      	mov	r3, r4
 800433c:	eb18 0303 	adds.w	r3, r8, r3
 8004340:	60bb      	str	r3, [r7, #8]
 8004342:	462b      	mov	r3, r5
 8004344:	eb49 0303 	adc.w	r3, r9, r3
 8004348:	60fb      	str	r3, [r7, #12]
 800434a:	f04f 0200 	mov.w	r2, #0
 800434e:	f04f 0300 	mov.w	r3, #0
 8004352:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004356:	4629      	mov	r1, r5
 8004358:	024b      	lsls	r3, r1, #9
 800435a:	4621      	mov	r1, r4
 800435c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004360:	4621      	mov	r1, r4
 8004362:	024a      	lsls	r2, r1, #9
 8004364:	4610      	mov	r0, r2
 8004366:	4619      	mov	r1, r3
 8004368:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800436a:	2200      	movs	r2, #0
 800436c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800436e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004370:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004374:	f7fb ff4e 	bl	8000214 <__aeabi_uldivmod>
 8004378:	4602      	mov	r2, r0
 800437a:	460b      	mov	r3, r1
 800437c:	4613      	mov	r3, r2
 800437e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004380:	e058      	b.n	8004434 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004382:	4b38      	ldr	r3, [pc, #224]	@ (8004464 <HAL_RCC_GetSysClockFreq+0x200>)
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	099b      	lsrs	r3, r3, #6
 8004388:	2200      	movs	r2, #0
 800438a:	4618      	mov	r0, r3
 800438c:	4611      	mov	r1, r2
 800438e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004392:	623b      	str	r3, [r7, #32]
 8004394:	2300      	movs	r3, #0
 8004396:	627b      	str	r3, [r7, #36]	@ 0x24
 8004398:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800439c:	4642      	mov	r2, r8
 800439e:	464b      	mov	r3, r9
 80043a0:	f04f 0000 	mov.w	r0, #0
 80043a4:	f04f 0100 	mov.w	r1, #0
 80043a8:	0159      	lsls	r1, r3, #5
 80043aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043ae:	0150      	lsls	r0, r2, #5
 80043b0:	4602      	mov	r2, r0
 80043b2:	460b      	mov	r3, r1
 80043b4:	4641      	mov	r1, r8
 80043b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80043ba:	4649      	mov	r1, r9
 80043bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80043c0:	f04f 0200 	mov.w	r2, #0
 80043c4:	f04f 0300 	mov.w	r3, #0
 80043c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80043cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80043d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80043d4:	ebb2 040a 	subs.w	r4, r2, sl
 80043d8:	eb63 050b 	sbc.w	r5, r3, fp
 80043dc:	f04f 0200 	mov.w	r2, #0
 80043e0:	f04f 0300 	mov.w	r3, #0
 80043e4:	00eb      	lsls	r3, r5, #3
 80043e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043ea:	00e2      	lsls	r2, r4, #3
 80043ec:	4614      	mov	r4, r2
 80043ee:	461d      	mov	r5, r3
 80043f0:	4643      	mov	r3, r8
 80043f2:	18e3      	adds	r3, r4, r3
 80043f4:	603b      	str	r3, [r7, #0]
 80043f6:	464b      	mov	r3, r9
 80043f8:	eb45 0303 	adc.w	r3, r5, r3
 80043fc:	607b      	str	r3, [r7, #4]
 80043fe:	f04f 0200 	mov.w	r2, #0
 8004402:	f04f 0300 	mov.w	r3, #0
 8004406:	e9d7 4500 	ldrd	r4, r5, [r7]
 800440a:	4629      	mov	r1, r5
 800440c:	028b      	lsls	r3, r1, #10
 800440e:	4621      	mov	r1, r4
 8004410:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004414:	4621      	mov	r1, r4
 8004416:	028a      	lsls	r2, r1, #10
 8004418:	4610      	mov	r0, r2
 800441a:	4619      	mov	r1, r3
 800441c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800441e:	2200      	movs	r2, #0
 8004420:	61bb      	str	r3, [r7, #24]
 8004422:	61fa      	str	r2, [r7, #28]
 8004424:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004428:	f7fb fef4 	bl	8000214 <__aeabi_uldivmod>
 800442c:	4602      	mov	r2, r0
 800442e:	460b      	mov	r3, r1
 8004430:	4613      	mov	r3, r2
 8004432:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004434:	4b0b      	ldr	r3, [pc, #44]	@ (8004464 <HAL_RCC_GetSysClockFreq+0x200>)
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	0c1b      	lsrs	r3, r3, #16
 800443a:	f003 0303 	and.w	r3, r3, #3
 800443e:	3301      	adds	r3, #1
 8004440:	005b      	lsls	r3, r3, #1
 8004442:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004444:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004446:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004448:	fbb2 f3f3 	udiv	r3, r2, r3
 800444c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800444e:	e002      	b.n	8004456 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004450:	4b05      	ldr	r3, [pc, #20]	@ (8004468 <HAL_RCC_GetSysClockFreq+0x204>)
 8004452:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004454:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004456:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004458:	4618      	mov	r0, r3
 800445a:	3750      	adds	r7, #80	@ 0x50
 800445c:	46bd      	mov	sp, r7
 800445e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004462:	bf00      	nop
 8004464:	40023800 	.word	0x40023800
 8004468:	00f42400 	.word	0x00f42400
 800446c:	007a1200 	.word	0x007a1200

08004470 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004470:	b480      	push	{r7}
 8004472:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004474:	4b03      	ldr	r3, [pc, #12]	@ (8004484 <HAL_RCC_GetHCLKFreq+0x14>)
 8004476:	681b      	ldr	r3, [r3, #0]
}
 8004478:	4618      	mov	r0, r3
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	20000000 	.word	0x20000000

08004488 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800448c:	4b06      	ldr	r3, [pc, #24]	@ (80044a8 <HAL_RCC_NMI_IRQHandler+0x20>)
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004494:	2b80      	cmp	r3, #128	@ 0x80
 8004496:	d104      	bne.n	80044a2 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8004498:	f000 f80a 	bl	80044b0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800449c:	4b03      	ldr	r3, [pc, #12]	@ (80044ac <HAL_RCC_NMI_IRQHandler+0x24>)
 800449e:	2280      	movs	r2, #128	@ 0x80
 80044a0:	701a      	strb	r2, [r3, #0]
  }
}
 80044a2:	bf00      	nop
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	40023800 	.word	0x40023800
 80044ac:	4002380e 	.word	0x4002380e

080044b0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80044b0:	b480      	push	{r7}
 80044b2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80044b4:	bf00      	nop
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
	...

080044c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044c8:	2300      	movs	r3, #0
 80044ca:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0U;
 80044cc:	2300      	movs	r3, #0
 80044ce:	60fb      	str	r3, [r7, #12]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 80044d0:	2300      	movs	r3, #0
 80044d2:	617b      	str	r3, [r7, #20]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0301 	and.w	r3, r3, #1
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d010      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80044e0:	4b87      	ldr	r3, [pc, #540]	@ (8004700 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80044e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044e6:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	4984      	ldr	r1, [pc, #528]	@ (8004700 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d101      	bne.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      plli2sused = 1U;
 80044fe:	2301      	movs	r3, #1
 8004500:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d010      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800450e:	4b7c      	ldr	r3, [pc, #496]	@ (8004700 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004510:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004514:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	4978      	ldr	r1, [pc, #480]	@ (8004700 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800451e:	4313      	orrs	r3, r2
 8004520:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d101      	bne.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x70>
    {
      plli2sused = 1U;
 800452c:	2301      	movs	r3, #1
 800452e:	617b      	str	r3, [r7, #20]
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0308 	and.w	r3, r3, #8
 8004538:	2b00      	cmp	r3, #0
 800453a:	f000 8083 	beq.w	8004644 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800453e:	2300      	movs	r3, #0
 8004540:	60bb      	str	r3, [r7, #8]
 8004542:	4b6f      	ldr	r3, [pc, #444]	@ (8004700 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004546:	4a6e      	ldr	r2, [pc, #440]	@ (8004700 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004548:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800454c:	6413      	str	r3, [r2, #64]	@ 0x40
 800454e:	4b6c      	ldr	r3, [pc, #432]	@ (8004700 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004552:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004556:	60bb      	str	r3, [r7, #8]
 8004558:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800455a:	4b6a      	ldr	r3, [pc, #424]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a69      	ldr	r2, [pc, #420]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004560:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004564:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004566:	f7fc fd87 	bl	8001078 <HAL_GetTick>
 800456a:	6138      	str	r0, [r7, #16]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800456c:	e008      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800456e:	f7fc fd83 	bl	8001078 <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	2b02      	cmp	r3, #2
 800457a:	d901      	bls.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e162      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x386>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004580:	4b60      	ldr	r3, [pc, #384]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004588:	2b00      	cmp	r3, #0
 800458a:	d0f0      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0xae>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800458c:	4b5c      	ldr	r3, [pc, #368]	@ (8004700 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800458e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004590:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004594:	60fb      	str	r3, [r7, #12]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d02f      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	69db      	ldr	r3, [r3, #28]
 80045a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d028      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045aa:	4b55      	ldr	r3, [pc, #340]	@ (8004700 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80045ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045b2:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045b4:	4b54      	ldr	r3, [pc, #336]	@ (8004708 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80045b6:	2201      	movs	r2, #1
 80045b8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045ba:	4b53      	ldr	r3, [pc, #332]	@ (8004708 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80045bc:	2200      	movs	r2, #0
 80045be:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80045c0:	4a4f      	ldr	r2, [pc, #316]	@ (8004700 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80045c6:	4b4e      	ldr	r3, [pc, #312]	@ (8004700 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80045c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d114      	bne.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80045d2:	f7fc fd51 	bl	8001078 <HAL_GetTick>
 80045d6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d8:	e00a      	b.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045da:	f7fc fd4d 	bl	8001078 <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d901      	bls.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x130>
          {
            return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e12a      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x386>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045f0:	4b43      	ldr	r3, [pc, #268]	@ (8004700 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80045f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045f4:	f003 0302 	and.w	r3, r3, #2
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d0ee      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x11a>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	69db      	ldr	r3, [r3, #28]
 8004600:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004604:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004608:	d10d      	bne.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x166>
 800460a:	4b3d      	ldr	r3, [pc, #244]	@ (8004700 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	69db      	ldr	r3, [r3, #28]
 8004616:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800461a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800461e:	4938      	ldr	r1, [pc, #224]	@ (8004700 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004620:	4313      	orrs	r3, r2
 8004622:	608b      	str	r3, [r1, #8]
 8004624:	e005      	b.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8004626:	4b36      	ldr	r3, [pc, #216]	@ (8004700 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	4a35      	ldr	r2, [pc, #212]	@ (8004700 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800462c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004630:	6093      	str	r3, [r2, #8]
 8004632:	4b33      	ldr	r3, [pc, #204]	@ (8004700 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004634:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	69db      	ldr	r3, [r3, #28]
 800463a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800463e:	4930      	ldr	r1, [pc, #192]	@ (8004700 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004640:	4313      	orrs	r3, r2
 8004642:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0304 	and.w	r3, r3, #4
 800464c:	2b00      	cmp	r3, #0
 800464e:	d004      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8004656:	4b2d      	ldr	r3, [pc, #180]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004658:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0310 	and.w	r3, r3, #16
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00a      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004666:	4b26      	ldr	r3, [pc, #152]	@ (8004700 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004668:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800466c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004674:	4922      	ldr	r1, [pc, #136]	@ (8004700 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004676:	4313      	orrs	r3, r2
 8004678:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0320 	and.w	r3, r3, #32
 8004684:	2b00      	cmp	r3, #0
 8004686:	d011      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004688:	4b1d      	ldr	r3, [pc, #116]	@ (8004700 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800468a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800468e:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004696:	491a      	ldr	r1, [pc, #104]	@ (8004700 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004698:	4313      	orrs	r3, r2
 800469a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046a6:	d101      	bne.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      plli2sused = 1U;
 80046a8:	2301      	movs	r3, #1
 80046aa:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d00a      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80046b8:	4b11      	ldr	r3, [pc, #68]	@ (8004700 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046be:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a1b      	ldr	r3, [r3, #32]
 80046c6:	490e      	ldr	r1, [pc, #56]	@ (8004700 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d004      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2b80      	cmp	r3, #128	@ 0x80
 80046da:	f040 8091 	bne.w	8004800 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80046de:	4b0c      	ldr	r3, [pc, #48]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80046e0:	2200      	movs	r2, #0
 80046e2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80046e4:	f7fc fcc8 	bl	8001078 <HAL_GetTick>
 80046e8:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046ea:	e013      	b.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80046ec:	f7fc fcc4 	bl	8001078 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d90c      	bls.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x254>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e0a3      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x386>
 80046fe:	bf00      	nop
 8004700:	40023800 	.word	0x40023800
 8004704:	40007000 	.word	0x40007000
 8004708:	42470e40 	.word	0x42470e40
 800470c:	424711e0 	.word	0x424711e0
 8004710:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004714:	4b4e      	ldr	r3, [pc, #312]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d1e5      	bne.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x22c>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8004720:	4a4c      	ldr	r2, [pc, #304]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004726:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0301 	and.w	r3, r3, #1
 8004730:	2b00      	cmp	r3, #0
 8004732:	d003      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	695b      	ldr	r3, [r3, #20]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d023      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004744:	2b00      	cmp	r3, #0
 8004746:	d003      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x290>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	699b      	ldr	r3, [r3, #24]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d019      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004758:	2b00      	cmp	r3, #0
 800475a:	d004      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004760:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004764:	d00e      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 800476e:	2b00      	cmp	r3, #0
 8004770:	d019      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a1b      	ldr	r3, [r3, #32]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d115      	bne.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800477e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004782:	d110      	bne.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685a      	ldr	r2, [r3, #4]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	019b      	lsls	r3, r3, #6
 800478e:	431a      	orrs	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	061b      	lsls	r3, r3, #24
 8004796:	431a      	orrs	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	071b      	lsls	r3, r3, #28
 800479e:	492c      	ldr	r1, [pc, #176]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d010      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x314>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685a      	ldr	r2, [r3, #4]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	019b      	lsls	r3, r3, #6
 80047bc:	431a      	orrs	r2, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	061b      	lsls	r3, r3, #24
 80047c4:	431a      	orrs	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	071b      	lsls	r3, r3, #28
 80047cc:	4920      	ldr	r1, [pc, #128]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80047d4:	4b20      	ldr	r3, [pc, #128]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 80047d6:	2201      	movs	r2, #1
 80047d8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80047da:	f7fc fc4d 	bl	8001078 <HAL_GetTick>
 80047de:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80047e0:	e008      	b.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80047e2:	f7fc fc49 	bl	8001078 <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d901      	bls.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x334>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e028      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x386>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80047f4:	4b16      	ldr	r3, [pc, #88]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d0f0      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x322>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004808:	2b00      	cmp	r3, #0
 800480a:	d00a      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800480c:	4b10      	ldr	r3, [pc, #64]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800480e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004812:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800481a:	490d      	ldr	r1, [pc, #52]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800481c:	4313      	orrs	r3, r2
 800481e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00a      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800482e:	4b08      	ldr	r3, [pc, #32]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004830:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004834:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800483c:	4904      	ldr	r1, [pc, #16]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800483e:	4313      	orrs	r3, r2
 8004840:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3718      	adds	r7, #24
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	40023800 	.word	0x40023800
 8004854:	424710d8 	.word	0x424710d8
 8004858:	42470068 	.word	0x42470068

0800485c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b086      	sub	sp, #24
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d101      	bne.n	800486e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e273      	b.n	8004d56 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0301 	and.w	r3, r3, #1
 8004876:	2b00      	cmp	r3, #0
 8004878:	d075      	beq.n	8004966 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800487a:	4b88      	ldr	r3, [pc, #544]	@ (8004a9c <HAL_RCC_OscConfig+0x240>)
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f003 030c 	and.w	r3, r3, #12
 8004882:	2b04      	cmp	r3, #4
 8004884:	d00c      	beq.n	80048a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004886:	4b85      	ldr	r3, [pc, #532]	@ (8004a9c <HAL_RCC_OscConfig+0x240>)
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800488e:	2b08      	cmp	r3, #8
 8004890:	d112      	bne.n	80048b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004892:	4b82      	ldr	r3, [pc, #520]	@ (8004a9c <HAL_RCC_OscConfig+0x240>)
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800489a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800489e:	d10b      	bne.n	80048b8 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048a0:	4b7e      	ldr	r3, [pc, #504]	@ (8004a9c <HAL_RCC_OscConfig+0x240>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d05b      	beq.n	8004964 <HAL_RCC_OscConfig+0x108>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d157      	bne.n	8004964 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e24e      	b.n	8004d56 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048c0:	d106      	bne.n	80048d0 <HAL_RCC_OscConfig+0x74>
 80048c2:	4b76      	ldr	r3, [pc, #472]	@ (8004a9c <HAL_RCC_OscConfig+0x240>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a75      	ldr	r2, [pc, #468]	@ (8004a9c <HAL_RCC_OscConfig+0x240>)
 80048c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048cc:	6013      	str	r3, [r2, #0]
 80048ce:	e01d      	b.n	800490c <HAL_RCC_OscConfig+0xb0>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80048d8:	d10c      	bne.n	80048f4 <HAL_RCC_OscConfig+0x98>
 80048da:	4b70      	ldr	r3, [pc, #448]	@ (8004a9c <HAL_RCC_OscConfig+0x240>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a6f      	ldr	r2, [pc, #444]	@ (8004a9c <HAL_RCC_OscConfig+0x240>)
 80048e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80048e4:	6013      	str	r3, [r2, #0]
 80048e6:	4b6d      	ldr	r3, [pc, #436]	@ (8004a9c <HAL_RCC_OscConfig+0x240>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a6c      	ldr	r2, [pc, #432]	@ (8004a9c <HAL_RCC_OscConfig+0x240>)
 80048ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048f0:	6013      	str	r3, [r2, #0]
 80048f2:	e00b      	b.n	800490c <HAL_RCC_OscConfig+0xb0>
 80048f4:	4b69      	ldr	r3, [pc, #420]	@ (8004a9c <HAL_RCC_OscConfig+0x240>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a68      	ldr	r2, [pc, #416]	@ (8004a9c <HAL_RCC_OscConfig+0x240>)
 80048fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048fe:	6013      	str	r3, [r2, #0]
 8004900:	4b66      	ldr	r3, [pc, #408]	@ (8004a9c <HAL_RCC_OscConfig+0x240>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a65      	ldr	r2, [pc, #404]	@ (8004a9c <HAL_RCC_OscConfig+0x240>)
 8004906:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800490a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d013      	beq.n	800493c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004914:	f7fc fbb0 	bl	8001078 <HAL_GetTick>
 8004918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800491a:	e008      	b.n	800492e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800491c:	f7fc fbac 	bl	8001078 <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	2b64      	cmp	r3, #100	@ 0x64
 8004928:	d901      	bls.n	800492e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e213      	b.n	8004d56 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800492e:	4b5b      	ldr	r3, [pc, #364]	@ (8004a9c <HAL_RCC_OscConfig+0x240>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d0f0      	beq.n	800491c <HAL_RCC_OscConfig+0xc0>
 800493a:	e014      	b.n	8004966 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800493c:	f7fc fb9c 	bl	8001078 <HAL_GetTick>
 8004940:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004942:	e008      	b.n	8004956 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004944:	f7fc fb98 	bl	8001078 <HAL_GetTick>
 8004948:	4602      	mov	r2, r0
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	2b64      	cmp	r3, #100	@ 0x64
 8004950:	d901      	bls.n	8004956 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e1ff      	b.n	8004d56 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004956:	4b51      	ldr	r3, [pc, #324]	@ (8004a9c <HAL_RCC_OscConfig+0x240>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d1f0      	bne.n	8004944 <HAL_RCC_OscConfig+0xe8>
 8004962:	e000      	b.n	8004966 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004964:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d063      	beq.n	8004a3a <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004972:	4b4a      	ldr	r3, [pc, #296]	@ (8004a9c <HAL_RCC_OscConfig+0x240>)
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f003 030c 	and.w	r3, r3, #12
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00b      	beq.n	8004996 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800497e:	4b47      	ldr	r3, [pc, #284]	@ (8004a9c <HAL_RCC_OscConfig+0x240>)
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004986:	2b08      	cmp	r3, #8
 8004988:	d11c      	bne.n	80049c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800498a:	4b44      	ldr	r3, [pc, #272]	@ (8004a9c <HAL_RCC_OscConfig+0x240>)
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d116      	bne.n	80049c4 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004996:	4b41      	ldr	r3, [pc, #260]	@ (8004a9c <HAL_RCC_OscConfig+0x240>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0302 	and.w	r3, r3, #2
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d005      	beq.n	80049ae <HAL_RCC_OscConfig+0x152>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d001      	beq.n	80049ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e1d3      	b.n	8004d56 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049ae:	4b3b      	ldr	r3, [pc, #236]	@ (8004a9c <HAL_RCC_OscConfig+0x240>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	00db      	lsls	r3, r3, #3
 80049bc:	4937      	ldr	r1, [pc, #220]	@ (8004a9c <HAL_RCC_OscConfig+0x240>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049c2:	e03a      	b.n	8004a3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d020      	beq.n	8004a0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049cc:	4b34      	ldr	r3, [pc, #208]	@ (8004aa0 <HAL_RCC_OscConfig+0x244>)
 80049ce:	2201      	movs	r2, #1
 80049d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d2:	f7fc fb51 	bl	8001078 <HAL_GetTick>
 80049d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049d8:	e008      	b.n	80049ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049da:	f7fc fb4d 	bl	8001078 <HAL_GetTick>
 80049de:	4602      	mov	r2, r0
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d901      	bls.n	80049ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80049e8:	2303      	movs	r3, #3
 80049ea:	e1b4      	b.n	8004d56 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049ec:	4b2b      	ldr	r3, [pc, #172]	@ (8004a9c <HAL_RCC_OscConfig+0x240>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0302 	and.w	r3, r3, #2
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d0f0      	beq.n	80049da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049f8:	4b28      	ldr	r3, [pc, #160]	@ (8004a9c <HAL_RCC_OscConfig+0x240>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	00db      	lsls	r3, r3, #3
 8004a06:	4925      	ldr	r1, [pc, #148]	@ (8004a9c <HAL_RCC_OscConfig+0x240>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	600b      	str	r3, [r1, #0]
 8004a0c:	e015      	b.n	8004a3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a0e:	4b24      	ldr	r3, [pc, #144]	@ (8004aa0 <HAL_RCC_OscConfig+0x244>)
 8004a10:	2200      	movs	r2, #0
 8004a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a14:	f7fc fb30 	bl	8001078 <HAL_GetTick>
 8004a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a1a:	e008      	b.n	8004a2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a1c:	f7fc fb2c 	bl	8001078 <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e193      	b.n	8004d56 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a2e:	4b1b      	ldr	r3, [pc, #108]	@ (8004a9c <HAL_RCC_OscConfig+0x240>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0302 	and.w	r3, r3, #2
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1f0      	bne.n	8004a1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0308 	and.w	r3, r3, #8
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d036      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	695b      	ldr	r3, [r3, #20]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d016      	beq.n	8004a7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a4e:	4b15      	ldr	r3, [pc, #84]	@ (8004aa4 <HAL_RCC_OscConfig+0x248>)
 8004a50:	2201      	movs	r2, #1
 8004a52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a54:	f7fc fb10 	bl	8001078 <HAL_GetTick>
 8004a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a5a:	e008      	b.n	8004a6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a5c:	f7fc fb0c 	bl	8001078 <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d901      	bls.n	8004a6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e173      	b.n	8004d56 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a6e:	4b0b      	ldr	r3, [pc, #44]	@ (8004a9c <HAL_RCC_OscConfig+0x240>)
 8004a70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a72:	f003 0302 	and.w	r3, r3, #2
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d0f0      	beq.n	8004a5c <HAL_RCC_OscConfig+0x200>
 8004a7a:	e01b      	b.n	8004ab4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a7c:	4b09      	ldr	r3, [pc, #36]	@ (8004aa4 <HAL_RCC_OscConfig+0x248>)
 8004a7e:	2200      	movs	r2, #0
 8004a80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a82:	f7fc faf9 	bl	8001078 <HAL_GetTick>
 8004a86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a88:	e00e      	b.n	8004aa8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a8a:	f7fc faf5 	bl	8001078 <HAL_GetTick>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d907      	bls.n	8004aa8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	e15c      	b.n	8004d56 <HAL_RCC_OscConfig+0x4fa>
 8004a9c:	40023800 	.word	0x40023800
 8004aa0:	42470000 	.word	0x42470000
 8004aa4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004aa8:	4b8a      	ldr	r3, [pc, #552]	@ (8004cd4 <HAL_RCC_OscConfig+0x478>)
 8004aaa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004aac:	f003 0302 	and.w	r3, r3, #2
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1ea      	bne.n	8004a8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0304 	and.w	r3, r3, #4
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f000 8097 	beq.w	8004bf0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ac6:	4b83      	ldr	r3, [pc, #524]	@ (8004cd4 <HAL_RCC_OscConfig+0x478>)
 8004ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d10f      	bne.n	8004af2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	60bb      	str	r3, [r7, #8]
 8004ad6:	4b7f      	ldr	r3, [pc, #508]	@ (8004cd4 <HAL_RCC_OscConfig+0x478>)
 8004ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ada:	4a7e      	ldr	r2, [pc, #504]	@ (8004cd4 <HAL_RCC_OscConfig+0x478>)
 8004adc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ae0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ae2:	4b7c      	ldr	r3, [pc, #496]	@ (8004cd4 <HAL_RCC_OscConfig+0x478>)
 8004ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004aea:	60bb      	str	r3, [r7, #8]
 8004aec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004aee:	2301      	movs	r3, #1
 8004af0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004af2:	4b79      	ldr	r3, [pc, #484]	@ (8004cd8 <HAL_RCC_OscConfig+0x47c>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d118      	bne.n	8004b30 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004afe:	4b76      	ldr	r3, [pc, #472]	@ (8004cd8 <HAL_RCC_OscConfig+0x47c>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a75      	ldr	r2, [pc, #468]	@ (8004cd8 <HAL_RCC_OscConfig+0x47c>)
 8004b04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b0a:	f7fc fab5 	bl	8001078 <HAL_GetTick>
 8004b0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b10:	e008      	b.n	8004b24 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b12:	f7fc fab1 	bl	8001078 <HAL_GetTick>
 8004b16:	4602      	mov	r2, r0
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	d901      	bls.n	8004b24 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e118      	b.n	8004d56 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b24:	4b6c      	ldr	r3, [pc, #432]	@ (8004cd8 <HAL_RCC_OscConfig+0x47c>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d0f0      	beq.n	8004b12 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d106      	bne.n	8004b46 <HAL_RCC_OscConfig+0x2ea>
 8004b38:	4b66      	ldr	r3, [pc, #408]	@ (8004cd4 <HAL_RCC_OscConfig+0x478>)
 8004b3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b3c:	4a65      	ldr	r2, [pc, #404]	@ (8004cd4 <HAL_RCC_OscConfig+0x478>)
 8004b3e:	f043 0301 	orr.w	r3, r3, #1
 8004b42:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b44:	e01c      	b.n	8004b80 <HAL_RCC_OscConfig+0x324>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	2b05      	cmp	r3, #5
 8004b4c:	d10c      	bne.n	8004b68 <HAL_RCC_OscConfig+0x30c>
 8004b4e:	4b61      	ldr	r3, [pc, #388]	@ (8004cd4 <HAL_RCC_OscConfig+0x478>)
 8004b50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b52:	4a60      	ldr	r2, [pc, #384]	@ (8004cd4 <HAL_RCC_OscConfig+0x478>)
 8004b54:	f043 0304 	orr.w	r3, r3, #4
 8004b58:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b5a:	4b5e      	ldr	r3, [pc, #376]	@ (8004cd4 <HAL_RCC_OscConfig+0x478>)
 8004b5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b5e:	4a5d      	ldr	r2, [pc, #372]	@ (8004cd4 <HAL_RCC_OscConfig+0x478>)
 8004b60:	f043 0301 	orr.w	r3, r3, #1
 8004b64:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b66:	e00b      	b.n	8004b80 <HAL_RCC_OscConfig+0x324>
 8004b68:	4b5a      	ldr	r3, [pc, #360]	@ (8004cd4 <HAL_RCC_OscConfig+0x478>)
 8004b6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b6c:	4a59      	ldr	r2, [pc, #356]	@ (8004cd4 <HAL_RCC_OscConfig+0x478>)
 8004b6e:	f023 0301 	bic.w	r3, r3, #1
 8004b72:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b74:	4b57      	ldr	r3, [pc, #348]	@ (8004cd4 <HAL_RCC_OscConfig+0x478>)
 8004b76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b78:	4a56      	ldr	r2, [pc, #344]	@ (8004cd4 <HAL_RCC_OscConfig+0x478>)
 8004b7a:	f023 0304 	bic.w	r3, r3, #4
 8004b7e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d015      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b88:	f7fc fa76 	bl	8001078 <HAL_GetTick>
 8004b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b8e:	e00a      	b.n	8004ba6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b90:	f7fc fa72 	bl	8001078 <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d901      	bls.n	8004ba6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e0d7      	b.n	8004d56 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ba6:	4b4b      	ldr	r3, [pc, #300]	@ (8004cd4 <HAL_RCC_OscConfig+0x478>)
 8004ba8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004baa:	f003 0302 	and.w	r3, r3, #2
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d0ee      	beq.n	8004b90 <HAL_RCC_OscConfig+0x334>
 8004bb2:	e014      	b.n	8004bde <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bb4:	f7fc fa60 	bl	8001078 <HAL_GetTick>
 8004bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bba:	e00a      	b.n	8004bd2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bbc:	f7fc fa5c 	bl	8001078 <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d901      	bls.n	8004bd2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e0c1      	b.n	8004d56 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bd2:	4b40      	ldr	r3, [pc, #256]	@ (8004cd4 <HAL_RCC_OscConfig+0x478>)
 8004bd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bd6:	f003 0302 	and.w	r3, r3, #2
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d1ee      	bne.n	8004bbc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bde:	7dfb      	ldrb	r3, [r7, #23]
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d105      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004be4:	4b3b      	ldr	r3, [pc, #236]	@ (8004cd4 <HAL_RCC_OscConfig+0x478>)
 8004be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be8:	4a3a      	ldr	r2, [pc, #232]	@ (8004cd4 <HAL_RCC_OscConfig+0x478>)
 8004bea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004bee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	699b      	ldr	r3, [r3, #24]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	f000 80ad 	beq.w	8004d54 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004bfa:	4b36      	ldr	r3, [pc, #216]	@ (8004cd4 <HAL_RCC_OscConfig+0x478>)
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	f003 030c 	and.w	r3, r3, #12
 8004c02:	2b08      	cmp	r3, #8
 8004c04:	d060      	beq.n	8004cc8 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	699b      	ldr	r3, [r3, #24]
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d145      	bne.n	8004c9a <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c0e:	4b33      	ldr	r3, [pc, #204]	@ (8004cdc <HAL_RCC_OscConfig+0x480>)
 8004c10:	2200      	movs	r2, #0
 8004c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c14:	f7fc fa30 	bl	8001078 <HAL_GetTick>
 8004c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c1a:	e008      	b.n	8004c2e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c1c:	f7fc fa2c 	bl	8001078 <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	2b02      	cmp	r3, #2
 8004c28:	d901      	bls.n	8004c2e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e093      	b.n	8004d56 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c2e:	4b29      	ldr	r3, [pc, #164]	@ (8004cd4 <HAL_RCC_OscConfig+0x478>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d1f0      	bne.n	8004c1c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	69da      	ldr	r2, [r3, #28]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a1b      	ldr	r3, [r3, #32]
 8004c42:	431a      	orrs	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c48:	019b      	lsls	r3, r3, #6
 8004c4a:	431a      	orrs	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c50:	085b      	lsrs	r3, r3, #1
 8004c52:	3b01      	subs	r3, #1
 8004c54:	041b      	lsls	r3, r3, #16
 8004c56:	431a      	orrs	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c5c:	061b      	lsls	r3, r3, #24
 8004c5e:	431a      	orrs	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c64:	071b      	lsls	r3, r3, #28
 8004c66:	491b      	ldr	r1, [pc, #108]	@ (8004cd4 <HAL_RCC_OscConfig+0x478>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c6c:	4b1b      	ldr	r3, [pc, #108]	@ (8004cdc <HAL_RCC_OscConfig+0x480>)
 8004c6e:	2201      	movs	r2, #1
 8004c70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c72:	f7fc fa01 	bl	8001078 <HAL_GetTick>
 8004c76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c78:	e008      	b.n	8004c8c <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c7a:	f7fc f9fd 	bl	8001078 <HAL_GetTick>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d901      	bls.n	8004c8c <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e064      	b.n	8004d56 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c8c:	4b11      	ldr	r3, [pc, #68]	@ (8004cd4 <HAL_RCC_OscConfig+0x478>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d0f0      	beq.n	8004c7a <HAL_RCC_OscConfig+0x41e>
 8004c98:	e05c      	b.n	8004d54 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c9a:	4b10      	ldr	r3, [pc, #64]	@ (8004cdc <HAL_RCC_OscConfig+0x480>)
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca0:	f7fc f9ea 	bl	8001078 <HAL_GetTick>
 8004ca4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ca6:	e008      	b.n	8004cba <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ca8:	f7fc f9e6 	bl	8001078 <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	d901      	bls.n	8004cba <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e04d      	b.n	8004d56 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cba:	4b06      	ldr	r3, [pc, #24]	@ (8004cd4 <HAL_RCC_OscConfig+0x478>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d1f0      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x44c>
 8004cc6:	e045      	b.n	8004d54 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	699b      	ldr	r3, [r3, #24]
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d107      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e040      	b.n	8004d56 <HAL_RCC_OscConfig+0x4fa>
 8004cd4:	40023800 	.word	0x40023800
 8004cd8:	40007000 	.word	0x40007000
 8004cdc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ce0:	4b1f      	ldr	r3, [pc, #124]	@ (8004d60 <HAL_RCC_OscConfig+0x504>)
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d030      	beq.n	8004d50 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d129      	bne.n	8004d50 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d122      	bne.n	8004d50 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004d10:	4013      	ands	r3, r2
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004d16:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d119      	bne.n	8004d50 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d26:	085b      	lsrs	r3, r3, #1
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d10f      	bne.n	8004d50 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d3a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d107      	bne.n	8004d50 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d4a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d001      	beq.n	8004d54 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e000      	b.n	8004d56 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3718      	adds	r7, #24
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	40023800 	.word	0x40023800

08004d64 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d64:	b084      	sub	sp, #16
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b084      	sub	sp, #16
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
 8004d6e:	f107 001c 	add.w	r0, r7, #28
 8004d72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d122      	bne.n	8004dc2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d80:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004d90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004da4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d105      	bne.n	8004db6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f001 fbe8 	bl	800658c <USB_CoreReset>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	73fb      	strb	r3, [r7, #15]
 8004dc0:	e01a      	b.n	8004df8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f001 fbdc 	bl	800658c <USB_CoreReset>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004dd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d106      	bne.n	8004dec <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004de2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	639a      	str	r2, [r3, #56]	@ 0x38
 8004dea:	e005      	b.n	8004df8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004df0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d10b      	bne.n	8004e16 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	f043 0206 	orr.w	r2, r3, #6
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f043 0220 	orr.w	r2, r3, #32
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3710      	adds	r7, #16
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e22:	b004      	add	sp, #16
 8004e24:	4770      	bx	lr
	...

08004e28 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b087      	sub	sp, #28
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	60b9      	str	r1, [r7, #8]
 8004e32:	4613      	mov	r3, r2
 8004e34:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004e36:	79fb      	ldrb	r3, [r7, #7]
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d165      	bne.n	8004f08 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	4a41      	ldr	r2, [pc, #260]	@ (8004f44 <USB_SetTurnaroundTime+0x11c>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d906      	bls.n	8004e52 <USB_SetTurnaroundTime+0x2a>
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	4a40      	ldr	r2, [pc, #256]	@ (8004f48 <USB_SetTurnaroundTime+0x120>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d202      	bcs.n	8004e52 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004e4c:	230f      	movs	r3, #15
 8004e4e:	617b      	str	r3, [r7, #20]
 8004e50:	e062      	b.n	8004f18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	4a3c      	ldr	r2, [pc, #240]	@ (8004f48 <USB_SetTurnaroundTime+0x120>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d306      	bcc.n	8004e68 <USB_SetTurnaroundTime+0x40>
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	4a3b      	ldr	r2, [pc, #236]	@ (8004f4c <USB_SetTurnaroundTime+0x124>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d202      	bcs.n	8004e68 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004e62:	230e      	movs	r3, #14
 8004e64:	617b      	str	r3, [r7, #20]
 8004e66:	e057      	b.n	8004f18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	4a38      	ldr	r2, [pc, #224]	@ (8004f4c <USB_SetTurnaroundTime+0x124>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d306      	bcc.n	8004e7e <USB_SetTurnaroundTime+0x56>
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	4a37      	ldr	r2, [pc, #220]	@ (8004f50 <USB_SetTurnaroundTime+0x128>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d202      	bcs.n	8004e7e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004e78:	230d      	movs	r3, #13
 8004e7a:	617b      	str	r3, [r7, #20]
 8004e7c:	e04c      	b.n	8004f18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	4a33      	ldr	r2, [pc, #204]	@ (8004f50 <USB_SetTurnaroundTime+0x128>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d306      	bcc.n	8004e94 <USB_SetTurnaroundTime+0x6c>
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	4a32      	ldr	r2, [pc, #200]	@ (8004f54 <USB_SetTurnaroundTime+0x12c>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d802      	bhi.n	8004e94 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004e8e:	230c      	movs	r3, #12
 8004e90:	617b      	str	r3, [r7, #20]
 8004e92:	e041      	b.n	8004f18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	4a2f      	ldr	r2, [pc, #188]	@ (8004f54 <USB_SetTurnaroundTime+0x12c>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d906      	bls.n	8004eaa <USB_SetTurnaroundTime+0x82>
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	4a2e      	ldr	r2, [pc, #184]	@ (8004f58 <USB_SetTurnaroundTime+0x130>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d802      	bhi.n	8004eaa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004ea4:	230b      	movs	r3, #11
 8004ea6:	617b      	str	r3, [r7, #20]
 8004ea8:	e036      	b.n	8004f18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	4a2a      	ldr	r2, [pc, #168]	@ (8004f58 <USB_SetTurnaroundTime+0x130>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d906      	bls.n	8004ec0 <USB_SetTurnaroundTime+0x98>
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	4a29      	ldr	r2, [pc, #164]	@ (8004f5c <USB_SetTurnaroundTime+0x134>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d802      	bhi.n	8004ec0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004eba:	230a      	movs	r3, #10
 8004ebc:	617b      	str	r3, [r7, #20]
 8004ebe:	e02b      	b.n	8004f18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	4a26      	ldr	r2, [pc, #152]	@ (8004f5c <USB_SetTurnaroundTime+0x134>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d906      	bls.n	8004ed6 <USB_SetTurnaroundTime+0xae>
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	4a25      	ldr	r2, [pc, #148]	@ (8004f60 <USB_SetTurnaroundTime+0x138>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d202      	bcs.n	8004ed6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004ed0:	2309      	movs	r3, #9
 8004ed2:	617b      	str	r3, [r7, #20]
 8004ed4:	e020      	b.n	8004f18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	4a21      	ldr	r2, [pc, #132]	@ (8004f60 <USB_SetTurnaroundTime+0x138>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d306      	bcc.n	8004eec <USB_SetTurnaroundTime+0xc4>
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	4a20      	ldr	r2, [pc, #128]	@ (8004f64 <USB_SetTurnaroundTime+0x13c>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d802      	bhi.n	8004eec <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004ee6:	2308      	movs	r3, #8
 8004ee8:	617b      	str	r3, [r7, #20]
 8004eea:	e015      	b.n	8004f18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	4a1d      	ldr	r2, [pc, #116]	@ (8004f64 <USB_SetTurnaroundTime+0x13c>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d906      	bls.n	8004f02 <USB_SetTurnaroundTime+0xda>
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	4a1c      	ldr	r2, [pc, #112]	@ (8004f68 <USB_SetTurnaroundTime+0x140>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d202      	bcs.n	8004f02 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004efc:	2307      	movs	r3, #7
 8004efe:	617b      	str	r3, [r7, #20]
 8004f00:	e00a      	b.n	8004f18 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004f02:	2306      	movs	r3, #6
 8004f04:	617b      	str	r3, [r7, #20]
 8004f06:	e007      	b.n	8004f18 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004f08:	79fb      	ldrb	r3, [r7, #7]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d102      	bne.n	8004f14 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004f0e:	2309      	movs	r3, #9
 8004f10:	617b      	str	r3, [r7, #20]
 8004f12:	e001      	b.n	8004f18 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004f14:	2309      	movs	r3, #9
 8004f16:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	68da      	ldr	r2, [r3, #12]
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	029b      	lsls	r3, r3, #10
 8004f2c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004f30:	431a      	orrs	r2, r3
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	371c      	adds	r7, #28
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr
 8004f44:	00d8acbf 	.word	0x00d8acbf
 8004f48:	00e4e1c0 	.word	0x00e4e1c0
 8004f4c:	00f42400 	.word	0x00f42400
 8004f50:	01067380 	.word	0x01067380
 8004f54:	011a499f 	.word	0x011a499f
 8004f58:	01312cff 	.word	0x01312cff
 8004f5c:	014ca43f 	.word	0x014ca43f
 8004f60:	016e3600 	.word	0x016e3600
 8004f64:	01a6ab1f 	.word	0x01a6ab1f
 8004f68:	01e84800 	.word	0x01e84800

08004f6c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	f043 0201 	orr.w	r2, r3, #1
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	370c      	adds	r7, #12
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr

08004f8e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f8e:	b480      	push	{r7}
 8004f90:	b083      	sub	sp, #12
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f023 0201 	bic.w	r2, r3, #1
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004fa2:	2300      	movs	r3, #0
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	460b      	mov	r3, r1
 8004fba:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004fcc:	78fb      	ldrb	r3, [r7, #3]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d115      	bne.n	8004ffe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004fde:	2001      	movs	r0, #1
 8004fe0:	f7fc f856 	bl	8001090 <HAL_Delay>
      ms++;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f001 fa3f 	bl	800646e <USB_GetMode>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d01e      	beq.n	8005034 <USB_SetCurrentMode+0x84>
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2b31      	cmp	r3, #49	@ 0x31
 8004ffa:	d9f0      	bls.n	8004fde <USB_SetCurrentMode+0x2e>
 8004ffc:	e01a      	b.n	8005034 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004ffe:	78fb      	ldrb	r3, [r7, #3]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d115      	bne.n	8005030 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005010:	2001      	movs	r0, #1
 8005012:	f7fc f83d 	bl	8001090 <HAL_Delay>
      ms++;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	3301      	adds	r3, #1
 800501a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f001 fa26 	bl	800646e <USB_GetMode>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d005      	beq.n	8005034 <USB_SetCurrentMode+0x84>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2b31      	cmp	r3, #49	@ 0x31
 800502c:	d9f0      	bls.n	8005010 <USB_SetCurrentMode+0x60>
 800502e:	e001      	b.n	8005034 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e005      	b.n	8005040 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2b32      	cmp	r3, #50	@ 0x32
 8005038:	d101      	bne.n	800503e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e000      	b.n	8005040 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800503e:	2300      	movs	r3, #0
}
 8005040:	4618      	mov	r0, r3
 8005042:	3710      	adds	r7, #16
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005048:	b084      	sub	sp, #16
 800504a:	b580      	push	{r7, lr}
 800504c:	b086      	sub	sp, #24
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
 8005052:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005056:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800505a:	2300      	movs	r3, #0
 800505c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005062:	2300      	movs	r3, #0
 8005064:	613b      	str	r3, [r7, #16]
 8005066:	e009      	b.n	800507c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	3340      	adds	r3, #64	@ 0x40
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	4413      	add	r3, r2
 8005072:	2200      	movs	r2, #0
 8005074:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	3301      	adds	r3, #1
 800507a:	613b      	str	r3, [r7, #16]
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	2b0e      	cmp	r3, #14
 8005080:	d9f2      	bls.n	8005068 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005082:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005084:	2b00      	cmp	r3, #0
 8005086:	d11c      	bne.n	80050c2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	68fa      	ldr	r2, [r7, #12]
 8005092:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005096:	f043 0302 	orr.w	r3, r3, #2
 800509a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050a0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	601a      	str	r2, [r3, #0]
 80050c0:	e005      	b.n	80050ce <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050c6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80050d4:	461a      	mov	r2, r3
 80050d6:	2300      	movs	r3, #0
 80050d8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050e0:	4619      	mov	r1, r3
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050e8:	461a      	mov	r2, r3
 80050ea:	680b      	ldr	r3, [r1, #0]
 80050ec:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d10c      	bne.n	800510e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80050f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d104      	bne.n	8005104 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80050fa:	2100      	movs	r1, #0
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 f965 	bl	80053cc <USB_SetDevSpeed>
 8005102:	e008      	b.n	8005116 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005104:	2101      	movs	r1, #1
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 f960 	bl	80053cc <USB_SetDevSpeed>
 800510c:	e003      	b.n	8005116 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800510e:	2103      	movs	r1, #3
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 f95b 	bl	80053cc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005116:	2110      	movs	r1, #16
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f000 f8f3 	bl	8005304 <USB_FlushTxFifo>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d001      	beq.n	8005128 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 f91f 	bl	800536c <USB_FlushRxFifo>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d001      	beq.n	8005138 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800513e:	461a      	mov	r2, r3
 8005140:	2300      	movs	r3, #0
 8005142:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800514a:	461a      	mov	r2, r3
 800514c:	2300      	movs	r3, #0
 800514e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005156:	461a      	mov	r2, r3
 8005158:	2300      	movs	r3, #0
 800515a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800515c:	2300      	movs	r3, #0
 800515e:	613b      	str	r3, [r7, #16]
 8005160:	e043      	b.n	80051ea <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	015a      	lsls	r2, r3, #5
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	4413      	add	r3, r2
 800516a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005174:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005178:	d118      	bne.n	80051ac <USB_DevInit+0x164>
    {
      if (i == 0U)
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d10a      	bne.n	8005196 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	015a      	lsls	r2, r3, #5
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	4413      	add	r3, r2
 8005188:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800518c:	461a      	mov	r2, r3
 800518e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005192:	6013      	str	r3, [r2, #0]
 8005194:	e013      	b.n	80051be <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	015a      	lsls	r2, r3, #5
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	4413      	add	r3, r2
 800519e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051a2:	461a      	mov	r2, r3
 80051a4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80051a8:	6013      	str	r3, [r2, #0]
 80051aa:	e008      	b.n	80051be <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	015a      	lsls	r2, r3, #5
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	4413      	add	r3, r2
 80051b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051b8:	461a      	mov	r2, r3
 80051ba:	2300      	movs	r3, #0
 80051bc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	015a      	lsls	r2, r3, #5
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	4413      	add	r3, r2
 80051c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051ca:	461a      	mov	r2, r3
 80051cc:	2300      	movs	r3, #0
 80051ce:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	015a      	lsls	r2, r3, #5
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	4413      	add	r3, r2
 80051d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051dc:	461a      	mov	r2, r3
 80051de:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80051e2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	3301      	adds	r3, #1
 80051e8:	613b      	str	r3, [r7, #16]
 80051ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ec:	693a      	ldr	r2, [r7, #16]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d3b7      	bcc.n	8005162 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051f2:	2300      	movs	r3, #0
 80051f4:	613b      	str	r3, [r7, #16]
 80051f6:	e043      	b.n	8005280 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	015a      	lsls	r2, r3, #5
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	4413      	add	r3, r2
 8005200:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800520a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800520e:	d118      	bne.n	8005242 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d10a      	bne.n	800522c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	015a      	lsls	r2, r3, #5
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	4413      	add	r3, r2
 800521e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005222:	461a      	mov	r2, r3
 8005224:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005228:	6013      	str	r3, [r2, #0]
 800522a:	e013      	b.n	8005254 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	015a      	lsls	r2, r3, #5
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	4413      	add	r3, r2
 8005234:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005238:	461a      	mov	r2, r3
 800523a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800523e:	6013      	str	r3, [r2, #0]
 8005240:	e008      	b.n	8005254 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	015a      	lsls	r2, r3, #5
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	4413      	add	r3, r2
 800524a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800524e:	461a      	mov	r2, r3
 8005250:	2300      	movs	r3, #0
 8005252:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	015a      	lsls	r2, r3, #5
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	4413      	add	r3, r2
 800525c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005260:	461a      	mov	r2, r3
 8005262:	2300      	movs	r3, #0
 8005264:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	015a      	lsls	r2, r3, #5
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	4413      	add	r3, r2
 800526e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005272:	461a      	mov	r2, r3
 8005274:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005278:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	3301      	adds	r3, #1
 800527e:	613b      	str	r3, [r7, #16]
 8005280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005282:	693a      	ldr	r2, [r7, #16]
 8005284:	429a      	cmp	r2, r3
 8005286:	d3b7      	bcc.n	80051f8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800528e:	691b      	ldr	r3, [r3, #16]
 8005290:	68fa      	ldr	r2, [r7, #12]
 8005292:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005296:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800529a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80052a8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80052aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d105      	bne.n	80052bc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	699b      	ldr	r3, [r3, #24]
 80052b4:	f043 0210 	orr.w	r2, r3, #16
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	699a      	ldr	r2, [r3, #24]
 80052c0:	4b0f      	ldr	r3, [pc, #60]	@ (8005300 <USB_DevInit+0x2b8>)
 80052c2:	4313      	orrs	r3, r2
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80052c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d005      	beq.n	80052da <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	699b      	ldr	r3, [r3, #24]
 80052d2:	f043 0208 	orr.w	r2, r3, #8
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80052da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d107      	bne.n	80052f0 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	699b      	ldr	r3, [r3, #24]
 80052e4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80052e8:	f043 0304 	orr.w	r3, r3, #4
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80052f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3718      	adds	r7, #24
 80052f6:	46bd      	mov	sp, r7
 80052f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052fc:	b004      	add	sp, #16
 80052fe:	4770      	bx	lr
 8005300:	803c3800 	.word	0x803c3800

08005304 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005304:	b480      	push	{r7}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800530e:	2300      	movs	r3, #0
 8005310:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	3301      	adds	r3, #1
 8005316:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	4a13      	ldr	r2, [pc, #76]	@ (8005368 <USB_FlushTxFifo+0x64>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d901      	bls.n	8005324 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005320:	2303      	movs	r3, #3
 8005322:	e01b      	b.n	800535c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	691b      	ldr	r3, [r3, #16]
 8005328:	2b00      	cmp	r3, #0
 800532a:	daf2      	bge.n	8005312 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800532c:	2300      	movs	r3, #0
 800532e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	019b      	lsls	r3, r3, #6
 8005334:	f043 0220 	orr.w	r2, r3, #32
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	3301      	adds	r3, #1
 8005340:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	4a08      	ldr	r2, [pc, #32]	@ (8005368 <USB_FlushTxFifo+0x64>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d901      	bls.n	800534e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800534a:	2303      	movs	r3, #3
 800534c:	e006      	b.n	800535c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	f003 0320 	and.w	r3, r3, #32
 8005356:	2b20      	cmp	r3, #32
 8005358:	d0f0      	beq.n	800533c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800535a:	2300      	movs	r3, #0
}
 800535c:	4618      	mov	r0, r3
 800535e:	3714      	adds	r7, #20
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr
 8005368:	00030d40 	.word	0x00030d40

0800536c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005374:	2300      	movs	r3, #0
 8005376:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	3301      	adds	r3, #1
 800537c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	4a11      	ldr	r2, [pc, #68]	@ (80053c8 <USB_FlushRxFifo+0x5c>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d901      	bls.n	800538a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005386:	2303      	movs	r3, #3
 8005388:	e018      	b.n	80053bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	2b00      	cmp	r3, #0
 8005390:	daf2      	bge.n	8005378 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005392:	2300      	movs	r3, #0
 8005394:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2210      	movs	r2, #16
 800539a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	3301      	adds	r3, #1
 80053a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	4a08      	ldr	r2, [pc, #32]	@ (80053c8 <USB_FlushRxFifo+0x5c>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d901      	bls.n	80053ae <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e006      	b.n	80053bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	f003 0310 	and.w	r3, r3, #16
 80053b6:	2b10      	cmp	r3, #16
 80053b8:	d0f0      	beq.n	800539c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80053ba:	2300      	movs	r3, #0
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3714      	adds	r7, #20
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr
 80053c8:	00030d40 	.word	0x00030d40

080053cc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b085      	sub	sp, #20
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	460b      	mov	r3, r1
 80053d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	78fb      	ldrb	r3, [r7, #3]
 80053e6:	68f9      	ldr	r1, [r7, #12]
 80053e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80053ec:	4313      	orrs	r3, r2
 80053ee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3714      	adds	r7, #20
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr

080053fe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80053fe:	b480      	push	{r7}
 8005400:	b087      	sub	sp, #28
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f003 0306 	and.w	r3, r3, #6
 8005416:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d102      	bne.n	8005424 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800541e:	2300      	movs	r3, #0
 8005420:	75fb      	strb	r3, [r7, #23]
 8005422:	e00a      	b.n	800543a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2b02      	cmp	r3, #2
 8005428:	d002      	beq.n	8005430 <USB_GetDevSpeed+0x32>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2b06      	cmp	r3, #6
 800542e:	d102      	bne.n	8005436 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005430:	2302      	movs	r3, #2
 8005432:	75fb      	strb	r3, [r7, #23]
 8005434:	e001      	b.n	800543a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005436:	230f      	movs	r3, #15
 8005438:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800543a:	7dfb      	ldrb	r3, [r7, #23]
}
 800543c:	4618      	mov	r0, r3
 800543e:	371c      	adds	r7, #28
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005448:	b480      	push	{r7}
 800544a:	b085      	sub	sp, #20
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	785b      	ldrb	r3, [r3, #1]
 8005460:	2b01      	cmp	r3, #1
 8005462:	d13a      	bne.n	80054da <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800546a:	69da      	ldr	r2, [r3, #28]
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	f003 030f 	and.w	r3, r3, #15
 8005474:	2101      	movs	r1, #1
 8005476:	fa01 f303 	lsl.w	r3, r1, r3
 800547a:	b29b      	uxth	r3, r3
 800547c:	68f9      	ldr	r1, [r7, #12]
 800547e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005482:	4313      	orrs	r3, r2
 8005484:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	015a      	lsls	r2, r3, #5
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	4413      	add	r3, r2
 800548e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005498:	2b00      	cmp	r3, #0
 800549a:	d155      	bne.n	8005548 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	015a      	lsls	r2, r3, #5
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	4413      	add	r3, r2
 80054a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	791b      	ldrb	r3, [r3, #4]
 80054b6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80054b8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	059b      	lsls	r3, r3, #22
 80054be:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80054c0:	4313      	orrs	r3, r2
 80054c2:	68ba      	ldr	r2, [r7, #8]
 80054c4:	0151      	lsls	r1, r2, #5
 80054c6:	68fa      	ldr	r2, [r7, #12]
 80054c8:	440a      	add	r2, r1
 80054ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054d6:	6013      	str	r3, [r2, #0]
 80054d8:	e036      	b.n	8005548 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054e0:	69da      	ldr	r2, [r3, #28]
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	f003 030f 	and.w	r3, r3, #15
 80054ea:	2101      	movs	r1, #1
 80054ec:	fa01 f303 	lsl.w	r3, r1, r3
 80054f0:	041b      	lsls	r3, r3, #16
 80054f2:	68f9      	ldr	r1, [r7, #12]
 80054f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80054f8:	4313      	orrs	r3, r2
 80054fa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	015a      	lsls	r2, r3, #5
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	4413      	add	r3, r2
 8005504:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d11a      	bne.n	8005548 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	015a      	lsls	r2, r3, #5
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	4413      	add	r3, r2
 800551a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	791b      	ldrb	r3, [r3, #4]
 800552c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800552e:	430b      	orrs	r3, r1
 8005530:	4313      	orrs	r3, r2
 8005532:	68ba      	ldr	r2, [r7, #8]
 8005534:	0151      	lsls	r1, r2, #5
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	440a      	add	r2, r1
 800553a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800553e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005542:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005546:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3714      	adds	r7, #20
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr
	...

08005558 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005558:	b480      	push	{r7}
 800555a:	b085      	sub	sp, #20
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	785b      	ldrb	r3, [r3, #1]
 8005570:	2b01      	cmp	r3, #1
 8005572:	d161      	bne.n	8005638 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	015a      	lsls	r2, r3, #5
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	4413      	add	r3, r2
 800557c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005586:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800558a:	d11f      	bne.n	80055cc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	015a      	lsls	r2, r3, #5
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	4413      	add	r3, r2
 8005594:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	68ba      	ldr	r2, [r7, #8]
 800559c:	0151      	lsls	r1, r2, #5
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	440a      	add	r2, r1
 80055a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80055a6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80055aa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	015a      	lsls	r2, r3, #5
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	4413      	add	r3, r2
 80055b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68ba      	ldr	r2, [r7, #8]
 80055bc:	0151      	lsls	r1, r2, #5
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	440a      	add	r2, r1
 80055c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80055c6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80055ca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	f003 030f 	and.w	r3, r3, #15
 80055dc:	2101      	movs	r1, #1
 80055de:	fa01 f303 	lsl.w	r3, r1, r3
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	43db      	mvns	r3, r3
 80055e6:	68f9      	ldr	r1, [r7, #12]
 80055e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80055ec:	4013      	ands	r3, r2
 80055ee:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055f6:	69da      	ldr	r2, [r3, #28]
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	f003 030f 	and.w	r3, r3, #15
 8005600:	2101      	movs	r1, #1
 8005602:	fa01 f303 	lsl.w	r3, r1, r3
 8005606:	b29b      	uxth	r3, r3
 8005608:	43db      	mvns	r3, r3
 800560a:	68f9      	ldr	r1, [r7, #12]
 800560c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005610:	4013      	ands	r3, r2
 8005612:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	015a      	lsls	r2, r3, #5
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	4413      	add	r3, r2
 800561c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	0159      	lsls	r1, r3, #5
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	440b      	add	r3, r1
 800562a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800562e:	4619      	mov	r1, r3
 8005630:	4b35      	ldr	r3, [pc, #212]	@ (8005708 <USB_DeactivateEndpoint+0x1b0>)
 8005632:	4013      	ands	r3, r2
 8005634:	600b      	str	r3, [r1, #0]
 8005636:	e060      	b.n	80056fa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	015a      	lsls	r2, r3, #5
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	4413      	add	r3, r2
 8005640:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800564a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800564e:	d11f      	bne.n	8005690 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	015a      	lsls	r2, r3, #5
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	4413      	add	r3, r2
 8005658:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68ba      	ldr	r2, [r7, #8]
 8005660:	0151      	lsls	r1, r2, #5
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	440a      	add	r2, r1
 8005666:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800566a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800566e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	015a      	lsls	r2, r3, #5
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	4413      	add	r3, r2
 8005678:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	68ba      	ldr	r2, [r7, #8]
 8005680:	0151      	lsls	r1, r2, #5
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	440a      	add	r2, r1
 8005686:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800568a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800568e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005696:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	f003 030f 	and.w	r3, r3, #15
 80056a0:	2101      	movs	r1, #1
 80056a2:	fa01 f303 	lsl.w	r3, r1, r3
 80056a6:	041b      	lsls	r3, r3, #16
 80056a8:	43db      	mvns	r3, r3
 80056aa:	68f9      	ldr	r1, [r7, #12]
 80056ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80056b0:	4013      	ands	r3, r2
 80056b2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056ba:	69da      	ldr	r2, [r3, #28]
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	f003 030f 	and.w	r3, r3, #15
 80056c4:	2101      	movs	r1, #1
 80056c6:	fa01 f303 	lsl.w	r3, r1, r3
 80056ca:	041b      	lsls	r3, r3, #16
 80056cc:	43db      	mvns	r3, r3
 80056ce:	68f9      	ldr	r1, [r7, #12]
 80056d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80056d4:	4013      	ands	r3, r2
 80056d6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	015a      	lsls	r2, r3, #5
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	4413      	add	r3, r2
 80056e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	0159      	lsls	r1, r3, #5
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	440b      	add	r3, r1
 80056ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056f2:	4619      	mov	r1, r3
 80056f4:	4b05      	ldr	r3, [pc, #20]	@ (800570c <USB_DeactivateEndpoint+0x1b4>)
 80056f6:	4013      	ands	r3, r2
 80056f8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80056fa:	2300      	movs	r3, #0
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3714      	adds	r7, #20
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr
 8005708:	ec337800 	.word	0xec337800
 800570c:	eff37800 	.word	0xeff37800

08005710 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b08a      	sub	sp, #40	@ 0x28
 8005714:	af02      	add	r7, sp, #8
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	4613      	mov	r3, r2
 800571c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	785b      	ldrb	r3, [r3, #1]
 800572c:	2b01      	cmp	r3, #1
 800572e:	f040 815c 	bne.w	80059ea <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d132      	bne.n	80057a0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	015a      	lsls	r2, r3, #5
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	4413      	add	r3, r2
 8005742:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005746:	691b      	ldr	r3, [r3, #16]
 8005748:	69ba      	ldr	r2, [r7, #24]
 800574a:	0151      	lsls	r1, r2, #5
 800574c:	69fa      	ldr	r2, [r7, #28]
 800574e:	440a      	add	r2, r1
 8005750:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005754:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005758:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800575c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	015a      	lsls	r2, r3, #5
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	4413      	add	r3, r2
 8005766:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800576a:	691b      	ldr	r3, [r3, #16]
 800576c:	69ba      	ldr	r2, [r7, #24]
 800576e:	0151      	lsls	r1, r2, #5
 8005770:	69fa      	ldr	r2, [r7, #28]
 8005772:	440a      	add	r2, r1
 8005774:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005778:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800577c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	015a      	lsls	r2, r3, #5
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	4413      	add	r3, r2
 8005786:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800578a:	691b      	ldr	r3, [r3, #16]
 800578c:	69ba      	ldr	r2, [r7, #24]
 800578e:	0151      	lsls	r1, r2, #5
 8005790:	69fa      	ldr	r2, [r7, #28]
 8005792:	440a      	add	r2, r1
 8005794:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005798:	0cdb      	lsrs	r3, r3, #19
 800579a:	04db      	lsls	r3, r3, #19
 800579c:	6113      	str	r3, [r2, #16]
 800579e:	e074      	b.n	800588a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	015a      	lsls	r2, r3, #5
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	4413      	add	r3, r2
 80057a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	69ba      	ldr	r2, [r7, #24]
 80057b0:	0151      	lsls	r1, r2, #5
 80057b2:	69fa      	ldr	r2, [r7, #28]
 80057b4:	440a      	add	r2, r1
 80057b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057ba:	0cdb      	lsrs	r3, r3, #19
 80057bc:	04db      	lsls	r3, r3, #19
 80057be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	015a      	lsls	r2, r3, #5
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	4413      	add	r3, r2
 80057c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	69ba      	ldr	r2, [r7, #24]
 80057d0:	0151      	lsls	r1, r2, #5
 80057d2:	69fa      	ldr	r2, [r7, #28]
 80057d4:	440a      	add	r2, r1
 80057d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057da:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80057de:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80057e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	015a      	lsls	r2, r3, #5
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	4413      	add	r3, r2
 80057ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057f0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	6999      	ldr	r1, [r3, #24]
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	440b      	add	r3, r1
 80057fc:	1e59      	subs	r1, r3, #1
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	fbb1 f3f3 	udiv	r3, r1, r3
 8005806:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005808:	4b9d      	ldr	r3, [pc, #628]	@ (8005a80 <USB_EPStartXfer+0x370>)
 800580a:	400b      	ands	r3, r1
 800580c:	69b9      	ldr	r1, [r7, #24]
 800580e:	0148      	lsls	r0, r1, #5
 8005810:	69f9      	ldr	r1, [r7, #28]
 8005812:	4401      	add	r1, r0
 8005814:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005818:	4313      	orrs	r3, r2
 800581a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800581c:	69bb      	ldr	r3, [r7, #24]
 800581e:	015a      	lsls	r2, r3, #5
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	4413      	add	r3, r2
 8005824:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005828:	691a      	ldr	r2, [r3, #16]
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	699b      	ldr	r3, [r3, #24]
 800582e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005832:	69b9      	ldr	r1, [r7, #24]
 8005834:	0148      	lsls	r0, r1, #5
 8005836:	69f9      	ldr	r1, [r7, #28]
 8005838:	4401      	add	r1, r0
 800583a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800583e:	4313      	orrs	r3, r2
 8005840:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	791b      	ldrb	r3, [r3, #4]
 8005846:	2b01      	cmp	r3, #1
 8005848:	d11f      	bne.n	800588a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	015a      	lsls	r2, r3, #5
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	4413      	add	r3, r2
 8005852:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005856:	691b      	ldr	r3, [r3, #16]
 8005858:	69ba      	ldr	r2, [r7, #24]
 800585a:	0151      	lsls	r1, r2, #5
 800585c:	69fa      	ldr	r2, [r7, #28]
 800585e:	440a      	add	r2, r1
 8005860:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005864:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005868:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	015a      	lsls	r2, r3, #5
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	4413      	add	r3, r2
 8005872:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	69ba      	ldr	r2, [r7, #24]
 800587a:	0151      	lsls	r1, r2, #5
 800587c:	69fa      	ldr	r2, [r7, #28]
 800587e:	440a      	add	r2, r1
 8005880:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005884:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005888:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800588a:	79fb      	ldrb	r3, [r7, #7]
 800588c:	2b01      	cmp	r3, #1
 800588e:	d14b      	bne.n	8005928 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	695b      	ldr	r3, [r3, #20]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d009      	beq.n	80058ac <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	015a      	lsls	r2, r3, #5
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	4413      	add	r3, r2
 80058a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058a4:	461a      	mov	r2, r3
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	695b      	ldr	r3, [r3, #20]
 80058aa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	791b      	ldrb	r3, [r3, #4]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d128      	bne.n	8005906 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d110      	bne.n	80058e6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	015a      	lsls	r2, r3, #5
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	4413      	add	r3, r2
 80058cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	69ba      	ldr	r2, [r7, #24]
 80058d4:	0151      	lsls	r1, r2, #5
 80058d6:	69fa      	ldr	r2, [r7, #28]
 80058d8:	440a      	add	r2, r1
 80058da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058de:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80058e2:	6013      	str	r3, [r2, #0]
 80058e4:	e00f      	b.n	8005906 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	015a      	lsls	r2, r3, #5
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	4413      	add	r3, r2
 80058ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	69ba      	ldr	r2, [r7, #24]
 80058f6:	0151      	lsls	r1, r2, #5
 80058f8:	69fa      	ldr	r2, [r7, #28]
 80058fa:	440a      	add	r2, r1
 80058fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005900:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005904:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	015a      	lsls	r2, r3, #5
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	4413      	add	r3, r2
 800590e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	69ba      	ldr	r2, [r7, #24]
 8005916:	0151      	lsls	r1, r2, #5
 8005918:	69fa      	ldr	r2, [r7, #28]
 800591a:	440a      	add	r2, r1
 800591c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005920:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005924:	6013      	str	r3, [r2, #0]
 8005926:	e133      	b.n	8005b90 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005928:	69bb      	ldr	r3, [r7, #24]
 800592a:	015a      	lsls	r2, r3, #5
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	4413      	add	r3, r2
 8005930:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	69ba      	ldr	r2, [r7, #24]
 8005938:	0151      	lsls	r1, r2, #5
 800593a:	69fa      	ldr	r2, [r7, #28]
 800593c:	440a      	add	r2, r1
 800593e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005942:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005946:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	791b      	ldrb	r3, [r3, #4]
 800594c:	2b01      	cmp	r3, #1
 800594e:	d015      	beq.n	800597c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	699b      	ldr	r3, [r3, #24]
 8005954:	2b00      	cmp	r3, #0
 8005956:	f000 811b 	beq.w	8005b90 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005960:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	f003 030f 	and.w	r3, r3, #15
 800596a:	2101      	movs	r1, #1
 800596c:	fa01 f303 	lsl.w	r3, r1, r3
 8005970:	69f9      	ldr	r1, [r7, #28]
 8005972:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005976:	4313      	orrs	r3, r2
 8005978:	634b      	str	r3, [r1, #52]	@ 0x34
 800597a:	e109      	b.n	8005b90 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005988:	2b00      	cmp	r3, #0
 800598a:	d110      	bne.n	80059ae <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	015a      	lsls	r2, r3, #5
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	4413      	add	r3, r2
 8005994:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	69ba      	ldr	r2, [r7, #24]
 800599c:	0151      	lsls	r1, r2, #5
 800599e:	69fa      	ldr	r2, [r7, #28]
 80059a0:	440a      	add	r2, r1
 80059a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059a6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80059aa:	6013      	str	r3, [r2, #0]
 80059ac:	e00f      	b.n	80059ce <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	015a      	lsls	r2, r3, #5
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	4413      	add	r3, r2
 80059b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	69ba      	ldr	r2, [r7, #24]
 80059be:	0151      	lsls	r1, r2, #5
 80059c0:	69fa      	ldr	r2, [r7, #28]
 80059c2:	440a      	add	r2, r1
 80059c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059cc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	6919      	ldr	r1, [r3, #16]
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	781a      	ldrb	r2, [r3, #0]
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	699b      	ldr	r3, [r3, #24]
 80059da:	b298      	uxth	r0, r3
 80059dc:	79fb      	ldrb	r3, [r7, #7]
 80059de:	9300      	str	r3, [sp, #0]
 80059e0:	4603      	mov	r3, r0
 80059e2:	68f8      	ldr	r0, [r7, #12]
 80059e4:	f000 fade 	bl	8005fa4 <USB_WritePacket>
 80059e8:	e0d2      	b.n	8005b90 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	015a      	lsls	r2, r3, #5
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	4413      	add	r3, r2
 80059f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059f6:	691b      	ldr	r3, [r3, #16]
 80059f8:	69ba      	ldr	r2, [r7, #24]
 80059fa:	0151      	lsls	r1, r2, #5
 80059fc:	69fa      	ldr	r2, [r7, #28]
 80059fe:	440a      	add	r2, r1
 8005a00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a04:	0cdb      	lsrs	r3, r3, #19
 8005a06:	04db      	lsls	r3, r3, #19
 8005a08:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005a0a:	69bb      	ldr	r3, [r7, #24]
 8005a0c:	015a      	lsls	r2, r3, #5
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	4413      	add	r3, r2
 8005a12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	69ba      	ldr	r2, [r7, #24]
 8005a1a:	0151      	lsls	r1, r2, #5
 8005a1c:	69fa      	ldr	r2, [r7, #28]
 8005a1e:	440a      	add	r2, r1
 8005a20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a24:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005a28:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005a2c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	699b      	ldr	r3, [r3, #24]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d126      	bne.n	8005a84 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	015a      	lsls	r2, r3, #5
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a42:	691a      	ldr	r2, [r3, #16]
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a4c:	69b9      	ldr	r1, [r7, #24]
 8005a4e:	0148      	lsls	r0, r1, #5
 8005a50:	69f9      	ldr	r1, [r7, #28]
 8005a52:	4401      	add	r1, r0
 8005a54:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	015a      	lsls	r2, r3, #5
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	4413      	add	r3, r2
 8005a64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	69ba      	ldr	r2, [r7, #24]
 8005a6c:	0151      	lsls	r1, r2, #5
 8005a6e:	69fa      	ldr	r2, [r7, #28]
 8005a70:	440a      	add	r2, r1
 8005a72:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a76:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005a7a:	6113      	str	r3, [r2, #16]
 8005a7c:	e03a      	b.n	8005af4 <USB_EPStartXfer+0x3e4>
 8005a7e:	bf00      	nop
 8005a80:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	699a      	ldr	r2, [r3, #24]
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	4413      	add	r3, r2
 8005a8e:	1e5a      	subs	r2, r3, #1
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a98:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	8afa      	ldrh	r2, [r7, #22]
 8005aa0:	fb03 f202 	mul.w	r2, r3, r2
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005aa8:	69bb      	ldr	r3, [r7, #24]
 8005aaa:	015a      	lsls	r2, r3, #5
 8005aac:	69fb      	ldr	r3, [r7, #28]
 8005aae:	4413      	add	r3, r2
 8005ab0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ab4:	691a      	ldr	r2, [r3, #16]
 8005ab6:	8afb      	ldrh	r3, [r7, #22]
 8005ab8:	04d9      	lsls	r1, r3, #19
 8005aba:	4b38      	ldr	r3, [pc, #224]	@ (8005b9c <USB_EPStartXfer+0x48c>)
 8005abc:	400b      	ands	r3, r1
 8005abe:	69b9      	ldr	r1, [r7, #24]
 8005ac0:	0148      	lsls	r0, r1, #5
 8005ac2:	69f9      	ldr	r1, [r7, #28]
 8005ac4:	4401      	add	r1, r0
 8005ac6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005aca:	4313      	orrs	r3, r2
 8005acc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	015a      	lsls	r2, r3, #5
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ada:	691a      	ldr	r2, [r3, #16]
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	69db      	ldr	r3, [r3, #28]
 8005ae0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ae4:	69b9      	ldr	r1, [r7, #24]
 8005ae6:	0148      	lsls	r0, r1, #5
 8005ae8:	69f9      	ldr	r1, [r7, #28]
 8005aea:	4401      	add	r1, r0
 8005aec:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005af0:	4313      	orrs	r3, r2
 8005af2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005af4:	79fb      	ldrb	r3, [r7, #7]
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d10d      	bne.n	8005b16 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d009      	beq.n	8005b16 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	6919      	ldr	r1, [r3, #16]
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	015a      	lsls	r2, r3, #5
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	4413      	add	r3, r2
 8005b0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b12:	460a      	mov	r2, r1
 8005b14:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	791b      	ldrb	r3, [r3, #4]
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d128      	bne.n	8005b70 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d110      	bne.n	8005b50 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	015a      	lsls	r2, r3, #5
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	4413      	add	r3, r2
 8005b36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	69ba      	ldr	r2, [r7, #24]
 8005b3e:	0151      	lsls	r1, r2, #5
 8005b40:	69fa      	ldr	r2, [r7, #28]
 8005b42:	440a      	add	r2, r1
 8005b44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b48:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005b4c:	6013      	str	r3, [r2, #0]
 8005b4e:	e00f      	b.n	8005b70 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	015a      	lsls	r2, r3, #5
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	4413      	add	r3, r2
 8005b58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	69ba      	ldr	r2, [r7, #24]
 8005b60:	0151      	lsls	r1, r2, #5
 8005b62:	69fa      	ldr	r2, [r7, #28]
 8005b64:	440a      	add	r2, r1
 8005b66:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b6e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	015a      	lsls	r2, r3, #5
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	4413      	add	r3, r2
 8005b78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	69ba      	ldr	r2, [r7, #24]
 8005b80:	0151      	lsls	r1, r2, #5
 8005b82:	69fa      	ldr	r2, [r7, #28]
 8005b84:	440a      	add	r2, r1
 8005b86:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b8a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005b8e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3720      	adds	r7, #32
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	1ff80000 	.word	0x1ff80000

08005ba0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b087      	sub	sp, #28
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	4613      	mov	r3, r2
 8005bac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	785b      	ldrb	r3, [r3, #1]
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	f040 80ce 	bne.w	8005d5e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	699b      	ldr	r3, [r3, #24]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d132      	bne.n	8005c30 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	015a      	lsls	r2, r3, #5
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	4413      	add	r3, r2
 8005bd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	693a      	ldr	r2, [r7, #16]
 8005bda:	0151      	lsls	r1, r2, #5
 8005bdc:	697a      	ldr	r2, [r7, #20]
 8005bde:	440a      	add	r2, r1
 8005be0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005be4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005be8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005bec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	015a      	lsls	r2, r3, #5
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bfa:	691b      	ldr	r3, [r3, #16]
 8005bfc:	693a      	ldr	r2, [r7, #16]
 8005bfe:	0151      	lsls	r1, r2, #5
 8005c00:	697a      	ldr	r2, [r7, #20]
 8005c02:	440a      	add	r2, r1
 8005c04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c08:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005c0c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	015a      	lsls	r2, r3, #5
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	4413      	add	r3, r2
 8005c16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	693a      	ldr	r2, [r7, #16]
 8005c1e:	0151      	lsls	r1, r2, #5
 8005c20:	697a      	ldr	r2, [r7, #20]
 8005c22:	440a      	add	r2, r1
 8005c24:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c28:	0cdb      	lsrs	r3, r3, #19
 8005c2a:	04db      	lsls	r3, r3, #19
 8005c2c:	6113      	str	r3, [r2, #16]
 8005c2e:	e04e      	b.n	8005cce <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	015a      	lsls	r2, r3, #5
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	4413      	add	r3, r2
 8005c38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	693a      	ldr	r2, [r7, #16]
 8005c40:	0151      	lsls	r1, r2, #5
 8005c42:	697a      	ldr	r2, [r7, #20]
 8005c44:	440a      	add	r2, r1
 8005c46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c4a:	0cdb      	lsrs	r3, r3, #19
 8005c4c:	04db      	lsls	r3, r3, #19
 8005c4e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	015a      	lsls	r2, r3, #5
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	4413      	add	r3, r2
 8005c58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c5c:	691b      	ldr	r3, [r3, #16]
 8005c5e:	693a      	ldr	r2, [r7, #16]
 8005c60:	0151      	lsls	r1, r2, #5
 8005c62:	697a      	ldr	r2, [r7, #20]
 8005c64:	440a      	add	r2, r1
 8005c66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c6a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005c6e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005c72:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	699a      	ldr	r2, [r3, #24]
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d903      	bls.n	8005c88 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	68da      	ldr	r2, [r3, #12]
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	015a      	lsls	r2, r3, #5
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	4413      	add	r3, r2
 8005c90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c94:	691b      	ldr	r3, [r3, #16]
 8005c96:	693a      	ldr	r2, [r7, #16]
 8005c98:	0151      	lsls	r1, r2, #5
 8005c9a:	697a      	ldr	r2, [r7, #20]
 8005c9c:	440a      	add	r2, r1
 8005c9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ca2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005ca6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	015a      	lsls	r2, r3, #5
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	4413      	add	r3, r2
 8005cb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cb4:	691a      	ldr	r2, [r3, #16]
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	699b      	ldr	r3, [r3, #24]
 8005cba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cbe:	6939      	ldr	r1, [r7, #16]
 8005cc0:	0148      	lsls	r0, r1, #5
 8005cc2:	6979      	ldr	r1, [r7, #20]
 8005cc4:	4401      	add	r1, r0
 8005cc6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005cce:	79fb      	ldrb	r3, [r7, #7]
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d11e      	bne.n	8005d12 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	695b      	ldr	r3, [r3, #20]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d009      	beq.n	8005cf0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	015a      	lsls	r2, r3, #5
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	4413      	add	r3, r2
 8005ce4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ce8:	461a      	mov	r2, r3
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	695b      	ldr	r3, [r3, #20]
 8005cee:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	015a      	lsls	r2, r3, #5
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	693a      	ldr	r2, [r7, #16]
 8005d00:	0151      	lsls	r1, r2, #5
 8005d02:	697a      	ldr	r2, [r7, #20]
 8005d04:	440a      	add	r2, r1
 8005d06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d0a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005d0e:	6013      	str	r3, [r2, #0]
 8005d10:	e097      	b.n	8005e42 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	015a      	lsls	r2, r3, #5
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	4413      	add	r3, r2
 8005d1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	693a      	ldr	r2, [r7, #16]
 8005d22:	0151      	lsls	r1, r2, #5
 8005d24:	697a      	ldr	r2, [r7, #20]
 8005d26:	440a      	add	r2, r1
 8005d28:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d2c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005d30:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	699b      	ldr	r3, [r3, #24]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	f000 8083 	beq.w	8005e42 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	f003 030f 	and.w	r3, r3, #15
 8005d4c:	2101      	movs	r1, #1
 8005d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8005d52:	6979      	ldr	r1, [r7, #20]
 8005d54:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	634b      	str	r3, [r1, #52]	@ 0x34
 8005d5c:	e071      	b.n	8005e42 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	015a      	lsls	r2, r3, #5
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	4413      	add	r3, r2
 8005d66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d6a:	691b      	ldr	r3, [r3, #16]
 8005d6c:	693a      	ldr	r2, [r7, #16]
 8005d6e:	0151      	lsls	r1, r2, #5
 8005d70:	697a      	ldr	r2, [r7, #20]
 8005d72:	440a      	add	r2, r1
 8005d74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d78:	0cdb      	lsrs	r3, r3, #19
 8005d7a:	04db      	lsls	r3, r3, #19
 8005d7c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	015a      	lsls	r2, r3, #5
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	4413      	add	r3, r2
 8005d86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d8a:	691b      	ldr	r3, [r3, #16]
 8005d8c:	693a      	ldr	r2, [r7, #16]
 8005d8e:	0151      	lsls	r1, r2, #5
 8005d90:	697a      	ldr	r2, [r7, #20]
 8005d92:	440a      	add	r2, r1
 8005d94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d98:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005d9c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005da0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	699b      	ldr	r3, [r3, #24]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d003      	beq.n	8005db2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	68da      	ldr	r2, [r3, #12]
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	68da      	ldr	r2, [r3, #12]
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	015a      	lsls	r2, r3, #5
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	693a      	ldr	r2, [r7, #16]
 8005dca:	0151      	lsls	r1, r2, #5
 8005dcc:	697a      	ldr	r2, [r7, #20]
 8005dce:	440a      	add	r2, r1
 8005dd0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005dd4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005dd8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	015a      	lsls	r2, r3, #5
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	4413      	add	r3, r2
 8005de2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005de6:	691a      	ldr	r2, [r3, #16]
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	69db      	ldr	r3, [r3, #28]
 8005dec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005df0:	6939      	ldr	r1, [r7, #16]
 8005df2:	0148      	lsls	r0, r1, #5
 8005df4:	6979      	ldr	r1, [r7, #20]
 8005df6:	4401      	add	r1, r0
 8005df8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005e00:	79fb      	ldrb	r3, [r7, #7]
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d10d      	bne.n	8005e22 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d009      	beq.n	8005e22 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	6919      	ldr	r1, [r3, #16]
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	015a      	lsls	r2, r3, #5
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	4413      	add	r3, r2
 8005e1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e1e:	460a      	mov	r2, r1
 8005e20:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	015a      	lsls	r2, r3, #5
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	4413      	add	r3, r2
 8005e2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	693a      	ldr	r2, [r7, #16]
 8005e32:	0151      	lsls	r1, r2, #5
 8005e34:	697a      	ldr	r2, [r7, #20]
 8005e36:	440a      	add	r2, r1
 8005e38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e3c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005e40:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	371c      	adds	r7, #28
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b087      	sub	sp, #28
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	785b      	ldrb	r3, [r3, #1]
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d14a      	bne.n	8005f04 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	015a      	lsls	r2, r3, #5
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	4413      	add	r3, r2
 8005e78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005e82:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e86:	f040 8086 	bne.w	8005f96 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	015a      	lsls	r2, r3, #5
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	4413      	add	r3, r2
 8005e94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	683a      	ldr	r2, [r7, #0]
 8005e9c:	7812      	ldrb	r2, [r2, #0]
 8005e9e:	0151      	lsls	r1, r2, #5
 8005ea0:	693a      	ldr	r2, [r7, #16]
 8005ea2:	440a      	add	r2, r1
 8005ea4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ea8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005eac:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	015a      	lsls	r2, r3, #5
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	683a      	ldr	r2, [r7, #0]
 8005ec0:	7812      	ldrb	r2, [r2, #0]
 8005ec2:	0151      	lsls	r1, r2, #5
 8005ec4:	693a      	ldr	r2, [r7, #16]
 8005ec6:	440a      	add	r2, r1
 8005ec8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ecc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005ed0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	3301      	adds	r3, #1
 8005ed6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d902      	bls.n	8005ee8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	75fb      	strb	r3, [r7, #23]
          break;
 8005ee6:	e056      	b.n	8005f96 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	015a      	lsls	r2, r3, #5
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005efc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f00:	d0e7      	beq.n	8005ed2 <USB_EPStopXfer+0x82>
 8005f02:	e048      	b.n	8005f96 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	015a      	lsls	r2, r3, #5
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f1c:	d13b      	bne.n	8005f96 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	015a      	lsls	r2, r3, #5
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	4413      	add	r3, r2
 8005f28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	683a      	ldr	r2, [r7, #0]
 8005f30:	7812      	ldrb	r2, [r2, #0]
 8005f32:	0151      	lsls	r1, r2, #5
 8005f34:	693a      	ldr	r2, [r7, #16]
 8005f36:	440a      	add	r2, r1
 8005f38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f3c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005f40:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	015a      	lsls	r2, r3, #5
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	683a      	ldr	r2, [r7, #0]
 8005f54:	7812      	ldrb	r2, [r2, #0]
 8005f56:	0151      	lsls	r1, r2, #5
 8005f58:	693a      	ldr	r2, [r7, #16]
 8005f5a:	440a      	add	r2, r1
 8005f5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f60:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005f64:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	3301      	adds	r3, #1
 8005f6a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d902      	bls.n	8005f7c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	75fb      	strb	r3, [r7, #23]
          break;
 8005f7a:	e00c      	b.n	8005f96 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	015a      	lsls	r2, r3, #5
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	4413      	add	r3, r2
 8005f86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f90:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f94:	d0e7      	beq.n	8005f66 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005f96:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	371c      	adds	r7, #28
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b089      	sub	sp, #36	@ 0x24
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	60b9      	str	r1, [r7, #8]
 8005fae:	4611      	mov	r1, r2
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	71fb      	strb	r3, [r7, #7]
 8005fb6:	4613      	mov	r3, r2
 8005fb8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005fc2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d123      	bne.n	8006012 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005fca:	88bb      	ldrh	r3, [r7, #4]
 8005fcc:	3303      	adds	r3, #3
 8005fce:	089b      	lsrs	r3, r3, #2
 8005fd0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	61bb      	str	r3, [r7, #24]
 8005fd6:	e018      	b.n	800600a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005fd8:	79fb      	ldrb	r3, [r7, #7]
 8005fda:	031a      	lsls	r2, r3, #12
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	4413      	add	r3, r2
 8005fe0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	3301      	adds	r3, #1
 8005ff0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	3301      	adds	r3, #1
 8006002:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006004:	69bb      	ldr	r3, [r7, #24]
 8006006:	3301      	adds	r3, #1
 8006008:	61bb      	str	r3, [r7, #24]
 800600a:	69ba      	ldr	r2, [r7, #24]
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	429a      	cmp	r2, r3
 8006010:	d3e2      	bcc.n	8005fd8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006012:	2300      	movs	r3, #0
}
 8006014:	4618      	mov	r0, r3
 8006016:	3724      	adds	r7, #36	@ 0x24
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006020:	b480      	push	{r7}
 8006022:	b08b      	sub	sp, #44	@ 0x2c
 8006024:	af00      	add	r7, sp, #0
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	4613      	mov	r3, r2
 800602c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006036:	88fb      	ldrh	r3, [r7, #6]
 8006038:	089b      	lsrs	r3, r3, #2
 800603a:	b29b      	uxth	r3, r3
 800603c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800603e:	88fb      	ldrh	r3, [r7, #6]
 8006040:	f003 0303 	and.w	r3, r3, #3
 8006044:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006046:	2300      	movs	r3, #0
 8006048:	623b      	str	r3, [r7, #32]
 800604a:	e014      	b.n	8006076 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800604c:	69bb      	ldr	r3, [r7, #24]
 800604e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006056:	601a      	str	r2, [r3, #0]
    pDest++;
 8006058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800605a:	3301      	adds	r3, #1
 800605c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800605e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006060:	3301      	adds	r3, #1
 8006062:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006066:	3301      	adds	r3, #1
 8006068:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800606a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800606c:	3301      	adds	r3, #1
 800606e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006070:	6a3b      	ldr	r3, [r7, #32]
 8006072:	3301      	adds	r3, #1
 8006074:	623b      	str	r3, [r7, #32]
 8006076:	6a3a      	ldr	r2, [r7, #32]
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	429a      	cmp	r2, r3
 800607c:	d3e6      	bcc.n	800604c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800607e:	8bfb      	ldrh	r3, [r7, #30]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d01e      	beq.n	80060c2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006084:	2300      	movs	r3, #0
 8006086:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800608e:	461a      	mov	r2, r3
 8006090:	f107 0310 	add.w	r3, r7, #16
 8006094:	6812      	ldr	r2, [r2, #0]
 8006096:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006098:	693a      	ldr	r2, [r7, #16]
 800609a:	6a3b      	ldr	r3, [r7, #32]
 800609c:	b2db      	uxtb	r3, r3
 800609e:	00db      	lsls	r3, r3, #3
 80060a0:	fa22 f303 	lsr.w	r3, r2, r3
 80060a4:	b2da      	uxtb	r2, r3
 80060a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060a8:	701a      	strb	r2, [r3, #0]
      i++;
 80060aa:	6a3b      	ldr	r3, [r7, #32]
 80060ac:	3301      	adds	r3, #1
 80060ae:	623b      	str	r3, [r7, #32]
      pDest++;
 80060b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b2:	3301      	adds	r3, #1
 80060b4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80060b6:	8bfb      	ldrh	r3, [r7, #30]
 80060b8:	3b01      	subs	r3, #1
 80060ba:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80060bc:	8bfb      	ldrh	r3, [r7, #30]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d1ea      	bne.n	8006098 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80060c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	372c      	adds	r7, #44	@ 0x2c
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b085      	sub	sp, #20
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	785b      	ldrb	r3, [r3, #1]
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d12c      	bne.n	8006146 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	015a      	lsls	r2, r3, #5
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	4413      	add	r3, r2
 80060f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	db12      	blt.n	8006124 <USB_EPSetStall+0x54>
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d00f      	beq.n	8006124 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	015a      	lsls	r2, r3, #5
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	4413      	add	r3, r2
 800610c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68ba      	ldr	r2, [r7, #8]
 8006114:	0151      	lsls	r1, r2, #5
 8006116:	68fa      	ldr	r2, [r7, #12]
 8006118:	440a      	add	r2, r1
 800611a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800611e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006122:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	015a      	lsls	r2, r3, #5
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	4413      	add	r3, r2
 800612c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	68ba      	ldr	r2, [r7, #8]
 8006134:	0151      	lsls	r1, r2, #5
 8006136:	68fa      	ldr	r2, [r7, #12]
 8006138:	440a      	add	r2, r1
 800613a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800613e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006142:	6013      	str	r3, [r2, #0]
 8006144:	e02b      	b.n	800619e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	015a      	lsls	r2, r3, #5
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	4413      	add	r3, r2
 800614e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2b00      	cmp	r3, #0
 8006156:	db12      	blt.n	800617e <USB_EPSetStall+0xae>
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d00f      	beq.n	800617e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	015a      	lsls	r2, r3, #5
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	4413      	add	r3, r2
 8006166:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	68ba      	ldr	r2, [r7, #8]
 800616e:	0151      	lsls	r1, r2, #5
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	440a      	add	r2, r1
 8006174:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006178:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800617c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	015a      	lsls	r2, r3, #5
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	4413      	add	r3, r2
 8006186:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	68ba      	ldr	r2, [r7, #8]
 800618e:	0151      	lsls	r1, r2, #5
 8006190:	68fa      	ldr	r2, [r7, #12]
 8006192:	440a      	add	r2, r1
 8006194:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006198:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800619c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800619e:	2300      	movs	r3, #0
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3714      	adds	r7, #20
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b085      	sub	sp, #20
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	785b      	ldrb	r3, [r3, #1]
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d128      	bne.n	800621a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	015a      	lsls	r2, r3, #5
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	4413      	add	r3, r2
 80061d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68ba      	ldr	r2, [r7, #8]
 80061d8:	0151      	lsls	r1, r2, #5
 80061da:	68fa      	ldr	r2, [r7, #12]
 80061dc:	440a      	add	r2, r1
 80061de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061e2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80061e6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	791b      	ldrb	r3, [r3, #4]
 80061ec:	2b03      	cmp	r3, #3
 80061ee:	d003      	beq.n	80061f8 <USB_EPClearStall+0x4c>
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	791b      	ldrb	r3, [r3, #4]
 80061f4:	2b02      	cmp	r3, #2
 80061f6:	d138      	bne.n	800626a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	015a      	lsls	r2, r3, #5
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	4413      	add	r3, r2
 8006200:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	68ba      	ldr	r2, [r7, #8]
 8006208:	0151      	lsls	r1, r2, #5
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	440a      	add	r2, r1
 800620e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006212:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006216:	6013      	str	r3, [r2, #0]
 8006218:	e027      	b.n	800626a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	015a      	lsls	r2, r3, #5
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	4413      	add	r3, r2
 8006222:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	68ba      	ldr	r2, [r7, #8]
 800622a:	0151      	lsls	r1, r2, #5
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	440a      	add	r2, r1
 8006230:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006234:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006238:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	791b      	ldrb	r3, [r3, #4]
 800623e:	2b03      	cmp	r3, #3
 8006240:	d003      	beq.n	800624a <USB_EPClearStall+0x9e>
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	791b      	ldrb	r3, [r3, #4]
 8006246:	2b02      	cmp	r3, #2
 8006248:	d10f      	bne.n	800626a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	015a      	lsls	r2, r3, #5
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	4413      	add	r3, r2
 8006252:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	68ba      	ldr	r2, [r7, #8]
 800625a:	0151      	lsls	r1, r2, #5
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	440a      	add	r2, r1
 8006260:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006264:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006268:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800626a:	2300      	movs	r3, #0
}
 800626c:	4618      	mov	r0, r3
 800626e:	3714      	adds	r7, #20
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006278:	b480      	push	{r7}
 800627a:	b085      	sub	sp, #20
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	460b      	mov	r3, r1
 8006282:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	68fa      	ldr	r2, [r7, #12]
 8006292:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006296:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800629a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	78fb      	ldrb	r3, [r7, #3]
 80062a6:	011b      	lsls	r3, r3, #4
 80062a8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80062ac:	68f9      	ldr	r1, [r7, #12]
 80062ae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80062b2:	4313      	orrs	r3, r2
 80062b4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80062b6:	2300      	movs	r3, #0
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3714      	adds	r7, #20
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b085      	sub	sp, #20
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68fa      	ldr	r2, [r7, #12]
 80062da:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80062de:	f023 0303 	bic.w	r3, r3, #3
 80062e2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	68fa      	ldr	r2, [r7, #12]
 80062ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80062f2:	f023 0302 	bic.w	r3, r3, #2
 80062f6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3714      	adds	r7, #20
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr

08006306 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006306:	b480      	push	{r7}
 8006308:	b085      	sub	sp, #20
 800630a:	af00      	add	r7, sp, #0
 800630c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	68fa      	ldr	r2, [r7, #12]
 800631c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006320:	f023 0303 	bic.w	r3, r3, #3
 8006324:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	68fa      	ldr	r2, [r7, #12]
 8006330:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006334:	f043 0302 	orr.w	r3, r3, #2
 8006338:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800633a:	2300      	movs	r3, #0
}
 800633c:	4618      	mov	r0, r3
 800633e:	3714      	adds	r7, #20
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006348:	b480      	push	{r7}
 800634a:	b085      	sub	sp, #20
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	695b      	ldr	r3, [r3, #20]
 8006354:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	699b      	ldr	r3, [r3, #24]
 800635a:	68fa      	ldr	r2, [r7, #12]
 800635c:	4013      	ands	r3, r2
 800635e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006360:	68fb      	ldr	r3, [r7, #12]
}
 8006362:	4618      	mov	r0, r3
 8006364:	3714      	adds	r7, #20
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr

0800636e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800636e:	b480      	push	{r7}
 8006370:	b085      	sub	sp, #20
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006380:	699b      	ldr	r3, [r3, #24]
 8006382:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800638a:	69db      	ldr	r3, [r3, #28]
 800638c:	68ba      	ldr	r2, [r7, #8]
 800638e:	4013      	ands	r3, r2
 8006390:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	0c1b      	lsrs	r3, r3, #16
}
 8006396:	4618      	mov	r0, r3
 8006398:	3714      	adds	r7, #20
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr

080063a2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80063a2:	b480      	push	{r7}
 80063a4:	b085      	sub	sp, #20
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063b4:	699b      	ldr	r3, [r3, #24]
 80063b6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063be:	69db      	ldr	r3, [r3, #28]
 80063c0:	68ba      	ldr	r2, [r7, #8]
 80063c2:	4013      	ands	r3, r2
 80063c4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	b29b      	uxth	r3, r3
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3714      	adds	r7, #20
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr

080063d6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80063d6:	b480      	push	{r7}
 80063d8:	b085      	sub	sp, #20
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
 80063de:	460b      	mov	r3, r1
 80063e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80063e6:	78fb      	ldrb	r3, [r7, #3]
 80063e8:	015a      	lsls	r2, r3, #5
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	4413      	add	r3, r2
 80063ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063fc:	695b      	ldr	r3, [r3, #20]
 80063fe:	68ba      	ldr	r2, [r7, #8]
 8006400:	4013      	ands	r3, r2
 8006402:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006404:	68bb      	ldr	r3, [r7, #8]
}
 8006406:	4618      	mov	r0, r3
 8006408:	3714      	adds	r7, #20
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr

08006412 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006412:	b480      	push	{r7}
 8006414:	b087      	sub	sp, #28
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
 800641a:	460b      	mov	r3, r1
 800641c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006432:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006434:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006436:	78fb      	ldrb	r3, [r7, #3]
 8006438:	f003 030f 	and.w	r3, r3, #15
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	fa22 f303 	lsr.w	r3, r2, r3
 8006442:	01db      	lsls	r3, r3, #7
 8006444:	b2db      	uxtb	r3, r3
 8006446:	693a      	ldr	r2, [r7, #16]
 8006448:	4313      	orrs	r3, r2
 800644a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800644c:	78fb      	ldrb	r3, [r7, #3]
 800644e:	015a      	lsls	r2, r3, #5
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	4413      	add	r3, r2
 8006454:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	693a      	ldr	r2, [r7, #16]
 800645c:	4013      	ands	r3, r2
 800645e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006460:	68bb      	ldr	r3, [r7, #8]
}
 8006462:	4618      	mov	r0, r3
 8006464:	371c      	adds	r7, #28
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr

0800646e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800646e:	b480      	push	{r7}
 8006470:	b083      	sub	sp, #12
 8006472:	af00      	add	r7, sp, #0
 8006474:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	695b      	ldr	r3, [r3, #20]
 800647a:	f003 0301 	and.w	r3, r3, #1
}
 800647e:	4618      	mov	r0, r3
 8006480:	370c      	adds	r7, #12
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr

0800648a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800648a:	b480      	push	{r7}
 800648c:	b085      	sub	sp, #20
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	68fa      	ldr	r2, [r7, #12]
 80064a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064a4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80064a8:	f023 0307 	bic.w	r3, r3, #7
 80064ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	68fa      	ldr	r2, [r7, #12]
 80064b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80064bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80064c2:	2300      	movs	r3, #0
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3714      	adds	r7, #20
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr

080064d0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b087      	sub	sp, #28
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	460b      	mov	r3, r1
 80064da:	607a      	str	r2, [r7, #4]
 80064dc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	333c      	adds	r3, #60	@ 0x3c
 80064e6:	3304      	adds	r3, #4
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	4a26      	ldr	r2, [pc, #152]	@ (8006588 <USB_EP0_OutStart+0xb8>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d90a      	bls.n	800650a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006500:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006504:	d101      	bne.n	800650a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006506:	2300      	movs	r3, #0
 8006508:	e037      	b.n	800657a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006510:	461a      	mov	r2, r3
 8006512:	2300      	movs	r3, #0
 8006514:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800651c:	691b      	ldr	r3, [r3, #16]
 800651e:	697a      	ldr	r2, [r7, #20]
 8006520:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006524:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006528:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	697a      	ldr	r2, [r7, #20]
 8006534:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006538:	f043 0318 	orr.w	r3, r3, #24
 800653c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	697a      	ldr	r2, [r7, #20]
 8006548:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800654c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006550:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006552:	7afb      	ldrb	r3, [r7, #11]
 8006554:	2b01      	cmp	r3, #1
 8006556:	d10f      	bne.n	8006578 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800655e:	461a      	mov	r2, r3
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	697a      	ldr	r2, [r7, #20]
 800656e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006572:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006576:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	371c      	adds	r7, #28
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop
 8006588:	4f54300a 	.word	0x4f54300a

0800658c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800658c:	b480      	push	{r7}
 800658e:	b085      	sub	sp, #20
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006594:	2300      	movs	r3, #0
 8006596:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	3301      	adds	r3, #1
 800659c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	4a13      	ldr	r2, [pc, #76]	@ (80065f0 <USB_CoreReset+0x64>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d901      	bls.n	80065aa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80065a6:	2303      	movs	r3, #3
 80065a8:	e01b      	b.n	80065e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	daf2      	bge.n	8006598 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80065b2:	2300      	movs	r3, #0
 80065b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	f043 0201 	orr.w	r2, r3, #1
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	3301      	adds	r3, #1
 80065c6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	4a09      	ldr	r2, [pc, #36]	@ (80065f0 <USB_CoreReset+0x64>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d901      	bls.n	80065d4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80065d0:	2303      	movs	r3, #3
 80065d2:	e006      	b.n	80065e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	691b      	ldr	r3, [r3, #16]
 80065d8:	f003 0301 	and.w	r3, r3, #1
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d0f0      	beq.n	80065c2 <USB_CoreReset+0x36>

  return HAL_OK;
 80065e0:	2300      	movs	r3, #0
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3714      	adds	r7, #20
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr
 80065ee:	bf00      	nop
 80065f0:	00030d40 	.word	0x00030d40

080065f4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	460b      	mov	r3, r1
 80065fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006600:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006604:	f002 fcc0 	bl	8008f88 <USBD_static_malloc>
 8006608:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d109      	bne.n	8006624 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	32b0      	adds	r2, #176	@ 0xb0
 800661a:	2100      	movs	r1, #0
 800661c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006620:	2302      	movs	r3, #2
 8006622:	e0d4      	b.n	80067ce <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006624:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006628:	2100      	movs	r1, #0
 800662a:	68f8      	ldr	r0, [r7, #12]
 800662c:	f002 fd4c 	bl	80090c8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	32b0      	adds	r2, #176	@ 0xb0
 800663a:	68f9      	ldr	r1, [r7, #12]
 800663c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	32b0      	adds	r2, #176	@ 0xb0
 800664a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	7c1b      	ldrb	r3, [r3, #16]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d138      	bne.n	80066ce <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800665c:	4b5e      	ldr	r3, [pc, #376]	@ (80067d8 <USBD_CDC_Init+0x1e4>)
 800665e:	7819      	ldrb	r1, [r3, #0]
 8006660:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006664:	2202      	movs	r2, #2
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f002 fb1d 	bl	8008ca6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800666c:	4b5a      	ldr	r3, [pc, #360]	@ (80067d8 <USBD_CDC_Init+0x1e4>)
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	f003 020f 	and.w	r2, r3, #15
 8006674:	6879      	ldr	r1, [r7, #4]
 8006676:	4613      	mov	r3, r2
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	4413      	add	r3, r2
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	440b      	add	r3, r1
 8006680:	3324      	adds	r3, #36	@ 0x24
 8006682:	2201      	movs	r2, #1
 8006684:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006686:	4b55      	ldr	r3, [pc, #340]	@ (80067dc <USBD_CDC_Init+0x1e8>)
 8006688:	7819      	ldrb	r1, [r3, #0]
 800668a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800668e:	2202      	movs	r2, #2
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f002 fb08 	bl	8008ca6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006696:	4b51      	ldr	r3, [pc, #324]	@ (80067dc <USBD_CDC_Init+0x1e8>)
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	f003 020f 	and.w	r2, r3, #15
 800669e:	6879      	ldr	r1, [r7, #4]
 80066a0:	4613      	mov	r3, r2
 80066a2:	009b      	lsls	r3, r3, #2
 80066a4:	4413      	add	r3, r2
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	440b      	add	r3, r1
 80066aa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80066ae:	2201      	movs	r2, #1
 80066b0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80066b2:	4b4b      	ldr	r3, [pc, #300]	@ (80067e0 <USBD_CDC_Init+0x1ec>)
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	f003 020f 	and.w	r2, r3, #15
 80066ba:	6879      	ldr	r1, [r7, #4]
 80066bc:	4613      	mov	r3, r2
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	4413      	add	r3, r2
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	440b      	add	r3, r1
 80066c6:	3326      	adds	r3, #38	@ 0x26
 80066c8:	2210      	movs	r2, #16
 80066ca:	801a      	strh	r2, [r3, #0]
 80066cc:	e035      	b.n	800673a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80066ce:	4b42      	ldr	r3, [pc, #264]	@ (80067d8 <USBD_CDC_Init+0x1e4>)
 80066d0:	7819      	ldrb	r1, [r3, #0]
 80066d2:	2340      	movs	r3, #64	@ 0x40
 80066d4:	2202      	movs	r2, #2
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f002 fae5 	bl	8008ca6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80066dc:	4b3e      	ldr	r3, [pc, #248]	@ (80067d8 <USBD_CDC_Init+0x1e4>)
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	f003 020f 	and.w	r2, r3, #15
 80066e4:	6879      	ldr	r1, [r7, #4]
 80066e6:	4613      	mov	r3, r2
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	4413      	add	r3, r2
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	440b      	add	r3, r1
 80066f0:	3324      	adds	r3, #36	@ 0x24
 80066f2:	2201      	movs	r2, #1
 80066f4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80066f6:	4b39      	ldr	r3, [pc, #228]	@ (80067dc <USBD_CDC_Init+0x1e8>)
 80066f8:	7819      	ldrb	r1, [r3, #0]
 80066fa:	2340      	movs	r3, #64	@ 0x40
 80066fc:	2202      	movs	r2, #2
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f002 fad1 	bl	8008ca6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006704:	4b35      	ldr	r3, [pc, #212]	@ (80067dc <USBD_CDC_Init+0x1e8>)
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	f003 020f 	and.w	r2, r3, #15
 800670c:	6879      	ldr	r1, [r7, #4]
 800670e:	4613      	mov	r3, r2
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	4413      	add	r3, r2
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	440b      	add	r3, r1
 8006718:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800671c:	2201      	movs	r2, #1
 800671e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006720:	4b2f      	ldr	r3, [pc, #188]	@ (80067e0 <USBD_CDC_Init+0x1ec>)
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	f003 020f 	and.w	r2, r3, #15
 8006728:	6879      	ldr	r1, [r7, #4]
 800672a:	4613      	mov	r3, r2
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	4413      	add	r3, r2
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	440b      	add	r3, r1
 8006734:	3326      	adds	r3, #38	@ 0x26
 8006736:	2210      	movs	r2, #16
 8006738:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800673a:	4b29      	ldr	r3, [pc, #164]	@ (80067e0 <USBD_CDC_Init+0x1ec>)
 800673c:	7819      	ldrb	r1, [r3, #0]
 800673e:	2308      	movs	r3, #8
 8006740:	2203      	movs	r2, #3
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f002 faaf 	bl	8008ca6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006748:	4b25      	ldr	r3, [pc, #148]	@ (80067e0 <USBD_CDC_Init+0x1ec>)
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	f003 020f 	and.w	r2, r3, #15
 8006750:	6879      	ldr	r1, [r7, #4]
 8006752:	4613      	mov	r3, r2
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	4413      	add	r3, r2
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	440b      	add	r3, r1
 800675c:	3324      	adds	r3, #36	@ 0x24
 800675e:	2201      	movs	r2, #1
 8006760:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2200      	movs	r2, #0
 8006766:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	33b0      	adds	r3, #176	@ 0xb0
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	4413      	add	r3, r2
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2200      	movs	r2, #0
 8006782:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2200      	movs	r2, #0
 800678a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006794:	2b00      	cmp	r3, #0
 8006796:	d101      	bne.n	800679c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006798:	2302      	movs	r3, #2
 800679a:	e018      	b.n	80067ce <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	7c1b      	ldrb	r3, [r3, #16]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d10a      	bne.n	80067ba <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80067a4:	4b0d      	ldr	r3, [pc, #52]	@ (80067dc <USBD_CDC_Init+0x1e8>)
 80067a6:	7819      	ldrb	r1, [r3, #0]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80067ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f002 fb66 	bl	8008e84 <USBD_LL_PrepareReceive>
 80067b8:	e008      	b.n	80067cc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80067ba:	4b08      	ldr	r3, [pc, #32]	@ (80067dc <USBD_CDC_Init+0x1e8>)
 80067bc:	7819      	ldrb	r1, [r3, #0]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80067c4:	2340      	movs	r3, #64	@ 0x40
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f002 fb5c 	bl	8008e84 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80067cc:	2300      	movs	r3, #0
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3710      	adds	r7, #16
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	20000093 	.word	0x20000093
 80067dc:	20000094 	.word	0x20000094
 80067e0:	20000095 	.word	0x20000095

080067e4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b082      	sub	sp, #8
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	460b      	mov	r3, r1
 80067ee:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80067f0:	4b3a      	ldr	r3, [pc, #232]	@ (80068dc <USBD_CDC_DeInit+0xf8>)
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	4619      	mov	r1, r3
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f002 fa7b 	bl	8008cf2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80067fc:	4b37      	ldr	r3, [pc, #220]	@ (80068dc <USBD_CDC_DeInit+0xf8>)
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	f003 020f 	and.w	r2, r3, #15
 8006804:	6879      	ldr	r1, [r7, #4]
 8006806:	4613      	mov	r3, r2
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	4413      	add	r3, r2
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	440b      	add	r3, r1
 8006810:	3324      	adds	r3, #36	@ 0x24
 8006812:	2200      	movs	r2, #0
 8006814:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006816:	4b32      	ldr	r3, [pc, #200]	@ (80068e0 <USBD_CDC_DeInit+0xfc>)
 8006818:	781b      	ldrb	r3, [r3, #0]
 800681a:	4619      	mov	r1, r3
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f002 fa68 	bl	8008cf2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006822:	4b2f      	ldr	r3, [pc, #188]	@ (80068e0 <USBD_CDC_DeInit+0xfc>)
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	f003 020f 	and.w	r2, r3, #15
 800682a:	6879      	ldr	r1, [r7, #4]
 800682c:	4613      	mov	r3, r2
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	4413      	add	r3, r2
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	440b      	add	r3, r1
 8006836:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800683a:	2200      	movs	r2, #0
 800683c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800683e:	4b29      	ldr	r3, [pc, #164]	@ (80068e4 <USBD_CDC_DeInit+0x100>)
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	4619      	mov	r1, r3
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f002 fa54 	bl	8008cf2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800684a:	4b26      	ldr	r3, [pc, #152]	@ (80068e4 <USBD_CDC_DeInit+0x100>)
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	f003 020f 	and.w	r2, r3, #15
 8006852:	6879      	ldr	r1, [r7, #4]
 8006854:	4613      	mov	r3, r2
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	4413      	add	r3, r2
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	440b      	add	r3, r1
 800685e:	3324      	adds	r3, #36	@ 0x24
 8006860:	2200      	movs	r2, #0
 8006862:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006864:	4b1f      	ldr	r3, [pc, #124]	@ (80068e4 <USBD_CDC_DeInit+0x100>)
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	f003 020f 	and.w	r2, r3, #15
 800686c:	6879      	ldr	r1, [r7, #4]
 800686e:	4613      	mov	r3, r2
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	4413      	add	r3, r2
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	440b      	add	r3, r1
 8006878:	3326      	adds	r3, #38	@ 0x26
 800687a:	2200      	movs	r2, #0
 800687c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	32b0      	adds	r2, #176	@ 0xb0
 8006888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d01f      	beq.n	80068d0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	33b0      	adds	r3, #176	@ 0xb0
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	4413      	add	r3, r2
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	32b0      	adds	r2, #176	@ 0xb0
 80068ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068b2:	4618      	mov	r0, r3
 80068b4:	f002 fb76 	bl	8008fa4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	32b0      	adds	r2, #176	@ 0xb0
 80068c2:	2100      	movs	r1, #0
 80068c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80068d0:	2300      	movs	r3, #0
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3708      	adds	r7, #8
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
 80068da:	bf00      	nop
 80068dc:	20000093 	.word	0x20000093
 80068e0:	20000094 	.word	0x20000094
 80068e4:	20000095 	.word	0x20000095

080068e8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b086      	sub	sp, #24
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	32b0      	adds	r2, #176	@ 0xb0
 80068fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006900:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006902:	2300      	movs	r3, #0
 8006904:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006906:	2300      	movs	r3, #0
 8006908:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800690a:	2300      	movs	r3, #0
 800690c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d101      	bne.n	8006918 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006914:	2303      	movs	r3, #3
 8006916:	e0bf      	b.n	8006a98 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006920:	2b00      	cmp	r3, #0
 8006922:	d050      	beq.n	80069c6 <USBD_CDC_Setup+0xde>
 8006924:	2b20      	cmp	r3, #32
 8006926:	f040 80af 	bne.w	8006a88 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	88db      	ldrh	r3, [r3, #6]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d03a      	beq.n	80069a8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	b25b      	sxtb	r3, r3
 8006938:	2b00      	cmp	r3, #0
 800693a:	da1b      	bge.n	8006974 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	33b0      	adds	r3, #176	@ 0xb0
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	4413      	add	r3, r2
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	683a      	ldr	r2, [r7, #0]
 8006950:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006952:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006954:	683a      	ldr	r2, [r7, #0]
 8006956:	88d2      	ldrh	r2, [r2, #6]
 8006958:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	88db      	ldrh	r3, [r3, #6]
 800695e:	2b07      	cmp	r3, #7
 8006960:	bf28      	it	cs
 8006962:	2307      	movcs	r3, #7
 8006964:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	89fa      	ldrh	r2, [r7, #14]
 800696a:	4619      	mov	r1, r3
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f001 fd6b 	bl	8008448 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006972:	e090      	b.n	8006a96 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	785a      	ldrb	r2, [r3, #1]
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	88db      	ldrh	r3, [r3, #6]
 8006982:	2b3f      	cmp	r3, #63	@ 0x3f
 8006984:	d803      	bhi.n	800698e <USBD_CDC_Setup+0xa6>
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	88db      	ldrh	r3, [r3, #6]
 800698a:	b2da      	uxtb	r2, r3
 800698c:	e000      	b.n	8006990 <USBD_CDC_Setup+0xa8>
 800698e:	2240      	movs	r2, #64	@ 0x40
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006996:	6939      	ldr	r1, [r7, #16]
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800699e:	461a      	mov	r2, r3
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f001 fd7d 	bl	80084a0 <USBD_CtlPrepareRx>
      break;
 80069a6:	e076      	b.n	8006a96 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	33b0      	adds	r3, #176	@ 0xb0
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	4413      	add	r3, r2
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	683a      	ldr	r2, [r7, #0]
 80069bc:	7850      	ldrb	r0, [r2, #1]
 80069be:	2200      	movs	r2, #0
 80069c0:	6839      	ldr	r1, [r7, #0]
 80069c2:	4798      	blx	r3
      break;
 80069c4:	e067      	b.n	8006a96 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	785b      	ldrb	r3, [r3, #1]
 80069ca:	2b0b      	cmp	r3, #11
 80069cc:	d851      	bhi.n	8006a72 <USBD_CDC_Setup+0x18a>
 80069ce:	a201      	add	r2, pc, #4	@ (adr r2, 80069d4 <USBD_CDC_Setup+0xec>)
 80069d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d4:	08006a05 	.word	0x08006a05
 80069d8:	08006a81 	.word	0x08006a81
 80069dc:	08006a73 	.word	0x08006a73
 80069e0:	08006a73 	.word	0x08006a73
 80069e4:	08006a73 	.word	0x08006a73
 80069e8:	08006a73 	.word	0x08006a73
 80069ec:	08006a73 	.word	0x08006a73
 80069f0:	08006a73 	.word	0x08006a73
 80069f4:	08006a73 	.word	0x08006a73
 80069f8:	08006a73 	.word	0x08006a73
 80069fc:	08006a2f 	.word	0x08006a2f
 8006a00:	08006a59 	.word	0x08006a59
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	2b03      	cmp	r3, #3
 8006a0e:	d107      	bne.n	8006a20 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006a10:	f107 030a 	add.w	r3, r7, #10
 8006a14:	2202      	movs	r2, #2
 8006a16:	4619      	mov	r1, r3
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f001 fd15 	bl	8008448 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a1e:	e032      	b.n	8006a86 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006a20:	6839      	ldr	r1, [r7, #0]
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f001 fc9f 	bl	8008366 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a28:	2303      	movs	r3, #3
 8006a2a:	75fb      	strb	r3, [r7, #23]
          break;
 8006a2c:	e02b      	b.n	8006a86 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	2b03      	cmp	r3, #3
 8006a38:	d107      	bne.n	8006a4a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006a3a:	f107 030d 	add.w	r3, r7, #13
 8006a3e:	2201      	movs	r2, #1
 8006a40:	4619      	mov	r1, r3
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f001 fd00 	bl	8008448 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a48:	e01d      	b.n	8006a86 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006a4a:	6839      	ldr	r1, [r7, #0]
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f001 fc8a 	bl	8008366 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a52:	2303      	movs	r3, #3
 8006a54:	75fb      	strb	r3, [r7, #23]
          break;
 8006a56:	e016      	b.n	8006a86 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	2b03      	cmp	r3, #3
 8006a62:	d00f      	beq.n	8006a84 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006a64:	6839      	ldr	r1, [r7, #0]
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f001 fc7d 	bl	8008366 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a6c:	2303      	movs	r3, #3
 8006a6e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006a70:	e008      	b.n	8006a84 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006a72:	6839      	ldr	r1, [r7, #0]
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f001 fc76 	bl	8008366 <USBD_CtlError>
          ret = USBD_FAIL;
 8006a7a:	2303      	movs	r3, #3
 8006a7c:	75fb      	strb	r3, [r7, #23]
          break;
 8006a7e:	e002      	b.n	8006a86 <USBD_CDC_Setup+0x19e>
          break;
 8006a80:	bf00      	nop
 8006a82:	e008      	b.n	8006a96 <USBD_CDC_Setup+0x1ae>
          break;
 8006a84:	bf00      	nop
      }
      break;
 8006a86:	e006      	b.n	8006a96 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006a88:	6839      	ldr	r1, [r7, #0]
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f001 fc6b 	bl	8008366 <USBD_CtlError>
      ret = USBD_FAIL;
 8006a90:	2303      	movs	r3, #3
 8006a92:	75fb      	strb	r3, [r7, #23]
      break;
 8006a94:	bf00      	nop
  }

  return (uint8_t)ret;
 8006a96:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3718      	adds	r7, #24
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	460b      	mov	r3, r1
 8006aaa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006ab2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	32b0      	adds	r2, #176	@ 0xb0
 8006abe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d101      	bne.n	8006aca <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006ac6:	2303      	movs	r3, #3
 8006ac8:	e065      	b.n	8006b96 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	32b0      	adds	r2, #176	@ 0xb0
 8006ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ad8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006ada:	78fb      	ldrb	r3, [r7, #3]
 8006adc:	f003 020f 	and.w	r2, r3, #15
 8006ae0:	6879      	ldr	r1, [r7, #4]
 8006ae2:	4613      	mov	r3, r2
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	4413      	add	r3, r2
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	440b      	add	r3, r1
 8006aec:	3318      	adds	r3, #24
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d02f      	beq.n	8006b54 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006af4:	78fb      	ldrb	r3, [r7, #3]
 8006af6:	f003 020f 	and.w	r2, r3, #15
 8006afa:	6879      	ldr	r1, [r7, #4]
 8006afc:	4613      	mov	r3, r2
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	4413      	add	r3, r2
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	440b      	add	r3, r1
 8006b06:	3318      	adds	r3, #24
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	78fb      	ldrb	r3, [r7, #3]
 8006b0c:	f003 010f 	and.w	r1, r3, #15
 8006b10:	68f8      	ldr	r0, [r7, #12]
 8006b12:	460b      	mov	r3, r1
 8006b14:	00db      	lsls	r3, r3, #3
 8006b16:	440b      	add	r3, r1
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	4403      	add	r3, r0
 8006b1c:	3348      	adds	r3, #72	@ 0x48
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	fbb2 f1f3 	udiv	r1, r2, r3
 8006b24:	fb01 f303 	mul.w	r3, r1, r3
 8006b28:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d112      	bne.n	8006b54 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006b2e:	78fb      	ldrb	r3, [r7, #3]
 8006b30:	f003 020f 	and.w	r2, r3, #15
 8006b34:	6879      	ldr	r1, [r7, #4]
 8006b36:	4613      	mov	r3, r2
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	4413      	add	r3, r2
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	440b      	add	r3, r1
 8006b40:	3318      	adds	r3, #24
 8006b42:	2200      	movs	r2, #0
 8006b44:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006b46:	78f9      	ldrb	r1, [r7, #3]
 8006b48:	2300      	movs	r3, #0
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f002 f978 	bl	8008e42 <USBD_LL_Transmit>
 8006b52:	e01f      	b.n	8006b94 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	33b0      	adds	r3, #176	@ 0xb0
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	4413      	add	r3, r2
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	691b      	ldr	r3, [r3, #16]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d010      	beq.n	8006b94 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	33b0      	adds	r3, #176	@ 0xb0
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	4413      	add	r3, r2
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	691b      	ldr	r3, [r3, #16]
 8006b84:	68ba      	ldr	r2, [r7, #8]
 8006b86:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8006b8a:	68ba      	ldr	r2, [r7, #8]
 8006b8c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006b90:	78fa      	ldrb	r2, [r7, #3]
 8006b92:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3710      	adds	r7, #16
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}

08006b9e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b9e:	b580      	push	{r7, lr}
 8006ba0:	b084      	sub	sp, #16
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
 8006ba6:	460b      	mov	r3, r1
 8006ba8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	32b0      	adds	r2, #176	@ 0xb0
 8006bb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bb8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	32b0      	adds	r2, #176	@ 0xb0
 8006bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d101      	bne.n	8006bd0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006bcc:	2303      	movs	r3, #3
 8006bce:	e01a      	b.n	8006c06 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006bd0:	78fb      	ldrb	r3, [r7, #3]
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f002 f976 	bl	8008ec6 <USBD_LL_GetRxDataSize>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	33b0      	adds	r3, #176	@ 0xb0
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	4413      	add	r3, r2
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	68db      	ldr	r3, [r3, #12]
 8006bf4:	68fa      	ldr	r2, [r7, #12]
 8006bf6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006bfa:	68fa      	ldr	r2, [r7, #12]
 8006bfc:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006c00:	4611      	mov	r1, r2
 8006c02:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006c04:	2300      	movs	r3, #0
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3710      	adds	r7, #16
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}

08006c0e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006c0e:	b580      	push	{r7, lr}
 8006c10:	b084      	sub	sp, #16
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	32b0      	adds	r2, #176	@ 0xb0
 8006c20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c24:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d101      	bne.n	8006c30 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006c2c:	2303      	movs	r3, #3
 8006c2e:	e024      	b.n	8006c7a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	33b0      	adds	r3, #176	@ 0xb0
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	4413      	add	r3, r2
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d019      	beq.n	8006c78 <USBD_CDC_EP0_RxReady+0x6a>
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006c4a:	2bff      	cmp	r3, #255	@ 0xff
 8006c4c:	d014      	beq.n	8006c78 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	33b0      	adds	r3, #176	@ 0xb0
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	4413      	add	r3, r2
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	68fa      	ldr	r2, [r7, #12]
 8006c62:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8006c66:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006c68:	68fa      	ldr	r2, [r7, #12]
 8006c6a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006c6e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	22ff      	movs	r2, #255	@ 0xff
 8006c74:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8006c78:	2300      	movs	r3, #0
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3710      	adds	r7, #16
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
	...

08006c84 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b086      	sub	sp, #24
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006c8c:	2182      	movs	r1, #130	@ 0x82
 8006c8e:	4818      	ldr	r0, [pc, #96]	@ (8006cf0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006c90:	f000 fd09 	bl	80076a6 <USBD_GetEpDesc>
 8006c94:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006c96:	2101      	movs	r1, #1
 8006c98:	4815      	ldr	r0, [pc, #84]	@ (8006cf0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006c9a:	f000 fd04 	bl	80076a6 <USBD_GetEpDesc>
 8006c9e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006ca0:	2181      	movs	r1, #129	@ 0x81
 8006ca2:	4813      	ldr	r0, [pc, #76]	@ (8006cf0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006ca4:	f000 fcff 	bl	80076a6 <USBD_GetEpDesc>
 8006ca8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d002      	beq.n	8006cb6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	2210      	movs	r2, #16
 8006cb4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d006      	beq.n	8006cca <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006cc4:	711a      	strb	r2, [r3, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d006      	beq.n	8006cde <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006cd8:	711a      	strb	r2, [r3, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2243      	movs	r2, #67	@ 0x43
 8006ce2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006ce4:	4b02      	ldr	r3, [pc, #8]	@ (8006cf0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3718      	adds	r7, #24
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	20000050 	.word	0x20000050

08006cf4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b086      	sub	sp, #24
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006cfc:	2182      	movs	r1, #130	@ 0x82
 8006cfe:	4818      	ldr	r0, [pc, #96]	@ (8006d60 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006d00:	f000 fcd1 	bl	80076a6 <USBD_GetEpDesc>
 8006d04:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006d06:	2101      	movs	r1, #1
 8006d08:	4815      	ldr	r0, [pc, #84]	@ (8006d60 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006d0a:	f000 fccc 	bl	80076a6 <USBD_GetEpDesc>
 8006d0e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006d10:	2181      	movs	r1, #129	@ 0x81
 8006d12:	4813      	ldr	r0, [pc, #76]	@ (8006d60 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006d14:	f000 fcc7 	bl	80076a6 <USBD_GetEpDesc>
 8006d18:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d002      	beq.n	8006d26 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	2210      	movs	r2, #16
 8006d24:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d006      	beq.n	8006d3a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	711a      	strb	r2, [r3, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	f042 0202 	orr.w	r2, r2, #2
 8006d38:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d006      	beq.n	8006d4e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2200      	movs	r2, #0
 8006d44:	711a      	strb	r2, [r3, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	f042 0202 	orr.w	r2, r2, #2
 8006d4c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2243      	movs	r2, #67	@ 0x43
 8006d52:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006d54:	4b02      	ldr	r3, [pc, #8]	@ (8006d60 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3718      	adds	r7, #24
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop
 8006d60:	20000050 	.word	0x20000050

08006d64 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b086      	sub	sp, #24
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006d6c:	2182      	movs	r1, #130	@ 0x82
 8006d6e:	4818      	ldr	r0, [pc, #96]	@ (8006dd0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006d70:	f000 fc99 	bl	80076a6 <USBD_GetEpDesc>
 8006d74:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006d76:	2101      	movs	r1, #1
 8006d78:	4815      	ldr	r0, [pc, #84]	@ (8006dd0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006d7a:	f000 fc94 	bl	80076a6 <USBD_GetEpDesc>
 8006d7e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006d80:	2181      	movs	r1, #129	@ 0x81
 8006d82:	4813      	ldr	r0, [pc, #76]	@ (8006dd0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006d84:	f000 fc8f 	bl	80076a6 <USBD_GetEpDesc>
 8006d88:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d002      	beq.n	8006d96 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	2210      	movs	r2, #16
 8006d94:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d006      	beq.n	8006daa <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006da4:	711a      	strb	r2, [r3, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d006      	beq.n	8006dbe <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2200      	movs	r2, #0
 8006db4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006db8:	711a      	strb	r2, [r3, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2243      	movs	r2, #67	@ 0x43
 8006dc2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006dc4:	4b02      	ldr	r3, [pc, #8]	@ (8006dd0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3718      	adds	r7, #24
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	20000050 	.word	0x20000050

08006dd4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b083      	sub	sp, #12
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	220a      	movs	r2, #10
 8006de0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006de2:	4b03      	ldr	r3, [pc, #12]	@ (8006df0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	370c      	adds	r7, #12
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr
 8006df0:	2000000c 	.word	0x2000000c

08006df4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d101      	bne.n	8006e08 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006e04:	2303      	movs	r3, #3
 8006e06:	e009      	b.n	8006e1c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	33b0      	adds	r3, #176	@ 0xb0
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	4413      	add	r3, r2
 8006e16:	683a      	ldr	r2, [r7, #0]
 8006e18:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006e1a:	2300      	movs	r3, #0
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	370c      	adds	r7, #12
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b087      	sub	sp, #28
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	60f8      	str	r0, [r7, #12]
 8006e30:	60b9      	str	r1, [r7, #8]
 8006e32:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	32b0      	adds	r2, #176	@ 0xb0
 8006e3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e42:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d101      	bne.n	8006e4e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006e4a:	2303      	movs	r3, #3
 8006e4c:	e008      	b.n	8006e60 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	68ba      	ldr	r2, [r7, #8]
 8006e52:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8006e5e:	2300      	movs	r3, #0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	371c      	adds	r7, #28
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr

08006e6c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b085      	sub	sp, #20
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	32b0      	adds	r2, #176	@ 0xb0
 8006e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e84:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d101      	bne.n	8006e90 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006e8c:	2303      	movs	r3, #3
 8006e8e:	e004      	b.n	8006e9a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	683a      	ldr	r2, [r7, #0]
 8006e94:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8006e98:	2300      	movs	r3, #0
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3714      	adds	r7, #20
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr
	...

08006ea8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	32b0      	adds	r2, #176	@ 0xb0
 8006eba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ebe:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	32b0      	adds	r2, #176	@ 0xb0
 8006eca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d101      	bne.n	8006ed6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006ed2:	2303      	movs	r3, #3
 8006ed4:	e018      	b.n	8006f08 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	7c1b      	ldrb	r3, [r3, #16]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d10a      	bne.n	8006ef4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006ede:	4b0c      	ldr	r3, [pc, #48]	@ (8006f10 <USBD_CDC_ReceivePacket+0x68>)
 8006ee0:	7819      	ldrb	r1, [r3, #0]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006ee8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f001 ffc9 	bl	8008e84 <USBD_LL_PrepareReceive>
 8006ef2:	e008      	b.n	8006f06 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006ef4:	4b06      	ldr	r3, [pc, #24]	@ (8006f10 <USBD_CDC_ReceivePacket+0x68>)
 8006ef6:	7819      	ldrb	r1, [r3, #0]
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006efe:	2340      	movs	r3, #64	@ 0x40
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f001 ffbf 	bl	8008e84 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006f06:	2300      	movs	r3, #0
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3710      	adds	r7, #16
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}
 8006f10:	20000094 	.word	0x20000094

08006f14 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b086      	sub	sp, #24
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	60f8      	str	r0, [r7, #12]
 8006f1c:	60b9      	str	r1, [r7, #8]
 8006f1e:	4613      	mov	r3, r2
 8006f20:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d101      	bne.n	8006f2c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006f28:	2303      	movs	r3, #3
 8006f2a:	e01f      	b.n	8006f6c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2200      	movs	r2, #0
 8006f38:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d003      	beq.n	8006f52 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	68ba      	ldr	r2, [r7, #8]
 8006f4e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2201      	movs	r2, #1
 8006f56:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	79fa      	ldrb	r2, [r7, #7]
 8006f5e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006f60:	68f8      	ldr	r0, [r7, #12]
 8006f62:	f001 fe35 	bl	8008bd0 <USBD_LL_Init>
 8006f66:	4603      	mov	r3, r0
 8006f68:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006f6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3718      	adds	r7, #24
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b084      	sub	sp, #16
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d101      	bne.n	8006f8c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006f88:	2303      	movs	r3, #3
 8006f8a:	e025      	b.n	8006fd8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	683a      	ldr	r2, [r7, #0]
 8006f90:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	32ae      	adds	r2, #174	@ 0xae
 8006f9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d00f      	beq.n	8006fc8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	32ae      	adds	r2, #174	@ 0xae
 8006fb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fb8:	f107 020e 	add.w	r2, r7, #14
 8006fbc:	4610      	mov	r0, r2
 8006fbe:	4798      	blx	r3
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006fce:	1c5a      	adds	r2, r3, #1
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006fd6:	2300      	movs	r3, #0
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3710      	adds	r7, #16
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b082      	sub	sp, #8
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f001 fe41 	bl	8008c70 <USBD_LL_Start>
 8006fee:	4603      	mov	r3, r0
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3708      	adds	r7, #8
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}

08006ff8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b083      	sub	sp, #12
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007000:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007002:	4618      	mov	r0, r3
 8007004:	370c      	adds	r7, #12
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr

0800700e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800700e:	b580      	push	{r7, lr}
 8007010:	b084      	sub	sp, #16
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
 8007016:	460b      	mov	r3, r1
 8007018:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800701a:	2300      	movs	r3, #0
 800701c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007024:	2b00      	cmp	r3, #0
 8007026:	d009      	beq.n	800703c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	78fa      	ldrb	r2, [r7, #3]
 8007032:	4611      	mov	r1, r2
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	4798      	blx	r3
 8007038:	4603      	mov	r3, r0
 800703a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800703c:	7bfb      	ldrb	r3, [r7, #15]
}
 800703e:	4618      	mov	r0, r3
 8007040:	3710      	adds	r7, #16
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}

08007046 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007046:	b580      	push	{r7, lr}
 8007048:	b084      	sub	sp, #16
 800704a:	af00      	add	r7, sp, #0
 800704c:	6078      	str	r0, [r7, #4]
 800704e:	460b      	mov	r3, r1
 8007050:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007052:	2300      	movs	r3, #0
 8007054:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	78fa      	ldrb	r2, [r7, #3]
 8007060:	4611      	mov	r1, r2
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	4798      	blx	r3
 8007066:	4603      	mov	r3, r0
 8007068:	2b00      	cmp	r3, #0
 800706a:	d001      	beq.n	8007070 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800706c:	2303      	movs	r3, #3
 800706e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007070:	7bfb      	ldrb	r3, [r7, #15]
}
 8007072:	4618      	mov	r0, r3
 8007074:	3710      	adds	r7, #16
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}

0800707a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800707a:	b580      	push	{r7, lr}
 800707c:	b084      	sub	sp, #16
 800707e:	af00      	add	r7, sp, #0
 8007080:	6078      	str	r0, [r7, #4]
 8007082:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800708a:	6839      	ldr	r1, [r7, #0]
 800708c:	4618      	mov	r0, r3
 800708e:	f001 f930 	bl	80082f2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2201      	movs	r2, #1
 8007096:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80070a0:	461a      	mov	r2, r3
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80070ae:	f003 031f 	and.w	r3, r3, #31
 80070b2:	2b02      	cmp	r3, #2
 80070b4:	d01a      	beq.n	80070ec <USBD_LL_SetupStage+0x72>
 80070b6:	2b02      	cmp	r3, #2
 80070b8:	d822      	bhi.n	8007100 <USBD_LL_SetupStage+0x86>
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d002      	beq.n	80070c4 <USBD_LL_SetupStage+0x4a>
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d00a      	beq.n	80070d8 <USBD_LL_SetupStage+0x5e>
 80070c2:	e01d      	b.n	8007100 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80070ca:	4619      	mov	r1, r3
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f000 fb5d 	bl	800778c <USBD_StdDevReq>
 80070d2:	4603      	mov	r3, r0
 80070d4:	73fb      	strb	r3, [r7, #15]
      break;
 80070d6:	e020      	b.n	800711a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80070de:	4619      	mov	r1, r3
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f000 fbc5 	bl	8007870 <USBD_StdItfReq>
 80070e6:	4603      	mov	r3, r0
 80070e8:	73fb      	strb	r3, [r7, #15]
      break;
 80070ea:	e016      	b.n	800711a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80070f2:	4619      	mov	r1, r3
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 fc27 	bl	8007948 <USBD_StdEPReq>
 80070fa:	4603      	mov	r3, r0
 80070fc:	73fb      	strb	r3, [r7, #15]
      break;
 80070fe:	e00c      	b.n	800711a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007106:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800710a:	b2db      	uxtb	r3, r3
 800710c:	4619      	mov	r1, r3
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f001 fe0e 	bl	8008d30 <USBD_LL_StallEP>
 8007114:	4603      	mov	r3, r0
 8007116:	73fb      	strb	r3, [r7, #15]
      break;
 8007118:	bf00      	nop
  }

  return ret;
 800711a:	7bfb      	ldrb	r3, [r7, #15]
}
 800711c:	4618      	mov	r0, r3
 800711e:	3710      	adds	r7, #16
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b086      	sub	sp, #24
 8007128:	af00      	add	r7, sp, #0
 800712a:	60f8      	str	r0, [r7, #12]
 800712c:	460b      	mov	r3, r1
 800712e:	607a      	str	r2, [r7, #4]
 8007130:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007132:	2300      	movs	r3, #0
 8007134:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007136:	7afb      	ldrb	r3, [r7, #11]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d16e      	bne.n	800721a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007142:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800714a:	2b03      	cmp	r3, #3
 800714c:	f040 8098 	bne.w	8007280 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	689a      	ldr	r2, [r3, #8]
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	68db      	ldr	r3, [r3, #12]
 8007158:	429a      	cmp	r2, r3
 800715a:	d913      	bls.n	8007184 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	689a      	ldr	r2, [r3, #8]
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	1ad2      	subs	r2, r2, r3
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	68da      	ldr	r2, [r3, #12]
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	4293      	cmp	r3, r2
 8007174:	bf28      	it	cs
 8007176:	4613      	movcs	r3, r2
 8007178:	461a      	mov	r2, r3
 800717a:	6879      	ldr	r1, [r7, #4]
 800717c:	68f8      	ldr	r0, [r7, #12]
 800717e:	f001 f9ac 	bl	80084da <USBD_CtlContinueRx>
 8007182:	e07d      	b.n	8007280 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800718a:	f003 031f 	and.w	r3, r3, #31
 800718e:	2b02      	cmp	r3, #2
 8007190:	d014      	beq.n	80071bc <USBD_LL_DataOutStage+0x98>
 8007192:	2b02      	cmp	r3, #2
 8007194:	d81d      	bhi.n	80071d2 <USBD_LL_DataOutStage+0xae>
 8007196:	2b00      	cmp	r3, #0
 8007198:	d002      	beq.n	80071a0 <USBD_LL_DataOutStage+0x7c>
 800719a:	2b01      	cmp	r3, #1
 800719c:	d003      	beq.n	80071a6 <USBD_LL_DataOutStage+0x82>
 800719e:	e018      	b.n	80071d2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80071a0:	2300      	movs	r3, #0
 80071a2:	75bb      	strb	r3, [r7, #22]
            break;
 80071a4:	e018      	b.n	80071d8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	4619      	mov	r1, r3
 80071b0:	68f8      	ldr	r0, [r7, #12]
 80071b2:	f000 fa5e 	bl	8007672 <USBD_CoreFindIF>
 80071b6:	4603      	mov	r3, r0
 80071b8:	75bb      	strb	r3, [r7, #22]
            break;
 80071ba:	e00d      	b.n	80071d8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	4619      	mov	r1, r3
 80071c6:	68f8      	ldr	r0, [r7, #12]
 80071c8:	f000 fa60 	bl	800768c <USBD_CoreFindEP>
 80071cc:	4603      	mov	r3, r0
 80071ce:	75bb      	strb	r3, [r7, #22]
            break;
 80071d0:	e002      	b.n	80071d8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80071d2:	2300      	movs	r3, #0
 80071d4:	75bb      	strb	r3, [r7, #22]
            break;
 80071d6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80071d8:	7dbb      	ldrb	r3, [r7, #22]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d119      	bne.n	8007212 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	2b03      	cmp	r3, #3
 80071e8:	d113      	bne.n	8007212 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80071ea:	7dba      	ldrb	r2, [r7, #22]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	32ae      	adds	r2, #174	@ 0xae
 80071f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071f4:	691b      	ldr	r3, [r3, #16]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d00b      	beq.n	8007212 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80071fa:	7dba      	ldrb	r2, [r7, #22]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007202:	7dba      	ldrb	r2, [r7, #22]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	32ae      	adds	r2, #174	@ 0xae
 8007208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800720c:	691b      	ldr	r3, [r3, #16]
 800720e:	68f8      	ldr	r0, [r7, #12]
 8007210:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007212:	68f8      	ldr	r0, [r7, #12]
 8007214:	f001 f972 	bl	80084fc <USBD_CtlSendStatus>
 8007218:	e032      	b.n	8007280 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800721a:	7afb      	ldrb	r3, [r7, #11]
 800721c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007220:	b2db      	uxtb	r3, r3
 8007222:	4619      	mov	r1, r3
 8007224:	68f8      	ldr	r0, [r7, #12]
 8007226:	f000 fa31 	bl	800768c <USBD_CoreFindEP>
 800722a:	4603      	mov	r3, r0
 800722c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800722e:	7dbb      	ldrb	r3, [r7, #22]
 8007230:	2bff      	cmp	r3, #255	@ 0xff
 8007232:	d025      	beq.n	8007280 <USBD_LL_DataOutStage+0x15c>
 8007234:	7dbb      	ldrb	r3, [r7, #22]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d122      	bne.n	8007280 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007240:	b2db      	uxtb	r3, r3
 8007242:	2b03      	cmp	r3, #3
 8007244:	d117      	bne.n	8007276 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007246:	7dba      	ldrb	r2, [r7, #22]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	32ae      	adds	r2, #174	@ 0xae
 800724c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007250:	699b      	ldr	r3, [r3, #24]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d00f      	beq.n	8007276 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007256:	7dba      	ldrb	r2, [r7, #22]
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800725e:	7dba      	ldrb	r2, [r7, #22]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	32ae      	adds	r2, #174	@ 0xae
 8007264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007268:	699b      	ldr	r3, [r3, #24]
 800726a:	7afa      	ldrb	r2, [r7, #11]
 800726c:	4611      	mov	r1, r2
 800726e:	68f8      	ldr	r0, [r7, #12]
 8007270:	4798      	blx	r3
 8007272:	4603      	mov	r3, r0
 8007274:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007276:	7dfb      	ldrb	r3, [r7, #23]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d001      	beq.n	8007280 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800727c:	7dfb      	ldrb	r3, [r7, #23]
 800727e:	e000      	b.n	8007282 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007280:	2300      	movs	r3, #0
}
 8007282:	4618      	mov	r0, r3
 8007284:	3718      	adds	r7, #24
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}

0800728a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800728a:	b580      	push	{r7, lr}
 800728c:	b086      	sub	sp, #24
 800728e:	af00      	add	r7, sp, #0
 8007290:	60f8      	str	r0, [r7, #12]
 8007292:	460b      	mov	r3, r1
 8007294:	607a      	str	r2, [r7, #4]
 8007296:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007298:	7afb      	ldrb	r3, [r7, #11]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d16f      	bne.n	800737e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	3314      	adds	r3, #20
 80072a2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80072aa:	2b02      	cmp	r3, #2
 80072ac:	d15a      	bne.n	8007364 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	689a      	ldr	r2, [r3, #8]
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	68db      	ldr	r3, [r3, #12]
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d914      	bls.n	80072e4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	689a      	ldr	r2, [r3, #8]
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	68db      	ldr	r3, [r3, #12]
 80072c2:	1ad2      	subs	r2, r2, r3
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	461a      	mov	r2, r3
 80072ce:	6879      	ldr	r1, [r7, #4]
 80072d0:	68f8      	ldr	r0, [r7, #12]
 80072d2:	f001 f8d4 	bl	800847e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80072d6:	2300      	movs	r3, #0
 80072d8:	2200      	movs	r2, #0
 80072da:	2100      	movs	r1, #0
 80072dc:	68f8      	ldr	r0, [r7, #12]
 80072de:	f001 fdd1 	bl	8008e84 <USBD_LL_PrepareReceive>
 80072e2:	e03f      	b.n	8007364 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	68da      	ldr	r2, [r3, #12]
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d11c      	bne.n	800732a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	685a      	ldr	r2, [r3, #4]
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d316      	bcc.n	800732a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	685a      	ldr	r2, [r3, #4]
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007306:	429a      	cmp	r2, r3
 8007308:	d20f      	bcs.n	800732a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800730a:	2200      	movs	r2, #0
 800730c:	2100      	movs	r1, #0
 800730e:	68f8      	ldr	r0, [r7, #12]
 8007310:	f001 f8b5 	bl	800847e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2200      	movs	r2, #0
 8007318:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800731c:	2300      	movs	r3, #0
 800731e:	2200      	movs	r2, #0
 8007320:	2100      	movs	r1, #0
 8007322:	68f8      	ldr	r0, [r7, #12]
 8007324:	f001 fdae 	bl	8008e84 <USBD_LL_PrepareReceive>
 8007328:	e01c      	b.n	8007364 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007330:	b2db      	uxtb	r3, r3
 8007332:	2b03      	cmp	r3, #3
 8007334:	d10f      	bne.n	8007356 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800733c:	68db      	ldr	r3, [r3, #12]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d009      	beq.n	8007356 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2200      	movs	r2, #0
 8007346:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007350:	68db      	ldr	r3, [r3, #12]
 8007352:	68f8      	ldr	r0, [r7, #12]
 8007354:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007356:	2180      	movs	r1, #128	@ 0x80
 8007358:	68f8      	ldr	r0, [r7, #12]
 800735a:	f001 fce9 	bl	8008d30 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800735e:	68f8      	ldr	r0, [r7, #12]
 8007360:	f001 f8df 	bl	8008522 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800736a:	2b00      	cmp	r3, #0
 800736c:	d03a      	beq.n	80073e4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800736e:	68f8      	ldr	r0, [r7, #12]
 8007370:	f7ff fe42 	bl	8006ff8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2200      	movs	r2, #0
 8007378:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800737c:	e032      	b.n	80073e4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800737e:	7afb      	ldrb	r3, [r7, #11]
 8007380:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007384:	b2db      	uxtb	r3, r3
 8007386:	4619      	mov	r1, r3
 8007388:	68f8      	ldr	r0, [r7, #12]
 800738a:	f000 f97f 	bl	800768c <USBD_CoreFindEP>
 800738e:	4603      	mov	r3, r0
 8007390:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007392:	7dfb      	ldrb	r3, [r7, #23]
 8007394:	2bff      	cmp	r3, #255	@ 0xff
 8007396:	d025      	beq.n	80073e4 <USBD_LL_DataInStage+0x15a>
 8007398:	7dfb      	ldrb	r3, [r7, #23]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d122      	bne.n	80073e4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	2b03      	cmp	r3, #3
 80073a8:	d11c      	bne.n	80073e4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80073aa:	7dfa      	ldrb	r2, [r7, #23]
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	32ae      	adds	r2, #174	@ 0xae
 80073b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073b4:	695b      	ldr	r3, [r3, #20]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d014      	beq.n	80073e4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80073ba:	7dfa      	ldrb	r2, [r7, #23]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80073c2:	7dfa      	ldrb	r2, [r7, #23]
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	32ae      	adds	r2, #174	@ 0xae
 80073c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073cc:	695b      	ldr	r3, [r3, #20]
 80073ce:	7afa      	ldrb	r2, [r7, #11]
 80073d0:	4611      	mov	r1, r2
 80073d2:	68f8      	ldr	r0, [r7, #12]
 80073d4:	4798      	blx	r3
 80073d6:	4603      	mov	r3, r0
 80073d8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80073da:	7dbb      	ldrb	r3, [r7, #22]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d001      	beq.n	80073e4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80073e0:	7dbb      	ldrb	r3, [r7, #22]
 80073e2:	e000      	b.n	80073e6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80073e4:	2300      	movs	r3, #0
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3718      	adds	r7, #24
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}

080073ee <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80073ee:	b580      	push	{r7, lr}
 80073f0:	b084      	sub	sp, #16
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80073f6:	2300      	movs	r3, #0
 80073f8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2201      	movs	r2, #1
 80073fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2200      	movs	r2, #0
 8007406:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2200      	movs	r2, #0
 8007414:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2200      	movs	r2, #0
 800741c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007426:	2b00      	cmp	r3, #0
 8007428:	d014      	beq.n	8007454 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d00e      	beq.n	8007454 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	6852      	ldr	r2, [r2, #4]
 8007442:	b2d2      	uxtb	r2, r2
 8007444:	4611      	mov	r1, r2
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	4798      	blx	r3
 800744a:	4603      	mov	r3, r0
 800744c:	2b00      	cmp	r3, #0
 800744e:	d001      	beq.n	8007454 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007450:	2303      	movs	r3, #3
 8007452:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007454:	2340      	movs	r3, #64	@ 0x40
 8007456:	2200      	movs	r2, #0
 8007458:	2100      	movs	r1, #0
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f001 fc23 	bl	8008ca6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2201      	movs	r2, #1
 8007464:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2240      	movs	r2, #64	@ 0x40
 800746c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007470:	2340      	movs	r3, #64	@ 0x40
 8007472:	2200      	movs	r2, #0
 8007474:	2180      	movs	r1, #128	@ 0x80
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f001 fc15 	bl	8008ca6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2201      	movs	r2, #1
 8007480:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2240      	movs	r2, #64	@ 0x40
 8007486:	621a      	str	r2, [r3, #32]

  return ret;
 8007488:	7bfb      	ldrb	r3, [r7, #15]
}
 800748a:	4618      	mov	r0, r3
 800748c:	3710      	adds	r7, #16
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}

08007492 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007492:	b480      	push	{r7}
 8007494:	b083      	sub	sp, #12
 8007496:	af00      	add	r7, sp, #0
 8007498:	6078      	str	r0, [r7, #4]
 800749a:	460b      	mov	r3, r1
 800749c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	78fa      	ldrb	r2, [r7, #3]
 80074a2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80074a4:	2300      	movs	r3, #0
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	370c      	adds	r7, #12
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr

080074b2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80074b2:	b480      	push	{r7}
 80074b4:	b083      	sub	sp, #12
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074c0:	b2da      	uxtb	r2, r3
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2204      	movs	r2, #4
 80074cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80074d0:	2300      	movs	r3, #0
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	370c      	adds	r7, #12
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr

080074de <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80074de:	b480      	push	{r7}
 80074e0:	b083      	sub	sp, #12
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	2b04      	cmp	r3, #4
 80074f0:	d106      	bne.n	8007500 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80074f8:	b2da      	uxtb	r2, r3
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007500:	2300      	movs	r3, #0
}
 8007502:	4618      	mov	r0, r3
 8007504:	370c      	adds	r7, #12
 8007506:	46bd      	mov	sp, r7
 8007508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750c:	4770      	bx	lr

0800750e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800750e:	b580      	push	{r7, lr}
 8007510:	b082      	sub	sp, #8
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800751c:	b2db      	uxtb	r3, r3
 800751e:	2b03      	cmp	r3, #3
 8007520:	d110      	bne.n	8007544 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007528:	2b00      	cmp	r3, #0
 800752a:	d00b      	beq.n	8007544 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007532:	69db      	ldr	r3, [r3, #28]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d005      	beq.n	8007544 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800753e:	69db      	ldr	r3, [r3, #28]
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007544:	2300      	movs	r3, #0
}
 8007546:	4618      	mov	r0, r3
 8007548:	3708      	adds	r7, #8
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}

0800754e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800754e:	b580      	push	{r7, lr}
 8007550:	b082      	sub	sp, #8
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
 8007556:	460b      	mov	r3, r1
 8007558:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	32ae      	adds	r2, #174	@ 0xae
 8007564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d101      	bne.n	8007570 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800756c:	2303      	movs	r3, #3
 800756e:	e01c      	b.n	80075aa <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007576:	b2db      	uxtb	r3, r3
 8007578:	2b03      	cmp	r3, #3
 800757a:	d115      	bne.n	80075a8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	32ae      	adds	r2, #174	@ 0xae
 8007586:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800758a:	6a1b      	ldr	r3, [r3, #32]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d00b      	beq.n	80075a8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	32ae      	adds	r2, #174	@ 0xae
 800759a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800759e:	6a1b      	ldr	r3, [r3, #32]
 80075a0:	78fa      	ldrb	r2, [r7, #3]
 80075a2:	4611      	mov	r1, r2
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80075a8:	2300      	movs	r3, #0
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3708      	adds	r7, #8
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}

080075b2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80075b2:	b580      	push	{r7, lr}
 80075b4:	b082      	sub	sp, #8
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
 80075ba:	460b      	mov	r3, r1
 80075bc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	32ae      	adds	r2, #174	@ 0xae
 80075c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d101      	bne.n	80075d4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80075d0:	2303      	movs	r3, #3
 80075d2:	e01c      	b.n	800760e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	2b03      	cmp	r3, #3
 80075de:	d115      	bne.n	800760c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	32ae      	adds	r2, #174	@ 0xae
 80075ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d00b      	beq.n	800760c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	32ae      	adds	r2, #174	@ 0xae
 80075fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007604:	78fa      	ldrb	r2, [r7, #3]
 8007606:	4611      	mov	r1, r2
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800760c:	2300      	movs	r3, #0
}
 800760e:	4618      	mov	r0, r3
 8007610:	3708      	adds	r7, #8
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}

08007616 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007616:	b480      	push	{r7}
 8007618:	b083      	sub	sp, #12
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800761e:	2300      	movs	r3, #0
}
 8007620:	4618      	mov	r0, r3
 8007622:	370c      	adds	r7, #12
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b084      	sub	sp, #16
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007634:	2300      	movs	r3, #0
 8007636:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2201      	movs	r2, #1
 800763c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007646:	2b00      	cmp	r3, #0
 8007648:	d00e      	beq.n	8007668 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	687a      	ldr	r2, [r7, #4]
 8007654:	6852      	ldr	r2, [r2, #4]
 8007656:	b2d2      	uxtb	r2, r2
 8007658:	4611      	mov	r1, r2
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	4798      	blx	r3
 800765e:	4603      	mov	r3, r0
 8007660:	2b00      	cmp	r3, #0
 8007662:	d001      	beq.n	8007668 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007664:	2303      	movs	r3, #3
 8007666:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007668:	7bfb      	ldrb	r3, [r7, #15]
}
 800766a:	4618      	mov	r0, r3
 800766c:	3710      	adds	r7, #16
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}

08007672 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007672:	b480      	push	{r7}
 8007674:	b083      	sub	sp, #12
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
 800767a:	460b      	mov	r3, r1
 800767c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800767e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007680:	4618      	mov	r0, r3
 8007682:	370c      	adds	r7, #12
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr

0800768c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800768c:	b480      	push	{r7}
 800768e:	b083      	sub	sp, #12
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	460b      	mov	r3, r1
 8007696:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007698:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800769a:	4618      	mov	r0, r3
 800769c:	370c      	adds	r7, #12
 800769e:	46bd      	mov	sp, r7
 80076a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a4:	4770      	bx	lr

080076a6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80076a6:	b580      	push	{r7, lr}
 80076a8:	b086      	sub	sp, #24
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	6078      	str	r0, [r7, #4]
 80076ae:	460b      	mov	r3, r1
 80076b0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80076ba:	2300      	movs	r3, #0
 80076bc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	885b      	ldrh	r3, [r3, #2]
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	68fa      	ldr	r2, [r7, #12]
 80076c6:	7812      	ldrb	r2, [r2, #0]
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d91f      	bls.n	800770c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80076d2:	e013      	b.n	80076fc <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80076d4:	f107 030a 	add.w	r3, r7, #10
 80076d8:	4619      	mov	r1, r3
 80076da:	6978      	ldr	r0, [r7, #20]
 80076dc:	f000 f81b 	bl	8007716 <USBD_GetNextDesc>
 80076e0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	785b      	ldrb	r3, [r3, #1]
 80076e6:	2b05      	cmp	r3, #5
 80076e8:	d108      	bne.n	80076fc <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	789b      	ldrb	r3, [r3, #2]
 80076f2:	78fa      	ldrb	r2, [r7, #3]
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d008      	beq.n	800770a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80076f8:	2300      	movs	r3, #0
 80076fa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	885b      	ldrh	r3, [r3, #2]
 8007700:	b29a      	uxth	r2, r3
 8007702:	897b      	ldrh	r3, [r7, #10]
 8007704:	429a      	cmp	r2, r3
 8007706:	d8e5      	bhi.n	80076d4 <USBD_GetEpDesc+0x2e>
 8007708:	e000      	b.n	800770c <USBD_GetEpDesc+0x66>
          break;
 800770a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800770c:	693b      	ldr	r3, [r7, #16]
}
 800770e:	4618      	mov	r0, r3
 8007710:	3718      	adds	r7, #24
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}

08007716 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007716:	b480      	push	{r7}
 8007718:	b085      	sub	sp, #20
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
 800771e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	881b      	ldrh	r3, [r3, #0]
 8007728:	68fa      	ldr	r2, [r7, #12]
 800772a:	7812      	ldrb	r2, [r2, #0]
 800772c:	4413      	add	r3, r2
 800772e:	b29a      	uxth	r2, r3
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	781b      	ldrb	r3, [r3, #0]
 8007738:	461a      	mov	r2, r3
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	4413      	add	r3, r2
 800773e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007740:	68fb      	ldr	r3, [r7, #12]
}
 8007742:	4618      	mov	r0, r3
 8007744:	3714      	adds	r7, #20
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr

0800774e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800774e:	b480      	push	{r7}
 8007750:	b087      	sub	sp, #28
 8007752:	af00      	add	r7, sp, #0
 8007754:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	3301      	adds	r3, #1
 8007764:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800776c:	8a3b      	ldrh	r3, [r7, #16]
 800776e:	021b      	lsls	r3, r3, #8
 8007770:	b21a      	sxth	r2, r3
 8007772:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007776:	4313      	orrs	r3, r2
 8007778:	b21b      	sxth	r3, r3
 800777a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800777c:	89fb      	ldrh	r3, [r7, #14]
}
 800777e:	4618      	mov	r0, r3
 8007780:	371c      	adds	r7, #28
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr
	...

0800778c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b084      	sub	sp, #16
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007796:	2300      	movs	r3, #0
 8007798:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80077a2:	2b40      	cmp	r3, #64	@ 0x40
 80077a4:	d005      	beq.n	80077b2 <USBD_StdDevReq+0x26>
 80077a6:	2b40      	cmp	r3, #64	@ 0x40
 80077a8:	d857      	bhi.n	800785a <USBD_StdDevReq+0xce>
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d00f      	beq.n	80077ce <USBD_StdDevReq+0x42>
 80077ae:	2b20      	cmp	r3, #32
 80077b0:	d153      	bne.n	800785a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	32ae      	adds	r2, #174	@ 0xae
 80077bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077c0:	689b      	ldr	r3, [r3, #8]
 80077c2:	6839      	ldr	r1, [r7, #0]
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	4798      	blx	r3
 80077c8:	4603      	mov	r3, r0
 80077ca:	73fb      	strb	r3, [r7, #15]
      break;
 80077cc:	e04a      	b.n	8007864 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	785b      	ldrb	r3, [r3, #1]
 80077d2:	2b09      	cmp	r3, #9
 80077d4:	d83b      	bhi.n	800784e <USBD_StdDevReq+0xc2>
 80077d6:	a201      	add	r2, pc, #4	@ (adr r2, 80077dc <USBD_StdDevReq+0x50>)
 80077d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077dc:	08007831 	.word	0x08007831
 80077e0:	08007845 	.word	0x08007845
 80077e4:	0800784f 	.word	0x0800784f
 80077e8:	0800783b 	.word	0x0800783b
 80077ec:	0800784f 	.word	0x0800784f
 80077f0:	0800780f 	.word	0x0800780f
 80077f4:	08007805 	.word	0x08007805
 80077f8:	0800784f 	.word	0x0800784f
 80077fc:	08007827 	.word	0x08007827
 8007800:	08007819 	.word	0x08007819
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007804:	6839      	ldr	r1, [r7, #0]
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f000 fa3c 	bl	8007c84 <USBD_GetDescriptor>
          break;
 800780c:	e024      	b.n	8007858 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800780e:	6839      	ldr	r1, [r7, #0]
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f000 fbcb 	bl	8007fac <USBD_SetAddress>
          break;
 8007816:	e01f      	b.n	8007858 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007818:	6839      	ldr	r1, [r7, #0]
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 fc0a 	bl	8008034 <USBD_SetConfig>
 8007820:	4603      	mov	r3, r0
 8007822:	73fb      	strb	r3, [r7, #15]
          break;
 8007824:	e018      	b.n	8007858 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007826:	6839      	ldr	r1, [r7, #0]
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 fcad 	bl	8008188 <USBD_GetConfig>
          break;
 800782e:	e013      	b.n	8007858 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007830:	6839      	ldr	r1, [r7, #0]
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 fcde 	bl	80081f4 <USBD_GetStatus>
          break;
 8007838:	e00e      	b.n	8007858 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800783a:	6839      	ldr	r1, [r7, #0]
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 fd0d 	bl	800825c <USBD_SetFeature>
          break;
 8007842:	e009      	b.n	8007858 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007844:	6839      	ldr	r1, [r7, #0]
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 fd31 	bl	80082ae <USBD_ClrFeature>
          break;
 800784c:	e004      	b.n	8007858 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800784e:	6839      	ldr	r1, [r7, #0]
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 fd88 	bl	8008366 <USBD_CtlError>
          break;
 8007856:	bf00      	nop
      }
      break;
 8007858:	e004      	b.n	8007864 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800785a:	6839      	ldr	r1, [r7, #0]
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 fd82 	bl	8008366 <USBD_CtlError>
      break;
 8007862:	bf00      	nop
  }

  return ret;
 8007864:	7bfb      	ldrb	r3, [r7, #15]
}
 8007866:	4618      	mov	r0, r3
 8007868:	3710      	adds	r7, #16
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop

08007870 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800787a:	2300      	movs	r3, #0
 800787c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007886:	2b40      	cmp	r3, #64	@ 0x40
 8007888:	d005      	beq.n	8007896 <USBD_StdItfReq+0x26>
 800788a:	2b40      	cmp	r3, #64	@ 0x40
 800788c:	d852      	bhi.n	8007934 <USBD_StdItfReq+0xc4>
 800788e:	2b00      	cmp	r3, #0
 8007890:	d001      	beq.n	8007896 <USBD_StdItfReq+0x26>
 8007892:	2b20      	cmp	r3, #32
 8007894:	d14e      	bne.n	8007934 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800789c:	b2db      	uxtb	r3, r3
 800789e:	3b01      	subs	r3, #1
 80078a0:	2b02      	cmp	r3, #2
 80078a2:	d840      	bhi.n	8007926 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	889b      	ldrh	r3, [r3, #4]
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	d836      	bhi.n	800791c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	889b      	ldrh	r3, [r3, #4]
 80078b2:	b2db      	uxtb	r3, r3
 80078b4:	4619      	mov	r1, r3
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f7ff fedb 	bl	8007672 <USBD_CoreFindIF>
 80078bc:	4603      	mov	r3, r0
 80078be:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80078c0:	7bbb      	ldrb	r3, [r7, #14]
 80078c2:	2bff      	cmp	r3, #255	@ 0xff
 80078c4:	d01d      	beq.n	8007902 <USBD_StdItfReq+0x92>
 80078c6:	7bbb      	ldrb	r3, [r7, #14]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d11a      	bne.n	8007902 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80078cc:	7bba      	ldrb	r2, [r7, #14]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	32ae      	adds	r2, #174	@ 0xae
 80078d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d00f      	beq.n	80078fc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80078dc:	7bba      	ldrb	r2, [r7, #14]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80078e4:	7bba      	ldrb	r2, [r7, #14]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	32ae      	adds	r2, #174	@ 0xae
 80078ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	6839      	ldr	r1, [r7, #0]
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	4798      	blx	r3
 80078f6:	4603      	mov	r3, r0
 80078f8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80078fa:	e004      	b.n	8007906 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80078fc:	2303      	movs	r3, #3
 80078fe:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007900:	e001      	b.n	8007906 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007902:	2303      	movs	r3, #3
 8007904:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	88db      	ldrh	r3, [r3, #6]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d110      	bne.n	8007930 <USBD_StdItfReq+0xc0>
 800790e:	7bfb      	ldrb	r3, [r7, #15]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d10d      	bne.n	8007930 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 fdf1 	bl	80084fc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800791a:	e009      	b.n	8007930 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800791c:	6839      	ldr	r1, [r7, #0]
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 fd21 	bl	8008366 <USBD_CtlError>
          break;
 8007924:	e004      	b.n	8007930 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007926:	6839      	ldr	r1, [r7, #0]
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 fd1c 	bl	8008366 <USBD_CtlError>
          break;
 800792e:	e000      	b.n	8007932 <USBD_StdItfReq+0xc2>
          break;
 8007930:	bf00      	nop
      }
      break;
 8007932:	e004      	b.n	800793e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007934:	6839      	ldr	r1, [r7, #0]
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 fd15 	bl	8008366 <USBD_CtlError>
      break;
 800793c:	bf00      	nop
  }

  return ret;
 800793e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007940:	4618      	mov	r0, r3
 8007942:	3710      	adds	r7, #16
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b084      	sub	sp, #16
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007952:	2300      	movs	r3, #0
 8007954:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	889b      	ldrh	r3, [r3, #4]
 800795a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007964:	2b40      	cmp	r3, #64	@ 0x40
 8007966:	d007      	beq.n	8007978 <USBD_StdEPReq+0x30>
 8007968:	2b40      	cmp	r3, #64	@ 0x40
 800796a:	f200 817f 	bhi.w	8007c6c <USBD_StdEPReq+0x324>
 800796e:	2b00      	cmp	r3, #0
 8007970:	d02a      	beq.n	80079c8 <USBD_StdEPReq+0x80>
 8007972:	2b20      	cmp	r3, #32
 8007974:	f040 817a 	bne.w	8007c6c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007978:	7bbb      	ldrb	r3, [r7, #14]
 800797a:	4619      	mov	r1, r3
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f7ff fe85 	bl	800768c <USBD_CoreFindEP>
 8007982:	4603      	mov	r3, r0
 8007984:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007986:	7b7b      	ldrb	r3, [r7, #13]
 8007988:	2bff      	cmp	r3, #255	@ 0xff
 800798a:	f000 8174 	beq.w	8007c76 <USBD_StdEPReq+0x32e>
 800798e:	7b7b      	ldrb	r3, [r7, #13]
 8007990:	2b00      	cmp	r3, #0
 8007992:	f040 8170 	bne.w	8007c76 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007996:	7b7a      	ldrb	r2, [r7, #13]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800799e:	7b7a      	ldrb	r2, [r7, #13]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	32ae      	adds	r2, #174	@ 0xae
 80079a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	f000 8163 	beq.w	8007c76 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80079b0:	7b7a      	ldrb	r2, [r7, #13]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	32ae      	adds	r2, #174	@ 0xae
 80079b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	6839      	ldr	r1, [r7, #0]
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	4798      	blx	r3
 80079c2:	4603      	mov	r3, r0
 80079c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80079c6:	e156      	b.n	8007c76 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	785b      	ldrb	r3, [r3, #1]
 80079cc:	2b03      	cmp	r3, #3
 80079ce:	d008      	beq.n	80079e2 <USBD_StdEPReq+0x9a>
 80079d0:	2b03      	cmp	r3, #3
 80079d2:	f300 8145 	bgt.w	8007c60 <USBD_StdEPReq+0x318>
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	f000 809b 	beq.w	8007b12 <USBD_StdEPReq+0x1ca>
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d03c      	beq.n	8007a5a <USBD_StdEPReq+0x112>
 80079e0:	e13e      	b.n	8007c60 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079e8:	b2db      	uxtb	r3, r3
 80079ea:	2b02      	cmp	r3, #2
 80079ec:	d002      	beq.n	80079f4 <USBD_StdEPReq+0xac>
 80079ee:	2b03      	cmp	r3, #3
 80079f0:	d016      	beq.n	8007a20 <USBD_StdEPReq+0xd8>
 80079f2:	e02c      	b.n	8007a4e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079f4:	7bbb      	ldrb	r3, [r7, #14]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d00d      	beq.n	8007a16 <USBD_StdEPReq+0xce>
 80079fa:	7bbb      	ldrb	r3, [r7, #14]
 80079fc:	2b80      	cmp	r3, #128	@ 0x80
 80079fe:	d00a      	beq.n	8007a16 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a00:	7bbb      	ldrb	r3, [r7, #14]
 8007a02:	4619      	mov	r1, r3
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f001 f993 	bl	8008d30 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a0a:	2180      	movs	r1, #128	@ 0x80
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f001 f98f 	bl	8008d30 <USBD_LL_StallEP>
 8007a12:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a14:	e020      	b.n	8007a58 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007a16:	6839      	ldr	r1, [r7, #0]
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f000 fca4 	bl	8008366 <USBD_CtlError>
              break;
 8007a1e:	e01b      	b.n	8007a58 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	885b      	ldrh	r3, [r3, #2]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d10e      	bne.n	8007a46 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007a28:	7bbb      	ldrb	r3, [r7, #14]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d00b      	beq.n	8007a46 <USBD_StdEPReq+0xfe>
 8007a2e:	7bbb      	ldrb	r3, [r7, #14]
 8007a30:	2b80      	cmp	r3, #128	@ 0x80
 8007a32:	d008      	beq.n	8007a46 <USBD_StdEPReq+0xfe>
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	88db      	ldrh	r3, [r3, #6]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d104      	bne.n	8007a46 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a3c:	7bbb      	ldrb	r3, [r7, #14]
 8007a3e:	4619      	mov	r1, r3
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f001 f975 	bl	8008d30 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 fd58 	bl	80084fc <USBD_CtlSendStatus>

              break;
 8007a4c:	e004      	b.n	8007a58 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007a4e:	6839      	ldr	r1, [r7, #0]
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f000 fc88 	bl	8008366 <USBD_CtlError>
              break;
 8007a56:	bf00      	nop
          }
          break;
 8007a58:	e107      	b.n	8007c6a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a60:	b2db      	uxtb	r3, r3
 8007a62:	2b02      	cmp	r3, #2
 8007a64:	d002      	beq.n	8007a6c <USBD_StdEPReq+0x124>
 8007a66:	2b03      	cmp	r3, #3
 8007a68:	d016      	beq.n	8007a98 <USBD_StdEPReq+0x150>
 8007a6a:	e04b      	b.n	8007b04 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a6c:	7bbb      	ldrb	r3, [r7, #14]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d00d      	beq.n	8007a8e <USBD_StdEPReq+0x146>
 8007a72:	7bbb      	ldrb	r3, [r7, #14]
 8007a74:	2b80      	cmp	r3, #128	@ 0x80
 8007a76:	d00a      	beq.n	8007a8e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a78:	7bbb      	ldrb	r3, [r7, #14]
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f001 f957 	bl	8008d30 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a82:	2180      	movs	r1, #128	@ 0x80
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f001 f953 	bl	8008d30 <USBD_LL_StallEP>
 8007a8a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a8c:	e040      	b.n	8007b10 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007a8e:	6839      	ldr	r1, [r7, #0]
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 fc68 	bl	8008366 <USBD_CtlError>
              break;
 8007a96:	e03b      	b.n	8007b10 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	885b      	ldrh	r3, [r3, #2]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d136      	bne.n	8007b0e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007aa0:	7bbb      	ldrb	r3, [r7, #14]
 8007aa2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d004      	beq.n	8007ab4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007aaa:	7bbb      	ldrb	r3, [r7, #14]
 8007aac:	4619      	mov	r1, r3
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f001 f95d 	bl	8008d6e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f000 fd21 	bl	80084fc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007aba:	7bbb      	ldrb	r3, [r7, #14]
 8007abc:	4619      	mov	r1, r3
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f7ff fde4 	bl	800768c <USBD_CoreFindEP>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ac8:	7b7b      	ldrb	r3, [r7, #13]
 8007aca:	2bff      	cmp	r3, #255	@ 0xff
 8007acc:	d01f      	beq.n	8007b0e <USBD_StdEPReq+0x1c6>
 8007ace:	7b7b      	ldrb	r3, [r7, #13]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d11c      	bne.n	8007b0e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007ad4:	7b7a      	ldrb	r2, [r7, #13]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007adc:	7b7a      	ldrb	r2, [r7, #13]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	32ae      	adds	r2, #174	@ 0xae
 8007ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ae6:	689b      	ldr	r3, [r3, #8]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d010      	beq.n	8007b0e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007aec:	7b7a      	ldrb	r2, [r7, #13]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	32ae      	adds	r2, #174	@ 0xae
 8007af2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	6839      	ldr	r1, [r7, #0]
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	4798      	blx	r3
 8007afe:	4603      	mov	r3, r0
 8007b00:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007b02:	e004      	b.n	8007b0e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007b04:	6839      	ldr	r1, [r7, #0]
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 fc2d 	bl	8008366 <USBD_CtlError>
              break;
 8007b0c:	e000      	b.n	8007b10 <USBD_StdEPReq+0x1c8>
              break;
 8007b0e:	bf00      	nop
          }
          break;
 8007b10:	e0ab      	b.n	8007c6a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	2b02      	cmp	r3, #2
 8007b1c:	d002      	beq.n	8007b24 <USBD_StdEPReq+0x1dc>
 8007b1e:	2b03      	cmp	r3, #3
 8007b20:	d032      	beq.n	8007b88 <USBD_StdEPReq+0x240>
 8007b22:	e097      	b.n	8007c54 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b24:	7bbb      	ldrb	r3, [r7, #14]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d007      	beq.n	8007b3a <USBD_StdEPReq+0x1f2>
 8007b2a:	7bbb      	ldrb	r3, [r7, #14]
 8007b2c:	2b80      	cmp	r3, #128	@ 0x80
 8007b2e:	d004      	beq.n	8007b3a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007b30:	6839      	ldr	r1, [r7, #0]
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 fc17 	bl	8008366 <USBD_CtlError>
                break;
 8007b38:	e091      	b.n	8007c5e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	da0b      	bge.n	8007b5a <USBD_StdEPReq+0x212>
 8007b42:	7bbb      	ldrb	r3, [r7, #14]
 8007b44:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007b48:	4613      	mov	r3, r2
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	4413      	add	r3, r2
 8007b4e:	009b      	lsls	r3, r3, #2
 8007b50:	3310      	adds	r3, #16
 8007b52:	687a      	ldr	r2, [r7, #4]
 8007b54:	4413      	add	r3, r2
 8007b56:	3304      	adds	r3, #4
 8007b58:	e00b      	b.n	8007b72 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007b5a:	7bbb      	ldrb	r3, [r7, #14]
 8007b5c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b60:	4613      	mov	r3, r2
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	4413      	add	r3, r2
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007b6c:	687a      	ldr	r2, [r7, #4]
 8007b6e:	4413      	add	r3, r2
 8007b70:	3304      	adds	r3, #4
 8007b72:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	2200      	movs	r2, #0
 8007b78:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	2202      	movs	r2, #2
 8007b7e:	4619      	mov	r1, r3
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f000 fc61 	bl	8008448 <USBD_CtlSendData>
              break;
 8007b86:	e06a      	b.n	8007c5e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007b88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	da11      	bge.n	8007bb4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007b90:	7bbb      	ldrb	r3, [r7, #14]
 8007b92:	f003 020f 	and.w	r2, r3, #15
 8007b96:	6879      	ldr	r1, [r7, #4]
 8007b98:	4613      	mov	r3, r2
 8007b9a:	009b      	lsls	r3, r3, #2
 8007b9c:	4413      	add	r3, r2
 8007b9e:	009b      	lsls	r3, r3, #2
 8007ba0:	440b      	add	r3, r1
 8007ba2:	3324      	adds	r3, #36	@ 0x24
 8007ba4:	881b      	ldrh	r3, [r3, #0]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d117      	bne.n	8007bda <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007baa:	6839      	ldr	r1, [r7, #0]
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 fbda 	bl	8008366 <USBD_CtlError>
                  break;
 8007bb2:	e054      	b.n	8007c5e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007bb4:	7bbb      	ldrb	r3, [r7, #14]
 8007bb6:	f003 020f 	and.w	r2, r3, #15
 8007bba:	6879      	ldr	r1, [r7, #4]
 8007bbc:	4613      	mov	r3, r2
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	4413      	add	r3, r2
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	440b      	add	r3, r1
 8007bc6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007bca:	881b      	ldrh	r3, [r3, #0]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d104      	bne.n	8007bda <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007bd0:	6839      	ldr	r1, [r7, #0]
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f000 fbc7 	bl	8008366 <USBD_CtlError>
                  break;
 8007bd8:	e041      	b.n	8007c5e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bda:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	da0b      	bge.n	8007bfa <USBD_StdEPReq+0x2b2>
 8007be2:	7bbb      	ldrb	r3, [r7, #14]
 8007be4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007be8:	4613      	mov	r3, r2
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	4413      	add	r3, r2
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	3310      	adds	r3, #16
 8007bf2:	687a      	ldr	r2, [r7, #4]
 8007bf4:	4413      	add	r3, r2
 8007bf6:	3304      	adds	r3, #4
 8007bf8:	e00b      	b.n	8007c12 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007bfa:	7bbb      	ldrb	r3, [r7, #14]
 8007bfc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c00:	4613      	mov	r3, r2
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	4413      	add	r3, r2
 8007c06:	009b      	lsls	r3, r3, #2
 8007c08:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	4413      	add	r3, r2
 8007c10:	3304      	adds	r3, #4
 8007c12:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007c14:	7bbb      	ldrb	r3, [r7, #14]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d002      	beq.n	8007c20 <USBD_StdEPReq+0x2d8>
 8007c1a:	7bbb      	ldrb	r3, [r7, #14]
 8007c1c:	2b80      	cmp	r3, #128	@ 0x80
 8007c1e:	d103      	bne.n	8007c28 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	2200      	movs	r2, #0
 8007c24:	601a      	str	r2, [r3, #0]
 8007c26:	e00e      	b.n	8007c46 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007c28:	7bbb      	ldrb	r3, [r7, #14]
 8007c2a:	4619      	mov	r1, r3
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f001 f8bd 	bl	8008dac <USBD_LL_IsStallEP>
 8007c32:	4603      	mov	r3, r0
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d003      	beq.n	8007c40 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	601a      	str	r2, [r3, #0]
 8007c3e:	e002      	b.n	8007c46 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	2200      	movs	r2, #0
 8007c44:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	2202      	movs	r2, #2
 8007c4a:	4619      	mov	r1, r3
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f000 fbfb 	bl	8008448 <USBD_CtlSendData>
              break;
 8007c52:	e004      	b.n	8007c5e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007c54:	6839      	ldr	r1, [r7, #0]
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 fb85 	bl	8008366 <USBD_CtlError>
              break;
 8007c5c:	bf00      	nop
          }
          break;
 8007c5e:	e004      	b.n	8007c6a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007c60:	6839      	ldr	r1, [r7, #0]
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 fb7f 	bl	8008366 <USBD_CtlError>
          break;
 8007c68:	bf00      	nop
      }
      break;
 8007c6a:	e005      	b.n	8007c78 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007c6c:	6839      	ldr	r1, [r7, #0]
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 fb79 	bl	8008366 <USBD_CtlError>
      break;
 8007c74:	e000      	b.n	8007c78 <USBD_StdEPReq+0x330>
      break;
 8007c76:	bf00      	nop
  }

  return ret;
 8007c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3710      	adds	r7, #16
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}
	...

08007c84 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b084      	sub	sp, #16
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007c92:	2300      	movs	r3, #0
 8007c94:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007c96:	2300      	movs	r3, #0
 8007c98:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	885b      	ldrh	r3, [r3, #2]
 8007c9e:	0a1b      	lsrs	r3, r3, #8
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	3b01      	subs	r3, #1
 8007ca4:	2b0e      	cmp	r3, #14
 8007ca6:	f200 8152 	bhi.w	8007f4e <USBD_GetDescriptor+0x2ca>
 8007caa:	a201      	add	r2, pc, #4	@ (adr r2, 8007cb0 <USBD_GetDescriptor+0x2c>)
 8007cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb0:	08007d21 	.word	0x08007d21
 8007cb4:	08007d39 	.word	0x08007d39
 8007cb8:	08007d79 	.word	0x08007d79
 8007cbc:	08007f4f 	.word	0x08007f4f
 8007cc0:	08007f4f 	.word	0x08007f4f
 8007cc4:	08007eef 	.word	0x08007eef
 8007cc8:	08007f1b 	.word	0x08007f1b
 8007ccc:	08007f4f 	.word	0x08007f4f
 8007cd0:	08007f4f 	.word	0x08007f4f
 8007cd4:	08007f4f 	.word	0x08007f4f
 8007cd8:	08007f4f 	.word	0x08007f4f
 8007cdc:	08007f4f 	.word	0x08007f4f
 8007ce0:	08007f4f 	.word	0x08007f4f
 8007ce4:	08007f4f 	.word	0x08007f4f
 8007ce8:	08007ced 	.word	0x08007ced
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cf2:	69db      	ldr	r3, [r3, #28]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d00b      	beq.n	8007d10 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cfe:	69db      	ldr	r3, [r3, #28]
 8007d00:	687a      	ldr	r2, [r7, #4]
 8007d02:	7c12      	ldrb	r2, [r2, #16]
 8007d04:	f107 0108 	add.w	r1, r7, #8
 8007d08:	4610      	mov	r0, r2
 8007d0a:	4798      	blx	r3
 8007d0c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d0e:	e126      	b.n	8007f5e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007d10:	6839      	ldr	r1, [r7, #0]
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 fb27 	bl	8008366 <USBD_CtlError>
        err++;
 8007d18:	7afb      	ldrb	r3, [r7, #11]
 8007d1a:	3301      	adds	r3, #1
 8007d1c:	72fb      	strb	r3, [r7, #11]
      break;
 8007d1e:	e11e      	b.n	8007f5e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	7c12      	ldrb	r2, [r2, #16]
 8007d2c:	f107 0108 	add.w	r1, r7, #8
 8007d30:	4610      	mov	r0, r2
 8007d32:	4798      	blx	r3
 8007d34:	60f8      	str	r0, [r7, #12]
      break;
 8007d36:	e112      	b.n	8007f5e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	7c1b      	ldrb	r3, [r3, #16]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d10d      	bne.n	8007d5c <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d48:	f107 0208 	add.w	r2, r7, #8
 8007d4c:	4610      	mov	r0, r2
 8007d4e:	4798      	blx	r3
 8007d50:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	3301      	adds	r3, #1
 8007d56:	2202      	movs	r2, #2
 8007d58:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007d5a:	e100      	b.n	8007f5e <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d64:	f107 0208 	add.w	r2, r7, #8
 8007d68:	4610      	mov	r0, r2
 8007d6a:	4798      	blx	r3
 8007d6c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	3301      	adds	r3, #1
 8007d72:	2202      	movs	r2, #2
 8007d74:	701a      	strb	r2, [r3, #0]
      break;
 8007d76:	e0f2      	b.n	8007f5e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	885b      	ldrh	r3, [r3, #2]
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	2b05      	cmp	r3, #5
 8007d80:	f200 80ac 	bhi.w	8007edc <USBD_GetDescriptor+0x258>
 8007d84:	a201      	add	r2, pc, #4	@ (adr r2, 8007d8c <USBD_GetDescriptor+0x108>)
 8007d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d8a:	bf00      	nop
 8007d8c:	08007da5 	.word	0x08007da5
 8007d90:	08007dd9 	.word	0x08007dd9
 8007d94:	08007e0d 	.word	0x08007e0d
 8007d98:	08007e41 	.word	0x08007e41
 8007d9c:	08007e75 	.word	0x08007e75
 8007da0:	08007ea9 	.word	0x08007ea9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007daa:	685b      	ldr	r3, [r3, #4]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d00b      	beq.n	8007dc8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	7c12      	ldrb	r2, [r2, #16]
 8007dbc:	f107 0108 	add.w	r1, r7, #8
 8007dc0:	4610      	mov	r0, r2
 8007dc2:	4798      	blx	r3
 8007dc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dc6:	e091      	b.n	8007eec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007dc8:	6839      	ldr	r1, [r7, #0]
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 facb 	bl	8008366 <USBD_CtlError>
            err++;
 8007dd0:	7afb      	ldrb	r3, [r7, #11]
 8007dd2:	3301      	adds	r3, #1
 8007dd4:	72fb      	strb	r3, [r7, #11]
          break;
 8007dd6:	e089      	b.n	8007eec <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007dde:	689b      	ldr	r3, [r3, #8]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d00b      	beq.n	8007dfc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	7c12      	ldrb	r2, [r2, #16]
 8007df0:	f107 0108 	add.w	r1, r7, #8
 8007df4:	4610      	mov	r0, r2
 8007df6:	4798      	blx	r3
 8007df8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dfa:	e077      	b.n	8007eec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007dfc:	6839      	ldr	r1, [r7, #0]
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 fab1 	bl	8008366 <USBD_CtlError>
            err++;
 8007e04:	7afb      	ldrb	r3, [r7, #11]
 8007e06:	3301      	adds	r3, #1
 8007e08:	72fb      	strb	r3, [r7, #11]
          break;
 8007e0a:	e06f      	b.n	8007eec <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e12:	68db      	ldr	r3, [r3, #12]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d00b      	beq.n	8007e30 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e1e:	68db      	ldr	r3, [r3, #12]
 8007e20:	687a      	ldr	r2, [r7, #4]
 8007e22:	7c12      	ldrb	r2, [r2, #16]
 8007e24:	f107 0108 	add.w	r1, r7, #8
 8007e28:	4610      	mov	r0, r2
 8007e2a:	4798      	blx	r3
 8007e2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e2e:	e05d      	b.n	8007eec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007e30:	6839      	ldr	r1, [r7, #0]
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 fa97 	bl	8008366 <USBD_CtlError>
            err++;
 8007e38:	7afb      	ldrb	r3, [r7, #11]
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	72fb      	strb	r3, [r7, #11]
          break;
 8007e3e:	e055      	b.n	8007eec <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e46:	691b      	ldr	r3, [r3, #16]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d00b      	beq.n	8007e64 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e52:	691b      	ldr	r3, [r3, #16]
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	7c12      	ldrb	r2, [r2, #16]
 8007e58:	f107 0108 	add.w	r1, r7, #8
 8007e5c:	4610      	mov	r0, r2
 8007e5e:	4798      	blx	r3
 8007e60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e62:	e043      	b.n	8007eec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007e64:	6839      	ldr	r1, [r7, #0]
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f000 fa7d 	bl	8008366 <USBD_CtlError>
            err++;
 8007e6c:	7afb      	ldrb	r3, [r7, #11]
 8007e6e:	3301      	adds	r3, #1
 8007e70:	72fb      	strb	r3, [r7, #11]
          break;
 8007e72:	e03b      	b.n	8007eec <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e7a:	695b      	ldr	r3, [r3, #20]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d00b      	beq.n	8007e98 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e86:	695b      	ldr	r3, [r3, #20]
 8007e88:	687a      	ldr	r2, [r7, #4]
 8007e8a:	7c12      	ldrb	r2, [r2, #16]
 8007e8c:	f107 0108 	add.w	r1, r7, #8
 8007e90:	4610      	mov	r0, r2
 8007e92:	4798      	blx	r3
 8007e94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e96:	e029      	b.n	8007eec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007e98:	6839      	ldr	r1, [r7, #0]
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f000 fa63 	bl	8008366 <USBD_CtlError>
            err++;
 8007ea0:	7afb      	ldrb	r3, [r7, #11]
 8007ea2:	3301      	adds	r3, #1
 8007ea4:	72fb      	strb	r3, [r7, #11]
          break;
 8007ea6:	e021      	b.n	8007eec <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007eae:	699b      	ldr	r3, [r3, #24]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d00b      	beq.n	8007ecc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007eba:	699b      	ldr	r3, [r3, #24]
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	7c12      	ldrb	r2, [r2, #16]
 8007ec0:	f107 0108 	add.w	r1, r7, #8
 8007ec4:	4610      	mov	r0, r2
 8007ec6:	4798      	blx	r3
 8007ec8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007eca:	e00f      	b.n	8007eec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007ecc:	6839      	ldr	r1, [r7, #0]
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 fa49 	bl	8008366 <USBD_CtlError>
            err++;
 8007ed4:	7afb      	ldrb	r3, [r7, #11]
 8007ed6:	3301      	adds	r3, #1
 8007ed8:	72fb      	strb	r3, [r7, #11]
          break;
 8007eda:	e007      	b.n	8007eec <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007edc:	6839      	ldr	r1, [r7, #0]
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 fa41 	bl	8008366 <USBD_CtlError>
          err++;
 8007ee4:	7afb      	ldrb	r3, [r7, #11]
 8007ee6:	3301      	adds	r3, #1
 8007ee8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007eea:	bf00      	nop
      }
      break;
 8007eec:	e037      	b.n	8007f5e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	7c1b      	ldrb	r3, [r3, #16]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d109      	bne.n	8007f0a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007efc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007efe:	f107 0208 	add.w	r2, r7, #8
 8007f02:	4610      	mov	r0, r2
 8007f04:	4798      	blx	r3
 8007f06:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f08:	e029      	b.n	8007f5e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007f0a:	6839      	ldr	r1, [r7, #0]
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f000 fa2a 	bl	8008366 <USBD_CtlError>
        err++;
 8007f12:	7afb      	ldrb	r3, [r7, #11]
 8007f14:	3301      	adds	r3, #1
 8007f16:	72fb      	strb	r3, [r7, #11]
      break;
 8007f18:	e021      	b.n	8007f5e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	7c1b      	ldrb	r3, [r3, #16]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d10d      	bne.n	8007f3e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f2a:	f107 0208 	add.w	r2, r7, #8
 8007f2e:	4610      	mov	r0, r2
 8007f30:	4798      	blx	r3
 8007f32:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	3301      	adds	r3, #1
 8007f38:	2207      	movs	r2, #7
 8007f3a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f3c:	e00f      	b.n	8007f5e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007f3e:	6839      	ldr	r1, [r7, #0]
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f000 fa10 	bl	8008366 <USBD_CtlError>
        err++;
 8007f46:	7afb      	ldrb	r3, [r7, #11]
 8007f48:	3301      	adds	r3, #1
 8007f4a:	72fb      	strb	r3, [r7, #11]
      break;
 8007f4c:	e007      	b.n	8007f5e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007f4e:	6839      	ldr	r1, [r7, #0]
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f000 fa08 	bl	8008366 <USBD_CtlError>
      err++;
 8007f56:	7afb      	ldrb	r3, [r7, #11]
 8007f58:	3301      	adds	r3, #1
 8007f5a:	72fb      	strb	r3, [r7, #11]
      break;
 8007f5c:	bf00      	nop
  }

  if (err != 0U)
 8007f5e:	7afb      	ldrb	r3, [r7, #11]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d11e      	bne.n	8007fa2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	88db      	ldrh	r3, [r3, #6]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d016      	beq.n	8007f9a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007f6c:	893b      	ldrh	r3, [r7, #8]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d00e      	beq.n	8007f90 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	88da      	ldrh	r2, [r3, #6]
 8007f76:	893b      	ldrh	r3, [r7, #8]
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	bf28      	it	cs
 8007f7c:	4613      	movcs	r3, r2
 8007f7e:	b29b      	uxth	r3, r3
 8007f80:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007f82:	893b      	ldrh	r3, [r7, #8]
 8007f84:	461a      	mov	r2, r3
 8007f86:	68f9      	ldr	r1, [r7, #12]
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 fa5d 	bl	8008448 <USBD_CtlSendData>
 8007f8e:	e009      	b.n	8007fa4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007f90:	6839      	ldr	r1, [r7, #0]
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 f9e7 	bl	8008366 <USBD_CtlError>
 8007f98:	e004      	b.n	8007fa4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 faae 	bl	80084fc <USBD_CtlSendStatus>
 8007fa0:	e000      	b.n	8007fa4 <USBD_GetDescriptor+0x320>
    return;
 8007fa2:	bf00      	nop
  }
}
 8007fa4:	3710      	adds	r7, #16
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
 8007faa:	bf00      	nop

08007fac <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b084      	sub	sp, #16
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	889b      	ldrh	r3, [r3, #4]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d131      	bne.n	8008022 <USBD_SetAddress+0x76>
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	88db      	ldrh	r3, [r3, #6]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d12d      	bne.n	8008022 <USBD_SetAddress+0x76>
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	885b      	ldrh	r3, [r3, #2]
 8007fca:	2b7f      	cmp	r3, #127	@ 0x7f
 8007fcc:	d829      	bhi.n	8008022 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	885b      	ldrh	r3, [r3, #2]
 8007fd2:	b2db      	uxtb	r3, r3
 8007fd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007fd8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fe0:	b2db      	uxtb	r3, r3
 8007fe2:	2b03      	cmp	r3, #3
 8007fe4:	d104      	bne.n	8007ff0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007fe6:	6839      	ldr	r1, [r7, #0]
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f000 f9bc 	bl	8008366 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fee:	e01d      	b.n	800802c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	7bfa      	ldrb	r2, [r7, #15]
 8007ff4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007ff8:	7bfb      	ldrb	r3, [r7, #15]
 8007ffa:	4619      	mov	r1, r3
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f000 ff01 	bl	8008e04 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f000 fa7a 	bl	80084fc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008008:	7bfb      	ldrb	r3, [r7, #15]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d004      	beq.n	8008018 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2202      	movs	r2, #2
 8008012:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008016:	e009      	b.n	800802c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2201      	movs	r2, #1
 800801c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008020:	e004      	b.n	800802c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008022:	6839      	ldr	r1, [r7, #0]
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 f99e 	bl	8008366 <USBD_CtlError>
  }
}
 800802a:	bf00      	nop
 800802c:	bf00      	nop
 800802e:	3710      	adds	r7, #16
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}

08008034 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b084      	sub	sp, #16
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800803e:	2300      	movs	r3, #0
 8008040:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	885b      	ldrh	r3, [r3, #2]
 8008046:	b2da      	uxtb	r2, r3
 8008048:	4b4e      	ldr	r3, [pc, #312]	@ (8008184 <USBD_SetConfig+0x150>)
 800804a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800804c:	4b4d      	ldr	r3, [pc, #308]	@ (8008184 <USBD_SetConfig+0x150>)
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	2b01      	cmp	r3, #1
 8008052:	d905      	bls.n	8008060 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008054:	6839      	ldr	r1, [r7, #0]
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 f985 	bl	8008366 <USBD_CtlError>
    return USBD_FAIL;
 800805c:	2303      	movs	r3, #3
 800805e:	e08c      	b.n	800817a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008066:	b2db      	uxtb	r3, r3
 8008068:	2b02      	cmp	r3, #2
 800806a:	d002      	beq.n	8008072 <USBD_SetConfig+0x3e>
 800806c:	2b03      	cmp	r3, #3
 800806e:	d029      	beq.n	80080c4 <USBD_SetConfig+0x90>
 8008070:	e075      	b.n	800815e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008072:	4b44      	ldr	r3, [pc, #272]	@ (8008184 <USBD_SetConfig+0x150>)
 8008074:	781b      	ldrb	r3, [r3, #0]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d020      	beq.n	80080bc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800807a:	4b42      	ldr	r3, [pc, #264]	@ (8008184 <USBD_SetConfig+0x150>)
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	461a      	mov	r2, r3
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008084:	4b3f      	ldr	r3, [pc, #252]	@ (8008184 <USBD_SetConfig+0x150>)
 8008086:	781b      	ldrb	r3, [r3, #0]
 8008088:	4619      	mov	r1, r3
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f7fe ffbf 	bl	800700e <USBD_SetClassConfig>
 8008090:	4603      	mov	r3, r0
 8008092:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008094:	7bfb      	ldrb	r3, [r7, #15]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d008      	beq.n	80080ac <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800809a:	6839      	ldr	r1, [r7, #0]
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f000 f962 	bl	8008366 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2202      	movs	r2, #2
 80080a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80080aa:	e065      	b.n	8008178 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 fa25 	bl	80084fc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2203      	movs	r2, #3
 80080b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80080ba:	e05d      	b.n	8008178 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 fa1d 	bl	80084fc <USBD_CtlSendStatus>
      break;
 80080c2:	e059      	b.n	8008178 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80080c4:	4b2f      	ldr	r3, [pc, #188]	@ (8008184 <USBD_SetConfig+0x150>)
 80080c6:	781b      	ldrb	r3, [r3, #0]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d112      	bne.n	80080f2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2202      	movs	r2, #2
 80080d0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80080d4:	4b2b      	ldr	r3, [pc, #172]	@ (8008184 <USBD_SetConfig+0x150>)
 80080d6:	781b      	ldrb	r3, [r3, #0]
 80080d8:	461a      	mov	r2, r3
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80080de:	4b29      	ldr	r3, [pc, #164]	@ (8008184 <USBD_SetConfig+0x150>)
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	4619      	mov	r1, r3
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f7fe ffae 	bl	8007046 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 fa06 	bl	80084fc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80080f0:	e042      	b.n	8008178 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80080f2:	4b24      	ldr	r3, [pc, #144]	@ (8008184 <USBD_SetConfig+0x150>)
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	461a      	mov	r2, r3
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	429a      	cmp	r2, r3
 80080fe:	d02a      	beq.n	8008156 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	b2db      	uxtb	r3, r3
 8008106:	4619      	mov	r1, r3
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f7fe ff9c 	bl	8007046 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800810e:	4b1d      	ldr	r3, [pc, #116]	@ (8008184 <USBD_SetConfig+0x150>)
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	461a      	mov	r2, r3
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008118:	4b1a      	ldr	r3, [pc, #104]	@ (8008184 <USBD_SetConfig+0x150>)
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	4619      	mov	r1, r3
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f7fe ff75 	bl	800700e <USBD_SetClassConfig>
 8008124:	4603      	mov	r3, r0
 8008126:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008128:	7bfb      	ldrb	r3, [r7, #15]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d00f      	beq.n	800814e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800812e:	6839      	ldr	r1, [r7, #0]
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 f918 	bl	8008366 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	b2db      	uxtb	r3, r3
 800813c:	4619      	mov	r1, r3
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f7fe ff81 	bl	8007046 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2202      	movs	r2, #2
 8008148:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800814c:	e014      	b.n	8008178 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 f9d4 	bl	80084fc <USBD_CtlSendStatus>
      break;
 8008154:	e010      	b.n	8008178 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 f9d0 	bl	80084fc <USBD_CtlSendStatus>
      break;
 800815c:	e00c      	b.n	8008178 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800815e:	6839      	ldr	r1, [r7, #0]
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f000 f900 	bl	8008366 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008166:	4b07      	ldr	r3, [pc, #28]	@ (8008184 <USBD_SetConfig+0x150>)
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	4619      	mov	r1, r3
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f7fe ff6a 	bl	8007046 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008172:	2303      	movs	r3, #3
 8008174:	73fb      	strb	r3, [r7, #15]
      break;
 8008176:	bf00      	nop
  }

  return ret;
 8008178:	7bfb      	ldrb	r3, [r7, #15]
}
 800817a:	4618      	mov	r0, r3
 800817c:	3710      	adds	r7, #16
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}
 8008182:	bf00      	nop
 8008184:	20000204 	.word	0x20000204

08008188 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b082      	sub	sp, #8
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	88db      	ldrh	r3, [r3, #6]
 8008196:	2b01      	cmp	r3, #1
 8008198:	d004      	beq.n	80081a4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800819a:	6839      	ldr	r1, [r7, #0]
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f000 f8e2 	bl	8008366 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80081a2:	e023      	b.n	80081ec <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081aa:	b2db      	uxtb	r3, r3
 80081ac:	2b02      	cmp	r3, #2
 80081ae:	dc02      	bgt.n	80081b6 <USBD_GetConfig+0x2e>
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	dc03      	bgt.n	80081bc <USBD_GetConfig+0x34>
 80081b4:	e015      	b.n	80081e2 <USBD_GetConfig+0x5a>
 80081b6:	2b03      	cmp	r3, #3
 80081b8:	d00b      	beq.n	80081d2 <USBD_GetConfig+0x4a>
 80081ba:	e012      	b.n	80081e2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	3308      	adds	r3, #8
 80081c6:	2201      	movs	r2, #1
 80081c8:	4619      	mov	r1, r3
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 f93c 	bl	8008448 <USBD_CtlSendData>
        break;
 80081d0:	e00c      	b.n	80081ec <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	3304      	adds	r3, #4
 80081d6:	2201      	movs	r2, #1
 80081d8:	4619      	mov	r1, r3
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 f934 	bl	8008448 <USBD_CtlSendData>
        break;
 80081e0:	e004      	b.n	80081ec <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80081e2:	6839      	ldr	r1, [r7, #0]
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f000 f8be 	bl	8008366 <USBD_CtlError>
        break;
 80081ea:	bf00      	nop
}
 80081ec:	bf00      	nop
 80081ee:	3708      	adds	r7, #8
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}

080081f4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b082      	sub	sp, #8
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008204:	b2db      	uxtb	r3, r3
 8008206:	3b01      	subs	r3, #1
 8008208:	2b02      	cmp	r3, #2
 800820a:	d81e      	bhi.n	800824a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	88db      	ldrh	r3, [r3, #6]
 8008210:	2b02      	cmp	r3, #2
 8008212:	d004      	beq.n	800821e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008214:	6839      	ldr	r1, [r7, #0]
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f000 f8a5 	bl	8008366 <USBD_CtlError>
        break;
 800821c:	e01a      	b.n	8008254 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2201      	movs	r2, #1
 8008222:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800822a:	2b00      	cmp	r3, #0
 800822c:	d005      	beq.n	800823a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	68db      	ldr	r3, [r3, #12]
 8008232:	f043 0202 	orr.w	r2, r3, #2
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	330c      	adds	r3, #12
 800823e:	2202      	movs	r2, #2
 8008240:	4619      	mov	r1, r3
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 f900 	bl	8008448 <USBD_CtlSendData>
      break;
 8008248:	e004      	b.n	8008254 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800824a:	6839      	ldr	r1, [r7, #0]
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f000 f88a 	bl	8008366 <USBD_CtlError>
      break;
 8008252:	bf00      	nop
  }
}
 8008254:	bf00      	nop
 8008256:	3708      	adds	r7, #8
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}

0800825c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b082      	sub	sp, #8
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	885b      	ldrh	r3, [r3, #2]
 800826a:	2b01      	cmp	r3, #1
 800826c:	d107      	bne.n	800827e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2201      	movs	r2, #1
 8008272:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f000 f940 	bl	80084fc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800827c:	e013      	b.n	80082a6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	885b      	ldrh	r3, [r3, #2]
 8008282:	2b02      	cmp	r3, #2
 8008284:	d10b      	bne.n	800829e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	889b      	ldrh	r3, [r3, #4]
 800828a:	0a1b      	lsrs	r3, r3, #8
 800828c:	b29b      	uxth	r3, r3
 800828e:	b2da      	uxtb	r2, r3
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f000 f930 	bl	80084fc <USBD_CtlSendStatus>
}
 800829c:	e003      	b.n	80082a6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800829e:	6839      	ldr	r1, [r7, #0]
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f000 f860 	bl	8008366 <USBD_CtlError>
}
 80082a6:	bf00      	nop
 80082a8:	3708      	adds	r7, #8
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}

080082ae <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082ae:	b580      	push	{r7, lr}
 80082b0:	b082      	sub	sp, #8
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	6078      	str	r0, [r7, #4]
 80082b6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082be:	b2db      	uxtb	r3, r3
 80082c0:	3b01      	subs	r3, #1
 80082c2:	2b02      	cmp	r3, #2
 80082c4:	d80b      	bhi.n	80082de <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	885b      	ldrh	r3, [r3, #2]
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	d10c      	bne.n	80082e8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2200      	movs	r2, #0
 80082d2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f000 f910 	bl	80084fc <USBD_CtlSendStatus>
      }
      break;
 80082dc:	e004      	b.n	80082e8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80082de:	6839      	ldr	r1, [r7, #0]
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f000 f840 	bl	8008366 <USBD_CtlError>
      break;
 80082e6:	e000      	b.n	80082ea <USBD_ClrFeature+0x3c>
      break;
 80082e8:	bf00      	nop
  }
}
 80082ea:	bf00      	nop
 80082ec:	3708      	adds	r7, #8
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}

080082f2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80082f2:	b580      	push	{r7, lr}
 80082f4:	b084      	sub	sp, #16
 80082f6:	af00      	add	r7, sp, #0
 80082f8:	6078      	str	r0, [r7, #4]
 80082fa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	781a      	ldrb	r2, [r3, #0]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	3301      	adds	r3, #1
 800830c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	781a      	ldrb	r2, [r3, #0]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	3301      	adds	r3, #1
 800831a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800831c:	68f8      	ldr	r0, [r7, #12]
 800831e:	f7ff fa16 	bl	800774e <SWAPBYTE>
 8008322:	4603      	mov	r3, r0
 8008324:	461a      	mov	r2, r3
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	3301      	adds	r3, #1
 800832e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	3301      	adds	r3, #1
 8008334:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008336:	68f8      	ldr	r0, [r7, #12]
 8008338:	f7ff fa09 	bl	800774e <SWAPBYTE>
 800833c:	4603      	mov	r3, r0
 800833e:	461a      	mov	r2, r3
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	3301      	adds	r3, #1
 8008348:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	3301      	adds	r3, #1
 800834e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008350:	68f8      	ldr	r0, [r7, #12]
 8008352:	f7ff f9fc 	bl	800774e <SWAPBYTE>
 8008356:	4603      	mov	r3, r0
 8008358:	461a      	mov	r2, r3
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	80da      	strh	r2, [r3, #6]
}
 800835e:	bf00      	nop
 8008360:	3710      	adds	r7, #16
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}

08008366 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008366:	b580      	push	{r7, lr}
 8008368:	b082      	sub	sp, #8
 800836a:	af00      	add	r7, sp, #0
 800836c:	6078      	str	r0, [r7, #4]
 800836e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008370:	2180      	movs	r1, #128	@ 0x80
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 fcdc 	bl	8008d30 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008378:	2100      	movs	r1, #0
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f000 fcd8 	bl	8008d30 <USBD_LL_StallEP>
}
 8008380:	bf00      	nop
 8008382:	3708      	adds	r7, #8
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}

08008388 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b086      	sub	sp, #24
 800838c:	af00      	add	r7, sp, #0
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	60b9      	str	r1, [r7, #8]
 8008392:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008394:	2300      	movs	r3, #0
 8008396:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d036      	beq.n	800840c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80083a2:	6938      	ldr	r0, [r7, #16]
 80083a4:	f000 f836 	bl	8008414 <USBD_GetLen>
 80083a8:	4603      	mov	r3, r0
 80083aa:	3301      	adds	r3, #1
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	005b      	lsls	r3, r3, #1
 80083b0:	b29a      	uxth	r2, r3
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80083b6:	7dfb      	ldrb	r3, [r7, #23]
 80083b8:	68ba      	ldr	r2, [r7, #8]
 80083ba:	4413      	add	r3, r2
 80083bc:	687a      	ldr	r2, [r7, #4]
 80083be:	7812      	ldrb	r2, [r2, #0]
 80083c0:	701a      	strb	r2, [r3, #0]
  idx++;
 80083c2:	7dfb      	ldrb	r3, [r7, #23]
 80083c4:	3301      	adds	r3, #1
 80083c6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80083c8:	7dfb      	ldrb	r3, [r7, #23]
 80083ca:	68ba      	ldr	r2, [r7, #8]
 80083cc:	4413      	add	r3, r2
 80083ce:	2203      	movs	r2, #3
 80083d0:	701a      	strb	r2, [r3, #0]
  idx++;
 80083d2:	7dfb      	ldrb	r3, [r7, #23]
 80083d4:	3301      	adds	r3, #1
 80083d6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80083d8:	e013      	b.n	8008402 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80083da:	7dfb      	ldrb	r3, [r7, #23]
 80083dc:	68ba      	ldr	r2, [r7, #8]
 80083de:	4413      	add	r3, r2
 80083e0:	693a      	ldr	r2, [r7, #16]
 80083e2:	7812      	ldrb	r2, [r2, #0]
 80083e4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	3301      	adds	r3, #1
 80083ea:	613b      	str	r3, [r7, #16]
    idx++;
 80083ec:	7dfb      	ldrb	r3, [r7, #23]
 80083ee:	3301      	adds	r3, #1
 80083f0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80083f2:	7dfb      	ldrb	r3, [r7, #23]
 80083f4:	68ba      	ldr	r2, [r7, #8]
 80083f6:	4413      	add	r3, r2
 80083f8:	2200      	movs	r2, #0
 80083fa:	701a      	strb	r2, [r3, #0]
    idx++;
 80083fc:	7dfb      	ldrb	r3, [r7, #23]
 80083fe:	3301      	adds	r3, #1
 8008400:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	781b      	ldrb	r3, [r3, #0]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d1e7      	bne.n	80083da <USBD_GetString+0x52>
 800840a:	e000      	b.n	800840e <USBD_GetString+0x86>
    return;
 800840c:	bf00      	nop
  }
}
 800840e:	3718      	adds	r7, #24
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}

08008414 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008414:	b480      	push	{r7}
 8008416:	b085      	sub	sp, #20
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800841c:	2300      	movs	r3, #0
 800841e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008424:	e005      	b.n	8008432 <USBD_GetLen+0x1e>
  {
    len++;
 8008426:	7bfb      	ldrb	r3, [r7, #15]
 8008428:	3301      	adds	r3, #1
 800842a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	3301      	adds	r3, #1
 8008430:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	781b      	ldrb	r3, [r3, #0]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d1f5      	bne.n	8008426 <USBD_GetLen+0x12>
  }

  return len;
 800843a:	7bfb      	ldrb	r3, [r7, #15]
}
 800843c:	4618      	mov	r0, r3
 800843e:	3714      	adds	r7, #20
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr

08008448 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b084      	sub	sp, #16
 800844c:	af00      	add	r7, sp, #0
 800844e:	60f8      	str	r0, [r7, #12]
 8008450:	60b9      	str	r1, [r7, #8]
 8008452:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2202      	movs	r2, #2
 8008458:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	687a      	ldr	r2, [r7, #4]
 8008460:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	687a      	ldr	r2, [r7, #4]
 8008466:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	68ba      	ldr	r2, [r7, #8]
 800846c:	2100      	movs	r1, #0
 800846e:	68f8      	ldr	r0, [r7, #12]
 8008470:	f000 fce7 	bl	8008e42 <USBD_LL_Transmit>

  return USBD_OK;
 8008474:	2300      	movs	r3, #0
}
 8008476:	4618      	mov	r0, r3
 8008478:	3710      	adds	r7, #16
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}

0800847e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800847e:	b580      	push	{r7, lr}
 8008480:	b084      	sub	sp, #16
 8008482:	af00      	add	r7, sp, #0
 8008484:	60f8      	str	r0, [r7, #12]
 8008486:	60b9      	str	r1, [r7, #8]
 8008488:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	68ba      	ldr	r2, [r7, #8]
 800848e:	2100      	movs	r1, #0
 8008490:	68f8      	ldr	r0, [r7, #12]
 8008492:	f000 fcd6 	bl	8008e42 <USBD_LL_Transmit>

  return USBD_OK;
 8008496:	2300      	movs	r3, #0
}
 8008498:	4618      	mov	r0, r3
 800849a:	3710      	adds	r7, #16
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}

080084a0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b084      	sub	sp, #16
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	60f8      	str	r0, [r7, #12]
 80084a8:	60b9      	str	r1, [r7, #8]
 80084aa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2203      	movs	r2, #3
 80084b0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	687a      	ldr	r2, [r7, #4]
 80084b8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	687a      	ldr	r2, [r7, #4]
 80084c0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	68ba      	ldr	r2, [r7, #8]
 80084c8:	2100      	movs	r1, #0
 80084ca:	68f8      	ldr	r0, [r7, #12]
 80084cc:	f000 fcda 	bl	8008e84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084d0:	2300      	movs	r3, #0
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3710      	adds	r7, #16
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}

080084da <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80084da:	b580      	push	{r7, lr}
 80084dc:	b084      	sub	sp, #16
 80084de:	af00      	add	r7, sp, #0
 80084e0:	60f8      	str	r0, [r7, #12]
 80084e2:	60b9      	str	r1, [r7, #8]
 80084e4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	68ba      	ldr	r2, [r7, #8]
 80084ea:	2100      	movs	r1, #0
 80084ec:	68f8      	ldr	r0, [r7, #12]
 80084ee:	f000 fcc9 	bl	8008e84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084f2:	2300      	movs	r3, #0
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3710      	adds	r7, #16
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}

080084fc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b082      	sub	sp, #8
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2204      	movs	r2, #4
 8008508:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800850c:	2300      	movs	r3, #0
 800850e:	2200      	movs	r2, #0
 8008510:	2100      	movs	r1, #0
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f000 fc95 	bl	8008e42 <USBD_LL_Transmit>

  return USBD_OK;
 8008518:	2300      	movs	r3, #0
}
 800851a:	4618      	mov	r0, r3
 800851c:	3708      	adds	r7, #8
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}

08008522 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008522:	b580      	push	{r7, lr}
 8008524:	b082      	sub	sp, #8
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2205      	movs	r2, #5
 800852e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008532:	2300      	movs	r3, #0
 8008534:	2200      	movs	r2, #0
 8008536:	2100      	movs	r1, #0
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f000 fca3 	bl	8008e84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800853e:	2300      	movs	r3, #0
}
 8008540:	4618      	mov	r0, r3
 8008542:	3708      	adds	r7, #8
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}

08008548 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800854c:	2200      	movs	r2, #0
 800854e:	4912      	ldr	r1, [pc, #72]	@ (8008598 <MX_USB_DEVICE_Init+0x50>)
 8008550:	4812      	ldr	r0, [pc, #72]	@ (800859c <MX_USB_DEVICE_Init+0x54>)
 8008552:	f7fe fcdf 	bl	8006f14 <USBD_Init>
 8008556:	4603      	mov	r3, r0
 8008558:	2b00      	cmp	r3, #0
 800855a:	d001      	beq.n	8008560 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800855c:	f7f8 fb90 	bl	8000c80 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008560:	490f      	ldr	r1, [pc, #60]	@ (80085a0 <MX_USB_DEVICE_Init+0x58>)
 8008562:	480e      	ldr	r0, [pc, #56]	@ (800859c <MX_USB_DEVICE_Init+0x54>)
 8008564:	f7fe fd06 	bl	8006f74 <USBD_RegisterClass>
 8008568:	4603      	mov	r3, r0
 800856a:	2b00      	cmp	r3, #0
 800856c:	d001      	beq.n	8008572 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800856e:	f7f8 fb87 	bl	8000c80 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008572:	490c      	ldr	r1, [pc, #48]	@ (80085a4 <MX_USB_DEVICE_Init+0x5c>)
 8008574:	4809      	ldr	r0, [pc, #36]	@ (800859c <MX_USB_DEVICE_Init+0x54>)
 8008576:	f7fe fc3d 	bl	8006df4 <USBD_CDC_RegisterInterface>
 800857a:	4603      	mov	r3, r0
 800857c:	2b00      	cmp	r3, #0
 800857e:	d001      	beq.n	8008584 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008580:	f7f8 fb7e 	bl	8000c80 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008584:	4805      	ldr	r0, [pc, #20]	@ (800859c <MX_USB_DEVICE_Init+0x54>)
 8008586:	f7fe fd2b 	bl	8006fe0 <USBD_Start>
 800858a:	4603      	mov	r3, r0
 800858c:	2b00      	cmp	r3, #0
 800858e:	d001      	beq.n	8008594 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008590:	f7f8 fb76 	bl	8000c80 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008594:	bf00      	nop
 8008596:	bd80      	pop	{r7, pc}
 8008598:	200000ac 	.word	0x200000ac
 800859c:	20000208 	.word	0x20000208
 80085a0:	20000018 	.word	0x20000018
 80085a4:	20000098 	.word	0x20000098

080085a8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80085ac:	2200      	movs	r2, #0
 80085ae:	4905      	ldr	r1, [pc, #20]	@ (80085c4 <CDC_Init_FS+0x1c>)
 80085b0:	4805      	ldr	r0, [pc, #20]	@ (80085c8 <CDC_Init_FS+0x20>)
 80085b2:	f7fe fc39 	bl	8006e28 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80085b6:	4905      	ldr	r1, [pc, #20]	@ (80085cc <CDC_Init_FS+0x24>)
 80085b8:	4803      	ldr	r0, [pc, #12]	@ (80085c8 <CDC_Init_FS+0x20>)
 80085ba:	f7fe fc57 	bl	8006e6c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80085be:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	bd80      	pop	{r7, pc}
 80085c4:	20000ce4 	.word	0x20000ce4
 80085c8:	20000208 	.word	0x20000208
 80085cc:	200004e4 	.word	0x200004e4

080085d0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80085d0:	b480      	push	{r7}
 80085d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80085d4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr

080085e0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b083      	sub	sp, #12
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	4603      	mov	r3, r0
 80085e8:	6039      	str	r1, [r7, #0]
 80085ea:	71fb      	strb	r3, [r7, #7]
 80085ec:	4613      	mov	r3, r2
 80085ee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80085f0:	79fb      	ldrb	r3, [r7, #7]
 80085f2:	2b23      	cmp	r3, #35	@ 0x23
 80085f4:	d84a      	bhi.n	800868c <CDC_Control_FS+0xac>
 80085f6:	a201      	add	r2, pc, #4	@ (adr r2, 80085fc <CDC_Control_FS+0x1c>)
 80085f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085fc:	0800868d 	.word	0x0800868d
 8008600:	0800868d 	.word	0x0800868d
 8008604:	0800868d 	.word	0x0800868d
 8008608:	0800868d 	.word	0x0800868d
 800860c:	0800868d 	.word	0x0800868d
 8008610:	0800868d 	.word	0x0800868d
 8008614:	0800868d 	.word	0x0800868d
 8008618:	0800868d 	.word	0x0800868d
 800861c:	0800868d 	.word	0x0800868d
 8008620:	0800868d 	.word	0x0800868d
 8008624:	0800868d 	.word	0x0800868d
 8008628:	0800868d 	.word	0x0800868d
 800862c:	0800868d 	.word	0x0800868d
 8008630:	0800868d 	.word	0x0800868d
 8008634:	0800868d 	.word	0x0800868d
 8008638:	0800868d 	.word	0x0800868d
 800863c:	0800868d 	.word	0x0800868d
 8008640:	0800868d 	.word	0x0800868d
 8008644:	0800868d 	.word	0x0800868d
 8008648:	0800868d 	.word	0x0800868d
 800864c:	0800868d 	.word	0x0800868d
 8008650:	0800868d 	.word	0x0800868d
 8008654:	0800868d 	.word	0x0800868d
 8008658:	0800868d 	.word	0x0800868d
 800865c:	0800868d 	.word	0x0800868d
 8008660:	0800868d 	.word	0x0800868d
 8008664:	0800868d 	.word	0x0800868d
 8008668:	0800868d 	.word	0x0800868d
 800866c:	0800868d 	.word	0x0800868d
 8008670:	0800868d 	.word	0x0800868d
 8008674:	0800868d 	.word	0x0800868d
 8008678:	0800868d 	.word	0x0800868d
 800867c:	0800868d 	.word	0x0800868d
 8008680:	0800868d 	.word	0x0800868d
 8008684:	0800868d 	.word	0x0800868d
 8008688:	0800868d 	.word	0x0800868d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800868c:	bf00      	nop
  }

  return (USBD_OK);
 800868e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008690:	4618      	mov	r0, r3
 8008692:	370c      	adds	r7, #12
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr

0800869c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b082      	sub	sp, #8
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80086a6:	6879      	ldr	r1, [r7, #4]
 80086a8:	4805      	ldr	r0, [pc, #20]	@ (80086c0 <CDC_Receive_FS+0x24>)
 80086aa:	f7fe fbdf 	bl	8006e6c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80086ae:	4804      	ldr	r0, [pc, #16]	@ (80086c0 <CDC_Receive_FS+0x24>)
 80086b0:	f7fe fbfa 	bl	8006ea8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80086b4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3708      	adds	r7, #8
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}
 80086be:	bf00      	nop
 80086c0:	20000208 	.word	0x20000208

080086c4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b087      	sub	sp, #28
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	60f8      	str	r0, [r7, #12]
 80086cc:	60b9      	str	r1, [r7, #8]
 80086ce:	4613      	mov	r3, r2
 80086d0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80086d2:	2300      	movs	r3, #0
 80086d4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80086d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80086da:	4618      	mov	r0, r3
 80086dc:	371c      	adds	r7, #28
 80086de:	46bd      	mov	sp, r7
 80086e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e4:	4770      	bx	lr
	...

080086e8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b083      	sub	sp, #12
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	4603      	mov	r3, r0
 80086f0:	6039      	str	r1, [r7, #0]
 80086f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	2212      	movs	r2, #18
 80086f8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80086fa:	4b03      	ldr	r3, [pc, #12]	@ (8008708 <USBD_FS_DeviceDescriptor+0x20>)
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	370c      	adds	r7, #12
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr
 8008708:	200000cc 	.word	0x200000cc

0800870c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800870c:	b480      	push	{r7}
 800870e:	b083      	sub	sp, #12
 8008710:	af00      	add	r7, sp, #0
 8008712:	4603      	mov	r3, r0
 8008714:	6039      	str	r1, [r7, #0]
 8008716:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	2204      	movs	r2, #4
 800871c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800871e:	4b03      	ldr	r3, [pc, #12]	@ (800872c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008720:	4618      	mov	r0, r3
 8008722:	370c      	adds	r7, #12
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr
 800872c:	200000ec 	.word	0x200000ec

08008730 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b082      	sub	sp, #8
 8008734:	af00      	add	r7, sp, #0
 8008736:	4603      	mov	r3, r0
 8008738:	6039      	str	r1, [r7, #0]
 800873a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800873c:	79fb      	ldrb	r3, [r7, #7]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d105      	bne.n	800874e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008742:	683a      	ldr	r2, [r7, #0]
 8008744:	4907      	ldr	r1, [pc, #28]	@ (8008764 <USBD_FS_ProductStrDescriptor+0x34>)
 8008746:	4808      	ldr	r0, [pc, #32]	@ (8008768 <USBD_FS_ProductStrDescriptor+0x38>)
 8008748:	f7ff fe1e 	bl	8008388 <USBD_GetString>
 800874c:	e004      	b.n	8008758 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800874e:	683a      	ldr	r2, [r7, #0]
 8008750:	4904      	ldr	r1, [pc, #16]	@ (8008764 <USBD_FS_ProductStrDescriptor+0x34>)
 8008752:	4805      	ldr	r0, [pc, #20]	@ (8008768 <USBD_FS_ProductStrDescriptor+0x38>)
 8008754:	f7ff fe18 	bl	8008388 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008758:	4b02      	ldr	r3, [pc, #8]	@ (8008764 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800875a:	4618      	mov	r0, r3
 800875c:	3708      	adds	r7, #8
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}
 8008762:	bf00      	nop
 8008764:	200014e4 	.word	0x200014e4
 8008768:	08009138 	.word	0x08009138

0800876c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b082      	sub	sp, #8
 8008770:	af00      	add	r7, sp, #0
 8008772:	4603      	mov	r3, r0
 8008774:	6039      	str	r1, [r7, #0]
 8008776:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008778:	683a      	ldr	r2, [r7, #0]
 800877a:	4904      	ldr	r1, [pc, #16]	@ (800878c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800877c:	4804      	ldr	r0, [pc, #16]	@ (8008790 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800877e:	f7ff fe03 	bl	8008388 <USBD_GetString>
  return USBD_StrDesc;
 8008782:	4b02      	ldr	r3, [pc, #8]	@ (800878c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008784:	4618      	mov	r0, r3
 8008786:	3708      	adds	r7, #8
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}
 800878c:	200014e4 	.word	0x200014e4
 8008790:	08009150 	.word	0x08009150

08008794 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b082      	sub	sp, #8
 8008798:	af00      	add	r7, sp, #0
 800879a:	4603      	mov	r3, r0
 800879c:	6039      	str	r1, [r7, #0]
 800879e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	221a      	movs	r2, #26
 80087a4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80087a6:	f000 f855 	bl	8008854 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80087aa:	4b02      	ldr	r3, [pc, #8]	@ (80087b4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3708      	adds	r7, #8
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}
 80087b4:	200000f0 	.word	0x200000f0

080087b8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b082      	sub	sp, #8
 80087bc:	af00      	add	r7, sp, #0
 80087be:	4603      	mov	r3, r0
 80087c0:	6039      	str	r1, [r7, #0]
 80087c2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80087c4:	79fb      	ldrb	r3, [r7, #7]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d105      	bne.n	80087d6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80087ca:	683a      	ldr	r2, [r7, #0]
 80087cc:	4907      	ldr	r1, [pc, #28]	@ (80087ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80087ce:	4808      	ldr	r0, [pc, #32]	@ (80087f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80087d0:	f7ff fdda 	bl	8008388 <USBD_GetString>
 80087d4:	e004      	b.n	80087e0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80087d6:	683a      	ldr	r2, [r7, #0]
 80087d8:	4904      	ldr	r1, [pc, #16]	@ (80087ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80087da:	4805      	ldr	r0, [pc, #20]	@ (80087f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80087dc:	f7ff fdd4 	bl	8008388 <USBD_GetString>
  }
  return USBD_StrDesc;
 80087e0:	4b02      	ldr	r3, [pc, #8]	@ (80087ec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3708      	adds	r7, #8
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}
 80087ea:	bf00      	nop
 80087ec:	200014e4 	.word	0x200014e4
 80087f0:	08009164 	.word	0x08009164

080087f4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b082      	sub	sp, #8
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	4603      	mov	r3, r0
 80087fc:	6039      	str	r1, [r7, #0]
 80087fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008800:	79fb      	ldrb	r3, [r7, #7]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d105      	bne.n	8008812 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008806:	683a      	ldr	r2, [r7, #0]
 8008808:	4907      	ldr	r1, [pc, #28]	@ (8008828 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800880a:	4808      	ldr	r0, [pc, #32]	@ (800882c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800880c:	f7ff fdbc 	bl	8008388 <USBD_GetString>
 8008810:	e004      	b.n	800881c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008812:	683a      	ldr	r2, [r7, #0]
 8008814:	4904      	ldr	r1, [pc, #16]	@ (8008828 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008816:	4805      	ldr	r0, [pc, #20]	@ (800882c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008818:	f7ff fdb6 	bl	8008388 <USBD_GetString>
  }
  return USBD_StrDesc;
 800881c:	4b02      	ldr	r3, [pc, #8]	@ (8008828 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800881e:	4618      	mov	r0, r3
 8008820:	3708      	adds	r7, #8
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
 8008826:	bf00      	nop
 8008828:	200014e4 	.word	0x200014e4
 800882c:	08009170 	.word	0x08009170

08008830 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008830:	b480      	push	{r7}
 8008832:	b083      	sub	sp, #12
 8008834:	af00      	add	r7, sp, #0
 8008836:	4603      	mov	r3, r0
 8008838:	6039      	str	r1, [r7, #0]
 800883a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	220c      	movs	r2, #12
 8008840:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8008842:	4b03      	ldr	r3, [pc, #12]	@ (8008850 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8008844:	4618      	mov	r0, r3
 8008846:	370c      	adds	r7, #12
 8008848:	46bd      	mov	sp, r7
 800884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884e:	4770      	bx	lr
 8008850:	200000e0 	.word	0x200000e0

08008854 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b084      	sub	sp, #16
 8008858:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800885a:	4b0f      	ldr	r3, [pc, #60]	@ (8008898 <Get_SerialNum+0x44>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008860:	4b0e      	ldr	r3, [pc, #56]	@ (800889c <Get_SerialNum+0x48>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008866:	4b0e      	ldr	r3, [pc, #56]	@ (80088a0 <Get_SerialNum+0x4c>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800886c:	68fa      	ldr	r2, [r7, #12]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	4413      	add	r3, r2
 8008872:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d009      	beq.n	800888e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800887a:	2208      	movs	r2, #8
 800887c:	4909      	ldr	r1, [pc, #36]	@ (80088a4 <Get_SerialNum+0x50>)
 800887e:	68f8      	ldr	r0, [r7, #12]
 8008880:	f000 f814 	bl	80088ac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008884:	2204      	movs	r2, #4
 8008886:	4908      	ldr	r1, [pc, #32]	@ (80088a8 <Get_SerialNum+0x54>)
 8008888:	68b8      	ldr	r0, [r7, #8]
 800888a:	f000 f80f 	bl	80088ac <IntToUnicode>
  }
}
 800888e:	bf00      	nop
 8008890:	3710      	adds	r7, #16
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}
 8008896:	bf00      	nop
 8008898:	1fff7a10 	.word	0x1fff7a10
 800889c:	1fff7a14 	.word	0x1fff7a14
 80088a0:	1fff7a18 	.word	0x1fff7a18
 80088a4:	200000f2 	.word	0x200000f2
 80088a8:	20000102 	.word	0x20000102

080088ac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b087      	sub	sp, #28
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	60f8      	str	r0, [r7, #12]
 80088b4:	60b9      	str	r1, [r7, #8]
 80088b6:	4613      	mov	r3, r2
 80088b8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80088ba:	2300      	movs	r3, #0
 80088bc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80088be:	2300      	movs	r3, #0
 80088c0:	75fb      	strb	r3, [r7, #23]
 80088c2:	e027      	b.n	8008914 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	0f1b      	lsrs	r3, r3, #28
 80088c8:	2b09      	cmp	r3, #9
 80088ca:	d80b      	bhi.n	80088e4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	0f1b      	lsrs	r3, r3, #28
 80088d0:	b2da      	uxtb	r2, r3
 80088d2:	7dfb      	ldrb	r3, [r7, #23]
 80088d4:	005b      	lsls	r3, r3, #1
 80088d6:	4619      	mov	r1, r3
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	440b      	add	r3, r1
 80088dc:	3230      	adds	r2, #48	@ 0x30
 80088de:	b2d2      	uxtb	r2, r2
 80088e0:	701a      	strb	r2, [r3, #0]
 80088e2:	e00a      	b.n	80088fa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	0f1b      	lsrs	r3, r3, #28
 80088e8:	b2da      	uxtb	r2, r3
 80088ea:	7dfb      	ldrb	r3, [r7, #23]
 80088ec:	005b      	lsls	r3, r3, #1
 80088ee:	4619      	mov	r1, r3
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	440b      	add	r3, r1
 80088f4:	3237      	adds	r2, #55	@ 0x37
 80088f6:	b2d2      	uxtb	r2, r2
 80088f8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	011b      	lsls	r3, r3, #4
 80088fe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008900:	7dfb      	ldrb	r3, [r7, #23]
 8008902:	005b      	lsls	r3, r3, #1
 8008904:	3301      	adds	r3, #1
 8008906:	68ba      	ldr	r2, [r7, #8]
 8008908:	4413      	add	r3, r2
 800890a:	2200      	movs	r2, #0
 800890c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800890e:	7dfb      	ldrb	r3, [r7, #23]
 8008910:	3301      	adds	r3, #1
 8008912:	75fb      	strb	r3, [r7, #23]
 8008914:	7dfa      	ldrb	r2, [r7, #23]
 8008916:	79fb      	ldrb	r3, [r7, #7]
 8008918:	429a      	cmp	r2, r3
 800891a:	d3d3      	bcc.n	80088c4 <IntToUnicode+0x18>
  }
}
 800891c:	bf00      	nop
 800891e:	bf00      	nop
 8008920:	371c      	adds	r7, #28
 8008922:	46bd      	mov	sp, r7
 8008924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008928:	4770      	bx	lr
	...

0800892c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b098      	sub	sp, #96	@ 0x60
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008934:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8008938:	2200      	movs	r2, #0
 800893a:	601a      	str	r2, [r3, #0]
 800893c:	605a      	str	r2, [r3, #4]
 800893e:	609a      	str	r2, [r3, #8]
 8008940:	60da      	str	r2, [r3, #12]
 8008942:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008944:	f107 0310 	add.w	r3, r7, #16
 8008948:	223c      	movs	r2, #60	@ 0x3c
 800894a:	2100      	movs	r1, #0
 800894c:	4618      	mov	r0, r3
 800894e:	f000 fbbb 	bl	80090c8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800895a:	d148      	bne.n	80089ee <HAL_PCD_MspInit+0xc2>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800895c:	2320      	movs	r3, #32
 800895e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8008960:	2300      	movs	r3, #0
 8008962:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008964:	f107 0310 	add.w	r3, r7, #16
 8008968:	4618      	mov	r0, r3
 800896a:	f7fb fda9 	bl	80044c0 <HAL_RCCEx_PeriphCLKConfig>
 800896e:	4603      	mov	r3, r0
 8008970:	2b00      	cmp	r3, #0
 8008972:	d001      	beq.n	8008978 <HAL_PCD_MspInit+0x4c>
    {
      Error_Handler();
 8008974:	f7f8 f984 	bl	8000c80 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008978:	2300      	movs	r3, #0
 800897a:	60fb      	str	r3, [r7, #12]
 800897c:	4b1e      	ldr	r3, [pc, #120]	@ (80089f8 <HAL_PCD_MspInit+0xcc>)
 800897e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008980:	4a1d      	ldr	r2, [pc, #116]	@ (80089f8 <HAL_PCD_MspInit+0xcc>)
 8008982:	f043 0301 	orr.w	r3, r3, #1
 8008986:	6313      	str	r3, [r2, #48]	@ 0x30
 8008988:	4b1b      	ldr	r3, [pc, #108]	@ (80089f8 <HAL_PCD_MspInit+0xcc>)
 800898a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800898c:	f003 0301 	and.w	r3, r3, #1
 8008990:	60fb      	str	r3, [r7, #12]
 8008992:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008994:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8008998:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800899a:	2302      	movs	r3, #2
 800899c:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800899e:	2300      	movs	r3, #0
 80089a0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80089a2:	2303      	movs	r3, #3
 80089a4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80089a6:	230a      	movs	r3, #10
 80089a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80089aa:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80089ae:	4619      	mov	r1, r3
 80089b0:	4812      	ldr	r0, [pc, #72]	@ (80089fc <HAL_PCD_MspInit+0xd0>)
 80089b2:	f7f9 fee7 	bl	8002784 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80089b6:	4b10      	ldr	r3, [pc, #64]	@ (80089f8 <HAL_PCD_MspInit+0xcc>)
 80089b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089ba:	4a0f      	ldr	r2, [pc, #60]	@ (80089f8 <HAL_PCD_MspInit+0xcc>)
 80089bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089c0:	6353      	str	r3, [r2, #52]	@ 0x34
 80089c2:	2300      	movs	r3, #0
 80089c4:	60bb      	str	r3, [r7, #8]
 80089c6:	4b0c      	ldr	r3, [pc, #48]	@ (80089f8 <HAL_PCD_MspInit+0xcc>)
 80089c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089ca:	4a0b      	ldr	r2, [pc, #44]	@ (80089f8 <HAL_PCD_MspInit+0xcc>)
 80089cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80089d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80089d2:	4b09      	ldr	r3, [pc, #36]	@ (80089f8 <HAL_PCD_MspInit+0xcc>)
 80089d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80089da:	60bb      	str	r3, [r7, #8]
 80089dc:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80089de:	2200      	movs	r2, #0
 80089e0:	2100      	movs	r1, #0
 80089e2:	2043      	movs	r0, #67	@ 0x43
 80089e4:	f7f9 fe97 	bl	8002716 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80089e8:	2043      	movs	r0, #67	@ 0x43
 80089ea:	f7f9 feb0 	bl	800274e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80089ee:	bf00      	nop
 80089f0:	3760      	adds	r7, #96	@ 0x60
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}
 80089f6:	bf00      	nop
 80089f8:	40023800 	.word	0x40023800
 80089fc:	40020000 	.word	0x40020000

08008a00 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b082      	sub	sp, #8
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8008a14:	4619      	mov	r1, r3
 8008a16:	4610      	mov	r0, r2
 8008a18:	f7fe fb2f 	bl	800707a <USBD_LL_SetupStage>
}
 8008a1c:	bf00      	nop
 8008a1e:	3708      	adds	r7, #8
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}

08008a24 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b082      	sub	sp, #8
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
 8008a2c:	460b      	mov	r3, r1
 8008a2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 8008a36:	78fa      	ldrb	r2, [r7, #3]
 8008a38:	6879      	ldr	r1, [r7, #4]
 8008a3a:	4613      	mov	r3, r2
 8008a3c:	00db      	lsls	r3, r3, #3
 8008a3e:	4413      	add	r3, r2
 8008a40:	009b      	lsls	r3, r3, #2
 8008a42:	440b      	add	r3, r1
 8008a44:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8008a48:	681a      	ldr	r2, [r3, #0]
 8008a4a:	78fb      	ldrb	r3, [r7, #3]
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	f7fe fb69 	bl	8007124 <USBD_LL_DataOutStage>
}
 8008a52:	bf00      	nop
 8008a54:	3708      	adds	r7, #8
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}

08008a5a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a5a:	b580      	push	{r7, lr}
 8008a5c:	b082      	sub	sp, #8
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	6078      	str	r0, [r7, #4]
 8008a62:	460b      	mov	r3, r1
 8008a64:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 8008a6c:	78fa      	ldrb	r2, [r7, #3]
 8008a6e:	6879      	ldr	r1, [r7, #4]
 8008a70:	4613      	mov	r3, r2
 8008a72:	00db      	lsls	r3, r3, #3
 8008a74:	4413      	add	r3, r2
 8008a76:	009b      	lsls	r3, r3, #2
 8008a78:	440b      	add	r3, r1
 8008a7a:	334c      	adds	r3, #76	@ 0x4c
 8008a7c:	681a      	ldr	r2, [r3, #0]
 8008a7e:	78fb      	ldrb	r3, [r7, #3]
 8008a80:	4619      	mov	r1, r3
 8008a82:	f7fe fc02 	bl	800728a <USBD_LL_DataInStage>
}
 8008a86:	bf00      	nop
 8008a88:	3708      	adds	r7, #8
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}

08008a8e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a8e:	b580      	push	{r7, lr}
 8008a90:	b082      	sub	sp, #8
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f7fe fd36 	bl	800750e <USBD_LL_SOF>
}
 8008aa2:	bf00      	nop
 8008aa4:	3708      	adds	r7, #8
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}

08008aaa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008aaa:	b580      	push	{r7, lr}
 8008aac:	b084      	sub	sp, #16
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	68db      	ldr	r3, [r3, #12]
 8008aba:	2b02      	cmp	r3, #2
 8008abc:	d001      	beq.n	8008ac2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008abe:	f7f8 f8df 	bl	8000c80 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008ac8:	7bfa      	ldrb	r2, [r7, #15]
 8008aca:	4611      	mov	r1, r2
 8008acc:	4618      	mov	r0, r3
 8008ace:	f7fe fce0 	bl	8007492 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f7fe fc88 	bl	80073ee <USBD_LL_Reset>
}
 8008ade:	bf00      	nop
 8008ae0:	3710      	adds	r7, #16
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
	...

08008ae8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b082      	sub	sp, #8
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008af6:	4618      	mov	r0, r3
 8008af8:	f7fe fcdb 	bl	80074b2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	687a      	ldr	r2, [r7, #4]
 8008b08:	6812      	ldr	r2, [r2, #0]
 8008b0a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008b0e:	f043 0301 	orr.w	r3, r3, #1
 8008b12:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6a1b      	ldr	r3, [r3, #32]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d005      	beq.n	8008b28 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008b1c:	4b04      	ldr	r3, [pc, #16]	@ (8008b30 <HAL_PCD_SuspendCallback+0x48>)
 8008b1e:	691b      	ldr	r3, [r3, #16]
 8008b20:	4a03      	ldr	r2, [pc, #12]	@ (8008b30 <HAL_PCD_SuspendCallback+0x48>)
 8008b22:	f043 0306 	orr.w	r3, r3, #6
 8008b26:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008b28:	bf00      	nop
 8008b2a:	3708      	adds	r7, #8
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}
 8008b30:	e000ed00 	.word	0xe000ed00

08008b34 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b082      	sub	sp, #8
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008b42:	4618      	mov	r0, r3
 8008b44:	f7fe fccb 	bl	80074de <USBD_LL_Resume>
}
 8008b48:	bf00      	nop
 8008b4a:	3708      	adds	r7, #8
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b082      	sub	sp, #8
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	460b      	mov	r3, r1
 8008b5a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008b62:	78fa      	ldrb	r2, [r7, #3]
 8008b64:	4611      	mov	r1, r2
 8008b66:	4618      	mov	r0, r3
 8008b68:	f7fe fd23 	bl	80075b2 <USBD_LL_IsoOUTIncomplete>
}
 8008b6c:	bf00      	nop
 8008b6e:	3708      	adds	r7, #8
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}

08008b74 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b082      	sub	sp, #8
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
 8008b7c:	460b      	mov	r3, r1
 8008b7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008b86:	78fa      	ldrb	r2, [r7, #3]
 8008b88:	4611      	mov	r1, r2
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f7fe fcdf 	bl	800754e <USBD_LL_IsoINIncomplete>
}
 8008b90:	bf00      	nop
 8008b92:	3708      	adds	r7, #8
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b082      	sub	sp, #8
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f7fe fd35 	bl	8007616 <USBD_LL_DevConnected>
}
 8008bac:	bf00      	nop
 8008bae:	3708      	adds	r7, #8
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}

08008bb4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b082      	sub	sp, #8
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f7fe fd32 	bl	800762c <USBD_LL_DevDisconnected>
}
 8008bc8:	bf00      	nop
 8008bca:	3708      	adds	r7, #8
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}

08008bd0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b082      	sub	sp, #8
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	781b      	ldrb	r3, [r3, #0]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d13f      	bne.n	8008c60 <USBD_LL_Init+0x90>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008be0:	4a22      	ldr	r2, [pc, #136]	@ (8008c6c <USBD_LL_Init+0x9c>)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	4a20      	ldr	r2, [pc, #128]	@ (8008c6c <USBD_LL_Init+0x9c>)
 8008bec:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008bf0:	4b1e      	ldr	r3, [pc, #120]	@ (8008c6c <USBD_LL_Init+0x9c>)
 8008bf2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008bf6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8008bf8:	4b1c      	ldr	r3, [pc, #112]	@ (8008c6c <USBD_LL_Init+0x9c>)
 8008bfa:	2206      	movs	r2, #6
 8008bfc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008bfe:	4b1b      	ldr	r3, [pc, #108]	@ (8008c6c <USBD_LL_Init+0x9c>)
 8008c00:	2202      	movs	r2, #2
 8008c02:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008c04:	4b19      	ldr	r3, [pc, #100]	@ (8008c6c <USBD_LL_Init+0x9c>)
 8008c06:	2200      	movs	r2, #0
 8008c08:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008c0a:	4b18      	ldr	r3, [pc, #96]	@ (8008c6c <USBD_LL_Init+0x9c>)
 8008c0c:	2202      	movs	r2, #2
 8008c0e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008c10:	4b16      	ldr	r3, [pc, #88]	@ (8008c6c <USBD_LL_Init+0x9c>)
 8008c12:	2200      	movs	r2, #0
 8008c14:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008c16:	4b15      	ldr	r3, [pc, #84]	@ (8008c6c <USBD_LL_Init+0x9c>)
 8008c18:	2200      	movs	r2, #0
 8008c1a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008c1c:	4b13      	ldr	r3, [pc, #76]	@ (8008c6c <USBD_LL_Init+0x9c>)
 8008c1e:	2200      	movs	r2, #0
 8008c20:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8008c22:	4b12      	ldr	r3, [pc, #72]	@ (8008c6c <USBD_LL_Init+0x9c>)
 8008c24:	2200      	movs	r2, #0
 8008c26:	629a      	str	r2, [r3, #40]	@ 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008c28:	4b10      	ldr	r3, [pc, #64]	@ (8008c6c <USBD_LL_Init+0x9c>)
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008c2e:	4b0f      	ldr	r3, [pc, #60]	@ (8008c6c <USBD_LL_Init+0x9c>)
 8008c30:	2200      	movs	r2, #0
 8008c32:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008c34:	480d      	ldr	r0, [pc, #52]	@ (8008c6c <USBD_LL_Init+0x9c>)
 8008c36:	f7f9 ff5a 	bl	8002aee <HAL_PCD_Init>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d001      	beq.n	8008c44 <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 8008c40:	f7f8 f81e 	bl	8000c80 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008c44:	2180      	movs	r1, #128	@ 0x80
 8008c46:	4809      	ldr	r0, [pc, #36]	@ (8008c6c <USBD_LL_Init+0x9c>)
 8008c48:	f7fb f9e5 	bl	8004016 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008c4c:	2240      	movs	r2, #64	@ 0x40
 8008c4e:	2100      	movs	r1, #0
 8008c50:	4806      	ldr	r0, [pc, #24]	@ (8008c6c <USBD_LL_Init+0x9c>)
 8008c52:	f7fb f999 	bl	8003f88 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008c56:	2280      	movs	r2, #128	@ 0x80
 8008c58:	2101      	movs	r1, #1
 8008c5a:	4804      	ldr	r0, [pc, #16]	@ (8008c6c <USBD_LL_Init+0x9c>)
 8008c5c:	f7fb f994 	bl	8003f88 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008c60:	2300      	movs	r3, #0
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3708      	adds	r7, #8
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}
 8008c6a:	bf00      	nop
 8008c6c:	200016e4 	.word	0x200016e4

08008c70 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b084      	sub	sp, #16
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008c86:	4618      	mov	r0, r3
 8008c88:	f7fa f855 	bl	8002d36 <HAL_PCD_Start>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c90:	7bfb      	ldrb	r3, [r7, #15]
 8008c92:	4618      	mov	r0, r3
 8008c94:	f000 f990 	bl	8008fb8 <USBD_Get_USB_Status>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3710      	adds	r7, #16
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}

08008ca6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008ca6:	b580      	push	{r7, lr}
 8008ca8:	b084      	sub	sp, #16
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	6078      	str	r0, [r7, #4]
 8008cae:	4608      	mov	r0, r1
 8008cb0:	4611      	mov	r1, r2
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	70fb      	strb	r3, [r7, #3]
 8008cb8:	460b      	mov	r3, r1
 8008cba:	70bb      	strb	r3, [r7, #2]
 8008cbc:	4613      	mov	r3, r2
 8008cbe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008cce:	78bb      	ldrb	r3, [r7, #2]
 8008cd0:	883a      	ldrh	r2, [r7, #0]
 8008cd2:	78f9      	ldrb	r1, [r7, #3]
 8008cd4:	f7fa fd53 	bl	800377e <HAL_PCD_EP_Open>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cdc:	7bfb      	ldrb	r3, [r7, #15]
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f000 f96a 	bl	8008fb8 <USBD_Get_USB_Status>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ce8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3710      	adds	r7, #16
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}

08008cf2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008cf2:	b580      	push	{r7, lr}
 8008cf4:	b084      	sub	sp, #16
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	6078      	str	r0, [r7, #4]
 8008cfa:	460b      	mov	r3, r1
 8008cfc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d02:	2300      	movs	r3, #0
 8008d04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008d0c:	78fa      	ldrb	r2, [r7, #3]
 8008d0e:	4611      	mov	r1, r2
 8008d10:	4618      	mov	r0, r3
 8008d12:	f7fa fd9c 	bl	800384e <HAL_PCD_EP_Close>
 8008d16:	4603      	mov	r3, r0
 8008d18:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d1a:	7bfb      	ldrb	r3, [r7, #15]
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f000 f94b 	bl	8008fb8 <USBD_Get_USB_Status>
 8008d22:	4603      	mov	r3, r0
 8008d24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d26:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3710      	adds	r7, #16
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b084      	sub	sp, #16
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
 8008d38:	460b      	mov	r3, r1
 8008d3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d40:	2300      	movs	r3, #0
 8008d42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008d4a:	78fa      	ldrb	r2, [r7, #3]
 8008d4c:	4611      	mov	r1, r2
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f7fa fe74 	bl	8003a3c <HAL_PCD_EP_SetStall>
 8008d54:	4603      	mov	r3, r0
 8008d56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d58:	7bfb      	ldrb	r3, [r7, #15]
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f000 f92c 	bl	8008fb8 <USBD_Get_USB_Status>
 8008d60:	4603      	mov	r3, r0
 8008d62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d64:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3710      	adds	r7, #16
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}

08008d6e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d6e:	b580      	push	{r7, lr}
 8008d70:	b084      	sub	sp, #16
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	6078      	str	r0, [r7, #4]
 8008d76:	460b      	mov	r3, r1
 8008d78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008d88:	78fa      	ldrb	r2, [r7, #3]
 8008d8a:	4611      	mov	r1, r2
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f7fa feb9 	bl	8003b04 <HAL_PCD_EP_ClrStall>
 8008d92:	4603      	mov	r3, r0
 8008d94:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d96:	7bfb      	ldrb	r3, [r7, #15]
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f000 f90d 	bl	8008fb8 <USBD_Get_USB_Status>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008da2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3710      	adds	r7, #16
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}

08008dac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008dac:	b480      	push	{r7}
 8008dae:	b085      	sub	sp, #20
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
 8008db4:	460b      	mov	r3, r1
 8008db6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008dbe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008dc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	da0b      	bge.n	8008de0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008dc8:	78fb      	ldrb	r3, [r7, #3]
 8008dca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008dce:	68f9      	ldr	r1, [r7, #12]
 8008dd0:	4613      	mov	r3, r2
 8008dd2:	00db      	lsls	r3, r3, #3
 8008dd4:	4413      	add	r3, r2
 8008dd6:	009b      	lsls	r3, r3, #2
 8008dd8:	440b      	add	r3, r1
 8008dda:	333e      	adds	r3, #62	@ 0x3e
 8008ddc:	781b      	ldrb	r3, [r3, #0]
 8008dde:	e00b      	b.n	8008df8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008de0:	78fb      	ldrb	r3, [r7, #3]
 8008de2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008de6:	68f9      	ldr	r1, [r7, #12]
 8008de8:	4613      	mov	r3, r2
 8008dea:	00db      	lsls	r3, r3, #3
 8008dec:	4413      	add	r3, r2
 8008dee:	009b      	lsls	r3, r3, #2
 8008df0:	440b      	add	r3, r1
 8008df2:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 8008df6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3714      	adds	r7, #20
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr

08008e04 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b084      	sub	sp, #16
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	460b      	mov	r3, r1
 8008e0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e10:	2300      	movs	r3, #0
 8008e12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e14:	2300      	movs	r3, #0
 8008e16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008e1e:	78fa      	ldrb	r2, [r7, #3]
 8008e20:	4611      	mov	r1, r2
 8008e22:	4618      	mov	r0, r3
 8008e24:	f7fa fc86 	bl	8003734 <HAL_PCD_SetAddress>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e2c:	7bfb      	ldrb	r3, [r7, #15]
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f000 f8c2 	bl	8008fb8 <USBD_Get_USB_Status>
 8008e34:	4603      	mov	r3, r0
 8008e36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e38:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3710      	adds	r7, #16
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}

08008e42 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008e42:	b580      	push	{r7, lr}
 8008e44:	b086      	sub	sp, #24
 8008e46:	af00      	add	r7, sp, #0
 8008e48:	60f8      	str	r0, [r7, #12]
 8008e4a:	607a      	str	r2, [r7, #4]
 8008e4c:	603b      	str	r3, [r7, #0]
 8008e4e:	460b      	mov	r3, r1
 8008e50:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e52:	2300      	movs	r3, #0
 8008e54:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e56:	2300      	movs	r3, #0
 8008e58:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008e60:	7af9      	ldrb	r1, [r7, #11]
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	687a      	ldr	r2, [r7, #4]
 8008e66:	f7fa fd9f 	bl	80039a8 <HAL_PCD_EP_Transmit>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e6e:	7dfb      	ldrb	r3, [r7, #23]
 8008e70:	4618      	mov	r0, r3
 8008e72:	f000 f8a1 	bl	8008fb8 <USBD_Get_USB_Status>
 8008e76:	4603      	mov	r3, r0
 8008e78:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008e7a:	7dbb      	ldrb	r3, [r7, #22]
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3718      	adds	r7, #24
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b086      	sub	sp, #24
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	60f8      	str	r0, [r7, #12]
 8008e8c:	607a      	str	r2, [r7, #4]
 8008e8e:	603b      	str	r3, [r7, #0]
 8008e90:	460b      	mov	r3, r1
 8008e92:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e94:	2300      	movs	r3, #0
 8008e96:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008ea2:	7af9      	ldrb	r1, [r7, #11]
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	687a      	ldr	r2, [r7, #4]
 8008ea8:	f7fa fd1b 	bl	80038e2 <HAL_PCD_EP_Receive>
 8008eac:	4603      	mov	r3, r0
 8008eae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008eb0:	7dfb      	ldrb	r3, [r7, #23]
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f000 f880 	bl	8008fb8 <USBD_Get_USB_Status>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008ebc:	7dbb      	ldrb	r3, [r7, #22]
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3718      	adds	r7, #24
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}

08008ec6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ec6:	b580      	push	{r7, lr}
 8008ec8:	b082      	sub	sp, #8
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	6078      	str	r0, [r7, #4]
 8008ece:	460b      	mov	r3, r1
 8008ed0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008ed8:	78fa      	ldrb	r2, [r7, #3]
 8008eda:	4611      	mov	r1, r2
 8008edc:	4618      	mov	r0, r3
 8008ede:	f7fa fd4b 	bl	8003978 <HAL_PCD_EP_GetRxCount>
 8008ee2:	4603      	mov	r3, r0
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3708      	adds	r7, #8
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}

08008eec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b082      	sub	sp, #8
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	460b      	mov	r3, r1
 8008ef6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008ef8:	78fb      	ldrb	r3, [r7, #3]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d002      	beq.n	8008f04 <HAL_PCDEx_LPM_Callback+0x18>
 8008efe:	2b01      	cmp	r3, #1
 8008f00:	d01f      	beq.n	8008f42 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8008f02:	e03b      	b.n	8008f7c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6a1b      	ldr	r3, [r3, #32]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d007      	beq.n	8008f1c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8008f0c:	f7f7 fcda 	bl	80008c4 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008f10:	4b1c      	ldr	r3, [pc, #112]	@ (8008f84 <HAL_PCDEx_LPM_Callback+0x98>)
 8008f12:	691b      	ldr	r3, [r3, #16]
 8008f14:	4a1b      	ldr	r2, [pc, #108]	@ (8008f84 <HAL_PCDEx_LPM_Callback+0x98>)
 8008f16:	f023 0306 	bic.w	r3, r3, #6
 8008f1a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	687a      	ldr	r2, [r7, #4]
 8008f28:	6812      	ldr	r2, [r2, #0]
 8008f2a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008f2e:	f023 0301 	bic.w	r3, r3, #1
 8008f32:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f7fe facf 	bl	80074de <USBD_LL_Resume>
    break;
 8008f40:	e01c      	b.n	8008f7c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	687a      	ldr	r2, [r7, #4]
 8008f4e:	6812      	ldr	r2, [r2, #0]
 8008f50:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008f54:	f043 0301 	orr.w	r3, r3, #1
 8008f58:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008f60:	4618      	mov	r0, r3
 8008f62:	f7fe faa6 	bl	80074b2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6a1b      	ldr	r3, [r3, #32]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d005      	beq.n	8008f7a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008f6e:	4b05      	ldr	r3, [pc, #20]	@ (8008f84 <HAL_PCDEx_LPM_Callback+0x98>)
 8008f70:	691b      	ldr	r3, [r3, #16]
 8008f72:	4a04      	ldr	r2, [pc, #16]	@ (8008f84 <HAL_PCDEx_LPM_Callback+0x98>)
 8008f74:	f043 0306 	orr.w	r3, r3, #6
 8008f78:	6113      	str	r3, [r2, #16]
    break;
 8008f7a:	bf00      	nop
}
 8008f7c:	bf00      	nop
 8008f7e:	3708      	adds	r7, #8
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}
 8008f84:	e000ed00 	.word	0xe000ed00

08008f88 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b083      	sub	sp, #12
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008f90:	4b03      	ldr	r3, [pc, #12]	@ (8008fa0 <USBD_static_malloc+0x18>)
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	370c      	adds	r7, #12
 8008f96:	46bd      	mov	sp, r7
 8008f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9c:	4770      	bx	lr
 8008f9e:	bf00      	nop
 8008fa0:	20001bf0 	.word	0x20001bf0

08008fa4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b083      	sub	sp, #12
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]

}
 8008fac:	bf00      	nop
 8008fae:	370c      	adds	r7, #12
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb6:	4770      	bx	lr

08008fb8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b085      	sub	sp, #20
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008fc6:	79fb      	ldrb	r3, [r7, #7]
 8008fc8:	2b03      	cmp	r3, #3
 8008fca:	d817      	bhi.n	8008ffc <USBD_Get_USB_Status+0x44>
 8008fcc:	a201      	add	r2, pc, #4	@ (adr r2, 8008fd4 <USBD_Get_USB_Status+0x1c>)
 8008fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fd2:	bf00      	nop
 8008fd4:	08008fe5 	.word	0x08008fe5
 8008fd8:	08008feb 	.word	0x08008feb
 8008fdc:	08008ff1 	.word	0x08008ff1
 8008fe0:	08008ff7 	.word	0x08008ff7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	73fb      	strb	r3, [r7, #15]
    break;
 8008fe8:	e00b      	b.n	8009002 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008fea:	2303      	movs	r3, #3
 8008fec:	73fb      	strb	r3, [r7, #15]
    break;
 8008fee:	e008      	b.n	8009002 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	73fb      	strb	r3, [r7, #15]
    break;
 8008ff4:	e005      	b.n	8009002 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008ff6:	2303      	movs	r3, #3
 8008ff8:	73fb      	strb	r3, [r7, #15]
    break;
 8008ffa:	e002      	b.n	8009002 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008ffc:	2303      	movs	r3, #3
 8008ffe:	73fb      	strb	r3, [r7, #15]
    break;
 8009000:	bf00      	nop
  }
  return usb_status;
 8009002:	7bfb      	ldrb	r3, [r7, #15]
}
 8009004:	4618      	mov	r0, r3
 8009006:	3714      	adds	r7, #20
 8009008:	46bd      	mov	sp, r7
 800900a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900e:	4770      	bx	lr

08009010 <__itoa>:
 8009010:	1e93      	subs	r3, r2, #2
 8009012:	2b22      	cmp	r3, #34	@ 0x22
 8009014:	b510      	push	{r4, lr}
 8009016:	460c      	mov	r4, r1
 8009018:	d904      	bls.n	8009024 <__itoa+0x14>
 800901a:	2300      	movs	r3, #0
 800901c:	700b      	strb	r3, [r1, #0]
 800901e:	461c      	mov	r4, r3
 8009020:	4620      	mov	r0, r4
 8009022:	bd10      	pop	{r4, pc}
 8009024:	2a0a      	cmp	r2, #10
 8009026:	d109      	bne.n	800903c <__itoa+0x2c>
 8009028:	2800      	cmp	r0, #0
 800902a:	da07      	bge.n	800903c <__itoa+0x2c>
 800902c:	232d      	movs	r3, #45	@ 0x2d
 800902e:	700b      	strb	r3, [r1, #0]
 8009030:	4240      	negs	r0, r0
 8009032:	2101      	movs	r1, #1
 8009034:	4421      	add	r1, r4
 8009036:	f000 f805 	bl	8009044 <__utoa>
 800903a:	e7f1      	b.n	8009020 <__itoa+0x10>
 800903c:	2100      	movs	r1, #0
 800903e:	e7f9      	b.n	8009034 <__itoa+0x24>

08009040 <itoa>:
 8009040:	f7ff bfe6 	b.w	8009010 <__itoa>

08009044 <__utoa>:
 8009044:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009046:	4c1f      	ldr	r4, [pc, #124]	@ (80090c4 <__utoa+0x80>)
 8009048:	b08b      	sub	sp, #44	@ 0x2c
 800904a:	4605      	mov	r5, r0
 800904c:	460b      	mov	r3, r1
 800904e:	466e      	mov	r6, sp
 8009050:	f104 0c20 	add.w	ip, r4, #32
 8009054:	6820      	ldr	r0, [r4, #0]
 8009056:	6861      	ldr	r1, [r4, #4]
 8009058:	4637      	mov	r7, r6
 800905a:	c703      	stmia	r7!, {r0, r1}
 800905c:	3408      	adds	r4, #8
 800905e:	4564      	cmp	r4, ip
 8009060:	463e      	mov	r6, r7
 8009062:	d1f7      	bne.n	8009054 <__utoa+0x10>
 8009064:	7921      	ldrb	r1, [r4, #4]
 8009066:	7139      	strb	r1, [r7, #4]
 8009068:	1e91      	subs	r1, r2, #2
 800906a:	6820      	ldr	r0, [r4, #0]
 800906c:	6038      	str	r0, [r7, #0]
 800906e:	2922      	cmp	r1, #34	@ 0x22
 8009070:	f04f 0100 	mov.w	r1, #0
 8009074:	d904      	bls.n	8009080 <__utoa+0x3c>
 8009076:	7019      	strb	r1, [r3, #0]
 8009078:	460b      	mov	r3, r1
 800907a:	4618      	mov	r0, r3
 800907c:	b00b      	add	sp, #44	@ 0x2c
 800907e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009080:	1e58      	subs	r0, r3, #1
 8009082:	4684      	mov	ip, r0
 8009084:	fbb5 f7f2 	udiv	r7, r5, r2
 8009088:	fb02 5617 	mls	r6, r2, r7, r5
 800908c:	3628      	adds	r6, #40	@ 0x28
 800908e:	446e      	add	r6, sp
 8009090:	460c      	mov	r4, r1
 8009092:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8009096:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800909a:	462e      	mov	r6, r5
 800909c:	42b2      	cmp	r2, r6
 800909e:	f101 0101 	add.w	r1, r1, #1
 80090a2:	463d      	mov	r5, r7
 80090a4:	d9ee      	bls.n	8009084 <__utoa+0x40>
 80090a6:	2200      	movs	r2, #0
 80090a8:	545a      	strb	r2, [r3, r1]
 80090aa:	1919      	adds	r1, r3, r4
 80090ac:	1aa5      	subs	r5, r4, r2
 80090ae:	42aa      	cmp	r2, r5
 80090b0:	dae3      	bge.n	800907a <__utoa+0x36>
 80090b2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80090b6:	780e      	ldrb	r6, [r1, #0]
 80090b8:	7006      	strb	r6, [r0, #0]
 80090ba:	3201      	adds	r2, #1
 80090bc:	f801 5901 	strb.w	r5, [r1], #-1
 80090c0:	e7f4      	b.n	80090ac <__utoa+0x68>
 80090c2:	bf00      	nop
 80090c4:	080091b8 	.word	0x080091b8

080090c8 <memset>:
 80090c8:	4402      	add	r2, r0
 80090ca:	4603      	mov	r3, r0
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d100      	bne.n	80090d2 <memset+0xa>
 80090d0:	4770      	bx	lr
 80090d2:	f803 1b01 	strb.w	r1, [r3], #1
 80090d6:	e7f9      	b.n	80090cc <memset+0x4>

080090d8 <__libc_init_array>:
 80090d8:	b570      	push	{r4, r5, r6, lr}
 80090da:	4d0d      	ldr	r5, [pc, #52]	@ (8009110 <__libc_init_array+0x38>)
 80090dc:	4c0d      	ldr	r4, [pc, #52]	@ (8009114 <__libc_init_array+0x3c>)
 80090de:	1b64      	subs	r4, r4, r5
 80090e0:	10a4      	asrs	r4, r4, #2
 80090e2:	2600      	movs	r6, #0
 80090e4:	42a6      	cmp	r6, r4
 80090e6:	d109      	bne.n	80090fc <__libc_init_array+0x24>
 80090e8:	4d0b      	ldr	r5, [pc, #44]	@ (8009118 <__libc_init_array+0x40>)
 80090ea:	4c0c      	ldr	r4, [pc, #48]	@ (800911c <__libc_init_array+0x44>)
 80090ec:	f000 f818 	bl	8009120 <_init>
 80090f0:	1b64      	subs	r4, r4, r5
 80090f2:	10a4      	asrs	r4, r4, #2
 80090f4:	2600      	movs	r6, #0
 80090f6:	42a6      	cmp	r6, r4
 80090f8:	d105      	bne.n	8009106 <__libc_init_array+0x2e>
 80090fa:	bd70      	pop	{r4, r5, r6, pc}
 80090fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009100:	4798      	blx	r3
 8009102:	3601      	adds	r6, #1
 8009104:	e7ee      	b.n	80090e4 <__libc_init_array+0xc>
 8009106:	f855 3b04 	ldr.w	r3, [r5], #4
 800910a:	4798      	blx	r3
 800910c:	3601      	adds	r6, #1
 800910e:	e7f2      	b.n	80090f6 <__libc_init_array+0x1e>
 8009110:	080091e8 	.word	0x080091e8
 8009114:	080091e8 	.word	0x080091e8
 8009118:	080091e8 	.word	0x080091e8
 800911c:	080091ec 	.word	0x080091ec

08009120 <_init>:
 8009120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009122:	bf00      	nop
 8009124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009126:	bc08      	pop	{r3}
 8009128:	469e      	mov	lr, r3
 800912a:	4770      	bx	lr

0800912c <_fini>:
 800912c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800912e:	bf00      	nop
 8009130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009132:	bc08      	pop	{r3}
 8009134:	469e      	mov	lr, r3
 8009136:	4770      	bx	lr
