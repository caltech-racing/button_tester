
pedal_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f84  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08009148  08009148  0000a148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091f0  080091f0  0000b10c  2**0
                  CONTENTS
  4 .ARM          00000008  080091f0  080091f0  0000a1f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080091f8  080091f8  0000b10c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091f8  080091f8  0000a1f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080091fc  080091fc  0000a1fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  08009200  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d04  2000010c  0800930c  0000b10c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e10  0800930c  0000be10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b10c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001224f  00000000  00000000  0000b13c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003457  00000000  00000000  0001d38b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e70  00000000  00000000  000207e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000abf  00000000  00000000  00021658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023101  00000000  00000000  00022117  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013f1e  00000000  00000000  00045218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9ab2  00000000  00000000  00059136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00122be8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003adc  00000000  00000000  00122c2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  00126708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000010c 	.word	0x2000010c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08009130 	.word	0x08009130

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000110 	.word	0x20000110
 8000200:	08009130 	.word	0x08009130

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b96a 	b.w	8000500 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	460c      	mov	r4, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14e      	bne.n	80002ee <__udivmoddi4+0xaa>
 8000250:	4694      	mov	ip, r2
 8000252:	458c      	cmp	ip, r1
 8000254:	4686      	mov	lr, r0
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	d962      	bls.n	8000322 <__udivmoddi4+0xde>
 800025c:	b14a      	cbz	r2, 8000272 <__udivmoddi4+0x2e>
 800025e:	f1c2 0320 	rsb	r3, r2, #32
 8000262:	4091      	lsls	r1, r2
 8000264:	fa20 f303 	lsr.w	r3, r0, r3
 8000268:	fa0c fc02 	lsl.w	ip, ip, r2
 800026c:	4319      	orrs	r1, r3
 800026e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000272:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000276:	fa1f f68c 	uxth.w	r6, ip
 800027a:	fbb1 f4f7 	udiv	r4, r1, r7
 800027e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000282:	fb07 1114 	mls	r1, r7, r4, r1
 8000286:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028a:	fb04 f106 	mul.w	r1, r4, r6
 800028e:	4299      	cmp	r1, r3
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x64>
 8000292:	eb1c 0303 	adds.w	r3, ip, r3
 8000296:	f104 30ff 	add.w	r0, r4, #4294967295
 800029a:	f080 8112 	bcs.w	80004c2 <__udivmoddi4+0x27e>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 810f 	bls.w	80004c2 <__udivmoddi4+0x27e>
 80002a4:	3c02      	subs	r4, #2
 80002a6:	4463      	add	r3, ip
 80002a8:	1a59      	subs	r1, r3, r1
 80002aa:	fa1f f38e 	uxth.w	r3, lr
 80002ae:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b2:	fb07 1110 	mls	r1, r7, r0, r1
 80002b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ba:	fb00 f606 	mul.w	r6, r0, r6
 80002be:	429e      	cmp	r6, r3
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x94>
 80002c2:	eb1c 0303 	adds.w	r3, ip, r3
 80002c6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ca:	f080 80fc 	bcs.w	80004c6 <__udivmoddi4+0x282>
 80002ce:	429e      	cmp	r6, r3
 80002d0:	f240 80f9 	bls.w	80004c6 <__udivmoddi4+0x282>
 80002d4:	4463      	add	r3, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	1b9b      	subs	r3, r3, r6
 80002da:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa6>
 80002e2:	40d3      	lsrs	r3, r2
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xba>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb4>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa6>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x150>
 8000306:	42a3      	cmp	r3, r4
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xcc>
 800030a:	4290      	cmp	r0, r2
 800030c:	f0c0 80f0 	bcc.w	80004f0 <__udivmoddi4+0x2ac>
 8000310:	1a86      	subs	r6, r0, r2
 8000312:	eb64 0303 	sbc.w	r3, r4, r3
 8000316:	2001      	movs	r0, #1
 8000318:	2d00      	cmp	r5, #0
 800031a:	d0e6      	beq.n	80002ea <__udivmoddi4+0xa6>
 800031c:	e9c5 6300 	strd	r6, r3, [r5]
 8000320:	e7e3      	b.n	80002ea <__udivmoddi4+0xa6>
 8000322:	2a00      	cmp	r2, #0
 8000324:	f040 8090 	bne.w	8000448 <__udivmoddi4+0x204>
 8000328:	eba1 040c 	sub.w	r4, r1, ip
 800032c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000330:	fa1f f78c 	uxth.w	r7, ip
 8000334:	2101      	movs	r1, #1
 8000336:	fbb4 f6f8 	udiv	r6, r4, r8
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb08 4416 	mls	r4, r8, r6, r4
 8000342:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000346:	fb07 f006 	mul.w	r0, r7, r6
 800034a:	4298      	cmp	r0, r3
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x11c>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f106 34ff 	add.w	r4, r6, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x11a>
 8000358:	4298      	cmp	r0, r3
 800035a:	f200 80cd 	bhi.w	80004f8 <__udivmoddi4+0x2b4>
 800035e:	4626      	mov	r6, r4
 8000360:	1a1c      	subs	r4, r3, r0
 8000362:	fa1f f38e 	uxth.w	r3, lr
 8000366:	fbb4 f0f8 	udiv	r0, r4, r8
 800036a:	fb08 4410 	mls	r4, r8, r0, r4
 800036e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000372:	fb00 f707 	mul.w	r7, r0, r7
 8000376:	429f      	cmp	r7, r3
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x148>
 800037a:	eb1c 0303 	adds.w	r3, ip, r3
 800037e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x146>
 8000384:	429f      	cmp	r7, r3
 8000386:	f200 80b0 	bhi.w	80004ea <__udivmoddi4+0x2a6>
 800038a:	4620      	mov	r0, r4
 800038c:	1bdb      	subs	r3, r3, r7
 800038e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x9c>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a4:	fa04 f301 	lsl.w	r3, r4, r1
 80003a8:	ea43 030c 	orr.w	r3, r3, ip
 80003ac:	40f4      	lsrs	r4, r6
 80003ae:	fa00 f801 	lsl.w	r8, r0, r1
 80003b2:	0c38      	lsrs	r0, r7, #16
 80003b4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b8:	fbb4 fef0 	udiv	lr, r4, r0
 80003bc:	fa1f fc87 	uxth.w	ip, r7
 80003c0:	fb00 441e 	mls	r4, r0, lr, r4
 80003c4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c8:	fb0e f90c 	mul.w	r9, lr, ip
 80003cc:	45a1      	cmp	r9, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d90a      	bls.n	80003ea <__udivmoddi4+0x1a6>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003da:	f080 8084 	bcs.w	80004e6 <__udivmoddi4+0x2a2>
 80003de:	45a1      	cmp	r9, r4
 80003e0:	f240 8081 	bls.w	80004e6 <__udivmoddi4+0x2a2>
 80003e4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	eba4 0409 	sub.w	r4, r4, r9
 80003ee:	fa1f f983 	uxth.w	r9, r3
 80003f2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f6:	fb00 4413 	mls	r4, r0, r3, r4
 80003fa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000402:	45a4      	cmp	ip, r4
 8000404:	d907      	bls.n	8000416 <__udivmoddi4+0x1d2>
 8000406:	193c      	adds	r4, r7, r4
 8000408:	f103 30ff 	add.w	r0, r3, #4294967295
 800040c:	d267      	bcs.n	80004de <__udivmoddi4+0x29a>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d965      	bls.n	80004de <__udivmoddi4+0x29a>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041a:	fba0 9302 	umull	r9, r3, r0, r2
 800041e:	eba4 040c 	sub.w	r4, r4, ip
 8000422:	429c      	cmp	r4, r3
 8000424:	46ce      	mov	lr, r9
 8000426:	469c      	mov	ip, r3
 8000428:	d351      	bcc.n	80004ce <__udivmoddi4+0x28a>
 800042a:	d04e      	beq.n	80004ca <__udivmoddi4+0x286>
 800042c:	b155      	cbz	r5, 8000444 <__udivmoddi4+0x200>
 800042e:	ebb8 030e 	subs.w	r3, r8, lr
 8000432:	eb64 040c 	sbc.w	r4, r4, ip
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	40cb      	lsrs	r3, r1
 800043c:	431e      	orrs	r6, r3
 800043e:	40cc      	lsrs	r4, r1
 8000440:	e9c5 6400 	strd	r6, r4, [r5]
 8000444:	2100      	movs	r1, #0
 8000446:	e750      	b.n	80002ea <__udivmoddi4+0xa6>
 8000448:	f1c2 0320 	rsb	r3, r2, #32
 800044c:	fa20 f103 	lsr.w	r1, r0, r3
 8000450:	fa0c fc02 	lsl.w	ip, ip, r2
 8000454:	fa24 f303 	lsr.w	r3, r4, r3
 8000458:	4094      	lsls	r4, r2
 800045a:	430c      	orrs	r4, r1
 800045c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000460:	fa00 fe02 	lsl.w	lr, r0, r2
 8000464:	fa1f f78c 	uxth.w	r7, ip
 8000468:	fbb3 f0f8 	udiv	r0, r3, r8
 800046c:	fb08 3110 	mls	r1, r8, r0, r3
 8000470:	0c23      	lsrs	r3, r4, #16
 8000472:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000476:	fb00 f107 	mul.w	r1, r0, r7
 800047a:	4299      	cmp	r1, r3
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x24c>
 800047e:	eb1c 0303 	adds.w	r3, ip, r3
 8000482:	f100 36ff 	add.w	r6, r0, #4294967295
 8000486:	d22c      	bcs.n	80004e2 <__udivmoddi4+0x29e>
 8000488:	4299      	cmp	r1, r3
 800048a:	d92a      	bls.n	80004e2 <__udivmoddi4+0x29e>
 800048c:	3802      	subs	r0, #2
 800048e:	4463      	add	r3, ip
 8000490:	1a5b      	subs	r3, r3, r1
 8000492:	b2a4      	uxth	r4, r4
 8000494:	fbb3 f1f8 	udiv	r1, r3, r8
 8000498:	fb08 3311 	mls	r3, r8, r1, r3
 800049c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a0:	fb01 f307 	mul.w	r3, r1, r7
 80004a4:	42a3      	cmp	r3, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x276>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b0:	d213      	bcs.n	80004da <__udivmoddi4+0x296>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d911      	bls.n	80004da <__udivmoddi4+0x296>
 80004b6:	3902      	subs	r1, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	1ae4      	subs	r4, r4, r3
 80004bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c0:	e739      	b.n	8000336 <__udivmoddi4+0xf2>
 80004c2:	4604      	mov	r4, r0
 80004c4:	e6f0      	b.n	80002a8 <__udivmoddi4+0x64>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e706      	b.n	80002d8 <__udivmoddi4+0x94>
 80004ca:	45c8      	cmp	r8, r9
 80004cc:	d2ae      	bcs.n	800042c <__udivmoddi4+0x1e8>
 80004ce:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d6:	3801      	subs	r0, #1
 80004d8:	e7a8      	b.n	800042c <__udivmoddi4+0x1e8>
 80004da:	4631      	mov	r1, r6
 80004dc:	e7ed      	b.n	80004ba <__udivmoddi4+0x276>
 80004de:	4603      	mov	r3, r0
 80004e0:	e799      	b.n	8000416 <__udivmoddi4+0x1d2>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e7d4      	b.n	8000490 <__udivmoddi4+0x24c>
 80004e6:	46d6      	mov	lr, sl
 80004e8:	e77f      	b.n	80003ea <__udivmoddi4+0x1a6>
 80004ea:	4463      	add	r3, ip
 80004ec:	3802      	subs	r0, #2
 80004ee:	e74d      	b.n	800038c <__udivmoddi4+0x148>
 80004f0:	4606      	mov	r6, r0
 80004f2:	4623      	mov	r3, r4
 80004f4:	4608      	mov	r0, r1
 80004f6:	e70f      	b.n	8000318 <__udivmoddi4+0xd4>
 80004f8:	3e02      	subs	r6, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	e730      	b.n	8000360 <__udivmoddi4+0x11c>
 80004fe:	bf00      	nop

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <shift_reg_init>:
 * @param	hspi	The pointer to the SPI handle. This should be directly available from the cubeMX setup code
 * @param 	latch_port	A pointer to latch signal port on the chip.
 * @param	latch_pin	The pin number of the latch signal pin
 */
void shift_reg_init(GPIO_TypeDef *shcp_port, GPIO_TypeDef *stcp_port, GPIO_TypeDef *data_port,
                    uint16_t shcp_pin, uint16_t stcp_pin, uint16_t data_pin) {
 8000504:	b480      	push	{r7}
 8000506:	b085      	sub	sp, #20
 8000508:	af00      	add	r7, sp, #0
 800050a:	60f8      	str	r0, [r7, #12]
 800050c:	60b9      	str	r1, [r7, #8]
 800050e:	607a      	str	r2, [r7, #4]
 8000510:	807b      	strh	r3, [r7, #2]
    sr_stcp_port = stcp_port;
 8000512:	4a0c      	ldr	r2, [pc, #48]	@ (8000544 <shift_reg_init+0x40>)
 8000514:	68bb      	ldr	r3, [r7, #8]
 8000516:	6013      	str	r3, [r2, #0]
    sr_shcp_port = shcp_port;
 8000518:	4a0b      	ldr	r2, [pc, #44]	@ (8000548 <shift_reg_init+0x44>)
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	6013      	str	r3, [r2, #0]
    sr_data_port = data_port;
 800051e:	4a0b      	ldr	r2, [pc, #44]	@ (800054c <shift_reg_init+0x48>)
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	6013      	str	r3, [r2, #0]
    sr_stcp_pin = stcp_pin;
 8000524:	4a0a      	ldr	r2, [pc, #40]	@ (8000550 <shift_reg_init+0x4c>)
 8000526:	8b3b      	ldrh	r3, [r7, #24]
 8000528:	8013      	strh	r3, [r2, #0]
    sr_shcp_pin = shcp_pin;
 800052a:	4a0a      	ldr	r2, [pc, #40]	@ (8000554 <shift_reg_init+0x50>)
 800052c:	887b      	ldrh	r3, [r7, #2]
 800052e:	8013      	strh	r3, [r2, #0]
    sr_data_pin = data_pin;
 8000530:	4a09      	ldr	r2, [pc, #36]	@ (8000558 <shift_reg_init+0x54>)
 8000532:	8bbb      	ldrh	r3, [r7, #28]
 8000534:	8013      	strh	r3, [r2, #0]
}
 8000536:	bf00      	nop
 8000538:	3714      	adds	r7, #20
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	20000128 	.word	0x20000128
 8000548:	2000012c 	.word	0x2000012c
 800054c:	20000130 	.word	0x20000130
 8000550:	20000134 	.word	0x20000134
 8000554:	20000136 	.word	0x20000136
 8000558:	20000138 	.word	0x20000138

0800055c <shift_reg_display>:
 * 					is passed, then it is written to the right digit on the display.
 * @param	dp1		the left decimal point on the LED display, should be either DP1 or 0
 * @param	dp2 	the right decimal point on the LED display, should be either DP2 or 0
 * @retval	-1 if an error occurred, 0 if success
 */
int shift_reg_display(uint8_t num, uint8_t dp1, uint8_t dp2) {
 800055c:	b580      	push	{r7, lr}
 800055e:	b08a      	sub	sp, #40	@ 0x28
 8000560:	af00      	add	r7, sp, #0
 8000562:	4603      	mov	r3, r0
 8000564:	71fb      	strb	r3, [r7, #7]
 8000566:	460b      	mov	r3, r1
 8000568:	71bb      	strb	r3, [r7, #6]
 800056a:	4613      	mov	r3, r2
 800056c:	717b      	strb	r3, [r7, #5]
	char num_str[8];
	if (num >= 100 || num < 0) {
 800056e:	79fb      	ldrb	r3, [r7, #7]
 8000570:	2b63      	cmp	r3, #99	@ 0x63
 8000572:	d902      	bls.n	800057a <shift_reg_display+0x1e>
		return -1;
 8000574:	f04f 33ff 	mov.w	r3, #4294967295
 8000578:	e087      	b.n	800068a <shift_reg_display+0x12e>
	}
	itoa(num, num_str, 10);
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	f107 0110 	add.w	r1, r7, #16
 8000580:	220a      	movs	r2, #10
 8000582:	4618      	mov	r0, r3
 8000584:	f008 fd64 	bl	8009050 <itoa>
	unsigned int len = strlen(num_str);
 8000588:	f107 0310 	add.w	r3, r7, #16
 800058c:	4618      	mov	r0, r3
 800058e:	f7ff fe39 	bl	8000204 <strlen>
 8000592:	61f8      	str	r0, [r7, #28]
	uint8_t spi_data[2];
	if (len == 1) {
 8000594:	69fb      	ldr	r3, [r7, #28]
 8000596:	2b01      	cmp	r3, #1
 8000598:	d10a      	bne.n	80005b0 <shift_reg_display+0x54>
		// defaults to displaying on the lowest digit
		spi_data[0] = DIGITS1[num_str[0]-'0'] | dp1;
 800059a:	7c3b      	ldrb	r3, [r7, #16]
 800059c:	3b30      	subs	r3, #48	@ 0x30
 800059e:	4a3d      	ldr	r2, [pc, #244]	@ (8000694 <shift_reg_display+0x138>)
 80005a0:	5cd2      	ldrb	r2, [r2, r3]
 80005a2:	79bb      	ldrb	r3, [r7, #6]
 80005a4:	4313      	orrs	r3, r2
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	733b      	strb	r3, [r7, #12]
		spi_data[1] = dp2;
 80005aa:	797b      	ldrb	r3, [r7, #5]
 80005ac:	737b      	strb	r3, [r7, #13]
 80005ae:	e016      	b.n	80005de <shift_reg_display+0x82>
	} else if (len == 2) {
 80005b0:	69fb      	ldr	r3, [r7, #28]
 80005b2:	2b02      	cmp	r3, #2
 80005b4:	d110      	bne.n	80005d8 <shift_reg_display+0x7c>
		spi_data[0] = DIGITS1[num_str[1]-'0'] | dp1;
 80005b6:	7c7b      	ldrb	r3, [r7, #17]
 80005b8:	3b30      	subs	r3, #48	@ 0x30
 80005ba:	4a36      	ldr	r2, [pc, #216]	@ (8000694 <shift_reg_display+0x138>)
 80005bc:	5cd2      	ldrb	r2, [r2, r3]
 80005be:	79bb      	ldrb	r3, [r7, #6]
 80005c0:	4313      	orrs	r3, r2
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	733b      	strb	r3, [r7, #12]
		spi_data[1] = DIGITS2[num_str[0]-'0'] | dp2;
 80005c6:	7c3b      	ldrb	r3, [r7, #16]
 80005c8:	3b30      	subs	r3, #48	@ 0x30
 80005ca:	4a33      	ldr	r2, [pc, #204]	@ (8000698 <shift_reg_display+0x13c>)
 80005cc:	5cd2      	ldrb	r2, [r2, r3]
 80005ce:	797b      	ldrb	r3, [r7, #5]
 80005d0:	4313      	orrs	r3, r2
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	737b      	strb	r3, [r7, #13]
 80005d6:	e002      	b.n	80005de <shift_reg_display+0x82>
	} else {
		return -1;
 80005d8:	f04f 33ff 	mov.w	r3, #4294967295
 80005dc:	e055      	b.n	800068a <shift_reg_display+0x12e>
	}
//	spi_data[0] = 128;
//	spi_data[1] = dp2;
	// set stcp (storage clock) pin to low, as the data goes to the storage register
    // on the rising edge of the clock
	HAL_GPIO_WritePin(sr_stcp_port, sr_stcp_pin, GPIO_PIN_RESET);
 80005de:	4b2f      	ldr	r3, [pc, #188]	@ (800069c <shift_reg_display+0x140>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4a2f      	ldr	r2, [pc, #188]	@ (80006a0 <shift_reg_display+0x144>)
 80005e4:	8811      	ldrh	r1, [r2, #0]
 80005e6:	2200      	movs	r2, #0
 80005e8:	4618      	mov	r0, r3
 80005ea:	f002 fa6f 	bl	8002acc <HAL_GPIO_WritePin>
	// write using SPI
	for (int i = 0; i < 2; i++) {
 80005ee:	2300      	movs	r3, #0
 80005f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80005f2:	e03e      	b.n	8000672 <shift_reg_display+0x116>
        for (int j = 0; j < 8; j++) {
 80005f4:	2300      	movs	r3, #0
 80005f6:	623b      	str	r3, [r7, #32]
 80005f8:	e035      	b.n	8000666 <shift_reg_display+0x10a>
            // Lower the shift register clock. The shift happens on the rising edge.
            HAL_GPIO_WritePin(sr_shcp_port, sr_shcp_pin, GPIO_PIN_RESET);
 80005fa:	4b2a      	ldr	r3, [pc, #168]	@ (80006a4 <shift_reg_display+0x148>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a2a      	ldr	r2, [pc, #168]	@ (80006a8 <shift_reg_display+0x14c>)
 8000600:	8811      	ldrh	r1, [r2, #0]
 8000602:	2200      	movs	r2, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f002 fa61 	bl	8002acc <HAL_GPIO_WritePin>
            uint8_t lsb = spi_data[i] & 1;
 800060a:	f107 020c 	add.w	r2, r7, #12
 800060e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000610:	4413      	add	r3, r2
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	f003 0301 	and.w	r3, r3, #1
 8000618:	76fb      	strb	r3, [r7, #27]
            spi_data[i] >>= 1;
 800061a:	f107 020c 	add.w	r2, r7, #12
 800061e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000620:	4413      	add	r3, r2
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	085b      	lsrs	r3, r3, #1
 8000626:	b2d9      	uxtb	r1, r3
 8000628:	f107 020c 	add.w	r2, r7, #12
 800062c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800062e:	4413      	add	r3, r2
 8000630:	460a      	mov	r2, r1
 8000632:	701a      	strb	r2, [r3, #0]
            HAL_GPIO_WritePin(sr_data_port, sr_data_pin, lsb);
 8000634:	4b1d      	ldr	r3, [pc, #116]	@ (80006ac <shift_reg_display+0x150>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a1d      	ldr	r2, [pc, #116]	@ (80006b0 <shift_reg_display+0x154>)
 800063a:	8811      	ldrh	r1, [r2, #0]
 800063c:	7efa      	ldrb	r2, [r7, #27]
 800063e:	4618      	mov	r0, r3
 8000640:	f002 fa44 	bl	8002acc <HAL_GPIO_WritePin>
            HAL_Delay(1);
 8000644:	2001      	movs	r0, #1
 8000646:	f000 fd2b 	bl	80010a0 <HAL_Delay>
            HAL_GPIO_WritePin(sr_shcp_port, sr_shcp_pin, GPIO_PIN_SET);
 800064a:	4b16      	ldr	r3, [pc, #88]	@ (80006a4 <shift_reg_display+0x148>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4a16      	ldr	r2, [pc, #88]	@ (80006a8 <shift_reg_display+0x14c>)
 8000650:	8811      	ldrh	r1, [r2, #0]
 8000652:	2201      	movs	r2, #1
 8000654:	4618      	mov	r0, r3
 8000656:	f002 fa39 	bl	8002acc <HAL_GPIO_WritePin>
            HAL_Delay(1);
 800065a:	2001      	movs	r0, #1
 800065c:	f000 fd20 	bl	80010a0 <HAL_Delay>
        for (int j = 0; j < 8; j++) {
 8000660:	6a3b      	ldr	r3, [r7, #32]
 8000662:	3301      	adds	r3, #1
 8000664:	623b      	str	r3, [r7, #32]
 8000666:	6a3b      	ldr	r3, [r7, #32]
 8000668:	2b07      	cmp	r3, #7
 800066a:	ddc6      	ble.n	80005fa <shift_reg_display+0x9e>
	for (int i = 0; i < 2; i++) {
 800066c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800066e:	3301      	adds	r3, #1
 8000670:	627b      	str	r3, [r7, #36]	@ 0x24
 8000672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000674:	2b01      	cmp	r3, #1
 8000676:	ddbd      	ble.n	80005f4 <shift_reg_display+0x98>
        }
	}
	// once data is ready set latch pin to high
    HAL_GPIO_WritePin(sr_stcp_port, sr_stcp_pin, GPIO_PIN_SET);
 8000678:	4b08      	ldr	r3, [pc, #32]	@ (800069c <shift_reg_display+0x140>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a08      	ldr	r2, [pc, #32]	@ (80006a0 <shift_reg_display+0x144>)
 800067e:	8811      	ldrh	r1, [r2, #0]
 8000680:	2201      	movs	r2, #1
 8000682:	4618      	mov	r0, r3
 8000684:	f002 fa22 	bl	8002acc <HAL_GPIO_WritePin>
	return 0;
 8000688:	2300      	movs	r3, #0
}
 800068a:	4618      	mov	r0, r3
 800068c:	3728      	adds	r7, #40	@ 0x28
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	08009190 	.word	0x08009190
 8000698:	0800919c 	.word	0x0800919c
 800069c:	20000128 	.word	0x20000128
 80006a0:	20000134 	.word	0x20000134
 80006a4:	2000012c 	.word	0x2000012c
 80006a8:	20000136 	.word	0x20000136
 80006ac:	20000130 	.word	0x20000130
 80006b0:	20000138 	.word	0x20000138

080006b4 <ADC_channel_select>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ADC_channel_select(int channel)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006bc:	f107 0308 	add.w	r3, r7, #8
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
  sConfig.Channel = channel;
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = 1;
 80006ce:	2301      	movs	r3, #1
 80006d0:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006d2:	2300      	movs	r3, #0
 80006d4:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006d6:	f107 0308 	add.w	r3, r7, #8
 80006da:	4619      	mov	r1, r3
 80006dc:	4805      	ldr	r0, [pc, #20]	@ (80006f4 <ADC_channel_select+0x40>)
 80006de:	f000 fec7 	bl	8001470 <HAL_ADC_ConfigChannel>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <ADC_channel_select+0x38>
  {
    Error_Handler();
 80006e8:	f000 fad2 	bl	8000c90 <Error_Handler>
  }
}
 80006ec:	bf00      	nop
 80006ee:	3718      	adds	r7, #24
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	2000013c 	.word	0x2000013c

080006f8 <HAL_CAN_RxFifo0MsgPendingCallback>:
	HAL_GPIO_TogglePin(GPIOA, DEBUG_LED_0_Pin);
}


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);	// don't delay after this!
 8000700:	4b04      	ldr	r3, [pc, #16]	@ (8000714 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>)
 8000702:	4a05      	ldr	r2, [pc, #20]	@ (8000718 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 8000704:	2100      	movs	r1, #0
 8000706:	6878      	ldr	r0, [r7, #4]
 8000708:	f001 fbcb 	bl	8001ea2 <HAL_CAN_GetRxMessage>
}
 800070c:	bf00      	nop
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	200001b8 	.word	0x200001b8
 8000718:	200001e0 	.word	0x200001e0

0800071c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000722:	f000 fc4b 	bl	8000fbc <HAL_Init>

  /* USER CODE BEGIN Init */
  TxHeader.IDE = CAN_ID_STD;
 8000726:	4b5e      	ldr	r3, [pc, #376]	@ (80008a0 <main+0x184>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  TxHeader.StdId = 0x466;
 800072c:	4b5c      	ldr	r3, [pc, #368]	@ (80008a0 <main+0x184>)
 800072e:	f240 4266 	movw	r2, #1126	@ 0x466
 8000732:	601a      	str	r2, [r3, #0]
  TxHeader.RTR = CAN_RTR_DATA;
 8000734:	4b5a      	ldr	r3, [pc, #360]	@ (80008a0 <main+0x184>)
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]
  TxHeader.DLC = 5;
 800073a:	4b59      	ldr	r3, [pc, #356]	@ (80008a0 <main+0x184>)
 800073c:	2205      	movs	r2, #5
 800073e:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 8000740:	4b57      	ldr	r3, [pc, #348]	@ (80008a0 <main+0x184>)
 8000742:	2200      	movs	r2, #0
 8000744:	751a      	strb	r2, [r3, #20]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000746:	f000 f8c5 	bl	80008d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800074a:	f000 f9d3 	bl	8000af4 <MX_GPIO_Init>
  MX_ADC1_Init();
 800074e:	f000 f92d 	bl	80009ac <MX_ADC1_Init>
  MX_CAN1_Init();
 8000752:	f000 f97d 	bl	8000a50 <MX_CAN1_Init>
  MX_USB_DEVICE_Init();
 8000756:	f007 feff 	bl	8008558 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 800075a:	4852      	ldr	r0, [pc, #328]	@ (80008a4 <main+0x188>)
 800075c:	f001 fa82 	bl	8001c64 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000760:	2102      	movs	r1, #2
 8000762:	4850      	ldr	r0, [pc, #320]	@ (80008a4 <main+0x188>)
 8000764:	f001 fcaf 	bl	80020c6 <HAL_CAN_ActivateNotification>

  shift_reg_init(ShiftRegSHCP_GPIO_Port, ShiftRegSTCP_GPIO_Port, ShiftRegDAT_GPIO_Port,
 8000768:	2310      	movs	r3, #16
 800076a:	9301      	str	r3, [sp, #4]
 800076c:	2340      	movs	r3, #64	@ 0x40
 800076e:	9300      	str	r3, [sp, #0]
 8000770:	2320      	movs	r3, #32
 8000772:	4a4d      	ldr	r2, [pc, #308]	@ (80008a8 <main+0x18c>)
 8000774:	494c      	ldr	r1, [pc, #304]	@ (80008a8 <main+0x18c>)
 8000776:	484c      	ldr	r0, [pc, #304]	@ (80008a8 <main+0x18c>)
 8000778:	f7ff fec4 	bl	8000504 <shift_reg_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  hvil_out = HAL_GPIO_ReadPin(GPIOE, HVIL_OUT_OBSERVE_Pin);
 800077c:	2104      	movs	r1, #4
 800077e:	484b      	ldr	r0, [pc, #300]	@ (80008ac <main+0x190>)
 8000780:	f002 f98c 	bl	8002a9c <HAL_GPIO_ReadPin>
 8000784:	4603      	mov	r3, r0
 8000786:	461a      	mov	r2, r3
 8000788:	4b49      	ldr	r3, [pc, #292]	@ (80008b0 <main+0x194>)
 800078a:	701a      	strb	r2, [r3, #0]
	  hvil_logic = HAL_GPIO_ReadPin(GPIOE, HVIL_LOGIC_OBSERVE_Pin);
 800078c:	2140      	movs	r1, #64	@ 0x40
 800078e:	4847      	ldr	r0, [pc, #284]	@ (80008ac <main+0x190>)
 8000790:	f002 f984 	bl	8002a9c <HAL_GPIO_ReadPin>
 8000794:	4603      	mov	r3, r0
 8000796:	461a      	mov	r2, r3
 8000798:	4b46      	ldr	r3, [pc, #280]	@ (80008b4 <main+0x198>)
 800079a:	701a      	strb	r2, [r3, #0]
	  hvil_in = HAL_GPIO_ReadPin(GPIOE, HVIL_IN_OBSERVE_Pin);
 800079c:	2110      	movs	r1, #16
 800079e:	4843      	ldr	r0, [pc, #268]	@ (80008ac <main+0x190>)
 80007a0:	f002 f97c 	bl	8002a9c <HAL_GPIO_ReadPin>
 80007a4:	4603      	mov	r3, r0
 80007a6:	461a      	mov	r2, r3
 80007a8:	4b43      	ldr	r3, [pc, #268]	@ (80008b8 <main+0x19c>)
 80007aa:	701a      	strb	r2, [r3, #0]
	  brakes_on = !HAL_GPIO_ReadPin(GPIOE, N_BRAKES_ON_Pin);
 80007ac:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007b0:	483e      	ldr	r0, [pc, #248]	@ (80008ac <main+0x190>)
 80007b2:	f002 f973 	bl	8002a9c <HAL_GPIO_ReadPin>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	bf0c      	ite	eq
 80007bc:	2301      	moveq	r3, #1
 80007be:	2300      	movne	r3, #0
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	461a      	mov	r2, r3
 80007c4:	4b3d      	ldr	r3, [pc, #244]	@ (80008bc <main+0x1a0>)
 80007c6:	701a      	strb	r2, [r3, #0]

	  if (HAL_GPIO_ReadPin(GPIOE, RANGE_ANOMALY_Pin)) {
 80007c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007cc:	4837      	ldr	r0, [pc, #220]	@ (80008ac <main+0x190>)
 80007ce:	f002 f965 	bl	8002a9c <HAL_GPIO_ReadPin>
//		  Error_Handler();
	  }

	  /* Read petal sensor values from ADC */
	  for (int i = 0; i < 4; i++) {
 80007d2:	2300      	movs	r3, #0
 80007d4:	60fb      	str	r3, [r7, #12]
 80007d6:	e01d      	b.n	8000814 <main+0xf8>
		  HAL_ADC_Start(&hadc1);
 80007d8:	4839      	ldr	r0, [pc, #228]	@ (80008c0 <main+0x1a4>)
 80007da:	f000 fcc9 	bl	8001170 <HAL_ADC_Start>
		  ADC_channel_select(sensor_channels[i]);
 80007de:	4a39      	ldr	r2, [pc, #228]	@ (80008c4 <main+0x1a8>)
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff ff64 	bl	80006b4 <ADC_channel_select>
		  HAL_ADC_PollForConversion(&hadc1, ADC_TIMEOUT_MS);
 80007ec:	2164      	movs	r1, #100	@ 0x64
 80007ee:	4834      	ldr	r0, [pc, #208]	@ (80008c0 <main+0x1a4>)
 80007f0:	f000 fda5 	bl	800133e <HAL_ADC_PollForConversion>
		  pedal_vals[i] = HAL_ADC_GetValue(&hadc1);
 80007f4:	4832      	ldr	r0, [pc, #200]	@ (80008c0 <main+0x1a4>)
 80007f6:	f000 fe2d 	bl	8001454 <HAL_ADC_GetValue>
 80007fa:	4603      	mov	r3, r0
 80007fc:	b2d9      	uxtb	r1, r3
 80007fe:	4a32      	ldr	r2, [pc, #200]	@ (80008c8 <main+0x1ac>)
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	4413      	add	r3, r2
 8000804:	460a      	mov	r2, r1
 8000806:	701a      	strb	r2, [r3, #0]
		  HAL_ADC_Stop(&hadc1);
 8000808:	482d      	ldr	r0, [pc, #180]	@ (80008c0 <main+0x1a4>)
 800080a:	f000 fd65 	bl	80012d8 <HAL_ADC_Stop>
	  for (int i = 0; i < 4; i++) {
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	3301      	adds	r3, #1
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	2b03      	cmp	r3, #3
 8000818:	ddde      	ble.n	80007d8 <main+0xbc>
	  }
	  pedal_vals[4] = brakes_on;
 800081a:	4b28      	ldr	r3, [pc, #160]	@ (80008bc <main+0x1a0>)
 800081c:	781a      	ldrb	r2, [r3, #0]
 800081e:	4b2a      	ldr	r3, [pc, #168]	@ (80008c8 <main+0x1ac>)
 8000820:	711a      	strb	r2, [r3, #4]


	  for (int i = 0; i < 5; i++) {
 8000822:	2300      	movs	r3, #0
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	e00e      	b.n	8000846 <main+0x12a>
		  TxData[i] = 10 * i;
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	b2db      	uxtb	r3, r3
 800082c:	461a      	mov	r2, r3
 800082e:	0092      	lsls	r2, r2, #2
 8000830:	4413      	add	r3, r2
 8000832:	005b      	lsls	r3, r3, #1
 8000834:	b2d9      	uxtb	r1, r3
 8000836:	4a25      	ldr	r2, [pc, #148]	@ (80008cc <main+0x1b0>)
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	4413      	add	r3, r2
 800083c:	460a      	mov	r2, r1
 800083e:	701a      	strb	r2, [r3, #0]
	  for (int i = 0; i < 5; i++) {
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	3301      	adds	r3, #1
 8000844:	60bb      	str	r3, [r7, #8]
 8000846:	68bb      	ldr	r3, [r7, #8]
 8000848:	2b04      	cmp	r3, #4
 800084a:	dded      	ble.n	8000828 <main+0x10c>
	  }

	  HAL_Delay(1);	// so that the CAN transmissions don't pile up
 800084c:	2001      	movs	r0, #1
 800084e:	f000 fc27 	bl	80010a0 <HAL_Delay>
	  if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK) {
 8000852:	4b1f      	ldr	r3, [pc, #124]	@ (80008d0 <main+0x1b4>)
 8000854:	4a1d      	ldr	r2, [pc, #116]	@ (80008cc <main+0x1b0>)
 8000856:	4912      	ldr	r1, [pc, #72]	@ (80008a0 <main+0x184>)
 8000858:	4812      	ldr	r0, [pc, #72]	@ (80008a4 <main+0x188>)
 800085a:	f001 fa47 	bl	8001cec <HAL_CAN_AddTxMessage>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d004      	beq.n	800086e <main+0x152>
		  HAL_GPIO_WritePin(GPIOA, DEBUG_LED_1_Pin, GPIO_PIN_SET);
 8000864:	2201      	movs	r2, #1
 8000866:	2108      	movs	r1, #8
 8000868:	480f      	ldr	r0, [pc, #60]	@ (80008a8 <main+0x18c>)
 800086a:	f002 f92f 	bl	8002acc <HAL_GPIO_WritePin>
	//	   Error_Handler ();
	  }
	  HAL_GPIO_WritePin(DEBUG_LED_0_GPIO_Port, DEBUG_LED_0_Pin, GPIO_PIN_SET);
 800086e:	2201      	movs	r2, #1
 8000870:	2101      	movs	r1, #1
 8000872:	480d      	ldr	r0, [pc, #52]	@ (80008a8 <main+0x18c>)
 8000874:	f002 f92a 	bl	8002acc <HAL_GPIO_WritePin>

	  for (int i = 0; i<=99;i++){
 8000878:	2300      	movs	r3, #0
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	e00c      	b.n	8000898 <main+0x17c>
	  shift_reg_display(i, DP1, DP2);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	b2db      	uxtb	r3, r3
 8000882:	2180      	movs	r1, #128	@ 0x80
 8000884:	2208      	movs	r2, #8
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff fe68 	bl	800055c <shift_reg_display>
	  HAL_Delay(100);	// so that the CAN transmissions don't pile up
 800088c:	2064      	movs	r0, #100	@ 0x64
 800088e:	f000 fc07 	bl	80010a0 <HAL_Delay>
	  for (int i = 0; i<=99;i++){
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	3301      	adds	r3, #1
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	2b63      	cmp	r3, #99	@ 0x63
 800089c:	ddef      	ble.n	800087e <main+0x162>
	  hvil_out = HAL_GPIO_ReadPin(GPIOE, HVIL_OUT_OBSERVE_Pin);
 800089e:	e76d      	b.n	800077c <main+0x60>
 80008a0:	200001c8 	.word	0x200001c8
 80008a4:	20000184 	.word	0x20000184
 80008a8:	40020000 	.word	0x40020000
 80008ac:	40021000 	.word	0x40021000
 80008b0:	200001ac 	.word	0x200001ac
 80008b4:	200001ad 	.word	0x200001ad
 80008b8:	200001ae 	.word	0x200001ae
 80008bc:	200001af 	.word	0x200001af
 80008c0:	2000013c 	.word	0x2000013c
 80008c4:	080091a8 	.word	0x080091a8
 80008c8:	200001c0 	.word	0x200001c0
 80008cc:	200001b0 	.word	0x200001b0
 80008d0:	200001fc 	.word	0x200001fc

080008d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b094      	sub	sp, #80	@ 0x50
 80008d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	2234      	movs	r2, #52	@ 0x34
 80008e0:	2100      	movs	r1, #0
 80008e2:	4618      	mov	r0, r3
 80008e4:	f008 fbf8 	bl	80090d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e8:	f107 0308 	add.w	r3, r7, #8
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f8:	2300      	movs	r3, #0
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	4b29      	ldr	r3, [pc, #164]	@ (80009a4 <SystemClock_Config+0xd0>)
 80008fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000900:	4a28      	ldr	r2, [pc, #160]	@ (80009a4 <SystemClock_Config+0xd0>)
 8000902:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000906:	6413      	str	r3, [r2, #64]	@ 0x40
 8000908:	4b26      	ldr	r3, [pc, #152]	@ (80009a4 <SystemClock_Config+0xd0>)
 800090a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800090c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000914:	2300      	movs	r3, #0
 8000916:	603b      	str	r3, [r7, #0]
 8000918:	4b23      	ldr	r3, [pc, #140]	@ (80009a8 <SystemClock_Config+0xd4>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a22      	ldr	r2, [pc, #136]	@ (80009a8 <SystemClock_Config+0xd4>)
 800091e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000922:	6013      	str	r3, [r2, #0]
 8000924:	4b20      	ldr	r3, [pc, #128]	@ (80009a8 <SystemClock_Config+0xd4>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800092c:	603b      	str	r3, [r7, #0]
 800092e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000930:	2301      	movs	r3, #1
 8000932:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000934:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000938:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800093a:	2302      	movs	r3, #2
 800093c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800093e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000942:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000944:	2304      	movs	r3, #4
 8000946:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000948:	2348      	movs	r3, #72	@ 0x48
 800094a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800094c:	2302      	movs	r3, #2
 800094e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000950:	2303      	movs	r3, #3
 8000952:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000954:	2302      	movs	r3, #2
 8000956:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000958:	f107 031c 	add.w	r3, r7, #28
 800095c:	4618      	mov	r0, r3
 800095e:	f003 ff85 	bl	800486c <HAL_RCC_OscConfig>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000968:	f000 f992 	bl	8000c90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800096c:	230f      	movs	r3, #15
 800096e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000970:	2302      	movs	r3, #2
 8000972:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000974:	2300      	movs	r3, #0
 8000976:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000978:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800097c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800097e:	2300      	movs	r3, #0
 8000980:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000982:	f107 0308 	add.w	r3, r7, #8
 8000986:	2102      	movs	r1, #2
 8000988:	4618      	mov	r0, r3
 800098a:	f003 fb81 	bl	8004090 <HAL_RCC_ClockConfig>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000994:	f000 f97c 	bl	8000c90 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000998:	f003 fc60 	bl	800425c <HAL_RCC_EnableCSS>
}
 800099c:	bf00      	nop
 800099e:	3750      	adds	r7, #80	@ 0x50
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40007000 	.word	0x40007000

080009ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009b2:	463b      	mov	r3, r7
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009be:	4b21      	ldr	r3, [pc, #132]	@ (8000a44 <MX_ADC1_Init+0x98>)
 80009c0:	4a21      	ldr	r2, [pc, #132]	@ (8000a48 <MX_ADC1_Init+0x9c>)
 80009c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80009c4:	4b1f      	ldr	r3, [pc, #124]	@ (8000a44 <MX_ADC1_Init+0x98>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009ca:	4b1e      	ldr	r3, [pc, #120]	@ (8000a44 <MX_ADC1_Init+0x98>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80009d0:	4b1c      	ldr	r3, [pc, #112]	@ (8000a44 <MX_ADC1_Init+0x98>)
 80009d2:	2201      	movs	r2, #1
 80009d4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80009d6:	4b1b      	ldr	r3, [pc, #108]	@ (8000a44 <MX_ADC1_Init+0x98>)
 80009d8:	2201      	movs	r2, #1
 80009da:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009dc:	4b19      	ldr	r3, [pc, #100]	@ (8000a44 <MX_ADC1_Init+0x98>)
 80009de:	2200      	movs	r2, #0
 80009e0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009e4:	4b17      	ldr	r3, [pc, #92]	@ (8000a44 <MX_ADC1_Init+0x98>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009ea:	4b16      	ldr	r3, [pc, #88]	@ (8000a44 <MX_ADC1_Init+0x98>)
 80009ec:	4a17      	ldr	r2, [pc, #92]	@ (8000a4c <MX_ADC1_Init+0xa0>)
 80009ee:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009f0:	4b14      	ldr	r3, [pc, #80]	@ (8000a44 <MX_ADC1_Init+0x98>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80009f6:	4b13      	ldr	r3, [pc, #76]	@ (8000a44 <MX_ADC1_Init+0x98>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009fc:	4b11      	ldr	r3, [pc, #68]	@ (8000a44 <MX_ADC1_Init+0x98>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a04:	4b0f      	ldr	r3, [pc, #60]	@ (8000a44 <MX_ADC1_Init+0x98>)
 8000a06:	2201      	movs	r2, #1
 8000a08:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a0a:	480e      	ldr	r0, [pc, #56]	@ (8000a44 <MX_ADC1_Init+0x98>)
 8000a0c:	f000 fb6c 	bl	80010e8 <HAL_ADC_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000a16:	f000 f93b 	bl	8000c90 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000a1a:	2307      	movs	r3, #7
 8000a1c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a22:	2300      	movs	r3, #0
 8000a24:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a26:	463b      	mov	r3, r7
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4806      	ldr	r0, [pc, #24]	@ (8000a44 <MX_ADC1_Init+0x98>)
 8000a2c:	f000 fd20 	bl	8001470 <HAL_ADC_ConfigChannel>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000a36:	f000 f92b 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a3a:	bf00      	nop
 8000a3c:	3710      	adds	r7, #16
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	2000013c 	.word	0x2000013c
 8000a48:	40012000 	.word	0x40012000
 8000a4c:	0f000001 	.word	0x0f000001

08000a50 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08a      	sub	sp, #40	@ 0x28
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000a56:	4b25      	ldr	r3, [pc, #148]	@ (8000aec <MX_CAN1_Init+0x9c>)
 8000a58:	4a25      	ldr	r2, [pc, #148]	@ (8000af0 <MX_CAN1_Init+0xa0>)
 8000a5a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 8000a5c:	4b23      	ldr	r3, [pc, #140]	@ (8000aec <MX_CAN1_Init+0x9c>)
 8000a5e:	2212      	movs	r2, #18
 8000a60:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 8000a62:	4b22      	ldr	r3, [pc, #136]	@ (8000aec <MX_CAN1_Init+0x9c>)
 8000a64:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a68:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a6a:	4b20      	ldr	r3, [pc, #128]	@ (8000aec <MX_CAN1_Init+0x9c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000a70:	4b1e      	ldr	r3, [pc, #120]	@ (8000aec <MX_CAN1_Init+0x9c>)
 8000a72:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000a76:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000a78:	4b1c      	ldr	r3, [pc, #112]	@ (8000aec <MX_CAN1_Init+0x9c>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a7e:	4b1b      	ldr	r3, [pc, #108]	@ (8000aec <MX_CAN1_Init+0x9c>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a84:	4b19      	ldr	r3, [pc, #100]	@ (8000aec <MX_CAN1_Init+0x9c>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a8a:	4b18      	ldr	r3, [pc, #96]	@ (8000aec <MX_CAN1_Init+0x9c>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a90:	4b16      	ldr	r3, [pc, #88]	@ (8000aec <MX_CAN1_Init+0x9c>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a96:	4b15      	ldr	r3, [pc, #84]	@ (8000aec <MX_CAN1_Init+0x9c>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a9c:	4b13      	ldr	r3, [pc, #76]	@ (8000aec <MX_CAN1_Init+0x9c>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000aa2:	4812      	ldr	r0, [pc, #72]	@ (8000aec <MX_CAN1_Init+0x9c>)
 8000aa4:	f000 ff02 	bl	80018ac <HAL_CAN_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000aae:	f000 f8ef 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;
  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 10;
 8000ab6:	230a      	movs	r3, #10
 8000ab8:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0x000;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x000;
 8000aca:	2300      	movs	r3, #0
 8000acc:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 0;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8000ada:	463b      	mov	r3, r7
 8000adc:	4619      	mov	r1, r3
 8000ade:	4803      	ldr	r0, [pc, #12]	@ (8000aec <MX_CAN1_Init+0x9c>)
 8000ae0:	f000 ffe0 	bl	8001aa4 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 8000ae4:	bf00      	nop
 8000ae6:	3728      	adds	r7, #40	@ 0x28
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20000184 	.word	0x20000184
 8000af0:	40006400 	.word	0x40006400

08000af4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08a      	sub	sp, #40	@ 0x28
 8000af8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afa:	f107 0314 	add.w	r3, r7, #20
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]
 8000b04:	609a      	str	r2, [r3, #8]
 8000b06:	60da      	str	r2, [r3, #12]
 8000b08:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	613b      	str	r3, [r7, #16]
 8000b0e:	4b5c      	ldr	r3, [pc, #368]	@ (8000c80 <MX_GPIO_Init+0x18c>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b12:	4a5b      	ldr	r2, [pc, #364]	@ (8000c80 <MX_GPIO_Init+0x18c>)
 8000b14:	f043 0310 	orr.w	r3, r3, #16
 8000b18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b1a:	4b59      	ldr	r3, [pc, #356]	@ (8000c80 <MX_GPIO_Init+0x18c>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1e:	f003 0310 	and.w	r3, r3, #16
 8000b22:	613b      	str	r3, [r7, #16]
 8000b24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	4b55      	ldr	r3, [pc, #340]	@ (8000c80 <MX_GPIO_Init+0x18c>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2e:	4a54      	ldr	r2, [pc, #336]	@ (8000c80 <MX_GPIO_Init+0x18c>)
 8000b30:	f043 0304 	orr.w	r3, r3, #4
 8000b34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b36:	4b52      	ldr	r3, [pc, #328]	@ (8000c80 <MX_GPIO_Init+0x18c>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3a:	f003 0304 	and.w	r3, r3, #4
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	60bb      	str	r3, [r7, #8]
 8000b46:	4b4e      	ldr	r3, [pc, #312]	@ (8000c80 <MX_GPIO_Init+0x18c>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4a:	4a4d      	ldr	r2, [pc, #308]	@ (8000c80 <MX_GPIO_Init+0x18c>)
 8000b4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b52:	4b4b      	ldr	r3, [pc, #300]	@ (8000c80 <MX_GPIO_Init+0x18c>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b5a:	60bb      	str	r3, [r7, #8]
 8000b5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	607b      	str	r3, [r7, #4]
 8000b62:	4b47      	ldr	r3, [pc, #284]	@ (8000c80 <MX_GPIO_Init+0x18c>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b66:	4a46      	ldr	r2, [pc, #280]	@ (8000c80 <MX_GPIO_Init+0x18c>)
 8000b68:	f043 0301 	orr.w	r3, r3, #1
 8000b6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b6e:	4b44      	ldr	r3, [pc, #272]	@ (8000c80 <MX_GPIO_Init+0x18c>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	603b      	str	r3, [r7, #0]
 8000b7e:	4b40      	ldr	r3, [pc, #256]	@ (8000c80 <MX_GPIO_Init+0x18c>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b82:	4a3f      	ldr	r2, [pc, #252]	@ (8000c80 <MX_GPIO_Init+0x18c>)
 8000b84:	f043 0302 	orr.w	r3, r3, #2
 8000b88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b8a:	4b3d      	ldr	r3, [pc, #244]	@ (8000c80 <MX_GPIO_Init+0x18c>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8e:	f003 0302 	and.w	r3, r3, #2
 8000b92:	603b      	str	r3, [r7, #0]
 8000b94:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, N_HVIL_FLOAT_Pin|N_HVIL_RESET_Pin, GPIO_PIN_SET);
 8000b96:	2201      	movs	r2, #1
 8000b98:	2128      	movs	r1, #40	@ 0x28
 8000b9a:	483a      	ldr	r0, [pc, #232]	@ (8000c84 <MX_GPIO_Init+0x190>)
 8000b9c:	f001 ff96 	bl	8002acc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ba6:	4838      	ldr	r0, [pc, #224]	@ (8000c88 <MX_GPIO_Init+0x194>)
 8000ba8:	f001 ff90 	bl	8002acc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED_0_Pin|DEBUG_LED_1_Pin|ShiftRegDAT_Pin|ShiftRegSHCP_Pin
 8000bac:	2200      	movs	r2, #0
 8000bae:	2179      	movs	r1, #121	@ 0x79
 8000bb0:	4836      	ldr	r0, [pc, #216]	@ (8000c8c <MX_GPIO_Init+0x198>)
 8000bb2:	f001 ff8b 	bl	8002acc <HAL_GPIO_WritePin>
                          |ShiftRegSTCP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : HVIL_OUT_OBSERVE_Pin HVIL_IN_OBSERVE_Pin HVIL_LOGIC_OBSERVE_Pin RANGE_ANOMALY_Pin */
  GPIO_InitStruct.Pin = HVIL_OUT_OBSERVE_Pin|HVIL_IN_OBSERVE_Pin|HVIL_LOGIC_OBSERVE_Pin|RANGE_ANOMALY_Pin;
 8000bb6:	f248 0354 	movw	r3, #32852	@ 0x8054
 8000bba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	4619      	mov	r1, r3
 8000bca:	482e      	ldr	r0, [pc, #184]	@ (8000c84 <MX_GPIO_Init+0x190>)
 8000bcc:	f001 fde2 	bl	8002794 <HAL_GPIO_Init>

  /*Configure GPIO pins : N_HVIL_FLOAT_Pin N_HVIL_RESET_Pin */
  GPIO_InitStruct.Pin = N_HVIL_FLOAT_Pin|N_HVIL_RESET_Pin;
 8000bd0:	2328      	movs	r3, #40	@ 0x28
 8000bd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	4619      	mov	r1, r3
 8000be6:	4827      	ldr	r0, [pc, #156]	@ (8000c84 <MX_GPIO_Init+0x190>)
 8000be8:	f001 fdd4 	bl	8002794 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000bec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000bf0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bfe:	f107 0314 	add.w	r3, r7, #20
 8000c02:	4619      	mov	r1, r3
 8000c04:	4820      	ldr	r0, [pc, #128]	@ (8000c88 <MX_GPIO_Init+0x194>)
 8000c06:	f001 fdc5 	bl	8002794 <HAL_GPIO_Init>

  /*Configure GPIO pins : DEBUG_LED_0_Pin DEBUG_LED_1_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_0_Pin|DEBUG_LED_1_Pin;
 8000c0a:	2309      	movs	r3, #9
 8000c0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c12:	2302      	movs	r3, #2
 8000c14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c16:	2300      	movs	r3, #0
 8000c18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1a:	f107 0314 	add.w	r3, r7, #20
 8000c1e:	4619      	mov	r1, r3
 8000c20:	481a      	ldr	r0, [pc, #104]	@ (8000c8c <MX_GPIO_Init+0x198>)
 8000c22:	f001 fdb7 	bl	8002794 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN0_EXTI_Pin BTN1_EXTI_Pin */
  GPIO_InitStruct.Pin = BTN0_EXTI_Pin|BTN1_EXTI_Pin;
 8000c26:	2306      	movs	r3, #6
 8000c28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c2a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4814      	ldr	r0, [pc, #80]	@ (8000c8c <MX_GPIO_Init+0x198>)
 8000c3c:	f001 fdaa 	bl	8002794 <HAL_GPIO_Init>

  /*Configure GPIO pins : ShiftRegDAT_Pin ShiftRegSHCP_Pin ShiftRegSTCP_Pin */
  GPIO_InitStruct.Pin = ShiftRegDAT_Pin|ShiftRegSHCP_Pin|ShiftRegSTCP_Pin;
 8000c40:	2370      	movs	r3, #112	@ 0x70
 8000c42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c44:	2301      	movs	r3, #1
 8000c46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	4619      	mov	r1, r3
 8000c56:	480d      	ldr	r0, [pc, #52]	@ (8000c8c <MX_GPIO_Init+0x198>)
 8000c58:	f001 fd9c 	bl	8002794 <HAL_GPIO_Init>

  /*Configure GPIO pin : N_BRAKES_ON_Pin */
  GPIO_InitStruct.Pin = N_BRAKES_ON_Pin;
 8000c5c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000c60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c62:	2300      	movs	r3, #0
 8000c64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c66:	2301      	movs	r3, #1
 8000c68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(N_BRAKES_ON_GPIO_Port, &GPIO_InitStruct);
 8000c6a:	f107 0314 	add.w	r3, r7, #20
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4804      	ldr	r0, [pc, #16]	@ (8000c84 <MX_GPIO_Init+0x190>)
 8000c72:	f001 fd8f 	bl	8002794 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c76:	bf00      	nop
 8000c78:	3728      	adds	r7, #40	@ 0x28
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40023800 	.word	0x40023800
 8000c84:	40021000 	.word	0x40021000
 8000c88:	40020800 	.word	0x40020800
 8000c8c:	40020000 	.word	0x40020000

08000c90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c94:	b672      	cpsid	i
}
 8000c96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_GPIO_WritePin(GPIOE, N_HVIL_FLOAT_Pin, GPIO_PIN_SET);
 8000c98:	2201      	movs	r2, #1
 8000c9a:	2108      	movs	r1, #8
 8000c9c:	4802      	ldr	r0, [pc, #8]	@ (8000ca8 <Error_Handler+0x18>)
 8000c9e:	f001 ff15 	bl	8002acc <HAL_GPIO_WritePin>
  while (1)
 8000ca2:	bf00      	nop
 8000ca4:	e7fd      	b.n	8000ca2 <Error_Handler+0x12>
 8000ca6:	bf00      	nop
 8000ca8:	40021000 	.word	0x40021000

08000cac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	607b      	str	r3, [r7, #4]
 8000cb6:	4b10      	ldr	r3, [pc, #64]	@ (8000cf8 <HAL_MspInit+0x4c>)
 8000cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cba:	4a0f      	ldr	r2, [pc, #60]	@ (8000cf8 <HAL_MspInit+0x4c>)
 8000cbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8000cf8 <HAL_MspInit+0x4c>)
 8000cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	603b      	str	r3, [r7, #0]
 8000cd2:	4b09      	ldr	r3, [pc, #36]	@ (8000cf8 <HAL_MspInit+0x4c>)
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd6:	4a08      	ldr	r2, [pc, #32]	@ (8000cf8 <HAL_MspInit+0x4c>)
 8000cd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cde:	4b06      	ldr	r3, [pc, #24]	@ (8000cf8 <HAL_MspInit+0x4c>)
 8000ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ce6:	603b      	str	r3, [r7, #0]
 8000ce8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cea:	bf00      	nop
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	40023800 	.word	0x40023800

08000cfc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08c      	sub	sp, #48	@ 0x30
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d04:	f107 031c 	add.w	r3, r7, #28
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a31      	ldr	r2, [pc, #196]	@ (8000de0 <HAL_ADC_MspInit+0xe4>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d15b      	bne.n	8000dd6 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61bb      	str	r3, [r7, #24]
 8000d22:	4b30      	ldr	r3, [pc, #192]	@ (8000de4 <HAL_ADC_MspInit+0xe8>)
 8000d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d26:	4a2f      	ldr	r2, [pc, #188]	@ (8000de4 <HAL_ADC_MspInit+0xe8>)
 8000d28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d2e:	4b2d      	ldr	r3, [pc, #180]	@ (8000de4 <HAL_ADC_MspInit+0xe8>)
 8000d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d36:	61bb      	str	r3, [r7, #24]
 8000d38:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]
 8000d3e:	4b29      	ldr	r3, [pc, #164]	@ (8000de4 <HAL_ADC_MspInit+0xe8>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d42:	4a28      	ldr	r2, [pc, #160]	@ (8000de4 <HAL_ADC_MspInit+0xe8>)
 8000d44:	f043 0301 	orr.w	r3, r3, #1
 8000d48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d4a:	4b26      	ldr	r3, [pc, #152]	@ (8000de4 <HAL_ADC_MspInit+0xe8>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4e:	f003 0301 	and.w	r3, r3, #1
 8000d52:	617b      	str	r3, [r7, #20]
 8000d54:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	613b      	str	r3, [r7, #16]
 8000d5a:	4b22      	ldr	r3, [pc, #136]	@ (8000de4 <HAL_ADC_MspInit+0xe8>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5e:	4a21      	ldr	r2, [pc, #132]	@ (8000de4 <HAL_ADC_MspInit+0xe8>)
 8000d60:	f043 0304 	orr.w	r3, r3, #4
 8000d64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d66:	4b1f      	ldr	r3, [pc, #124]	@ (8000de4 <HAL_ADC_MspInit+0xe8>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6a:	f003 0304 	and.w	r3, r3, #4
 8000d6e:	613b      	str	r3, [r7, #16]
 8000d70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	4b1b      	ldr	r3, [pc, #108]	@ (8000de4 <HAL_ADC_MspInit+0xe8>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7a:	4a1a      	ldr	r2, [pc, #104]	@ (8000de4 <HAL_ADC_MspInit+0xe8>)
 8000d7c:	f043 0302 	orr.w	r3, r3, #2
 8000d80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d82:	4b18      	ldr	r3, [pc, #96]	@ (8000de4 <HAL_ADC_MspInit+0xe8>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d86:	f003 0302 	and.w	r3, r3, #2
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d8e:	2380      	movs	r3, #128	@ 0x80
 8000d90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d92:	2303      	movs	r3, #3
 8000d94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9a:	f107 031c 	add.w	r3, r7, #28
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4811      	ldr	r0, [pc, #68]	@ (8000de8 <HAL_ADC_MspInit+0xec>)
 8000da2:	f001 fcf7 	bl	8002794 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000da6:	2330      	movs	r3, #48	@ 0x30
 8000da8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000daa:	2303      	movs	r3, #3
 8000dac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000db2:	f107 031c 	add.w	r3, r7, #28
 8000db6:	4619      	mov	r1, r3
 8000db8:	480c      	ldr	r0, [pc, #48]	@ (8000dec <HAL_ADC_MspInit+0xf0>)
 8000dba:	f001 fceb 	bl	8002794 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dca:	f107 031c 	add.w	r3, r7, #28
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4807      	ldr	r0, [pc, #28]	@ (8000df0 <HAL_ADC_MspInit+0xf4>)
 8000dd2:	f001 fcdf 	bl	8002794 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000dd6:	bf00      	nop
 8000dd8:	3730      	adds	r7, #48	@ 0x30
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40012000 	.word	0x40012000
 8000de4:	40023800 	.word	0x40023800
 8000de8:	40020000 	.word	0x40020000
 8000dec:	40020800 	.word	0x40020800
 8000df0:	40020400 	.word	0x40020400

08000df4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08a      	sub	sp, #40	@ 0x28
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfc:	f107 0314 	add.w	r3, r7, #20
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a21      	ldr	r2, [pc, #132]	@ (8000e98 <HAL_CAN_MspInit+0xa4>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d13c      	bne.n	8000e90 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	613b      	str	r3, [r7, #16]
 8000e1a:	4b20      	ldr	r3, [pc, #128]	@ (8000e9c <HAL_CAN_MspInit+0xa8>)
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e1e:	4a1f      	ldr	r2, [pc, #124]	@ (8000e9c <HAL_CAN_MspInit+0xa8>)
 8000e20:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e24:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e26:	4b1d      	ldr	r3, [pc, #116]	@ (8000e9c <HAL_CAN_MspInit+0xa8>)
 8000e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e2e:	613b      	str	r3, [r7, #16]
 8000e30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	4b19      	ldr	r3, [pc, #100]	@ (8000e9c <HAL_CAN_MspInit+0xa8>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3a:	4a18      	ldr	r2, [pc, #96]	@ (8000e9c <HAL_CAN_MspInit+0xa8>)
 8000e3c:	f043 0302 	orr.w	r3, r3, #2
 8000e40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e42:	4b16      	ldr	r3, [pc, #88]	@ (8000e9c <HAL_CAN_MspInit+0xa8>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e46:	f003 0302 	and.w	r3, r3, #2
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e4e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e54:	2302      	movs	r3, #2
 8000e56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_CAN1;
 8000e60:	2308      	movs	r3, #8
 8000e62:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	4619      	mov	r1, r3
 8000e6a:	480d      	ldr	r0, [pc, #52]	@ (8000ea0 <HAL_CAN_MspInit+0xac>)
 8000e6c:	f001 fc92 	bl	8002794 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000e70:	2200      	movs	r2, #0
 8000e72:	2100      	movs	r1, #0
 8000e74:	2014      	movs	r0, #20
 8000e76:	f001 fc56 	bl	8002726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000e7a:	2014      	movs	r0, #20
 8000e7c:	f001 fc6f 	bl	800275e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000e80:	2200      	movs	r2, #0
 8000e82:	2100      	movs	r1, #0
 8000e84:	2015      	movs	r0, #21
 8000e86:	f001 fc4e 	bl	8002726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000e8a:	2015      	movs	r0, #21
 8000e8c:	f001 fc67 	bl	800275e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000e90:	bf00      	nop
 8000e92:	3728      	adds	r7, #40	@ 0x28
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40006400 	.word	0x40006400
 8000e9c:	40023800 	.word	0x40023800
 8000ea0:	40020400 	.word	0x40020400

08000ea4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000ea8:	f003 faf6 	bl	8004498 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eac:	bf00      	nop
 8000eae:	e7fd      	b.n	8000eac <NMI_Handler+0x8>

08000eb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb4:	bf00      	nop
 8000eb6:	e7fd      	b.n	8000eb4 <HardFault_Handler+0x4>

08000eb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ebc:	bf00      	nop
 8000ebe:	e7fd      	b.n	8000ebc <MemManage_Handler+0x4>

08000ec0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ec4:	bf00      	nop
 8000ec6:	e7fd      	b.n	8000ec4 <BusFault_Handler+0x4>

08000ec8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ecc:	bf00      	nop
 8000ece:	e7fd      	b.n	8000ecc <UsageFault_Handler+0x4>

08000ed0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000efe:	f000 f8af 	bl	8001060 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
	...

08000f08 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000f0c:	4802      	ldr	r0, [pc, #8]	@ (8000f18 <CAN1_RX0_IRQHandler+0x10>)
 8000f0e:	f001 f900 	bl	8002112 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20000184 	.word	0x20000184

08000f1c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000f20:	4802      	ldr	r0, [pc, #8]	@ (8000f2c <CAN1_RX1_IRQHandler+0x10>)
 8000f22:	f001 f8f6 	bl	8002112 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000184 	.word	0x20000184

08000f30 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000f34:	4802      	ldr	r0, [pc, #8]	@ (8000f40 <OTG_FS_IRQHandler+0x10>)
 8000f36:	f001 ff39 	bl	8002dac <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	200016e4 	.word	0x200016e4

08000f44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f48:	4b06      	ldr	r3, [pc, #24]	@ (8000f64 <SystemInit+0x20>)
 8000f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f4e:	4a05      	ldr	r2, [pc, #20]	@ (8000f64 <SystemInit+0x20>)
 8000f50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000f68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fa0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f6c:	480d      	ldr	r0, [pc, #52]	@ (8000fa4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f6e:	490e      	ldr	r1, [pc, #56]	@ (8000fa8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f70:	4a0e      	ldr	r2, [pc, #56]	@ (8000fac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f74:	e002      	b.n	8000f7c <LoopCopyDataInit>

08000f76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f7a:	3304      	adds	r3, #4

08000f7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f80:	d3f9      	bcc.n	8000f76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f82:	4a0b      	ldr	r2, [pc, #44]	@ (8000fb0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f84:	4c0b      	ldr	r4, [pc, #44]	@ (8000fb4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f88:	e001      	b.n	8000f8e <LoopFillZerobss>

08000f8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f8c:	3204      	adds	r2, #4

08000f8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f90:	d3fb      	bcc.n	8000f8a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f92:	f7ff ffd7 	bl	8000f44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f96:	f008 f8a7 	bl	80090e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f9a:	f7ff fbbf 	bl	800071c <main>
  bx  lr    
 8000f9e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000fa0:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8000fa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa8:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 8000fac:	08009200 	.word	0x08009200
  ldr r2, =_sbss
 8000fb0:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 8000fb4:	20001e10 	.word	0x20001e10

08000fb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fb8:	e7fe      	b.n	8000fb8 <ADC_IRQHandler>
	...

08000fbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fc0:	4b0e      	ldr	r3, [pc, #56]	@ (8000ffc <HAL_Init+0x40>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a0d      	ldr	r2, [pc, #52]	@ (8000ffc <HAL_Init+0x40>)
 8000fc6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fcc:	4b0b      	ldr	r3, [pc, #44]	@ (8000ffc <HAL_Init+0x40>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a0a      	ldr	r2, [pc, #40]	@ (8000ffc <HAL_Init+0x40>)
 8000fd2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fd8:	4b08      	ldr	r3, [pc, #32]	@ (8000ffc <HAL_Init+0x40>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a07      	ldr	r2, [pc, #28]	@ (8000ffc <HAL_Init+0x40>)
 8000fde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fe2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe4:	2003      	movs	r0, #3
 8000fe6:	f001 fb93 	bl	8002710 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fea:	200f      	movs	r0, #15
 8000fec:	f000 f808 	bl	8001000 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ff0:	f7ff fe5c 	bl	8000cac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40023c00 	.word	0x40023c00

08001000 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001008:	4b12      	ldr	r3, [pc, #72]	@ (8001054 <HAL_InitTick+0x54>)
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	4b12      	ldr	r3, [pc, #72]	@ (8001058 <HAL_InitTick+0x58>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	4619      	mov	r1, r3
 8001012:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001016:	fbb3 f3f1 	udiv	r3, r3, r1
 800101a:	fbb2 f3f3 	udiv	r3, r2, r3
 800101e:	4618      	mov	r0, r3
 8001020:	f001 fbab 	bl	800277a <HAL_SYSTICK_Config>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	e00e      	b.n	800104c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2b0f      	cmp	r3, #15
 8001032:	d80a      	bhi.n	800104a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001034:	2200      	movs	r2, #0
 8001036:	6879      	ldr	r1, [r7, #4]
 8001038:	f04f 30ff 	mov.w	r0, #4294967295
 800103c:	f001 fb73 	bl	8002726 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001040:	4a06      	ldr	r2, [pc, #24]	@ (800105c <HAL_InitTick+0x5c>)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001046:	2300      	movs	r3, #0
 8001048:	e000      	b.n	800104c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
}
 800104c:	4618      	mov	r0, r3
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20000000 	.word	0x20000000
 8001058:	20000008 	.word	0x20000008
 800105c:	20000004 	.word	0x20000004

08001060 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001064:	4b06      	ldr	r3, [pc, #24]	@ (8001080 <HAL_IncTick+0x20>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	461a      	mov	r2, r3
 800106a:	4b06      	ldr	r3, [pc, #24]	@ (8001084 <HAL_IncTick+0x24>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4413      	add	r3, r2
 8001070:	4a04      	ldr	r2, [pc, #16]	@ (8001084 <HAL_IncTick+0x24>)
 8001072:	6013      	str	r3, [r2, #0]
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	20000008 	.word	0x20000008
 8001084:	20000200 	.word	0x20000200

08001088 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  return uwTick;
 800108c:	4b03      	ldr	r3, [pc, #12]	@ (800109c <HAL_GetTick+0x14>)
 800108e:	681b      	ldr	r3, [r3, #0]
}
 8001090:	4618      	mov	r0, r3
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	20000200 	.word	0x20000200

080010a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010a8:	f7ff ffee 	bl	8001088 <HAL_GetTick>
 80010ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010b8:	d005      	beq.n	80010c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ba:	4b0a      	ldr	r3, [pc, #40]	@ (80010e4 <HAL_Delay+0x44>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	461a      	mov	r2, r3
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	4413      	add	r3, r2
 80010c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010c6:	bf00      	nop
 80010c8:	f7ff ffde 	bl	8001088 <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d8f7      	bhi.n	80010c8 <HAL_Delay+0x28>
  {
  }
}
 80010d8:	bf00      	nop
 80010da:	bf00      	nop
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000008 	.word	0x20000008

080010e8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010f0:	2300      	movs	r3, #0
 80010f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d101      	bne.n	80010fe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e033      	b.n	8001166 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001102:	2b00      	cmp	r3, #0
 8001104:	d109      	bne.n	800111a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f7ff fdf8 	bl	8000cfc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2200      	movs	r2, #0
 8001110:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2200      	movs	r2, #0
 8001116:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111e:	f003 0310 	and.w	r3, r3, #16
 8001122:	2b00      	cmp	r3, #0
 8001124:	d118      	bne.n	8001158 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800112e:	f023 0302 	bic.w	r3, r3, #2
 8001132:	f043 0202 	orr.w	r2, r3, #2
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f000 faba 	bl	80016b4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2200      	movs	r2, #0
 8001144:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800114a:	f023 0303 	bic.w	r3, r3, #3
 800114e:	f043 0201 	orr.w	r2, r3, #1
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	641a      	str	r2, [r3, #64]	@ 0x40
 8001156:	e001      	b.n	800115c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001158:	2301      	movs	r3, #1
 800115a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2200      	movs	r2, #0
 8001160:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001164:	7bfb      	ldrb	r3, [r7, #15]
}
 8001166:	4618      	mov	r0, r3
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
	...

08001170 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001178:	2300      	movs	r3, #0
 800117a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001182:	2b01      	cmp	r3, #1
 8001184:	d101      	bne.n	800118a <HAL_ADC_Start+0x1a>
 8001186:	2302      	movs	r3, #2
 8001188:	e097      	b.n	80012ba <HAL_ADC_Start+0x14a>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2201      	movs	r2, #1
 800118e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	f003 0301 	and.w	r3, r3, #1
 800119c:	2b01      	cmp	r3, #1
 800119e:	d018      	beq.n	80011d2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	689a      	ldr	r2, [r3, #8]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f042 0201 	orr.w	r2, r2, #1
 80011ae:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80011b0:	4b45      	ldr	r3, [pc, #276]	@ (80012c8 <HAL_ADC_Start+0x158>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a45      	ldr	r2, [pc, #276]	@ (80012cc <HAL_ADC_Start+0x15c>)
 80011b6:	fba2 2303 	umull	r2, r3, r2, r3
 80011ba:	0c9a      	lsrs	r2, r3, #18
 80011bc:	4613      	mov	r3, r2
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	4413      	add	r3, r2
 80011c2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80011c4:	e002      	b.n	80011cc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	3b01      	subs	r3, #1
 80011ca:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d1f9      	bne.n	80011c6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	f003 0301 	and.w	r3, r3, #1
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d15f      	bne.n	80012a0 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80011e8:	f023 0301 	bic.w	r3, r3, #1
 80011ec:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d007      	beq.n	8001212 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001206:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800120a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001216:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800121a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800121e:	d106      	bne.n	800122e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001224:	f023 0206 	bic.w	r2, r3, #6
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	645a      	str	r2, [r3, #68]	@ 0x44
 800122c:	e002      	b.n	8001234 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2200      	movs	r2, #0
 8001232:	645a      	str	r2, [r3, #68]	@ 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2200      	movs	r2, #0
 8001238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800123c:	4b24      	ldr	r3, [pc, #144]	@ (80012d0 <HAL_ADC_Start+0x160>)
 800123e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001248:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f003 031f 	and.w	r3, r3, #31
 8001252:	2b00      	cmp	r3, #0
 8001254:	d10f      	bne.n	8001276 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d129      	bne.n	80012b8 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	689a      	ldr	r2, [r3, #8]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	e020      	b.n	80012b8 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a16      	ldr	r2, [pc, #88]	@ (80012d4 <HAL_ADC_Start+0x164>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d11b      	bne.n	80012b8 <HAL_ADC_Start+0x148>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d114      	bne.n	80012b8 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	689a      	ldr	r2, [r3, #8]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	e00b      	b.n	80012b8 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a4:	f043 0210 	orr.w	r2, r3, #16
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012b0:	f043 0201 	orr.w	r2, r3, #1
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3714      	adds	r7, #20
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	20000000 	.word	0x20000000
 80012cc:	431bde83 	.word	0x431bde83
 80012d0:	40012300 	.word	0x40012300
 80012d4:	40012000 	.word	0x40012000

080012d8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d101      	bne.n	80012ee <HAL_ADC_Stop+0x16>
 80012ea:	2302      	movs	r3, #2
 80012ec:	e021      	b.n	8001332 <HAL_ADC_Stop+0x5a>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2201      	movs	r2, #1
 80012f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	689a      	ldr	r2, [r3, #8]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f022 0201 	bic.w	r2, r2, #1
 8001304:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	2b00      	cmp	r3, #0
 8001312:	d109      	bne.n	8001328 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001318:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800131c:	f023 0301 	bic.w	r3, r3, #1
 8001320:	f043 0201 	orr.w	r2, r3, #1
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2200      	movs	r2, #0
 800132c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr

0800133e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b084      	sub	sp, #16
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
 8001346:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001348:	2300      	movs	r3, #0
 800134a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001356:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800135a:	d113      	bne.n	8001384 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001366:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800136a:	d10b      	bne.n	8001384 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001370:	f043 0220 	orr.w	r2, r3, #32
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2200      	movs	r2, #0
 800137c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e063      	b.n	800144c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001384:	f7ff fe80 	bl	8001088 <HAL_GetTick>
 8001388:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800138a:	e021      	b.n	80013d0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001392:	d01d      	beq.n	80013d0 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d007      	beq.n	80013aa <HAL_ADC_PollForConversion+0x6c>
 800139a:	f7ff fe75 	bl	8001088 <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	683a      	ldr	r2, [r7, #0]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d212      	bcs.n	80013d0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 0302 	and.w	r3, r3, #2
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d00b      	beq.n	80013d0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013bc:	f043 0204 	orr.w	r2, r3, #4
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 80013cc:	2303      	movs	r3, #3
 80013ce:	e03d      	b.n	800144c <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d1d6      	bne.n	800138c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f06f 0212 	mvn.w	r2, #18
 80013e6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ec:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d123      	bne.n	800144a <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001406:	2b00      	cmp	r3, #0
 8001408:	d11f      	bne.n	800144a <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001410:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001414:	2b00      	cmp	r3, #0
 8001416:	d006      	beq.n	8001426 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001422:	2b00      	cmp	r3, #0
 8001424:	d111      	bne.n	800144a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800142a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001436:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d105      	bne.n	800144a <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001442:	f043 0201 	orr.w	r2, r3, #1
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800144a:	2300      	movs	r3, #0
}
 800144c:	4618      	mov	r0, r3
 800144e:	3710      	adds	r7, #16
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001462:	4618      	mov	r0, r3
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
	...

08001470 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800147a:	2300      	movs	r3, #0
 800147c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001484:	2b01      	cmp	r3, #1
 8001486:	d101      	bne.n	800148c <HAL_ADC_ConfigChannel+0x1c>
 8001488:	2302      	movs	r3, #2
 800148a:	e105      	b.n	8001698 <HAL_ADC_ConfigChannel+0x228>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2201      	movs	r2, #1
 8001490:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2b09      	cmp	r3, #9
 800149a:	d925      	bls.n	80014e8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	68d9      	ldr	r1, [r3, #12]
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	461a      	mov	r2, r3
 80014aa:	4613      	mov	r3, r2
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	4413      	add	r3, r2
 80014b0:	3b1e      	subs	r3, #30
 80014b2:	2207      	movs	r2, #7
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	43da      	mvns	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	400a      	ands	r2, r1
 80014c0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	68d9      	ldr	r1, [r3, #12]
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	689a      	ldr	r2, [r3, #8]
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	4618      	mov	r0, r3
 80014d4:	4603      	mov	r3, r0
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	4403      	add	r3, r0
 80014da:	3b1e      	subs	r3, #30
 80014dc:	409a      	lsls	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	430a      	orrs	r2, r1
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	e022      	b.n	800152e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	6919      	ldr	r1, [r3, #16]
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	461a      	mov	r2, r3
 80014f6:	4613      	mov	r3, r2
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	4413      	add	r3, r2
 80014fc:	2207      	movs	r2, #7
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	43da      	mvns	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	400a      	ands	r2, r1
 800150a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6919      	ldr	r1, [r3, #16]
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	689a      	ldr	r2, [r3, #8]
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	b29b      	uxth	r3, r3
 800151c:	4618      	mov	r0, r3
 800151e:	4603      	mov	r3, r0
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	4403      	add	r3, r0
 8001524:	409a      	lsls	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	430a      	orrs	r2, r1
 800152c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	2b06      	cmp	r3, #6
 8001534:	d824      	bhi.n	8001580 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685a      	ldr	r2, [r3, #4]
 8001540:	4613      	mov	r3, r2
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	4413      	add	r3, r2
 8001546:	3b05      	subs	r3, #5
 8001548:	221f      	movs	r2, #31
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	43da      	mvns	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	400a      	ands	r2, r1
 8001556:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	b29b      	uxth	r3, r3
 8001564:	4618      	mov	r0, r3
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685a      	ldr	r2, [r3, #4]
 800156a:	4613      	mov	r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	4413      	add	r3, r2
 8001570:	3b05      	subs	r3, #5
 8001572:	fa00 f203 	lsl.w	r2, r0, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	430a      	orrs	r2, r1
 800157c:	635a      	str	r2, [r3, #52]	@ 0x34
 800157e:	e04c      	b.n	800161a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	2b0c      	cmp	r3, #12
 8001586:	d824      	bhi.n	80015d2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685a      	ldr	r2, [r3, #4]
 8001592:	4613      	mov	r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	4413      	add	r3, r2
 8001598:	3b23      	subs	r3, #35	@ 0x23
 800159a:	221f      	movs	r2, #31
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	43da      	mvns	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	400a      	ands	r2, r1
 80015a8:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	4618      	mov	r0, r3
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685a      	ldr	r2, [r3, #4]
 80015bc:	4613      	mov	r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	4413      	add	r3, r2
 80015c2:	3b23      	subs	r3, #35	@ 0x23
 80015c4:	fa00 f203 	lsl.w	r2, r0, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	430a      	orrs	r2, r1
 80015ce:	631a      	str	r2, [r3, #48]	@ 0x30
 80015d0:	e023      	b.n	800161a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685a      	ldr	r2, [r3, #4]
 80015dc:	4613      	mov	r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	4413      	add	r3, r2
 80015e2:	3b41      	subs	r3, #65	@ 0x41
 80015e4:	221f      	movs	r2, #31
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	43da      	mvns	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	400a      	ands	r2, r1
 80015f2:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	b29b      	uxth	r3, r3
 8001600:	4618      	mov	r0, r3
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685a      	ldr	r2, [r3, #4]
 8001606:	4613      	mov	r3, r2
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	4413      	add	r3, r2
 800160c:	3b41      	subs	r3, #65	@ 0x41
 800160e:	fa00 f203 	lsl.w	r2, r0, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	430a      	orrs	r2, r1
 8001618:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800161a:	4b22      	ldr	r3, [pc, #136]	@ (80016a4 <HAL_ADC_ConfigChannel+0x234>)
 800161c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a21      	ldr	r2, [pc, #132]	@ (80016a8 <HAL_ADC_ConfigChannel+0x238>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d109      	bne.n	800163c <HAL_ADC_ConfigChannel+0x1cc>
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2b12      	cmp	r3, #18
 800162e:	d105      	bne.n	800163c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a19      	ldr	r2, [pc, #100]	@ (80016a8 <HAL_ADC_ConfigChannel+0x238>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d123      	bne.n	800168e <HAL_ADC_ConfigChannel+0x21e>
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2b10      	cmp	r3, #16
 800164c:	d003      	beq.n	8001656 <HAL_ADC_ConfigChannel+0x1e6>
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2b11      	cmp	r3, #17
 8001654:	d11b      	bne.n	800168e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2b10      	cmp	r3, #16
 8001668:	d111      	bne.n	800168e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800166a:	4b10      	ldr	r3, [pc, #64]	@ (80016ac <HAL_ADC_ConfigChannel+0x23c>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a10      	ldr	r2, [pc, #64]	@ (80016b0 <HAL_ADC_ConfigChannel+0x240>)
 8001670:	fba2 2303 	umull	r2, r3, r2, r3
 8001674:	0c9a      	lsrs	r2, r3, #18
 8001676:	4613      	mov	r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	4413      	add	r3, r2
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001680:	e002      	b.n	8001688 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	3b01      	subs	r3, #1
 8001686:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d1f9      	bne.n	8001682 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001696:	2300      	movs	r3, #0
}
 8001698:	4618      	mov	r0, r3
 800169a:	3714      	adds	r7, #20
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	40012300 	.word	0x40012300
 80016a8:	40012000 	.word	0x40012000
 80016ac:	20000000 	.word	0x20000000
 80016b0:	431bde83 	.word	0x431bde83

080016b4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016bc:	4b79      	ldr	r3, [pc, #484]	@ (80018a4 <ADC_Init+0x1f0>)
 80016be:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	685a      	ldr	r2, [r3, #4]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	431a      	orrs	r2, r3
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	685a      	ldr	r2, [r3, #4]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80016e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	6859      	ldr	r1, [r3, #4]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	691b      	ldr	r3, [r3, #16]
 80016f4:	021a      	lsls	r2, r3, #8
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	430a      	orrs	r2, r1
 80016fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	685a      	ldr	r2, [r3, #4]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800170c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	6859      	ldr	r1, [r3, #4]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689a      	ldr	r2, [r3, #8]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	430a      	orrs	r2, r1
 800171e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	689a      	ldr	r2, [r3, #8]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800172e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6899      	ldr	r1, [r3, #8]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	68da      	ldr	r2, [r3, #12]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	430a      	orrs	r2, r1
 8001740:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001746:	4a58      	ldr	r2, [pc, #352]	@ (80018a8 <ADC_Init+0x1f4>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d022      	beq.n	8001792 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	689a      	ldr	r2, [r3, #8]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800175a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	6899      	ldr	r1, [r3, #8]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	430a      	orrs	r2, r1
 800176c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	689a      	ldr	r2, [r3, #8]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800177c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	6899      	ldr	r1, [r3, #8]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	430a      	orrs	r2, r1
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	e00f      	b.n	80017b2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	689a      	ldr	r2, [r3, #8]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80017a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	689a      	ldr	r2, [r3, #8]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80017b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	689a      	ldr	r2, [r3, #8]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f022 0202 	bic.w	r2, r2, #2
 80017c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	6899      	ldr	r1, [r3, #8]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	7e1b      	ldrb	r3, [r3, #24]
 80017cc:	005a      	lsls	r2, r3, #1
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	430a      	orrs	r2, r1
 80017d4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d01b      	beq.n	8001818 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	685a      	ldr	r2, [r3, #4]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80017ee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	685a      	ldr	r2, [r3, #4]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80017fe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	6859      	ldr	r1, [r3, #4]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800180a:	3b01      	subs	r3, #1
 800180c:	035a      	lsls	r2, r3, #13
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	430a      	orrs	r2, r1
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	e007      	b.n	8001828 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	685a      	ldr	r2, [r3, #4]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001826:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001836:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	3b01      	subs	r3, #1
 8001844:	051a      	lsls	r2, r3, #20
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	430a      	orrs	r2, r1
 800184c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	689a      	ldr	r2, [r3, #8]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800185c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	6899      	ldr	r1, [r3, #8]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800186a:	025a      	lsls	r2, r3, #9
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	430a      	orrs	r2, r1
 8001872:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	689a      	ldr	r2, [r3, #8]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001882:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6899      	ldr	r1, [r3, #8]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	029a      	lsls	r2, r3, #10
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	430a      	orrs	r2, r1
 8001896:	609a      	str	r2, [r3, #8]
}
 8001898:	bf00      	nop
 800189a:	3714      	adds	r7, #20
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	40012300 	.word	0x40012300
 80018a8:	0f000001 	.word	0x0f000001

080018ac <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d101      	bne.n	80018be <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e0ed      	b.n	8001a9a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d102      	bne.n	80018d0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f7ff fa92 	bl	8000df4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f042 0201 	orr.w	r2, r2, #1
 80018de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018e0:	f7ff fbd2 	bl	8001088 <HAL_GetTick>
 80018e4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80018e6:	e012      	b.n	800190e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018e8:	f7ff fbce 	bl	8001088 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b0a      	cmp	r3, #10
 80018f4:	d90b      	bls.n	800190e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018fa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2205      	movs	r2, #5
 8001906:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e0c5      	b.n	8001a9a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	2b00      	cmp	r3, #0
 800191a:	d0e5      	beq.n	80018e8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f022 0202 	bic.w	r2, r2, #2
 800192a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800192c:	f7ff fbac 	bl	8001088 <HAL_GetTick>
 8001930:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001932:	e012      	b.n	800195a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001934:	f7ff fba8 	bl	8001088 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b0a      	cmp	r3, #10
 8001940:	d90b      	bls.n	800195a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001946:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2205      	movs	r2, #5
 8001952:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e09f      	b.n	8001a9a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f003 0302 	and.w	r3, r3, #2
 8001964:	2b00      	cmp	r3, #0
 8001966:	d1e5      	bne.n	8001934 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	7e1b      	ldrb	r3, [r3, #24]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d108      	bne.n	8001982 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	e007      	b.n	8001992 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001990:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	7e5b      	ldrb	r3, [r3, #25]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d108      	bne.n	80019ac <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	e007      	b.n	80019bc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80019ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	7e9b      	ldrb	r3, [r3, #26]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d108      	bne.n	80019d6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f042 0220 	orr.w	r2, r2, #32
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	e007      	b.n	80019e6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f022 0220 	bic.w	r2, r2, #32
 80019e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	7edb      	ldrb	r3, [r3, #27]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d108      	bne.n	8001a00 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f022 0210 	bic.w	r2, r2, #16
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	e007      	b.n	8001a10 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f042 0210 	orr.w	r2, r2, #16
 8001a0e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	7f1b      	ldrb	r3, [r3, #28]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d108      	bne.n	8001a2a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f042 0208 	orr.w	r2, r2, #8
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	e007      	b.n	8001a3a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f022 0208 	bic.w	r2, r2, #8
 8001a38:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	7f5b      	ldrb	r3, [r3, #29]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d108      	bne.n	8001a54 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f042 0204 	orr.w	r2, r2, #4
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	e007      	b.n	8001a64 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f022 0204 	bic.w	r2, r2, #4
 8001a62:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689a      	ldr	r2, [r3, #8]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	431a      	orrs	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	691b      	ldr	r3, [r3, #16]
 8001a72:	431a      	orrs	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	695b      	ldr	r3, [r3, #20]
 8001a78:	ea42 0103 	orr.w	r1, r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	1e5a      	subs	r2, r3, #1
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	430a      	orrs	r2, r1
 8001a88:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2201      	movs	r2, #1
 8001a94:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
	...

08001aa4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b087      	sub	sp, #28
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001aba:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001abc:	7cfb      	ldrb	r3, [r7, #19]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d003      	beq.n	8001aca <HAL_CAN_ConfigFilter+0x26>
 8001ac2:	7cfb      	ldrb	r3, [r7, #19]
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	f040 80be 	bne.w	8001c46 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001aca:	4b65      	ldr	r3, [pc, #404]	@ (8001c60 <HAL_CAN_ConfigFilter+0x1bc>)
 8001acc:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001ad4:	f043 0201 	orr.w	r2, r3, #1
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001ae4:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af8:	021b      	lsls	r3, r3, #8
 8001afa:	431a      	orrs	r2, r3
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	695b      	ldr	r3, [r3, #20]
 8001b06:	f003 031f 	and.w	r3, r3, #31
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	43db      	mvns	r3, r3
 8001b1c:	401a      	ands	r2, r3
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	69db      	ldr	r3, [r3, #28]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d123      	bne.n	8001b74 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	43db      	mvns	r3, r3
 8001b36:	401a      	ands	r2, r3
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b4a:	683a      	ldr	r2, [r7, #0]
 8001b4c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b4e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	3248      	adds	r2, #72	@ 0x48
 8001b54:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b68:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b6a:	6979      	ldr	r1, [r7, #20]
 8001b6c:	3348      	adds	r3, #72	@ 0x48
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	440b      	add	r3, r1
 8001b72:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	69db      	ldr	r3, [r3, #28]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d122      	bne.n	8001bc2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	431a      	orrs	r2, r3
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001b9c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	3248      	adds	r2, #72	@ 0x48
 8001ba2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001bb6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001bb8:	6979      	ldr	r1, [r7, #20]
 8001bba:	3348      	adds	r3, #72	@ 0x48
 8001bbc:	00db      	lsls	r3, r3, #3
 8001bbe:	440b      	add	r3, r1
 8001bc0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	699b      	ldr	r3, [r3, #24]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d109      	bne.n	8001bde <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	401a      	ands	r2, r3
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001bdc:	e007      	b.n	8001bee <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	431a      	orrs	r2, r3
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d109      	bne.n	8001c0a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	401a      	ands	r2, r3
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001c08:	e007      	b.n	8001c1a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	431a      	orrs	r2, r3
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	6a1b      	ldr	r3, [r3, #32]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d107      	bne.n	8001c32 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	431a      	orrs	r2, r3
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001c38:	f023 0201 	bic.w	r2, r3, #1
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001c42:	2300      	movs	r3, #0
 8001c44:	e006      	b.n	8001c54 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c4a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
  }
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	371c      	adds	r7, #28
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	40006400 	.word	0x40006400

08001c64 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d12e      	bne.n	8001cd6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2202      	movs	r2, #2
 8001c7c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f022 0201 	bic.w	r2, r2, #1
 8001c8e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001c90:	f7ff f9fa 	bl	8001088 <HAL_GetTick>
 8001c94:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c96:	e012      	b.n	8001cbe <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c98:	f7ff f9f6 	bl	8001088 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b0a      	cmp	r3, #10
 8001ca4:	d90b      	bls.n	8001cbe <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001caa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2205      	movs	r2, #5
 8001cb6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e012      	b.n	8001ce4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d1e5      	bne.n	8001c98 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	e006      	b.n	8001ce4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cda:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
  }
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b089      	sub	sp, #36	@ 0x24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
 8001cf8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d00:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d0a:	7ffb      	ldrb	r3, [r7, #31]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d003      	beq.n	8001d18 <HAL_CAN_AddTxMessage+0x2c>
 8001d10:	7ffb      	ldrb	r3, [r7, #31]
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	f040 80b8 	bne.w	8001e88 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d10a      	bne.n	8001d38 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d105      	bne.n	8001d38 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f000 80a0 	beq.w	8001e78 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	0e1b      	lsrs	r3, r3, #24
 8001d3c:	f003 0303 	and.w	r3, r3, #3
 8001d40:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d907      	bls.n	8001d58 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d4c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e09e      	b.n	8001e96 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001d58:	2201      	movs	r2, #1
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	409a      	lsls	r2, r3
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d10d      	bne.n	8001d86 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001d74:	68f9      	ldr	r1, [r7, #12]
 8001d76:	6809      	ldr	r1, [r1, #0]
 8001d78:	431a      	orrs	r2, r3
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	3318      	adds	r3, #24
 8001d7e:	011b      	lsls	r3, r3, #4
 8001d80:	440b      	add	r3, r1
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	e00f      	b.n	8001da6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d90:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d96:	68f9      	ldr	r1, [r7, #12]
 8001d98:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001d9a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	3318      	adds	r3, #24
 8001da0:	011b      	lsls	r3, r3, #4
 8001da2:	440b      	add	r3, r1
 8001da4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6819      	ldr	r1, [r3, #0]
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	691a      	ldr	r2, [r3, #16]
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	3318      	adds	r3, #24
 8001db2:	011b      	lsls	r3, r3, #4
 8001db4:	440b      	add	r3, r1
 8001db6:	3304      	adds	r3, #4
 8001db8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	7d1b      	ldrb	r3, [r3, #20]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d111      	bne.n	8001de6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	3318      	adds	r3, #24
 8001dca:	011b      	lsls	r3, r3, #4
 8001dcc:	4413      	add	r3, r2
 8001dce:	3304      	adds	r3, #4
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	6811      	ldr	r1, [r2, #0]
 8001dd6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	3318      	adds	r3, #24
 8001dde:	011b      	lsls	r3, r3, #4
 8001de0:	440b      	add	r3, r1
 8001de2:	3304      	adds	r3, #4
 8001de4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	3307      	adds	r3, #7
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	061a      	lsls	r2, r3, #24
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	3306      	adds	r3, #6
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	041b      	lsls	r3, r3, #16
 8001df6:	431a      	orrs	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	3305      	adds	r3, #5
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	021b      	lsls	r3, r3, #8
 8001e00:	4313      	orrs	r3, r2
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	3204      	adds	r2, #4
 8001e06:	7812      	ldrb	r2, [r2, #0]
 8001e08:	4610      	mov	r0, r2
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	6811      	ldr	r1, [r2, #0]
 8001e0e:	ea43 0200 	orr.w	r2, r3, r0
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	011b      	lsls	r3, r3, #4
 8001e16:	440b      	add	r3, r1
 8001e18:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001e1c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	3303      	adds	r3, #3
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	061a      	lsls	r2, r3, #24
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	3302      	adds	r3, #2
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	041b      	lsls	r3, r3, #16
 8001e2e:	431a      	orrs	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	3301      	adds	r3, #1
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	021b      	lsls	r3, r3, #8
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	7812      	ldrb	r2, [r2, #0]
 8001e3e:	4610      	mov	r0, r2
 8001e40:	68fa      	ldr	r2, [r7, #12]
 8001e42:	6811      	ldr	r1, [r2, #0]
 8001e44:	ea43 0200 	orr.w	r2, r3, r0
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	011b      	lsls	r3, r3, #4
 8001e4c:	440b      	add	r3, r1
 8001e4e:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001e52:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	3318      	adds	r3, #24
 8001e5c:	011b      	lsls	r3, r3, #4
 8001e5e:	4413      	add	r3, r2
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	6811      	ldr	r1, [r2, #0]
 8001e66:	f043 0201 	orr.w	r2, r3, #1
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	3318      	adds	r3, #24
 8001e6e:	011b      	lsls	r3, r3, #4
 8001e70:	440b      	add	r3, r1
 8001e72:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001e74:	2300      	movs	r3, #0
 8001e76:	e00e      	b.n	8001e96 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e7c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e006      	b.n	8001e96 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e8c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
  }
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3724      	adds	r7, #36	@ 0x24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b087      	sub	sp, #28
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	60f8      	str	r0, [r7, #12]
 8001eaa:	60b9      	str	r1, [r7, #8]
 8001eac:	607a      	str	r2, [r7, #4]
 8001eae:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001eb6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001eb8:	7dfb      	ldrb	r3, [r7, #23]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d003      	beq.n	8001ec6 <HAL_CAN_GetRxMessage+0x24>
 8001ebe:	7dfb      	ldrb	r3, [r7, #23]
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	f040 80f3 	bne.w	80020ac <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d10e      	bne.n	8001eea <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	f003 0303 	and.w	r3, r3, #3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d116      	bne.n	8001f08 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ede:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e0e7      	b.n	80020ba <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	691b      	ldr	r3, [r3, #16]
 8001ef0:	f003 0303 	and.w	r3, r3, #3
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d107      	bne.n	8001f08 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001efc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e0d8      	b.n	80020ba <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	331b      	adds	r3, #27
 8001f10:	011b      	lsls	r3, r3, #4
 8001f12:	4413      	add	r3, r2
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0204 	and.w	r2, r3, #4
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d10c      	bne.n	8001f40 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	331b      	adds	r3, #27
 8001f2e:	011b      	lsls	r3, r3, #4
 8001f30:	4413      	add	r3, r2
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	0d5b      	lsrs	r3, r3, #21
 8001f36:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	601a      	str	r2, [r3, #0]
 8001f3e:	e00b      	b.n	8001f58 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	331b      	adds	r3, #27
 8001f48:	011b      	lsls	r3, r3, #4
 8001f4a:	4413      	add	r3, r2
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	08db      	lsrs	r3, r3, #3
 8001f50:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	331b      	adds	r3, #27
 8001f60:	011b      	lsls	r3, r3, #4
 8001f62:	4413      	add	r3, r2
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0202 	and.w	r2, r3, #2
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	331b      	adds	r3, #27
 8001f76:	011b      	lsls	r3, r3, #4
 8001f78:	4413      	add	r3, r2
 8001f7a:	3304      	adds	r3, #4
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 020f 	and.w	r2, r3, #15
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	331b      	adds	r3, #27
 8001f8e:	011b      	lsls	r3, r3, #4
 8001f90:	4413      	add	r3, r2
 8001f92:	3304      	adds	r3, #4
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	0a1b      	lsrs	r3, r3, #8
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	331b      	adds	r3, #27
 8001fa6:	011b      	lsls	r3, r3, #4
 8001fa8:	4413      	add	r3, r2
 8001faa:	3304      	adds	r3, #4
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	0c1b      	lsrs	r3, r3, #16
 8001fb0:	b29a      	uxth	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	011b      	lsls	r3, r3, #4
 8001fbe:	4413      	add	r3, r2
 8001fc0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	b2da      	uxtb	r2, r3
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	011b      	lsls	r3, r3, #4
 8001fd4:	4413      	add	r3, r2
 8001fd6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	0a1a      	lsrs	r2, r3, #8
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	b2d2      	uxtb	r2, r2
 8001fe4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	011b      	lsls	r3, r3, #4
 8001fee:	4413      	add	r3, r2
 8001ff0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	0c1a      	lsrs	r2, r3, #16
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	3302      	adds	r3, #2
 8001ffc:	b2d2      	uxtb	r2, r2
 8001ffe:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	011b      	lsls	r3, r3, #4
 8002008:	4413      	add	r3, r2
 800200a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	0e1a      	lsrs	r2, r3, #24
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	3303      	adds	r3, #3
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	011b      	lsls	r3, r3, #4
 8002022:	4413      	add	r3, r2
 8002024:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	3304      	adds	r3, #4
 800202e:	b2d2      	uxtb	r2, r2
 8002030:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	011b      	lsls	r3, r3, #4
 800203a:	4413      	add	r3, r2
 800203c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	0a1a      	lsrs	r2, r3, #8
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	3305      	adds	r3, #5
 8002048:	b2d2      	uxtb	r2, r2
 800204a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	011b      	lsls	r3, r3, #4
 8002054:	4413      	add	r3, r2
 8002056:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	0c1a      	lsrs	r2, r3, #16
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	3306      	adds	r3, #6
 8002062:	b2d2      	uxtb	r2, r2
 8002064:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	011b      	lsls	r3, r3, #4
 800206e:	4413      	add	r3, r2
 8002070:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	0e1a      	lsrs	r2, r3, #24
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	3307      	adds	r3, #7
 800207c:	b2d2      	uxtb	r2, r2
 800207e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d108      	bne.n	8002098 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68da      	ldr	r2, [r3, #12]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f042 0220 	orr.w	r2, r2, #32
 8002094:	60da      	str	r2, [r3, #12]
 8002096:	e007      	b.n	80020a8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	691a      	ldr	r2, [r3, #16]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f042 0220 	orr.w	r2, r2, #32
 80020a6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80020a8:	2300      	movs	r3, #0
 80020aa:	e006      	b.n	80020ba <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
  }
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	371c      	adds	r7, #28
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80020c6:	b480      	push	{r7}
 80020c8:	b085      	sub	sp, #20
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
 80020ce:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020d6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80020d8:	7bfb      	ldrb	r3, [r7, #15]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d002      	beq.n	80020e4 <HAL_CAN_ActivateNotification+0x1e>
 80020de:	7bfb      	ldrb	r3, [r7, #15]
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d109      	bne.n	80020f8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6959      	ldr	r1, [r3, #20]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	430a      	orrs	r2, r1
 80020f2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80020f4:	2300      	movs	r3, #0
 80020f6:	e006      	b.n	8002106 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020fc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
  }
}
 8002106:	4618      	mov	r0, r3
 8002108:	3714      	adds	r7, #20
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr

08002112 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b08a      	sub	sp, #40	@ 0x28
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800211a:	2300      	movs	r3, #0
 800211c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	695b      	ldr	r3, [r3, #20]
 8002124:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800214e:	6a3b      	ldr	r3, [r7, #32]
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	2b00      	cmp	r3, #0
 8002156:	d07c      	beq.n	8002252 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	2b00      	cmp	r3, #0
 8002160:	d023      	beq.n	80021aa <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2201      	movs	r2, #1
 8002168:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d003      	beq.n	800217c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f000 f983 	bl	8002480 <HAL_CAN_TxMailbox0CompleteCallback>
 800217a:	e016      	b.n	80021aa <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	f003 0304 	and.w	r3, r3, #4
 8002182:	2b00      	cmp	r3, #0
 8002184:	d004      	beq.n	8002190 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002188:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800218c:	627b      	str	r3, [r7, #36]	@ 0x24
 800218e:	e00c      	b.n	80021aa <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	f003 0308 	and.w	r3, r3, #8
 8002196:	2b00      	cmp	r3, #0
 8002198:	d004      	beq.n	80021a4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800219a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800219c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80021a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80021a2:	e002      	b.n	80021aa <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f000 f989 	bl	80024bc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d024      	beq.n	80021fe <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021bc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d003      	beq.n	80021d0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f000 f963 	bl	8002494 <HAL_CAN_TxMailbox1CompleteCallback>
 80021ce:	e016      	b.n	80021fe <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d004      	beq.n	80021e4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80021da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021dc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80021e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80021e2:	e00c      	b.n	80021fe <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d004      	beq.n	80021f8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80021ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80021f6:	e002      	b.n	80021fe <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f000 f969 	bl	80024d0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d024      	beq.n	8002252 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002210:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d003      	beq.n	8002224 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f000 f943 	bl	80024a8 <HAL_CAN_TxMailbox2CompleteCallback>
 8002222:	e016      	b.n	8002252 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d004      	beq.n	8002238 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800222e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002230:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002234:	627b      	str	r3, [r7, #36]	@ 0x24
 8002236:	e00c      	b.n	8002252 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d004      	beq.n	800224c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002244:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002248:	627b      	str	r3, [r7, #36]	@ 0x24
 800224a:	e002      	b.n	8002252 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f000 f949 	bl	80024e4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002252:	6a3b      	ldr	r3, [r7, #32]
 8002254:	f003 0308 	and.w	r3, r3, #8
 8002258:	2b00      	cmp	r3, #0
 800225a:	d00c      	beq.n	8002276 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	f003 0310 	and.w	r3, r3, #16
 8002262:	2b00      	cmp	r3, #0
 8002264:	d007      	beq.n	8002276 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002268:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800226c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2210      	movs	r2, #16
 8002274:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002276:	6a3b      	ldr	r3, [r7, #32]
 8002278:	f003 0304 	and.w	r3, r3, #4
 800227c:	2b00      	cmp	r3, #0
 800227e:	d00b      	beq.n	8002298 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	f003 0308 	and.w	r3, r3, #8
 8002286:	2b00      	cmp	r3, #0
 8002288:	d006      	beq.n	8002298 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2208      	movs	r2, #8
 8002290:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f000 f930 	bl	80024f8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002298:	6a3b      	ldr	r3, [r7, #32]
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d009      	beq.n	80022b6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	f003 0303 	and.w	r3, r3, #3
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d002      	beq.n	80022b6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f7fe fa21 	bl	80006f8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80022b6:	6a3b      	ldr	r3, [r7, #32]
 80022b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00c      	beq.n	80022da <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	f003 0310 	and.w	r3, r3, #16
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d007      	beq.n	80022da <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80022ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022cc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022d0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2210      	movs	r2, #16
 80022d8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80022da:	6a3b      	ldr	r3, [r7, #32]
 80022dc:	f003 0320 	and.w	r3, r3, #32
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d00b      	beq.n	80022fc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	f003 0308 	and.w	r3, r3, #8
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d006      	beq.n	80022fc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2208      	movs	r2, #8
 80022f4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 f912 	bl	8002520 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80022fc:	6a3b      	ldr	r3, [r7, #32]
 80022fe:	f003 0310 	and.w	r3, r3, #16
 8002302:	2b00      	cmp	r3, #0
 8002304:	d009      	beq.n	800231a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	f003 0303 	and.w	r3, r3, #3
 8002310:	2b00      	cmp	r3, #0
 8002312:	d002      	beq.n	800231a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f000 f8f9 	bl	800250c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800231a:	6a3b      	ldr	r3, [r7, #32]
 800231c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00b      	beq.n	800233c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	f003 0310 	and.w	r3, r3, #16
 800232a:	2b00      	cmp	r3, #0
 800232c:	d006      	beq.n	800233c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2210      	movs	r2, #16
 8002334:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f000 f8fc 	bl	8002534 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800233c:	6a3b      	ldr	r3, [r7, #32]
 800233e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00b      	beq.n	800235e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	f003 0308 	and.w	r3, r3, #8
 800234c:	2b00      	cmp	r3, #0
 800234e:	d006      	beq.n	800235e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2208      	movs	r2, #8
 8002356:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 f8f5 	bl	8002548 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800235e:	6a3b      	ldr	r3, [r7, #32]
 8002360:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d07b      	beq.n	8002460 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	f003 0304 	and.w	r3, r3, #4
 800236e:	2b00      	cmp	r3, #0
 8002370:	d072      	beq.n	8002458 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002372:	6a3b      	ldr	r3, [r7, #32]
 8002374:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002378:	2b00      	cmp	r3, #0
 800237a:	d008      	beq.n	800238e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002382:	2b00      	cmp	r3, #0
 8002384:	d003      	beq.n	800238e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002388:	f043 0301 	orr.w	r3, r3, #1
 800238c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800238e:	6a3b      	ldr	r3, [r7, #32]
 8002390:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002394:	2b00      	cmp	r3, #0
 8002396:	d008      	beq.n	80023aa <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d003      	beq.n	80023aa <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80023a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a4:	f043 0302 	orr.w	r3, r3, #2
 80023a8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80023aa:	6a3b      	ldr	r3, [r7, #32]
 80023ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d008      	beq.n	80023c6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d003      	beq.n	80023c6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80023be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c0:	f043 0304 	orr.w	r3, r3, #4
 80023c4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80023c6:	6a3b      	ldr	r3, [r7, #32]
 80023c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d043      	beq.n	8002458 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d03e      	beq.n	8002458 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80023e0:	2b60      	cmp	r3, #96	@ 0x60
 80023e2:	d02b      	beq.n	800243c <HAL_CAN_IRQHandler+0x32a>
 80023e4:	2b60      	cmp	r3, #96	@ 0x60
 80023e6:	d82e      	bhi.n	8002446 <HAL_CAN_IRQHandler+0x334>
 80023e8:	2b50      	cmp	r3, #80	@ 0x50
 80023ea:	d022      	beq.n	8002432 <HAL_CAN_IRQHandler+0x320>
 80023ec:	2b50      	cmp	r3, #80	@ 0x50
 80023ee:	d82a      	bhi.n	8002446 <HAL_CAN_IRQHandler+0x334>
 80023f0:	2b40      	cmp	r3, #64	@ 0x40
 80023f2:	d019      	beq.n	8002428 <HAL_CAN_IRQHandler+0x316>
 80023f4:	2b40      	cmp	r3, #64	@ 0x40
 80023f6:	d826      	bhi.n	8002446 <HAL_CAN_IRQHandler+0x334>
 80023f8:	2b30      	cmp	r3, #48	@ 0x30
 80023fa:	d010      	beq.n	800241e <HAL_CAN_IRQHandler+0x30c>
 80023fc:	2b30      	cmp	r3, #48	@ 0x30
 80023fe:	d822      	bhi.n	8002446 <HAL_CAN_IRQHandler+0x334>
 8002400:	2b10      	cmp	r3, #16
 8002402:	d002      	beq.n	800240a <HAL_CAN_IRQHandler+0x2f8>
 8002404:	2b20      	cmp	r3, #32
 8002406:	d005      	beq.n	8002414 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002408:	e01d      	b.n	8002446 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800240a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800240c:	f043 0308 	orr.w	r3, r3, #8
 8002410:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002412:	e019      	b.n	8002448 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002416:	f043 0310 	orr.w	r3, r3, #16
 800241a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800241c:	e014      	b.n	8002448 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800241e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002420:	f043 0320 	orr.w	r3, r3, #32
 8002424:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002426:	e00f      	b.n	8002448 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800242a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800242e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002430:	e00a      	b.n	8002448 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002434:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002438:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800243a:	e005      	b.n	8002448 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800243c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800243e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002442:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002444:	e000      	b.n	8002448 <HAL_CAN_IRQHandler+0x336>
            break;
 8002446:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	699a      	ldr	r2, [r3, #24]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002456:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2204      	movs	r2, #4
 800245e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002462:	2b00      	cmp	r3, #0
 8002464:	d008      	beq.n	8002478 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800246a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800246c:	431a      	orrs	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 f872 	bl	800255c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002478:	bf00      	nop
 800247a:	3728      	adds	r7, #40	@ 0x28
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80024d8:	bf00      	nop
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002528:	bf00      	nop
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002550:	bf00      	nop
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002564:	bf00      	nop
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f003 0307 	and.w	r3, r3, #7
 800257e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002580:	4b0c      	ldr	r3, [pc, #48]	@ (80025b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002586:	68ba      	ldr	r2, [r7, #8]
 8002588:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800258c:	4013      	ands	r3, r2
 800258e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002598:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800259c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025a2:	4a04      	ldr	r2, [pc, #16]	@ (80025b4 <__NVIC_SetPriorityGrouping+0x44>)
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	60d3      	str	r3, [r2, #12]
}
 80025a8:	bf00      	nop
 80025aa:	3714      	adds	r7, #20
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	e000ed00 	.word	0xe000ed00

080025b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025bc:	4b04      	ldr	r3, [pc, #16]	@ (80025d0 <__NVIC_GetPriorityGrouping+0x18>)
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	0a1b      	lsrs	r3, r3, #8
 80025c2:	f003 0307 	and.w	r3, r3, #7
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr
 80025d0:	e000ed00 	.word	0xe000ed00

080025d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	4603      	mov	r3, r0
 80025dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	db0b      	blt.n	80025fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025e6:	79fb      	ldrb	r3, [r7, #7]
 80025e8:	f003 021f 	and.w	r2, r3, #31
 80025ec:	4907      	ldr	r1, [pc, #28]	@ (800260c <__NVIC_EnableIRQ+0x38>)
 80025ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f2:	095b      	lsrs	r3, r3, #5
 80025f4:	2001      	movs	r0, #1
 80025f6:	fa00 f202 	lsl.w	r2, r0, r2
 80025fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025fe:	bf00      	nop
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	e000e100 	.word	0xe000e100

08002610 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	4603      	mov	r3, r0
 8002618:	6039      	str	r1, [r7, #0]
 800261a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800261c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002620:	2b00      	cmp	r3, #0
 8002622:	db0a      	blt.n	800263a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	b2da      	uxtb	r2, r3
 8002628:	490c      	ldr	r1, [pc, #48]	@ (800265c <__NVIC_SetPriority+0x4c>)
 800262a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262e:	0112      	lsls	r2, r2, #4
 8002630:	b2d2      	uxtb	r2, r2
 8002632:	440b      	add	r3, r1
 8002634:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002638:	e00a      	b.n	8002650 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	b2da      	uxtb	r2, r3
 800263e:	4908      	ldr	r1, [pc, #32]	@ (8002660 <__NVIC_SetPriority+0x50>)
 8002640:	79fb      	ldrb	r3, [r7, #7]
 8002642:	f003 030f 	and.w	r3, r3, #15
 8002646:	3b04      	subs	r3, #4
 8002648:	0112      	lsls	r2, r2, #4
 800264a:	b2d2      	uxtb	r2, r2
 800264c:	440b      	add	r3, r1
 800264e:	761a      	strb	r2, [r3, #24]
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	e000e100 	.word	0xe000e100
 8002660:	e000ed00 	.word	0xe000ed00

08002664 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002664:	b480      	push	{r7}
 8002666:	b089      	sub	sp, #36	@ 0x24
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f003 0307 	and.w	r3, r3, #7
 8002676:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	f1c3 0307 	rsb	r3, r3, #7
 800267e:	2b04      	cmp	r3, #4
 8002680:	bf28      	it	cs
 8002682:	2304      	movcs	r3, #4
 8002684:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	3304      	adds	r3, #4
 800268a:	2b06      	cmp	r3, #6
 800268c:	d902      	bls.n	8002694 <NVIC_EncodePriority+0x30>
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	3b03      	subs	r3, #3
 8002692:	e000      	b.n	8002696 <NVIC_EncodePriority+0x32>
 8002694:	2300      	movs	r3, #0
 8002696:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002698:	f04f 32ff 	mov.w	r2, #4294967295
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	43da      	mvns	r2, r3
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	401a      	ands	r2, r3
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026ac:	f04f 31ff 	mov.w	r1, #4294967295
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	fa01 f303 	lsl.w	r3, r1, r3
 80026b6:	43d9      	mvns	r1, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026bc:	4313      	orrs	r3, r2
         );
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3724      	adds	r7, #36	@ 0x24
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
	...

080026cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	3b01      	subs	r3, #1
 80026d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026dc:	d301      	bcc.n	80026e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026de:	2301      	movs	r3, #1
 80026e0:	e00f      	b.n	8002702 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026e2:	4a0a      	ldr	r2, [pc, #40]	@ (800270c <SysTick_Config+0x40>)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	3b01      	subs	r3, #1
 80026e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026ea:	210f      	movs	r1, #15
 80026ec:	f04f 30ff 	mov.w	r0, #4294967295
 80026f0:	f7ff ff8e 	bl	8002610 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026f4:	4b05      	ldr	r3, [pc, #20]	@ (800270c <SysTick_Config+0x40>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026fa:	4b04      	ldr	r3, [pc, #16]	@ (800270c <SysTick_Config+0x40>)
 80026fc:	2207      	movs	r2, #7
 80026fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	e000e010 	.word	0xe000e010

08002710 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f7ff ff29 	bl	8002570 <__NVIC_SetPriorityGrouping>
}
 800271e:	bf00      	nop
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002726:	b580      	push	{r7, lr}
 8002728:	b086      	sub	sp, #24
 800272a:	af00      	add	r7, sp, #0
 800272c:	4603      	mov	r3, r0
 800272e:	60b9      	str	r1, [r7, #8]
 8002730:	607a      	str	r2, [r7, #4]
 8002732:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002734:	2300      	movs	r3, #0
 8002736:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002738:	f7ff ff3e 	bl	80025b8 <__NVIC_GetPriorityGrouping>
 800273c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	68b9      	ldr	r1, [r7, #8]
 8002742:	6978      	ldr	r0, [r7, #20]
 8002744:	f7ff ff8e 	bl	8002664 <NVIC_EncodePriority>
 8002748:	4602      	mov	r2, r0
 800274a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800274e:	4611      	mov	r1, r2
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff ff5d 	bl	8002610 <__NVIC_SetPriority>
}
 8002756:	bf00      	nop
 8002758:	3718      	adds	r7, #24
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b082      	sub	sp, #8
 8002762:	af00      	add	r7, sp, #0
 8002764:	4603      	mov	r3, r0
 8002766:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276c:	4618      	mov	r0, r3
 800276e:	f7ff ff31 	bl	80025d4 <__NVIC_EnableIRQ>
}
 8002772:	bf00      	nop
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b082      	sub	sp, #8
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f7ff ffa2 	bl	80026cc <SysTick_Config>
 8002788:	4603      	mov	r3, r0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
	...

08002794 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002794:	b480      	push	{r7}
 8002796:	b089      	sub	sp, #36	@ 0x24
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800279e:	2300      	movs	r3, #0
 80027a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027a2:	2300      	movs	r3, #0
 80027a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027a6:	2300      	movs	r3, #0
 80027a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027aa:	2300      	movs	r3, #0
 80027ac:	61fb      	str	r3, [r7, #28]
 80027ae:	e159      	b.n	8002a64 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027b0:	2201      	movs	r2, #1
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	697a      	ldr	r2, [r7, #20]
 80027c0:	4013      	ands	r3, r2
 80027c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	f040 8148 	bne.w	8002a5e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f003 0303 	and.w	r3, r3, #3
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d005      	beq.n	80027e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d130      	bne.n	8002848 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	2203      	movs	r2, #3
 80027f2:	fa02 f303 	lsl.w	r3, r2, r3
 80027f6:	43db      	mvns	r3, r3
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	4013      	ands	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	68da      	ldr	r2, [r3, #12]
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	fa02 f303 	lsl.w	r3, r2, r3
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	4313      	orrs	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800281c:	2201      	movs	r2, #1
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	43db      	mvns	r3, r3
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	4013      	ands	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	091b      	lsrs	r3, r3, #4
 8002832:	f003 0201 	and.w	r2, r3, #1
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	4313      	orrs	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f003 0303 	and.w	r3, r3, #3
 8002850:	2b03      	cmp	r3, #3
 8002852:	d017      	beq.n	8002884 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	2203      	movs	r2, #3
 8002860:	fa02 f303 	lsl.w	r3, r2, r3
 8002864:	43db      	mvns	r3, r3
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	4013      	ands	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	689a      	ldr	r2, [r3, #8]
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	4313      	orrs	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f003 0303 	and.w	r3, r3, #3
 800288c:	2b02      	cmp	r3, #2
 800288e:	d123      	bne.n	80028d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	08da      	lsrs	r2, r3, #3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	3208      	adds	r2, #8
 8002898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800289c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	f003 0307 	and.w	r3, r3, #7
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	220f      	movs	r2, #15
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	43db      	mvns	r3, r3
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	4013      	ands	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	691a      	ldr	r2, [r3, #16]
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	f003 0307 	and.w	r3, r3, #7
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	08da      	lsrs	r2, r3, #3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	3208      	adds	r2, #8
 80028d2:	69b9      	ldr	r1, [r7, #24]
 80028d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	2203      	movs	r2, #3
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	43db      	mvns	r3, r3
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	4013      	ands	r3, r2
 80028ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f003 0203 	and.w	r2, r3, #3
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	4313      	orrs	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002914:	2b00      	cmp	r3, #0
 8002916:	f000 80a2 	beq.w	8002a5e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800291a:	2300      	movs	r3, #0
 800291c:	60fb      	str	r3, [r7, #12]
 800291e:	4b57      	ldr	r3, [pc, #348]	@ (8002a7c <HAL_GPIO_Init+0x2e8>)
 8002920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002922:	4a56      	ldr	r2, [pc, #344]	@ (8002a7c <HAL_GPIO_Init+0x2e8>)
 8002924:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002928:	6453      	str	r3, [r2, #68]	@ 0x44
 800292a:	4b54      	ldr	r3, [pc, #336]	@ (8002a7c <HAL_GPIO_Init+0x2e8>)
 800292c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800292e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002932:	60fb      	str	r3, [r7, #12]
 8002934:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002936:	4a52      	ldr	r2, [pc, #328]	@ (8002a80 <HAL_GPIO_Init+0x2ec>)
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	089b      	lsrs	r3, r3, #2
 800293c:	3302      	adds	r3, #2
 800293e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002942:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	f003 0303 	and.w	r3, r3, #3
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	220f      	movs	r2, #15
 800294e:	fa02 f303 	lsl.w	r3, r2, r3
 8002952:	43db      	mvns	r3, r3
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	4013      	ands	r3, r2
 8002958:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a49      	ldr	r2, [pc, #292]	@ (8002a84 <HAL_GPIO_Init+0x2f0>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d019      	beq.n	8002996 <HAL_GPIO_Init+0x202>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a48      	ldr	r2, [pc, #288]	@ (8002a88 <HAL_GPIO_Init+0x2f4>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d013      	beq.n	8002992 <HAL_GPIO_Init+0x1fe>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a47      	ldr	r2, [pc, #284]	@ (8002a8c <HAL_GPIO_Init+0x2f8>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d00d      	beq.n	800298e <HAL_GPIO_Init+0x1fa>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a46      	ldr	r2, [pc, #280]	@ (8002a90 <HAL_GPIO_Init+0x2fc>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d007      	beq.n	800298a <HAL_GPIO_Init+0x1f6>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a45      	ldr	r2, [pc, #276]	@ (8002a94 <HAL_GPIO_Init+0x300>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d101      	bne.n	8002986 <HAL_GPIO_Init+0x1f2>
 8002982:	2304      	movs	r3, #4
 8002984:	e008      	b.n	8002998 <HAL_GPIO_Init+0x204>
 8002986:	2307      	movs	r3, #7
 8002988:	e006      	b.n	8002998 <HAL_GPIO_Init+0x204>
 800298a:	2303      	movs	r3, #3
 800298c:	e004      	b.n	8002998 <HAL_GPIO_Init+0x204>
 800298e:	2302      	movs	r3, #2
 8002990:	e002      	b.n	8002998 <HAL_GPIO_Init+0x204>
 8002992:	2301      	movs	r3, #1
 8002994:	e000      	b.n	8002998 <HAL_GPIO_Init+0x204>
 8002996:	2300      	movs	r3, #0
 8002998:	69fa      	ldr	r2, [r7, #28]
 800299a:	f002 0203 	and.w	r2, r2, #3
 800299e:	0092      	lsls	r2, r2, #2
 80029a0:	4093      	lsls	r3, r2
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029a8:	4935      	ldr	r1, [pc, #212]	@ (8002a80 <HAL_GPIO_Init+0x2ec>)
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	089b      	lsrs	r3, r3, #2
 80029ae:	3302      	adds	r3, #2
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029b6:	4b38      	ldr	r3, [pc, #224]	@ (8002a98 <HAL_GPIO_Init+0x304>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	43db      	mvns	r3, r3
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	4013      	ands	r3, r2
 80029c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d003      	beq.n	80029da <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80029d2:	69ba      	ldr	r2, [r7, #24]
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029da:	4a2f      	ldr	r2, [pc, #188]	@ (8002a98 <HAL_GPIO_Init+0x304>)
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029e0:	4b2d      	ldr	r3, [pc, #180]	@ (8002a98 <HAL_GPIO_Init+0x304>)
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	43db      	mvns	r3, r3
 80029ea:	69ba      	ldr	r2, [r7, #24]
 80029ec:	4013      	ands	r3, r2
 80029ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d003      	beq.n	8002a04 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a04:	4a24      	ldr	r2, [pc, #144]	@ (8002a98 <HAL_GPIO_Init+0x304>)
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a0a:	4b23      	ldr	r3, [pc, #140]	@ (8002a98 <HAL_GPIO_Init+0x304>)
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	43db      	mvns	r3, r3
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	4013      	ands	r3, r2
 8002a18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d003      	beq.n	8002a2e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a2e:	4a1a      	ldr	r2, [pc, #104]	@ (8002a98 <HAL_GPIO_Init+0x304>)
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a34:	4b18      	ldr	r3, [pc, #96]	@ (8002a98 <HAL_GPIO_Init+0x304>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	43db      	mvns	r3, r3
 8002a3e:	69ba      	ldr	r2, [r7, #24]
 8002a40:	4013      	ands	r3, r2
 8002a42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d003      	beq.n	8002a58 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a58:	4a0f      	ldr	r2, [pc, #60]	@ (8002a98 <HAL_GPIO_Init+0x304>)
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	3301      	adds	r3, #1
 8002a62:	61fb      	str	r3, [r7, #28]
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	2b0f      	cmp	r3, #15
 8002a68:	f67f aea2 	bls.w	80027b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a6c:	bf00      	nop
 8002a6e:	bf00      	nop
 8002a70:	3724      	adds	r7, #36	@ 0x24
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	40023800 	.word	0x40023800
 8002a80:	40013800 	.word	0x40013800
 8002a84:	40020000 	.word	0x40020000
 8002a88:	40020400 	.word	0x40020400
 8002a8c:	40020800 	.word	0x40020800
 8002a90:	40020c00 	.word	0x40020c00
 8002a94:	40021000 	.word	0x40021000
 8002a98:	40013c00 	.word	0x40013c00

08002a9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	691a      	ldr	r2, [r3, #16]
 8002aac:	887b      	ldrh	r3, [r7, #2]
 8002aae:	4013      	ands	r3, r2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d002      	beq.n	8002aba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	73fb      	strb	r3, [r7, #15]
 8002ab8:	e001      	b.n	8002abe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002aba:	2300      	movs	r3, #0
 8002abc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3714      	adds	r7, #20
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	807b      	strh	r3, [r7, #2]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002adc:	787b      	ldrb	r3, [r7, #1]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d003      	beq.n	8002aea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ae2:	887a      	ldrh	r2, [r7, #2]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ae8:	e003      	b.n	8002af2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002aea:	887b      	ldrh	r3, [r7, #2]
 8002aec:	041a      	lsls	r2, r3, #16
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	619a      	str	r2, [r3, #24]
}
 8002af2:	bf00      	nop
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr

08002afe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002afe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b00:	b08f      	sub	sp, #60	@ 0x3c
 8002b02:	af0a      	add	r7, sp, #40	@ 0x28
 8002b04:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d101      	bne.n	8002b10 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e116      	b.n	8002d3e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d106      	bne.n	8002b30 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f005 ff06 	bl	800893c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2203      	movs	r2, #3
 8002b34:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d102      	bne.n	8002b4a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f002 fa25 	bl	8004f9e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	603b      	str	r3, [r7, #0]
 8002b5a:	687e      	ldr	r6, [r7, #4]
 8002b5c:	466d      	mov	r5, sp
 8002b5e:	f106 0410 	add.w	r4, r6, #16
 8002b62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b6a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b6e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b72:	1d33      	adds	r3, r6, #4
 8002b74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b76:	6838      	ldr	r0, [r7, #0]
 8002b78:	f002 f8fc 	bl	8004d74 <USB_CoreInit>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d005      	beq.n	8002b8e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2202      	movs	r2, #2
 8002b86:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e0d7      	b.n	8002d3e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2100      	movs	r1, #0
 8002b94:	4618      	mov	r0, r3
 8002b96:	f002 fa13 	bl	8004fc0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	73fb      	strb	r3, [r7, #15]
 8002b9e:	e04a      	b.n	8002c36 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ba0:	7bfa      	ldrb	r2, [r7, #15]
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	4413      	add	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	440b      	add	r3, r1
 8002bae:	333d      	adds	r3, #61	@ 0x3d
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002bb4:	7bfa      	ldrb	r2, [r7, #15]
 8002bb6:	6879      	ldr	r1, [r7, #4]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	4413      	add	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	440b      	add	r3, r1
 8002bc2:	333c      	adds	r3, #60	@ 0x3c
 8002bc4:	7bfa      	ldrb	r2, [r7, #15]
 8002bc6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002bc8:	7bfa      	ldrb	r2, [r7, #15]
 8002bca:	7bfb      	ldrb	r3, [r7, #15]
 8002bcc:	b298      	uxth	r0, r3
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	4413      	add	r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	440b      	add	r3, r1
 8002bda:	3344      	adds	r3, #68	@ 0x44
 8002bdc:	4602      	mov	r2, r0
 8002bde:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002be0:	7bfa      	ldrb	r2, [r7, #15]
 8002be2:	6879      	ldr	r1, [r7, #4]
 8002be4:	4613      	mov	r3, r2
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	4413      	add	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	440b      	add	r3, r1
 8002bee:	3340      	adds	r3, #64	@ 0x40
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002bf4:	7bfa      	ldrb	r2, [r7, #15]
 8002bf6:	6879      	ldr	r1, [r7, #4]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	440b      	add	r3, r1
 8002c02:	3348      	adds	r3, #72	@ 0x48
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c08:	7bfa      	ldrb	r2, [r7, #15]
 8002c0a:	6879      	ldr	r1, [r7, #4]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	4413      	add	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	440b      	add	r3, r1
 8002c16:	334c      	adds	r3, #76	@ 0x4c
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c1c:	7bfa      	ldrb	r2, [r7, #15]
 8002c1e:	6879      	ldr	r1, [r7, #4]
 8002c20:	4613      	mov	r3, r2
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	4413      	add	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	440b      	add	r3, r1
 8002c2a:	3354      	adds	r3, #84	@ 0x54
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c30:	7bfb      	ldrb	r3, [r7, #15]
 8002c32:	3301      	adds	r3, #1
 8002c34:	73fb      	strb	r3, [r7, #15]
 8002c36:	7bfa      	ldrb	r2, [r7, #15]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d3af      	bcc.n	8002ba0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c40:	2300      	movs	r3, #0
 8002c42:	73fb      	strb	r3, [r7, #15]
 8002c44:	e044      	b.n	8002cd0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c46:	7bfa      	ldrb	r2, [r7, #15]
 8002c48:	6879      	ldr	r1, [r7, #4]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	4413      	add	r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	440b      	add	r3, r1
 8002c54:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8002c58:	2200      	movs	r2, #0
 8002c5a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c5c:	7bfa      	ldrb	r2, [r7, #15]
 8002c5e:	6879      	ldr	r1, [r7, #4]
 8002c60:	4613      	mov	r3, r2
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	4413      	add	r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	440b      	add	r3, r1
 8002c6a:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8002c6e:	7bfa      	ldrb	r2, [r7, #15]
 8002c70:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c72:	7bfa      	ldrb	r2, [r7, #15]
 8002c74:	6879      	ldr	r1, [r7, #4]
 8002c76:	4613      	mov	r3, r2
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	4413      	add	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	440b      	add	r3, r1
 8002c80:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8002c84:	2200      	movs	r2, #0
 8002c86:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c88:	7bfa      	ldrb	r2, [r7, #15]
 8002c8a:	6879      	ldr	r1, [r7, #4]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	4413      	add	r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	440b      	add	r3, r1
 8002c96:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ca0:	6879      	ldr	r1, [r7, #4]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	00db      	lsls	r3, r3, #3
 8002ca6:	4413      	add	r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	440b      	add	r3, r1
 8002cac:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002cb4:	7bfa      	ldrb	r2, [r7, #15]
 8002cb6:	6879      	ldr	r1, [r7, #4]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	4413      	add	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	440b      	add	r3, r1
 8002cc2:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cca:	7bfb      	ldrb	r3, [r7, #15]
 8002ccc:	3301      	adds	r3, #1
 8002cce:	73fb      	strb	r3, [r7, #15]
 8002cd0:	7bfa      	ldrb	r2, [r7, #15]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d3b5      	bcc.n	8002c46 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	603b      	str	r3, [r7, #0]
 8002ce0:	687e      	ldr	r6, [r7, #4]
 8002ce2:	466d      	mov	r5, sp
 8002ce4:	f106 0410 	add.w	r4, r6, #16
 8002ce8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cf0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002cf4:	e885 0003 	stmia.w	r5, {r0, r1}
 8002cf8:	1d33      	adds	r3, r6, #4
 8002cfa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cfc:	6838      	ldr	r0, [r7, #0]
 8002cfe:	f002 f9ab 	bl	8005058 <USB_DevInit>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d005      	beq.n	8002d14 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e014      	b.n	8002d3e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d102      	bne.n	8002d32 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f001 f98b 	bl	8004048 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f003 faed 	bl	8006316 <USB_DevDisconnect>

  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3714      	adds	r7, #20
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d46 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b084      	sub	sp, #16
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d101      	bne.n	8002d62 <HAL_PCD_Start+0x1c>
 8002d5e:	2302      	movs	r3, #2
 8002d60:	e020      	b.n	8002da4 <HAL_PCD_Start+0x5e>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d109      	bne.n	8002d86 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d005      	beq.n	8002d86 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d7e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f002 f8f6 	bl	8004f7c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f003 fa9d 	bl	80062d4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3710      	adds	r7, #16
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002dac:	b590      	push	{r4, r7, lr}
 8002dae:	b08d      	sub	sp, #52	@ 0x34
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dba:	6a3b      	ldr	r3, [r7, #32]
 8002dbc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f003 fb5b 	bl	800647e <USB_GetMode>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	f040 84b7 	bne.w	800373e <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f003 fabf 	bl	8006358 <USB_ReadInterrupts>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f000 84ad 	beq.w	800373c <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	0a1b      	lsrs	r3, r3, #8
 8002dec:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f003 faac 	bl	8006358 <USB_ReadInterrupts>
 8002e00:	4603      	mov	r3, r0
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d107      	bne.n	8002e1a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	695a      	ldr	r2, [r3, #20]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f002 0202 	and.w	r2, r2, #2
 8002e18:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f003 fa9a 	bl	8006358 <USB_ReadInterrupts>
 8002e24:	4603      	mov	r3, r0
 8002e26:	f003 0310 	and.w	r3, r3, #16
 8002e2a:	2b10      	cmp	r3, #16
 8002e2c:	d161      	bne.n	8002ef2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	699a      	ldr	r2, [r3, #24]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 0210 	bic.w	r2, r2, #16
 8002e3c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002e3e:	6a3b      	ldr	r3, [r7, #32]
 8002e40:	6a1b      	ldr	r3, [r3, #32]
 8002e42:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	f003 020f 	and.w	r2, r3, #15
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	00db      	lsls	r3, r3, #3
 8002e4e:	4413      	add	r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	4413      	add	r3, r2
 8002e5a:	3304      	adds	r3, #4
 8002e5c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	0c5b      	lsrs	r3, r3, #17
 8002e62:	f003 030f 	and.w	r3, r3, #15
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d124      	bne.n	8002eb4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002e70:	4013      	ands	r3, r2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d035      	beq.n	8002ee2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	091b      	lsrs	r3, r3, #4
 8002e7e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002e80:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	461a      	mov	r2, r3
 8002e88:	6a38      	ldr	r0, [r7, #32]
 8002e8a:	f003 f8d1 	bl	8006030 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	691a      	ldr	r2, [r3, #16]
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	091b      	lsrs	r3, r3, #4
 8002e96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e9a:	441a      	add	r2, r3
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	6a1a      	ldr	r2, [r3, #32]
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	091b      	lsrs	r3, r3, #4
 8002ea8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002eac:	441a      	add	r2, r3
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	621a      	str	r2, [r3, #32]
 8002eb2:	e016      	b.n	8002ee2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	0c5b      	lsrs	r3, r3, #17
 8002eb8:	f003 030f 	and.w	r3, r3, #15
 8002ebc:	2b06      	cmp	r3, #6
 8002ebe:	d110      	bne.n	8002ee2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8002ec6:	2208      	movs	r2, #8
 8002ec8:	4619      	mov	r1, r3
 8002eca:	6a38      	ldr	r0, [r7, #32]
 8002ecc:	f003 f8b0 	bl	8006030 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	6a1a      	ldr	r2, [r3, #32]
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	091b      	lsrs	r3, r3, #4
 8002ed8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002edc:	441a      	add	r2, r3
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	699a      	ldr	r2, [r3, #24]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f042 0210 	orr.w	r2, r2, #16
 8002ef0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f003 fa2e 	bl	8006358 <USB_ReadInterrupts>
 8002efc:	4603      	mov	r3, r0
 8002efe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f02:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002f06:	f040 80a7 	bne.w	8003058 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f003 fa33 	bl	800637e <USB_ReadDevAllOutEpInterrupt>
 8002f18:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002f1a:	e099      	b.n	8003050 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f000 808e 	beq.w	8003044 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f2e:	b2d2      	uxtb	r2, r2
 8002f30:	4611      	mov	r1, r2
 8002f32:	4618      	mov	r0, r3
 8002f34:	f003 fa57 	bl	80063e6 <USB_ReadDevOutEPInterrupt>
 8002f38:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	f003 0301 	and.w	r3, r3, #1
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00c      	beq.n	8002f5e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f46:	015a      	lsls	r2, r3, #5
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f50:	461a      	mov	r2, r3
 8002f52:	2301      	movs	r3, #1
 8002f54:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002f56:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f000 feef 	bl	8003d3c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	f003 0308 	and.w	r3, r3, #8
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d00c      	beq.n	8002f82 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f6a:	015a      	lsls	r2, r3, #5
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	4413      	add	r3, r2
 8002f70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f74:	461a      	mov	r2, r3
 8002f76:	2308      	movs	r3, #8
 8002f78:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002f7a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 ffc5 	bl	8003f0c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	f003 0310 	and.w	r3, r3, #16
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d008      	beq.n	8002f9e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f8e:	015a      	lsls	r2, r3, #5
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	4413      	add	r3, r2
 8002f94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f98:	461a      	mov	r2, r3
 8002f9a:	2310      	movs	r3, #16
 8002f9c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d030      	beq.n	800300a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002fa8:	6a3b      	ldr	r3, [r7, #32]
 8002faa:	695b      	ldr	r3, [r3, #20]
 8002fac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fb0:	2b80      	cmp	r3, #128	@ 0x80
 8002fb2:	d109      	bne.n	8002fc8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	69fa      	ldr	r2, [r7, #28]
 8002fbe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002fc2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002fc6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002fc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fca:	4613      	mov	r3, r2
 8002fcc:	00db      	lsls	r3, r3, #3
 8002fce:	4413      	add	r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	4413      	add	r3, r2
 8002fda:	3304      	adds	r3, #4
 8002fdc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	78db      	ldrb	r3, [r3, #3]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d108      	bne.n	8002ff8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f005 fdb4 	bl	8008b60 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ffa:	015a      	lsls	r2, r3, #5
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	4413      	add	r3, r2
 8003000:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003004:	461a      	mov	r2, r3
 8003006:	2302      	movs	r3, #2
 8003008:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	f003 0320 	and.w	r3, r3, #32
 8003010:	2b00      	cmp	r3, #0
 8003012:	d008      	beq.n	8003026 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003016:	015a      	lsls	r2, r3, #5
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	4413      	add	r3, r2
 800301c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003020:	461a      	mov	r2, r3
 8003022:	2320      	movs	r3, #32
 8003024:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d009      	beq.n	8003044 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003032:	015a      	lsls	r2, r3, #5
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	4413      	add	r3, r2
 8003038:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800303c:	461a      	mov	r2, r3
 800303e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003042:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003046:	3301      	adds	r3, #1
 8003048:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800304a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800304c:	085b      	lsrs	r3, r3, #1
 800304e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003052:	2b00      	cmp	r3, #0
 8003054:	f47f af62 	bne.w	8002f1c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4618      	mov	r0, r3
 800305e:	f003 f97b 	bl	8006358 <USB_ReadInterrupts>
 8003062:	4603      	mov	r3, r0
 8003064:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003068:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800306c:	f040 80db 	bne.w	8003226 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4618      	mov	r0, r3
 8003076:	f003 f99c 	bl	80063b2 <USB_ReadDevAllInEpInterrupt>
 800307a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800307c:	2300      	movs	r3, #0
 800307e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003080:	e0cd      	b.n	800321e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	2b00      	cmp	r3, #0
 800308a:	f000 80c2 	beq.w	8003212 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003094:	b2d2      	uxtb	r2, r2
 8003096:	4611      	mov	r1, r2
 8003098:	4618      	mov	r0, r3
 800309a:	f003 f9c2 	bl	8006422 <USB_ReadDevInEPInterrupt>
 800309e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d057      	beq.n	800315a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80030aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ac:	f003 030f 	and.w	r3, r3, #15
 80030b0:	2201      	movs	r2, #1
 80030b2:	fa02 f303 	lsl.w	r3, r2, r3
 80030b6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	43db      	mvns	r3, r3
 80030c4:	69f9      	ldr	r1, [r7, #28]
 80030c6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80030ca:	4013      	ands	r3, r2
 80030cc:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80030ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d0:	015a      	lsls	r2, r3, #5
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	4413      	add	r3, r2
 80030d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030da:	461a      	mov	r2, r3
 80030dc:	2301      	movs	r3, #1
 80030de:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d132      	bne.n	800314e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80030e8:	6879      	ldr	r1, [r7, #4]
 80030ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030ec:	4613      	mov	r3, r2
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	4413      	add	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	440b      	add	r3, r1
 80030f6:	334c      	adds	r3, #76	@ 0x4c
 80030f8:	6819      	ldr	r1, [r3, #0]
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030fe:	4613      	mov	r3, r2
 8003100:	00db      	lsls	r3, r3, #3
 8003102:	4413      	add	r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	4403      	add	r3, r0
 8003108:	3348      	adds	r3, #72	@ 0x48
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4419      	add	r1, r3
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003112:	4613      	mov	r3, r2
 8003114:	00db      	lsls	r3, r3, #3
 8003116:	4413      	add	r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	4403      	add	r3, r0
 800311c:	334c      	adds	r3, #76	@ 0x4c
 800311e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003122:	2b00      	cmp	r3, #0
 8003124:	d113      	bne.n	800314e <HAL_PCD_IRQHandler+0x3a2>
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800312a:	4613      	mov	r3, r2
 800312c:	00db      	lsls	r3, r3, #3
 800312e:	4413      	add	r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	440b      	add	r3, r1
 8003134:	3354      	adds	r3, #84	@ 0x54
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d108      	bne.n	800314e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6818      	ldr	r0, [r3, #0]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003146:	461a      	mov	r2, r3
 8003148:	2101      	movs	r1, #1
 800314a:	f003 f9c9 	bl	80064e0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800314e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003150:	b2db      	uxtb	r3, r3
 8003152:	4619      	mov	r1, r3
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f005 fc88 	bl	8008a6a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	f003 0308 	and.w	r3, r3, #8
 8003160:	2b00      	cmp	r3, #0
 8003162:	d008      	beq.n	8003176 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003166:	015a      	lsls	r2, r3, #5
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	4413      	add	r3, r2
 800316c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003170:	461a      	mov	r2, r3
 8003172:	2308      	movs	r3, #8
 8003174:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	f003 0310 	and.w	r3, r3, #16
 800317c:	2b00      	cmp	r3, #0
 800317e:	d008      	beq.n	8003192 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003182:	015a      	lsls	r2, r3, #5
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	4413      	add	r3, r2
 8003188:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800318c:	461a      	mov	r2, r3
 800318e:	2310      	movs	r3, #16
 8003190:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003198:	2b00      	cmp	r3, #0
 800319a:	d008      	beq.n	80031ae <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800319c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800319e:	015a      	lsls	r2, r3, #5
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	4413      	add	r3, r2
 80031a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80031a8:	461a      	mov	r2, r3
 80031aa:	2340      	movs	r3, #64	@ 0x40
 80031ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	f003 0302 	and.w	r3, r3, #2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d023      	beq.n	8003200 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80031b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80031ba:	6a38      	ldr	r0, [r7, #32]
 80031bc:	f002 f8aa 	bl	8005314 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80031c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031c2:	4613      	mov	r3, r2
 80031c4:	00db      	lsls	r3, r3, #3
 80031c6:	4413      	add	r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	3338      	adds	r3, #56	@ 0x38
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	4413      	add	r3, r2
 80031d0:	3304      	adds	r3, #4
 80031d2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	78db      	ldrb	r3, [r3, #3]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d108      	bne.n	80031ee <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	2200      	movs	r2, #0
 80031e0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80031e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	4619      	mov	r1, r3
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f005 fccb 	bl	8008b84 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80031ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f0:	015a      	lsls	r2, r3, #5
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	4413      	add	r3, r2
 80031f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80031fa:	461a      	mov	r2, r3
 80031fc:	2302      	movs	r3, #2
 80031fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003206:	2b00      	cmp	r3, #0
 8003208:	d003      	beq.n	8003212 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800320a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f000 fd08 	bl	8003c22 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003214:	3301      	adds	r3, #1
 8003216:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800321a:	085b      	lsrs	r3, r3, #1
 800321c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800321e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003220:	2b00      	cmp	r3, #0
 8003222:	f47f af2e 	bne.w	8003082 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4618      	mov	r0, r3
 800322c:	f003 f894 	bl	8006358 <USB_ReadInterrupts>
 8003230:	4603      	mov	r3, r0
 8003232:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003236:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800323a:	d122      	bne.n	8003282 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	69fa      	ldr	r2, [r7, #28]
 8003246:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800324a:	f023 0301 	bic.w	r3, r3, #1
 800324e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8003256:	2b01      	cmp	r3, #1
 8003258:	d108      	bne.n	800326c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003262:	2100      	movs	r1, #0
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f005 fe49 	bl	8008efc <HAL_PCDEx_LPM_Callback>
 800326a:	e002      	b.n	8003272 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f005 fc69 	bl	8008b44 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	695a      	ldr	r2, [r3, #20]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003280:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4618      	mov	r0, r3
 8003288:	f003 f866 	bl	8006358 <USB_ReadInterrupts>
 800328c:	4603      	mov	r3, r0
 800328e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003292:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003296:	d112      	bne.n	80032be <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f003 0301 	and.w	r3, r3, #1
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d102      	bne.n	80032ae <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f005 fc25 	bl	8008af8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	695a      	ldr	r2, [r3, #20]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80032bc:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f003 f848 	bl	8006358 <USB_ReadInterrupts>
 80032c8:	4603      	mov	r3, r0
 80032ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80032ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80032d2:	d121      	bne.n	8003318 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	695a      	ldr	r2, [r3, #20]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80032e2:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d111      	bne.n	8003312 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2201      	movs	r2, #1
 80032f2:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032fc:	089b      	lsrs	r3, r3, #2
 80032fe:	f003 020f 	and.w	r2, r3, #15
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003308:	2101      	movs	r1, #1
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f005 fdf6 	bl	8008efc <HAL_PCDEx_LPM_Callback>
 8003310:	e002      	b.n	8003318 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f005 fbf0 	bl	8008af8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4618      	mov	r0, r3
 800331e:	f003 f81b 	bl	8006358 <USB_ReadInterrupts>
 8003322:	4603      	mov	r3, r0
 8003324:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003328:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800332c:	f040 80b7 	bne.w	800349e <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	69fa      	ldr	r2, [r7, #28]
 800333a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800333e:	f023 0301 	bic.w	r3, r3, #1
 8003342:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2110      	movs	r1, #16
 800334a:	4618      	mov	r0, r3
 800334c:	f001 ffe2 	bl	8005314 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003350:	2300      	movs	r3, #0
 8003352:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003354:	e046      	b.n	80033e4 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003358:	015a      	lsls	r2, r3, #5
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	4413      	add	r3, r2
 800335e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003362:	461a      	mov	r2, r3
 8003364:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003368:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800336a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800336c:	015a      	lsls	r2, r3, #5
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	4413      	add	r3, r2
 8003372:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800337a:	0151      	lsls	r1, r2, #5
 800337c:	69fa      	ldr	r2, [r7, #28]
 800337e:	440a      	add	r2, r1
 8003380:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003384:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003388:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800338a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800338c:	015a      	lsls	r2, r3, #5
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	4413      	add	r3, r2
 8003392:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003396:	461a      	mov	r2, r3
 8003398:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800339c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800339e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033a0:	015a      	lsls	r2, r3, #5
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	4413      	add	r3, r2
 80033a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033ae:	0151      	lsls	r1, r2, #5
 80033b0:	69fa      	ldr	r2, [r7, #28]
 80033b2:	440a      	add	r2, r1
 80033b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80033b8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80033bc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80033be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033c0:	015a      	lsls	r2, r3, #5
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	4413      	add	r3, r2
 80033c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033ce:	0151      	lsls	r1, r2, #5
 80033d0:	69fa      	ldr	r2, [r7, #28]
 80033d2:	440a      	add	r2, r1
 80033d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80033d8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80033dc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033e0:	3301      	adds	r3, #1
 80033e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d3b3      	bcc.n	8003356 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033f4:	69db      	ldr	r3, [r3, #28]
 80033f6:	69fa      	ldr	r2, [r7, #28]
 80033f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80033fc:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003400:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003406:	2b00      	cmp	r3, #0
 8003408:	d016      	beq.n	8003438 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003410:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003414:	69fa      	ldr	r2, [r7, #28]
 8003416:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800341a:	f043 030b 	orr.w	r3, r3, #11
 800341e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800342a:	69fa      	ldr	r2, [r7, #28]
 800342c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003430:	f043 030b 	orr.w	r3, r3, #11
 8003434:	6453      	str	r3, [r2, #68]	@ 0x44
 8003436:	e015      	b.n	8003464 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800343e:	695b      	ldr	r3, [r3, #20]
 8003440:	69fa      	ldr	r2, [r7, #28]
 8003442:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003446:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800344a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800344e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	69fa      	ldr	r2, [r7, #28]
 800345a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800345e:	f043 030b 	orr.w	r3, r3, #11
 8003462:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	69fa      	ldr	r2, [r7, #28]
 800346e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003472:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003476:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6818      	ldr	r0, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	691b      	ldr	r3, [r3, #16]
 8003480:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003488:	461a      	mov	r2, r3
 800348a:	f003 f829 	bl	80064e0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	695a      	ldr	r2, [r3, #20]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800349c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f002 ff58 	bl	8006358 <USB_ReadInterrupts>
 80034a8:	4603      	mov	r3, r0
 80034aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034b2:	d124      	bne.n	80034fe <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f002 ffee 	bl	800649a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f001 ffa3 	bl	800540e <USB_GetDevSpeed>
 80034c8:	4603      	mov	r3, r0
 80034ca:	461a      	mov	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681c      	ldr	r4, [r3, #0]
 80034d4:	f000 ffd4 	bl	8004480 <HAL_RCC_GetHCLKFreq>
 80034d8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	461a      	mov	r2, r3
 80034e2:	4620      	mov	r0, r4
 80034e4:	f001 fca8 	bl	8004e38 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f005 fae6 	bl	8008aba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	695a      	ldr	r2, [r3, #20]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80034fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4618      	mov	r0, r3
 8003504:	f002 ff28 	bl	8006358 <USB_ReadInterrupts>
 8003508:	4603      	mov	r3, r0
 800350a:	f003 0308 	and.w	r3, r3, #8
 800350e:	2b08      	cmp	r3, #8
 8003510:	d10a      	bne.n	8003528 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f005 fac3 	bl	8008a9e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	695a      	ldr	r2, [r3, #20]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f002 0208 	and.w	r2, r2, #8
 8003526:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4618      	mov	r0, r3
 800352e:	f002 ff13 	bl	8006358 <USB_ReadInterrupts>
 8003532:	4603      	mov	r3, r0
 8003534:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003538:	2b80      	cmp	r3, #128	@ 0x80
 800353a:	d122      	bne.n	8003582 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800353c:	6a3b      	ldr	r3, [r7, #32]
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003544:	6a3b      	ldr	r3, [r7, #32]
 8003546:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003548:	2301      	movs	r3, #1
 800354a:	627b      	str	r3, [r7, #36]	@ 0x24
 800354c:	e014      	b.n	8003578 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800354e:	6879      	ldr	r1, [r7, #4]
 8003550:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003552:	4613      	mov	r3, r2
 8003554:	00db      	lsls	r3, r3, #3
 8003556:	4413      	add	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	440b      	add	r3, r1
 800355c:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	2b01      	cmp	r3, #1
 8003564:	d105      	bne.n	8003572 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003568:	b2db      	uxtb	r3, r3
 800356a:	4619      	mov	r1, r3
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f000 fb27 	bl	8003bc0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003574:	3301      	adds	r3, #1
 8003576:	627b      	str	r3, [r7, #36]	@ 0x24
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800357e:	429a      	cmp	r2, r3
 8003580:	d3e5      	bcc.n	800354e <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4618      	mov	r0, r3
 8003588:	f002 fee6 	bl	8006358 <USB_ReadInterrupts>
 800358c:	4603      	mov	r3, r0
 800358e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003592:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003596:	d13b      	bne.n	8003610 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003598:	2301      	movs	r3, #1
 800359a:	627b      	str	r3, [r7, #36]	@ 0x24
 800359c:	e02b      	b.n	80035f6 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800359e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035a0:	015a      	lsls	r2, r3, #5
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	4413      	add	r3, r2
 80035a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80035ae:	6879      	ldr	r1, [r7, #4]
 80035b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035b2:	4613      	mov	r3, r2
 80035b4:	00db      	lsls	r3, r3, #3
 80035b6:	4413      	add	r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	440b      	add	r3, r1
 80035bc:	3340      	adds	r3, #64	@ 0x40
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d115      	bne.n	80035f0 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80035c4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	da12      	bge.n	80035f0 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80035ca:	6879      	ldr	r1, [r7, #4]
 80035cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035ce:	4613      	mov	r3, r2
 80035d0:	00db      	lsls	r3, r3, #3
 80035d2:	4413      	add	r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	440b      	add	r3, r1
 80035d8:	333f      	adds	r3, #63	@ 0x3f
 80035da:	2201      	movs	r2, #1
 80035dc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80035de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	4619      	mov	r1, r3
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 fae8 	bl	8003bc0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f2:	3301      	adds	r3, #1
 80035f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d3ce      	bcc.n	800359e <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	695a      	ldr	r2, [r3, #20]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800360e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4618      	mov	r0, r3
 8003616:	f002 fe9f 	bl	8006358 <USB_ReadInterrupts>
 800361a:	4603      	mov	r3, r0
 800361c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003620:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003624:	d155      	bne.n	80036d2 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003626:	2301      	movs	r3, #1
 8003628:	627b      	str	r3, [r7, #36]	@ 0x24
 800362a:	e045      	b.n	80036b8 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800362c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800362e:	015a      	lsls	r2, r3, #5
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	4413      	add	r3, r2
 8003634:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800363c:	6879      	ldr	r1, [r7, #4]
 800363e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003640:	4613      	mov	r3, r2
 8003642:	00db      	lsls	r3, r3, #3
 8003644:	4413      	add	r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	440b      	add	r3, r1
 800364a:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d12e      	bne.n	80036b2 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003654:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003656:	2b00      	cmp	r3, #0
 8003658:	da2b      	bge.n	80036b2 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8003666:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800366a:	429a      	cmp	r2, r3
 800366c:	d121      	bne.n	80036b2 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800366e:	6879      	ldr	r1, [r7, #4]
 8003670:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003672:	4613      	mov	r3, r2
 8003674:	00db      	lsls	r3, r3, #3
 8003676:	4413      	add	r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	440b      	add	r3, r1
 800367c:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8003680:	2201      	movs	r2, #1
 8003682:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003684:	6a3b      	ldr	r3, [r7, #32]
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800368c:	6a3b      	ldr	r3, [r7, #32]
 800368e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003690:	6a3b      	ldr	r3, [r7, #32]
 8003692:	695b      	ldr	r3, [r3, #20]
 8003694:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003698:	2b00      	cmp	r3, #0
 800369a:	d10a      	bne.n	80036b2 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	69fa      	ldr	r2, [r7, #28]
 80036a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80036aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80036ae:	6053      	str	r3, [r2, #4]
            break;
 80036b0:	e007      	b.n	80036c2 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80036b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b4:	3301      	adds	r3, #1
 80036b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036be:	429a      	cmp	r2, r3
 80036c0:	d3b4      	bcc.n	800362c <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	695a      	ldr	r2, [r3, #20]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80036d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f002 fe3e 	bl	8006358 <USB_ReadInterrupts>
 80036dc:	4603      	mov	r3, r0
 80036de:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80036e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036e6:	d10a      	bne.n	80036fe <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f005 fa5d 	bl	8008ba8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	695a      	ldr	r2, [r3, #20]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80036fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4618      	mov	r0, r3
 8003704:	f002 fe28 	bl	8006358 <USB_ReadInterrupts>
 8003708:	4603      	mov	r3, r0
 800370a:	f003 0304 	and.w	r3, r3, #4
 800370e:	2b04      	cmp	r3, #4
 8003710:	d115      	bne.n	800373e <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	f003 0304 	and.w	r3, r3, #4
 8003720:	2b00      	cmp	r3, #0
 8003722:	d002      	beq.n	800372a <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f005 fa4d 	bl	8008bc4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	6859      	ldr	r1, [r3, #4]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	69ba      	ldr	r2, [r7, #24]
 8003736:	430a      	orrs	r2, r1
 8003738:	605a      	str	r2, [r3, #4]
 800373a:	e000      	b.n	800373e <HAL_PCD_IRQHandler+0x992>
      return;
 800373c:	bf00      	nop
    }
  }
}
 800373e:	3734      	adds	r7, #52	@ 0x34
 8003740:	46bd      	mov	sp, r7
 8003742:	bd90      	pop	{r4, r7, pc}

08003744 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	460b      	mov	r3, r1
 800374e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003756:	2b01      	cmp	r3, #1
 8003758:	d101      	bne.n	800375e <HAL_PCD_SetAddress+0x1a>
 800375a:	2302      	movs	r3, #2
 800375c:	e013      	b.n	8003786 <HAL_PCD_SetAddress+0x42>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	78fa      	ldrb	r2, [r7, #3]
 800376a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	78fa      	ldrb	r2, [r7, #3]
 8003774:	4611      	mov	r1, r2
 8003776:	4618      	mov	r0, r3
 8003778:	f002 fd86 	bl	8006288 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3708      	adds	r7, #8
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	b084      	sub	sp, #16
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
 8003796:	4608      	mov	r0, r1
 8003798:	4611      	mov	r1, r2
 800379a:	461a      	mov	r2, r3
 800379c:	4603      	mov	r3, r0
 800379e:	70fb      	strb	r3, [r7, #3]
 80037a0:	460b      	mov	r3, r1
 80037a2:	803b      	strh	r3, [r7, #0]
 80037a4:	4613      	mov	r3, r2
 80037a6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80037a8:	2300      	movs	r3, #0
 80037aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80037ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	da0f      	bge.n	80037d4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037b4:	78fb      	ldrb	r3, [r7, #3]
 80037b6:	f003 020f 	and.w	r2, r3, #15
 80037ba:	4613      	mov	r3, r2
 80037bc:	00db      	lsls	r3, r3, #3
 80037be:	4413      	add	r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	3338      	adds	r3, #56	@ 0x38
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	4413      	add	r3, r2
 80037c8:	3304      	adds	r3, #4
 80037ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2201      	movs	r2, #1
 80037d0:	705a      	strb	r2, [r3, #1]
 80037d2:	e00f      	b.n	80037f4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037d4:	78fb      	ldrb	r3, [r7, #3]
 80037d6:	f003 020f 	and.w	r2, r3, #15
 80037da:	4613      	mov	r3, r2
 80037dc:	00db      	lsls	r3, r3, #3
 80037de:	4413      	add	r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	4413      	add	r3, r2
 80037ea:	3304      	adds	r3, #4
 80037ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80037f4:	78fb      	ldrb	r3, [r7, #3]
 80037f6:	f003 030f 	and.w	r3, r3, #15
 80037fa:	b2da      	uxtb	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003800:	883a      	ldrh	r2, [r7, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	78ba      	ldrb	r2, [r7, #2]
 800380a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	785b      	ldrb	r3, [r3, #1]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d004      	beq.n	800381e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	461a      	mov	r2, r3
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800381e:	78bb      	ldrb	r3, [r7, #2]
 8003820:	2b02      	cmp	r3, #2
 8003822:	d102      	bne.n	800382a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003830:	2b01      	cmp	r3, #1
 8003832:	d101      	bne.n	8003838 <HAL_PCD_EP_Open+0xaa>
 8003834:	2302      	movs	r3, #2
 8003836:	e00e      	b.n	8003856 <HAL_PCD_EP_Open+0xc8>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68f9      	ldr	r1, [r7, #12]
 8003846:	4618      	mov	r0, r3
 8003848:	f001 fe06 	bl	8005458 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 8003854:	7afb      	ldrb	r3, [r7, #11]
}
 8003856:	4618      	mov	r0, r3
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800385e:	b580      	push	{r7, lr}
 8003860:	b084      	sub	sp, #16
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
 8003866:	460b      	mov	r3, r1
 8003868:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800386a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800386e:	2b00      	cmp	r3, #0
 8003870:	da0f      	bge.n	8003892 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003872:	78fb      	ldrb	r3, [r7, #3]
 8003874:	f003 020f 	and.w	r2, r3, #15
 8003878:	4613      	mov	r3, r2
 800387a:	00db      	lsls	r3, r3, #3
 800387c:	4413      	add	r3, r2
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	3338      	adds	r3, #56	@ 0x38
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	4413      	add	r3, r2
 8003886:	3304      	adds	r3, #4
 8003888:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2201      	movs	r2, #1
 800388e:	705a      	strb	r2, [r3, #1]
 8003890:	e00f      	b.n	80038b2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003892:	78fb      	ldrb	r3, [r7, #3]
 8003894:	f003 020f 	and.w	r2, r3, #15
 8003898:	4613      	mov	r3, r2
 800389a:	00db      	lsls	r3, r3, #3
 800389c:	4413      	add	r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	4413      	add	r3, r2
 80038a8:	3304      	adds	r3, #4
 80038aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80038b2:	78fb      	ldrb	r3, [r7, #3]
 80038b4:	f003 030f 	and.w	r3, r3, #15
 80038b8:	b2da      	uxtb	r2, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d101      	bne.n	80038cc <HAL_PCD_EP_Close+0x6e>
 80038c8:	2302      	movs	r3, #2
 80038ca:	e00e      	b.n	80038ea <HAL_PCD_EP_Close+0x8c>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68f9      	ldr	r1, [r7, #12]
 80038da:	4618      	mov	r0, r3
 80038dc:	f001 fe44 	bl	8005568 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3710      	adds	r7, #16
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b086      	sub	sp, #24
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	60f8      	str	r0, [r7, #12]
 80038fa:	607a      	str	r2, [r7, #4]
 80038fc:	603b      	str	r3, [r7, #0]
 80038fe:	460b      	mov	r3, r1
 8003900:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003902:	7afb      	ldrb	r3, [r7, #11]
 8003904:	f003 020f 	and.w	r2, r3, #15
 8003908:	4613      	mov	r3, r2
 800390a:	00db      	lsls	r3, r3, #3
 800390c:	4413      	add	r3, r2
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	4413      	add	r3, r2
 8003918:	3304      	adds	r3, #4
 800391a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	683a      	ldr	r2, [r7, #0]
 8003926:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	2200      	movs	r2, #0
 800392c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	2200      	movs	r2, #0
 8003932:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003934:	7afb      	ldrb	r3, [r7, #11]
 8003936:	f003 030f 	and.w	r3, r3, #15
 800393a:	b2da      	uxtb	r2, r3
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d102      	bne.n	800394e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800394e:	7afb      	ldrb	r3, [r7, #11]
 8003950:	f003 030f 	and.w	r3, r3, #15
 8003954:	2b00      	cmp	r3, #0
 8003956:	d109      	bne.n	800396c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6818      	ldr	r0, [r3, #0]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	b2db      	uxtb	r3, r3
 8003962:	461a      	mov	r2, r3
 8003964:	6979      	ldr	r1, [r7, #20]
 8003966:	f002 f923 	bl	8005bb0 <USB_EP0StartXfer>
 800396a:	e008      	b.n	800397e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6818      	ldr	r0, [r3, #0]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	691b      	ldr	r3, [r3, #16]
 8003974:	b2db      	uxtb	r3, r3
 8003976:	461a      	mov	r2, r3
 8003978:	6979      	ldr	r1, [r7, #20]
 800397a:	f001 fed1 	bl	8005720 <USB_EPStartXfer>
  }

  return HAL_OK;
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3718      	adds	r7, #24
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	460b      	mov	r3, r1
 8003992:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003994:	78fb      	ldrb	r3, [r7, #3]
 8003996:	f003 020f 	and.w	r2, r3, #15
 800399a:	6879      	ldr	r1, [r7, #4]
 800399c:	4613      	mov	r3, r2
 800399e:	00db      	lsls	r3, r3, #3
 80039a0:	4413      	add	r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	440b      	add	r3, r1
 80039a6:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 80039aa:	681b      	ldr	r3, [r3, #0]
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	607a      	str	r2, [r7, #4]
 80039c2:	603b      	str	r3, [r7, #0]
 80039c4:	460b      	mov	r3, r1
 80039c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039c8:	7afb      	ldrb	r3, [r7, #11]
 80039ca:	f003 020f 	and.w	r2, r3, #15
 80039ce:	4613      	mov	r3, r2
 80039d0:	00db      	lsls	r3, r3, #3
 80039d2:	4413      	add	r3, r2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	3338      	adds	r3, #56	@ 0x38
 80039d8:	68fa      	ldr	r2, [r7, #12]
 80039da:	4413      	add	r3, r2
 80039dc:	3304      	adds	r3, #4
 80039de:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	683a      	ldr	r2, [r7, #0]
 80039ea:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	2200      	movs	r2, #0
 80039f0:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	2201      	movs	r2, #1
 80039f6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039f8:	7afb      	ldrb	r3, [r7, #11]
 80039fa:	f003 030f 	and.w	r3, r3, #15
 80039fe:	b2da      	uxtb	r2, r3
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d102      	bne.n	8003a12 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a12:	7afb      	ldrb	r3, [r7, #11]
 8003a14:	f003 030f 	and.w	r3, r3, #15
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d109      	bne.n	8003a30 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6818      	ldr	r0, [r3, #0]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	461a      	mov	r2, r3
 8003a28:	6979      	ldr	r1, [r7, #20]
 8003a2a:	f002 f8c1 	bl	8005bb0 <USB_EP0StartXfer>
 8003a2e:	e008      	b.n	8003a42 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6818      	ldr	r0, [r3, #0]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	6979      	ldr	r1, [r7, #20]
 8003a3e:	f001 fe6f 	bl	8005720 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3718      	adds	r7, #24
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	460b      	mov	r3, r1
 8003a56:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003a58:	78fb      	ldrb	r3, [r7, #3]
 8003a5a:	f003 020f 	and.w	r2, r3, #15
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d901      	bls.n	8003a6a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e050      	b.n	8003b0c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	da0f      	bge.n	8003a92 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a72:	78fb      	ldrb	r3, [r7, #3]
 8003a74:	f003 020f 	and.w	r2, r3, #15
 8003a78:	4613      	mov	r3, r2
 8003a7a:	00db      	lsls	r3, r3, #3
 8003a7c:	4413      	add	r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	3338      	adds	r3, #56	@ 0x38
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	4413      	add	r3, r2
 8003a86:	3304      	adds	r3, #4
 8003a88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	705a      	strb	r2, [r3, #1]
 8003a90:	e00d      	b.n	8003aae <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003a92:	78fa      	ldrb	r2, [r7, #3]
 8003a94:	4613      	mov	r3, r2
 8003a96:	00db      	lsls	r3, r3, #3
 8003a98:	4413      	add	r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	3304      	adds	r3, #4
 8003aa6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ab4:	78fb      	ldrb	r3, [r7, #3]
 8003ab6:	f003 030f 	and.w	r3, r3, #15
 8003aba:	b2da      	uxtb	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d101      	bne.n	8003ace <HAL_PCD_EP_SetStall+0x82>
 8003aca:	2302      	movs	r3, #2
 8003acc:	e01e      	b.n	8003b0c <HAL_PCD_EP_SetStall+0xc0>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68f9      	ldr	r1, [r7, #12]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f002 faff 	bl	80060e0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ae2:	78fb      	ldrb	r3, [r7, #3]
 8003ae4:	f003 030f 	and.w	r3, r3, #15
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d10a      	bne.n	8003b02 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6818      	ldr	r0, [r3, #0]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	b2d9      	uxtb	r1, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003afc:	461a      	mov	r2, r3
 8003afe:	f002 fcef 	bl	80064e0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003b20:	78fb      	ldrb	r3, [r7, #3]
 8003b22:	f003 020f 	and.w	r2, r3, #15
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d901      	bls.n	8003b32 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e042      	b.n	8003bb8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	da0f      	bge.n	8003b5a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b3a:	78fb      	ldrb	r3, [r7, #3]
 8003b3c:	f003 020f 	and.w	r2, r3, #15
 8003b40:	4613      	mov	r3, r2
 8003b42:	00db      	lsls	r3, r3, #3
 8003b44:	4413      	add	r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	3338      	adds	r3, #56	@ 0x38
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	3304      	adds	r3, #4
 8003b50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2201      	movs	r2, #1
 8003b56:	705a      	strb	r2, [r3, #1]
 8003b58:	e00f      	b.n	8003b7a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b5a:	78fb      	ldrb	r3, [r7, #3]
 8003b5c:	f003 020f 	and.w	r2, r3, #15
 8003b60:	4613      	mov	r3, r2
 8003b62:	00db      	lsls	r3, r3, #3
 8003b64:	4413      	add	r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	4413      	add	r3, r2
 8003b70:	3304      	adds	r3, #4
 8003b72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b80:	78fb      	ldrb	r3, [r7, #3]
 8003b82:	f003 030f 	and.w	r3, r3, #15
 8003b86:	b2da      	uxtb	r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d101      	bne.n	8003b9a <HAL_PCD_EP_ClrStall+0x86>
 8003b96:	2302      	movs	r3, #2
 8003b98:	e00e      	b.n	8003bb8 <HAL_PCD_EP_ClrStall+0xa4>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	68f9      	ldr	r1, [r7, #12]
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f002 fb07 	bl	80061bc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3710      	adds	r7, #16
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	460b      	mov	r3, r1
 8003bca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003bcc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	da0c      	bge.n	8003bee <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bd4:	78fb      	ldrb	r3, [r7, #3]
 8003bd6:	f003 020f 	and.w	r2, r3, #15
 8003bda:	4613      	mov	r3, r2
 8003bdc:	00db      	lsls	r3, r3, #3
 8003bde:	4413      	add	r3, r2
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	3338      	adds	r3, #56	@ 0x38
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	4413      	add	r3, r2
 8003be8:	3304      	adds	r3, #4
 8003bea:	60fb      	str	r3, [r7, #12]
 8003bec:	e00c      	b.n	8003c08 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bee:	78fb      	ldrb	r3, [r7, #3]
 8003bf0:	f003 020f 	and.w	r2, r3, #15
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	00db      	lsls	r3, r3, #3
 8003bf8:	4413      	add	r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	4413      	add	r3, r2
 8003c04:	3304      	adds	r3, #4
 8003c06:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68f9      	ldr	r1, [r7, #12]
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f002 f926 	bl	8005e60 <USB_EPStopXfer>
 8003c14:	4603      	mov	r3, r0
 8003c16:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003c18:	7afb      	ldrb	r3, [r7, #11]
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3710      	adds	r7, #16
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c22:	b580      	push	{r7, lr}
 8003c24:	b08a      	sub	sp, #40	@ 0x28
 8003c26:	af02      	add	r7, sp, #8
 8003c28:	6078      	str	r0, [r7, #4]
 8003c2a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003c36:	683a      	ldr	r2, [r7, #0]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	00db      	lsls	r3, r3, #3
 8003c3c:	4413      	add	r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	3338      	adds	r3, #56	@ 0x38
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	4413      	add	r3, r2
 8003c46:	3304      	adds	r3, #4
 8003c48:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6a1a      	ldr	r2, [r3, #32]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d901      	bls.n	8003c5a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e06c      	b.n	8003d34 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	699a      	ldr	r2, [r3, #24]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	69fa      	ldr	r2, [r7, #28]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d902      	bls.n	8003c76 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	3303      	adds	r3, #3
 8003c7a:	089b      	lsrs	r3, r3, #2
 8003c7c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c7e:	e02b      	b.n	8003cd8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	699a      	ldr	r2, [r3, #24]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6a1b      	ldr	r3, [r3, #32]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	69fa      	ldr	r2, [r7, #28]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d902      	bls.n	8003c9c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	3303      	adds	r3, #3
 8003ca0:	089b      	lsrs	r3, r3, #2
 8003ca2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6919      	ldr	r1, [r3, #16]
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	b2da      	uxtb	r2, r3
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	9300      	str	r3, [sp, #0]
 8003cb8:	4603      	mov	r3, r0
 8003cba:	6978      	ldr	r0, [r7, #20]
 8003cbc:	f002 f97a 	bl	8005fb4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	691a      	ldr	r2, [r3, #16]
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	441a      	add	r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6a1a      	ldr	r2, [r3, #32]
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	441a      	add	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	015a      	lsls	r2, r3, #5
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	4413      	add	r3, r2
 8003ce0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003ce8:	69ba      	ldr	r2, [r7, #24]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d809      	bhi.n	8003d02 <PCD_WriteEmptyTxFifo+0xe0>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6a1a      	ldr	r2, [r3, #32]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d203      	bcs.n	8003d02 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1be      	bne.n	8003c80 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	699a      	ldr	r2, [r3, #24]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6a1b      	ldr	r3, [r3, #32]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d811      	bhi.n	8003d32 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	f003 030f 	and.w	r3, r3, #15
 8003d14:	2201      	movs	r2, #1
 8003d16:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	43db      	mvns	r3, r3
 8003d28:	6939      	ldr	r1, [r7, #16]
 8003d2a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003d2e:	4013      	ands	r3, r2
 8003d30:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3720      	adds	r7, #32
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b088      	sub	sp, #32
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	333c      	adds	r3, #60	@ 0x3c
 8003d54:	3304      	adds	r3, #4
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	015a      	lsls	r2, r3, #5
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	4413      	add	r3, r2
 8003d62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d17b      	bne.n	8003e6a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	f003 0308 	and.w	r3, r3, #8
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d015      	beq.n	8003da8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	4a61      	ldr	r2, [pc, #388]	@ (8003f04 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	f240 80b9 	bls.w	8003ef8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	f000 80b3 	beq.w	8003ef8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	015a      	lsls	r2, r3, #5
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	4413      	add	r3, r2
 8003d9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d9e:	461a      	mov	r2, r3
 8003da0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003da4:	6093      	str	r3, [r2, #8]
 8003da6:	e0a7      	b.n	8003ef8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	f003 0320 	and.w	r3, r3, #32
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d009      	beq.n	8003dc6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	015a      	lsls	r2, r3, #5
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	4413      	add	r3, r2
 8003dba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	2320      	movs	r3, #32
 8003dc2:	6093      	str	r3, [r2, #8]
 8003dc4:	e098      	b.n	8003ef8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	f040 8093 	bne.w	8003ef8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	4a4b      	ldr	r2, [pc, #300]	@ (8003f04 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d90f      	bls.n	8003dfa <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00a      	beq.n	8003dfa <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	015a      	lsls	r2, r3, #5
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	4413      	add	r3, r2
 8003dec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003df0:	461a      	mov	r2, r3
 8003df2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003df6:	6093      	str	r3, [r2, #8]
 8003df8:	e07e      	b.n	8003ef8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003dfa:	683a      	ldr	r2, [r7, #0]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	00db      	lsls	r3, r3, #3
 8003e00:	4413      	add	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	3304      	adds	r3, #4
 8003e0e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	69da      	ldr	r2, [r3, #28]
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	0159      	lsls	r1, r3, #5
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	440b      	add	r3, r1
 8003e1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e26:	1ad2      	subs	r2, r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d114      	bne.n	8003e5c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d109      	bne.n	8003e4e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6818      	ldr	r0, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003e44:	461a      	mov	r2, r3
 8003e46:	2101      	movs	r1, #1
 8003e48:	f002 fb4a 	bl	80064e0 <USB_EP0_OutStart>
 8003e4c:	e006      	b.n	8003e5c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	691a      	ldr	r2, [r3, #16]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	441a      	add	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	4619      	mov	r1, r3
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f004 fde6 	bl	8008a34 <HAL_PCD_DataOutStageCallback>
 8003e68:	e046      	b.n	8003ef8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	4a26      	ldr	r2, [pc, #152]	@ (8003f08 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d124      	bne.n	8003ebc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00a      	beq.n	8003e92 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	015a      	lsls	r2, r3, #5
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	4413      	add	r3, r2
 8003e84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e88:	461a      	mov	r2, r3
 8003e8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e8e:	6093      	str	r3, [r2, #8]
 8003e90:	e032      	b.n	8003ef8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	f003 0320 	and.w	r3, r3, #32
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d008      	beq.n	8003eae <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	015a      	lsls	r2, r3, #5
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	2320      	movs	r3, #32
 8003eac:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f004 fdbd 	bl	8008a34 <HAL_PCD_DataOutStageCallback>
 8003eba:	e01d      	b.n	8003ef8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d114      	bne.n	8003eec <PCD_EP_OutXfrComplete_int+0x1b0>
 8003ec2:	6879      	ldr	r1, [r7, #4]
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	00db      	lsls	r3, r3, #3
 8003eca:	4413      	add	r3, r2
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	440b      	add	r3, r1
 8003ed0:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d108      	bne.n	8003eec <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6818      	ldr	r0, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	2100      	movs	r1, #0
 8003ee8:	f002 fafa 	bl	80064e0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f004 fd9e 	bl	8008a34 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3720      	adds	r7, #32
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	4f54300a 	.word	0x4f54300a
 8003f08:	4f54310a 	.word	0x4f54310a

08003f0c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b086      	sub	sp, #24
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	333c      	adds	r3, #60	@ 0x3c
 8003f24:	3304      	adds	r3, #4
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	015a      	lsls	r2, r3, #5
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	4413      	add	r3, r2
 8003f32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	4a15      	ldr	r2, [pc, #84]	@ (8003f94 <PCD_EP_OutSetupPacket_int+0x88>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d90e      	bls.n	8003f60 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d009      	beq.n	8003f60 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	015a      	lsls	r2, r3, #5
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	4413      	add	r3, r2
 8003f54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f58:	461a      	mov	r2, r3
 8003f5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f5e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f004 fd55 	bl	8008a10 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	4a0a      	ldr	r2, [pc, #40]	@ (8003f94 <PCD_EP_OutSetupPacket_int+0x88>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d90c      	bls.n	8003f88 <PCD_EP_OutSetupPacket_int+0x7c>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d108      	bne.n	8003f88 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6818      	ldr	r0, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003f80:	461a      	mov	r2, r3
 8003f82:	2101      	movs	r1, #1
 8003f84:	f002 faac 	bl	80064e0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3718      	adds	r7, #24
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	4f54300a 	.word	0x4f54300a

08003f98 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b085      	sub	sp, #20
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	70fb      	strb	r3, [r7, #3]
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fae:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003fb0:	78fb      	ldrb	r3, [r7, #3]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d107      	bne.n	8003fc6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003fb6:	883b      	ldrh	r3, [r7, #0]
 8003fb8:	0419      	lsls	r1, r3, #16
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68ba      	ldr	r2, [r7, #8]
 8003fc0:	430a      	orrs	r2, r1
 8003fc2:	629a      	str	r2, [r3, #40]	@ 0x28
 8003fc4:	e028      	b.n	8004018 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fcc:	0c1b      	lsrs	r3, r3, #16
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	73fb      	strb	r3, [r7, #15]
 8003fd8:	e00d      	b.n	8003ff6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	7bfb      	ldrb	r3, [r7, #15]
 8003fe0:	3340      	adds	r3, #64	@ 0x40
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	4413      	add	r3, r2
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	0c1b      	lsrs	r3, r3, #16
 8003fea:	68ba      	ldr	r2, [r7, #8]
 8003fec:	4413      	add	r3, r2
 8003fee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ff0:	7bfb      	ldrb	r3, [r7, #15]
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	73fb      	strb	r3, [r7, #15]
 8003ff6:	7bfa      	ldrb	r2, [r7, #15]
 8003ff8:	78fb      	ldrb	r3, [r7, #3]
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d3ec      	bcc.n	8003fda <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004000:	883b      	ldrh	r3, [r7, #0]
 8004002:	0418      	lsls	r0, r3, #16
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6819      	ldr	r1, [r3, #0]
 8004008:	78fb      	ldrb	r3, [r7, #3]
 800400a:	3b01      	subs	r3, #1
 800400c:	68ba      	ldr	r2, [r7, #8]
 800400e:	4302      	orrs	r2, r0
 8004010:	3340      	adds	r3, #64	@ 0x40
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	440b      	add	r3, r1
 8004016:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3714      	adds	r7, #20
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr

08004026 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004026:	b480      	push	{r7}
 8004028:	b083      	sub	sp, #12
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
 800402e:	460b      	mov	r3, r1
 8004030:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	887a      	ldrh	r2, [r7, #2]
 8004038:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004048:	b480      	push	{r7}
 800404a:	b085      	sub	sp, #20
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2201      	movs	r2, #1
 800405a:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004076:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800407a:	f043 0303 	orr.w	r3, r3, #3
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004082:	2300      	movs	r3, #0
}
 8004084:	4618      	mov	r0, r3
 8004086:	3714      	adds	r7, #20
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d101      	bne.n	80040a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e0cc      	b.n	800423e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040a4:	4b68      	ldr	r3, [pc, #416]	@ (8004248 <HAL_RCC_ClockConfig+0x1b8>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0307 	and.w	r3, r3, #7
 80040ac:	683a      	ldr	r2, [r7, #0]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d90c      	bls.n	80040cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040b2:	4b65      	ldr	r3, [pc, #404]	@ (8004248 <HAL_RCC_ClockConfig+0x1b8>)
 80040b4:	683a      	ldr	r2, [r7, #0]
 80040b6:	b2d2      	uxtb	r2, r2
 80040b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ba:	4b63      	ldr	r3, [pc, #396]	@ (8004248 <HAL_RCC_ClockConfig+0x1b8>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0307 	and.w	r3, r3, #7
 80040c2:	683a      	ldr	r2, [r7, #0]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d001      	beq.n	80040cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e0b8      	b.n	800423e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0302 	and.w	r3, r3, #2
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d020      	beq.n	800411a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0304 	and.w	r3, r3, #4
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d005      	beq.n	80040f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040e4:	4b59      	ldr	r3, [pc, #356]	@ (800424c <HAL_RCC_ClockConfig+0x1bc>)
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	4a58      	ldr	r2, [pc, #352]	@ (800424c <HAL_RCC_ClockConfig+0x1bc>)
 80040ea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80040ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0308 	and.w	r3, r3, #8
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d005      	beq.n	8004108 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040fc:	4b53      	ldr	r3, [pc, #332]	@ (800424c <HAL_RCC_ClockConfig+0x1bc>)
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	4a52      	ldr	r2, [pc, #328]	@ (800424c <HAL_RCC_ClockConfig+0x1bc>)
 8004102:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004106:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004108:	4b50      	ldr	r3, [pc, #320]	@ (800424c <HAL_RCC_ClockConfig+0x1bc>)
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	494d      	ldr	r1, [pc, #308]	@ (800424c <HAL_RCC_ClockConfig+0x1bc>)
 8004116:	4313      	orrs	r3, r2
 8004118:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	2b00      	cmp	r3, #0
 8004124:	d044      	beq.n	80041b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	2b01      	cmp	r3, #1
 800412c:	d107      	bne.n	800413e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800412e:	4b47      	ldr	r3, [pc, #284]	@ (800424c <HAL_RCC_ClockConfig+0x1bc>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d119      	bne.n	800416e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e07f      	b.n	800423e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	2b02      	cmp	r3, #2
 8004144:	d003      	beq.n	800414e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800414a:	2b03      	cmp	r3, #3
 800414c:	d107      	bne.n	800415e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800414e:	4b3f      	ldr	r3, [pc, #252]	@ (800424c <HAL_RCC_ClockConfig+0x1bc>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d109      	bne.n	800416e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e06f      	b.n	800423e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800415e:	4b3b      	ldr	r3, [pc, #236]	@ (800424c <HAL_RCC_ClockConfig+0x1bc>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e067      	b.n	800423e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800416e:	4b37      	ldr	r3, [pc, #220]	@ (800424c <HAL_RCC_ClockConfig+0x1bc>)
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f023 0203 	bic.w	r2, r3, #3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	4934      	ldr	r1, [pc, #208]	@ (800424c <HAL_RCC_ClockConfig+0x1bc>)
 800417c:	4313      	orrs	r3, r2
 800417e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004180:	f7fc ff82 	bl	8001088 <HAL_GetTick>
 8004184:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004186:	e00a      	b.n	800419e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004188:	f7fc ff7e 	bl	8001088 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004196:	4293      	cmp	r3, r2
 8004198:	d901      	bls.n	800419e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e04f      	b.n	800423e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800419e:	4b2b      	ldr	r3, [pc, #172]	@ (800424c <HAL_RCC_ClockConfig+0x1bc>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f003 020c 	and.w	r2, r3, #12
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d1eb      	bne.n	8004188 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041b0:	4b25      	ldr	r3, [pc, #148]	@ (8004248 <HAL_RCC_ClockConfig+0x1b8>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0307 	and.w	r3, r3, #7
 80041b8:	683a      	ldr	r2, [r7, #0]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d20c      	bcs.n	80041d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041be:	4b22      	ldr	r3, [pc, #136]	@ (8004248 <HAL_RCC_ClockConfig+0x1b8>)
 80041c0:	683a      	ldr	r2, [r7, #0]
 80041c2:	b2d2      	uxtb	r2, r2
 80041c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041c6:	4b20      	ldr	r3, [pc, #128]	@ (8004248 <HAL_RCC_ClockConfig+0x1b8>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0307 	and.w	r3, r3, #7
 80041ce:	683a      	ldr	r2, [r7, #0]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d001      	beq.n	80041d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e032      	b.n	800423e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0304 	and.w	r3, r3, #4
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d008      	beq.n	80041f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041e4:	4b19      	ldr	r3, [pc, #100]	@ (800424c <HAL_RCC_ClockConfig+0x1bc>)
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	4916      	ldr	r1, [pc, #88]	@ (800424c <HAL_RCC_ClockConfig+0x1bc>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0308 	and.w	r3, r3, #8
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d009      	beq.n	8004216 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004202:	4b12      	ldr	r3, [pc, #72]	@ (800424c <HAL_RCC_ClockConfig+0x1bc>)
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	00db      	lsls	r3, r3, #3
 8004210:	490e      	ldr	r1, [pc, #56]	@ (800424c <HAL_RCC_ClockConfig+0x1bc>)
 8004212:	4313      	orrs	r3, r2
 8004214:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004216:	f000 f82d 	bl	8004274 <HAL_RCC_GetSysClockFreq>
 800421a:	4602      	mov	r2, r0
 800421c:	4b0b      	ldr	r3, [pc, #44]	@ (800424c <HAL_RCC_ClockConfig+0x1bc>)
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	091b      	lsrs	r3, r3, #4
 8004222:	f003 030f 	and.w	r3, r3, #15
 8004226:	490a      	ldr	r1, [pc, #40]	@ (8004250 <HAL_RCC_ClockConfig+0x1c0>)
 8004228:	5ccb      	ldrb	r3, [r1, r3]
 800422a:	fa22 f303 	lsr.w	r3, r2, r3
 800422e:	4a09      	ldr	r2, [pc, #36]	@ (8004254 <HAL_RCC_ClockConfig+0x1c4>)
 8004230:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004232:	4b09      	ldr	r3, [pc, #36]	@ (8004258 <HAL_RCC_ClockConfig+0x1c8>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4618      	mov	r0, r3
 8004238:	f7fc fee2 	bl	8001000 <HAL_InitTick>

  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3710      	adds	r7, #16
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	40023c00 	.word	0x40023c00
 800424c:	40023800 	.word	0x40023800
 8004250:	080091b8 	.word	0x080091b8
 8004254:	20000000 	.word	0x20000000
 8004258:	20000004 	.word	0x20000004

0800425c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800425c:	b480      	push	{r7}
 800425e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8004260:	4b03      	ldr	r3, [pc, #12]	@ (8004270 <HAL_RCC_EnableCSS+0x14>)
 8004262:	2201      	movs	r2, #1
 8004264:	601a      	str	r2, [r3, #0]
}
 8004266:	bf00      	nop
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr
 8004270:	4247004c 	.word	0x4247004c

08004274 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004274:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004278:	b094      	sub	sp, #80	@ 0x50
 800427a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800427c:	2300      	movs	r3, #0
 800427e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004280:	2300      	movs	r3, #0
 8004282:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004284:	2300      	movs	r3, #0
 8004286:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004288:	2300      	movs	r3, #0
 800428a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800428c:	4b79      	ldr	r3, [pc, #484]	@ (8004474 <HAL_RCC_GetSysClockFreq+0x200>)
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f003 030c 	and.w	r3, r3, #12
 8004294:	2b08      	cmp	r3, #8
 8004296:	d00d      	beq.n	80042b4 <HAL_RCC_GetSysClockFreq+0x40>
 8004298:	2b08      	cmp	r3, #8
 800429a:	f200 80e1 	bhi.w	8004460 <HAL_RCC_GetSysClockFreq+0x1ec>
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d002      	beq.n	80042a8 <HAL_RCC_GetSysClockFreq+0x34>
 80042a2:	2b04      	cmp	r3, #4
 80042a4:	d003      	beq.n	80042ae <HAL_RCC_GetSysClockFreq+0x3a>
 80042a6:	e0db      	b.n	8004460 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042a8:	4b73      	ldr	r3, [pc, #460]	@ (8004478 <HAL_RCC_GetSysClockFreq+0x204>)
 80042aa:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80042ac:	e0db      	b.n	8004466 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042ae:	4b73      	ldr	r3, [pc, #460]	@ (800447c <HAL_RCC_GetSysClockFreq+0x208>)
 80042b0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80042b2:	e0d8      	b.n	8004466 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042b4:	4b6f      	ldr	r3, [pc, #444]	@ (8004474 <HAL_RCC_GetSysClockFreq+0x200>)
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80042bc:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042be:	4b6d      	ldr	r3, [pc, #436]	@ (8004474 <HAL_RCC_GetSysClockFreq+0x200>)
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d063      	beq.n	8004392 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042ca:	4b6a      	ldr	r3, [pc, #424]	@ (8004474 <HAL_RCC_GetSysClockFreq+0x200>)
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	099b      	lsrs	r3, r3, #6
 80042d0:	2200      	movs	r2, #0
 80042d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80042d4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80042d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80042de:	2300      	movs	r3, #0
 80042e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80042e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80042e6:	4622      	mov	r2, r4
 80042e8:	462b      	mov	r3, r5
 80042ea:	f04f 0000 	mov.w	r0, #0
 80042ee:	f04f 0100 	mov.w	r1, #0
 80042f2:	0159      	lsls	r1, r3, #5
 80042f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042f8:	0150      	lsls	r0, r2, #5
 80042fa:	4602      	mov	r2, r0
 80042fc:	460b      	mov	r3, r1
 80042fe:	4621      	mov	r1, r4
 8004300:	1a51      	subs	r1, r2, r1
 8004302:	6139      	str	r1, [r7, #16]
 8004304:	4629      	mov	r1, r5
 8004306:	eb63 0301 	sbc.w	r3, r3, r1
 800430a:	617b      	str	r3, [r7, #20]
 800430c:	f04f 0200 	mov.w	r2, #0
 8004310:	f04f 0300 	mov.w	r3, #0
 8004314:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004318:	4659      	mov	r1, fp
 800431a:	018b      	lsls	r3, r1, #6
 800431c:	4651      	mov	r1, sl
 800431e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004322:	4651      	mov	r1, sl
 8004324:	018a      	lsls	r2, r1, #6
 8004326:	4651      	mov	r1, sl
 8004328:	ebb2 0801 	subs.w	r8, r2, r1
 800432c:	4659      	mov	r1, fp
 800432e:	eb63 0901 	sbc.w	r9, r3, r1
 8004332:	f04f 0200 	mov.w	r2, #0
 8004336:	f04f 0300 	mov.w	r3, #0
 800433a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800433e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004342:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004346:	4690      	mov	r8, r2
 8004348:	4699      	mov	r9, r3
 800434a:	4623      	mov	r3, r4
 800434c:	eb18 0303 	adds.w	r3, r8, r3
 8004350:	60bb      	str	r3, [r7, #8]
 8004352:	462b      	mov	r3, r5
 8004354:	eb49 0303 	adc.w	r3, r9, r3
 8004358:	60fb      	str	r3, [r7, #12]
 800435a:	f04f 0200 	mov.w	r2, #0
 800435e:	f04f 0300 	mov.w	r3, #0
 8004362:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004366:	4629      	mov	r1, r5
 8004368:	024b      	lsls	r3, r1, #9
 800436a:	4621      	mov	r1, r4
 800436c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004370:	4621      	mov	r1, r4
 8004372:	024a      	lsls	r2, r1, #9
 8004374:	4610      	mov	r0, r2
 8004376:	4619      	mov	r1, r3
 8004378:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800437a:	2200      	movs	r2, #0
 800437c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800437e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004380:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004384:	f7fb ff46 	bl	8000214 <__aeabi_uldivmod>
 8004388:	4602      	mov	r2, r0
 800438a:	460b      	mov	r3, r1
 800438c:	4613      	mov	r3, r2
 800438e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004390:	e058      	b.n	8004444 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004392:	4b38      	ldr	r3, [pc, #224]	@ (8004474 <HAL_RCC_GetSysClockFreq+0x200>)
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	099b      	lsrs	r3, r3, #6
 8004398:	2200      	movs	r2, #0
 800439a:	4618      	mov	r0, r3
 800439c:	4611      	mov	r1, r2
 800439e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80043a2:	623b      	str	r3, [r7, #32]
 80043a4:	2300      	movs	r3, #0
 80043a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80043a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80043ac:	4642      	mov	r2, r8
 80043ae:	464b      	mov	r3, r9
 80043b0:	f04f 0000 	mov.w	r0, #0
 80043b4:	f04f 0100 	mov.w	r1, #0
 80043b8:	0159      	lsls	r1, r3, #5
 80043ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043be:	0150      	lsls	r0, r2, #5
 80043c0:	4602      	mov	r2, r0
 80043c2:	460b      	mov	r3, r1
 80043c4:	4641      	mov	r1, r8
 80043c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80043ca:	4649      	mov	r1, r9
 80043cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80043d0:	f04f 0200 	mov.w	r2, #0
 80043d4:	f04f 0300 	mov.w	r3, #0
 80043d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80043dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80043e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80043e4:	ebb2 040a 	subs.w	r4, r2, sl
 80043e8:	eb63 050b 	sbc.w	r5, r3, fp
 80043ec:	f04f 0200 	mov.w	r2, #0
 80043f0:	f04f 0300 	mov.w	r3, #0
 80043f4:	00eb      	lsls	r3, r5, #3
 80043f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043fa:	00e2      	lsls	r2, r4, #3
 80043fc:	4614      	mov	r4, r2
 80043fe:	461d      	mov	r5, r3
 8004400:	4643      	mov	r3, r8
 8004402:	18e3      	adds	r3, r4, r3
 8004404:	603b      	str	r3, [r7, #0]
 8004406:	464b      	mov	r3, r9
 8004408:	eb45 0303 	adc.w	r3, r5, r3
 800440c:	607b      	str	r3, [r7, #4]
 800440e:	f04f 0200 	mov.w	r2, #0
 8004412:	f04f 0300 	mov.w	r3, #0
 8004416:	e9d7 4500 	ldrd	r4, r5, [r7]
 800441a:	4629      	mov	r1, r5
 800441c:	028b      	lsls	r3, r1, #10
 800441e:	4621      	mov	r1, r4
 8004420:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004424:	4621      	mov	r1, r4
 8004426:	028a      	lsls	r2, r1, #10
 8004428:	4610      	mov	r0, r2
 800442a:	4619      	mov	r1, r3
 800442c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800442e:	2200      	movs	r2, #0
 8004430:	61bb      	str	r3, [r7, #24]
 8004432:	61fa      	str	r2, [r7, #28]
 8004434:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004438:	f7fb feec 	bl	8000214 <__aeabi_uldivmod>
 800443c:	4602      	mov	r2, r0
 800443e:	460b      	mov	r3, r1
 8004440:	4613      	mov	r3, r2
 8004442:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004444:	4b0b      	ldr	r3, [pc, #44]	@ (8004474 <HAL_RCC_GetSysClockFreq+0x200>)
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	0c1b      	lsrs	r3, r3, #16
 800444a:	f003 0303 	and.w	r3, r3, #3
 800444e:	3301      	adds	r3, #1
 8004450:	005b      	lsls	r3, r3, #1
 8004452:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004454:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004456:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004458:	fbb2 f3f3 	udiv	r3, r2, r3
 800445c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800445e:	e002      	b.n	8004466 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004460:	4b05      	ldr	r3, [pc, #20]	@ (8004478 <HAL_RCC_GetSysClockFreq+0x204>)
 8004462:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004464:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004466:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004468:	4618      	mov	r0, r3
 800446a:	3750      	adds	r7, #80	@ 0x50
 800446c:	46bd      	mov	sp, r7
 800446e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004472:	bf00      	nop
 8004474:	40023800 	.word	0x40023800
 8004478:	00f42400 	.word	0x00f42400
 800447c:	007a1200 	.word	0x007a1200

08004480 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004480:	b480      	push	{r7}
 8004482:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004484:	4b03      	ldr	r3, [pc, #12]	@ (8004494 <HAL_RCC_GetHCLKFreq+0x14>)
 8004486:	681b      	ldr	r3, [r3, #0]
}
 8004488:	4618      	mov	r0, r3
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	20000000 	.word	0x20000000

08004498 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800449c:	4b06      	ldr	r3, [pc, #24]	@ (80044b8 <HAL_RCC_NMI_IRQHandler+0x20>)
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044a4:	2b80      	cmp	r3, #128	@ 0x80
 80044a6:	d104      	bne.n	80044b2 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80044a8:	f000 f80a 	bl	80044c0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80044ac:	4b03      	ldr	r3, [pc, #12]	@ (80044bc <HAL_RCC_NMI_IRQHandler+0x24>)
 80044ae:	2280      	movs	r2, #128	@ 0x80
 80044b0:	701a      	strb	r2, [r3, #0]
  }
}
 80044b2:	bf00      	nop
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	40023800 	.word	0x40023800
 80044bc:	4002380e 	.word	0x4002380e

080044c0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80044c0:	b480      	push	{r7}
 80044c2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80044c4:	bf00      	nop
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
	...

080044d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b086      	sub	sp, #24
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044d8:	2300      	movs	r3, #0
 80044da:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0U;
 80044dc:	2300      	movs	r3, #0
 80044de:	60fb      	str	r3, [r7, #12]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 80044e0:	2300      	movs	r3, #0
 80044e2:	617b      	str	r3, [r7, #20]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0301 	and.w	r3, r3, #1
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d010      	beq.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80044f0:	4b87      	ldr	r3, [pc, #540]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80044f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044f6:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	4984      	ldr	r1, [pc, #528]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004500:	4313      	orrs	r3, r2
 8004502:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d101      	bne.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      plli2sused = 1U;
 800450e:	2301      	movs	r3, #1
 8004510:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b00      	cmp	r3, #0
 800451c:	d010      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800451e:	4b7c      	ldr	r3, [pc, #496]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004520:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004524:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	699b      	ldr	r3, [r3, #24]
 800452c:	4978      	ldr	r1, [pc, #480]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800452e:	4313      	orrs	r3, r2
 8004530:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d101      	bne.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x70>
    {
      plli2sused = 1U;
 800453c:	2301      	movs	r3, #1
 800453e:	617b      	str	r3, [r7, #20]
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0308 	and.w	r3, r3, #8
 8004548:	2b00      	cmp	r3, #0
 800454a:	f000 8083 	beq.w	8004654 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800454e:	2300      	movs	r3, #0
 8004550:	60bb      	str	r3, [r7, #8]
 8004552:	4b6f      	ldr	r3, [pc, #444]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004556:	4a6e      	ldr	r2, [pc, #440]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004558:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800455c:	6413      	str	r3, [r2, #64]	@ 0x40
 800455e:	4b6c      	ldr	r3, [pc, #432]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004562:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004566:	60bb      	str	r3, [r7, #8]
 8004568:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800456a:	4b6a      	ldr	r3, [pc, #424]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a69      	ldr	r2, [pc, #420]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004570:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004574:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004576:	f7fc fd87 	bl	8001088 <HAL_GetTick>
 800457a:	6138      	str	r0, [r7, #16]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800457c:	e008      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800457e:	f7fc fd83 	bl	8001088 <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	2b02      	cmp	r3, #2
 800458a:	d901      	bls.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e162      	b.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x386>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004590:	4b60      	ldr	r3, [pc, #384]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004598:	2b00      	cmp	r3, #0
 800459a:	d0f0      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0xae>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800459c:	4b5c      	ldr	r3, [pc, #368]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800459e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045a4:	60fb      	str	r3, [r7, #12]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d02f      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	69db      	ldr	r3, [r3, #28]
 80045b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d028      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045ba:	4b55      	ldr	r3, [pc, #340]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80045bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045c2:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045c4:	4b54      	ldr	r3, [pc, #336]	@ (8004718 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80045c6:	2201      	movs	r2, #1
 80045c8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045ca:	4b53      	ldr	r3, [pc, #332]	@ (8004718 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80045cc:	2200      	movs	r2, #0
 80045ce:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80045d0:	4a4f      	ldr	r2, [pc, #316]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80045d6:	4b4e      	ldr	r3, [pc, #312]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80045d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d114      	bne.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80045e2:	f7fc fd51 	bl	8001088 <HAL_GetTick>
 80045e6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045e8:	e00a      	b.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045ea:	f7fc fd4d 	bl	8001088 <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d901      	bls.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x130>
          {
            return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e12a      	b.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x386>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004600:	4b43      	ldr	r3, [pc, #268]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004602:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004604:	f003 0302 	and.w	r3, r3, #2
 8004608:	2b00      	cmp	r3, #0
 800460a:	d0ee      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x11a>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	69db      	ldr	r3, [r3, #28]
 8004610:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004614:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004618:	d10d      	bne.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x166>
 800461a:	4b3d      	ldr	r3, [pc, #244]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	69db      	ldr	r3, [r3, #28]
 8004626:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800462a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800462e:	4938      	ldr	r1, [pc, #224]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004630:	4313      	orrs	r3, r2
 8004632:	608b      	str	r3, [r1, #8]
 8004634:	e005      	b.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8004636:	4b36      	ldr	r3, [pc, #216]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	4a35      	ldr	r2, [pc, #212]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800463c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004640:	6093      	str	r3, [r2, #8]
 8004642:	4b33      	ldr	r3, [pc, #204]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004644:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	69db      	ldr	r3, [r3, #28]
 800464a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800464e:	4930      	ldr	r1, [pc, #192]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004650:	4313      	orrs	r3, r2
 8004652:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0304 	and.w	r3, r3, #4
 800465c:	2b00      	cmp	r3, #0
 800465e:	d004      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8004666:	4b2d      	ldr	r3, [pc, #180]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004668:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0310 	and.w	r3, r3, #16
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00a      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004676:	4b26      	ldr	r3, [pc, #152]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004678:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800467c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004684:	4922      	ldr	r1, [pc, #136]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004686:	4313      	orrs	r3, r2
 8004688:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0320 	and.w	r3, r3, #32
 8004694:	2b00      	cmp	r3, #0
 8004696:	d011      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004698:	4b1d      	ldr	r3, [pc, #116]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800469a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800469e:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046a6:	491a      	ldr	r1, [pc, #104]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046a8:	4313      	orrs	r3, r2
 80046aa:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046b6:	d101      	bne.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      plli2sused = 1U;
 80046b8:	2301      	movs	r3, #1
 80046ba:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00a      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80046c8:	4b11      	ldr	r3, [pc, #68]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046ce:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a1b      	ldr	r3, [r3, #32]
 80046d6:	490e      	ldr	r1, [pc, #56]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d004      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2b80      	cmp	r3, #128	@ 0x80
 80046ea:	f040 8091 	bne.w	8004810 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80046ee:	4b0c      	ldr	r3, [pc, #48]	@ (8004720 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80046f0:	2200      	movs	r2, #0
 80046f2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80046f4:	f7fc fcc8 	bl	8001088 <HAL_GetTick>
 80046f8:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046fa:	e013      	b.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80046fc:	f7fc fcc4 	bl	8001088 <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	2b02      	cmp	r3, #2
 8004708:	d90c      	bls.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x254>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e0a3      	b.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x386>
 800470e:	bf00      	nop
 8004710:	40023800 	.word	0x40023800
 8004714:	40007000 	.word	0x40007000
 8004718:	42470e40 	.word	0x42470e40
 800471c:	424711e0 	.word	0x424711e0
 8004720:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004724:	4b4e      	ldr	r3, [pc, #312]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d1e5      	bne.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x22c>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8004730:	4a4c      	ldr	r2, [pc, #304]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004736:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0301 	and.w	r3, r3, #1
 8004740:	2b00      	cmp	r3, #0
 8004742:	d003      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	695b      	ldr	r3, [r3, #20]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d023      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004754:	2b00      	cmp	r3, #0
 8004756:	d003      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x290>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	699b      	ldr	r3, [r3, #24]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d019      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004768:	2b00      	cmp	r3, #0
 800476a:	d004      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004770:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004774:	d00e      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 800477e:	2b00      	cmp	r3, #0
 8004780:	d019      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a1b      	ldr	r3, [r3, #32]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d115      	bne.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800478e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004792:	d110      	bne.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685a      	ldr	r2, [r3, #4]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	019b      	lsls	r3, r3, #6
 800479e:	431a      	orrs	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	061b      	lsls	r3, r3, #24
 80047a6:	431a      	orrs	r2, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	071b      	lsls	r3, r3, #28
 80047ae:	492c      	ldr	r1, [pc, #176]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80047b0:	4313      	orrs	r3, r2
 80047b2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d010      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x314>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685a      	ldr	r2, [r3, #4]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	019b      	lsls	r3, r3, #6
 80047cc:	431a      	orrs	r2, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	061b      	lsls	r3, r3, #24
 80047d4:	431a      	orrs	r2, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	071b      	lsls	r3, r3, #28
 80047dc:	4920      	ldr	r1, [pc, #128]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80047de:	4313      	orrs	r3, r2
 80047e0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80047e4:	4b20      	ldr	r3, [pc, #128]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 80047e6:	2201      	movs	r2, #1
 80047e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80047ea:	f7fc fc4d 	bl	8001088 <HAL_GetTick>
 80047ee:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80047f0:	e008      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80047f2:	f7fc fc49 	bl	8001088 <HAL_GetTick>
 80047f6:	4602      	mov	r2, r0
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d901      	bls.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x334>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	e028      	b.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x386>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004804:	4b16      	ldr	r3, [pc, #88]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d0f0      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x322>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004818:	2b00      	cmp	r3, #0
 800481a:	d00a      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800481c:	4b10      	ldr	r3, [pc, #64]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800481e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004822:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800482a:	490d      	ldr	r1, [pc, #52]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800482c:	4313      	orrs	r3, r2
 800482e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00a      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800483e:	4b08      	ldr	r3, [pc, #32]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004840:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004844:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800484c:	4904      	ldr	r1, [pc, #16]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800484e:	4313      	orrs	r3, r2
 8004850:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3718      	adds	r7, #24
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	40023800 	.word	0x40023800
 8004864:	424710d8 	.word	0x424710d8
 8004868:	42470068 	.word	0x42470068

0800486c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b086      	sub	sp, #24
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d101      	bne.n	800487e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e273      	b.n	8004d66 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0301 	and.w	r3, r3, #1
 8004886:	2b00      	cmp	r3, #0
 8004888:	d075      	beq.n	8004976 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800488a:	4b88      	ldr	r3, [pc, #544]	@ (8004aac <HAL_RCC_OscConfig+0x240>)
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f003 030c 	and.w	r3, r3, #12
 8004892:	2b04      	cmp	r3, #4
 8004894:	d00c      	beq.n	80048b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004896:	4b85      	ldr	r3, [pc, #532]	@ (8004aac <HAL_RCC_OscConfig+0x240>)
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800489e:	2b08      	cmp	r3, #8
 80048a0:	d112      	bne.n	80048c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048a2:	4b82      	ldr	r3, [pc, #520]	@ (8004aac <HAL_RCC_OscConfig+0x240>)
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80048ae:	d10b      	bne.n	80048c8 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048b0:	4b7e      	ldr	r3, [pc, #504]	@ (8004aac <HAL_RCC_OscConfig+0x240>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d05b      	beq.n	8004974 <HAL_RCC_OscConfig+0x108>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d157      	bne.n	8004974 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e24e      	b.n	8004d66 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048d0:	d106      	bne.n	80048e0 <HAL_RCC_OscConfig+0x74>
 80048d2:	4b76      	ldr	r3, [pc, #472]	@ (8004aac <HAL_RCC_OscConfig+0x240>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a75      	ldr	r2, [pc, #468]	@ (8004aac <HAL_RCC_OscConfig+0x240>)
 80048d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048dc:	6013      	str	r3, [r2, #0]
 80048de:	e01d      	b.n	800491c <HAL_RCC_OscConfig+0xb0>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80048e8:	d10c      	bne.n	8004904 <HAL_RCC_OscConfig+0x98>
 80048ea:	4b70      	ldr	r3, [pc, #448]	@ (8004aac <HAL_RCC_OscConfig+0x240>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a6f      	ldr	r2, [pc, #444]	@ (8004aac <HAL_RCC_OscConfig+0x240>)
 80048f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80048f4:	6013      	str	r3, [r2, #0]
 80048f6:	4b6d      	ldr	r3, [pc, #436]	@ (8004aac <HAL_RCC_OscConfig+0x240>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a6c      	ldr	r2, [pc, #432]	@ (8004aac <HAL_RCC_OscConfig+0x240>)
 80048fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004900:	6013      	str	r3, [r2, #0]
 8004902:	e00b      	b.n	800491c <HAL_RCC_OscConfig+0xb0>
 8004904:	4b69      	ldr	r3, [pc, #420]	@ (8004aac <HAL_RCC_OscConfig+0x240>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a68      	ldr	r2, [pc, #416]	@ (8004aac <HAL_RCC_OscConfig+0x240>)
 800490a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800490e:	6013      	str	r3, [r2, #0]
 8004910:	4b66      	ldr	r3, [pc, #408]	@ (8004aac <HAL_RCC_OscConfig+0x240>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a65      	ldr	r2, [pc, #404]	@ (8004aac <HAL_RCC_OscConfig+0x240>)
 8004916:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800491a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d013      	beq.n	800494c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004924:	f7fc fbb0 	bl	8001088 <HAL_GetTick>
 8004928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800492a:	e008      	b.n	800493e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800492c:	f7fc fbac 	bl	8001088 <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	2b64      	cmp	r3, #100	@ 0x64
 8004938:	d901      	bls.n	800493e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e213      	b.n	8004d66 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800493e:	4b5b      	ldr	r3, [pc, #364]	@ (8004aac <HAL_RCC_OscConfig+0x240>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d0f0      	beq.n	800492c <HAL_RCC_OscConfig+0xc0>
 800494a:	e014      	b.n	8004976 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800494c:	f7fc fb9c 	bl	8001088 <HAL_GetTick>
 8004950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004952:	e008      	b.n	8004966 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004954:	f7fc fb98 	bl	8001088 <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	2b64      	cmp	r3, #100	@ 0x64
 8004960:	d901      	bls.n	8004966 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e1ff      	b.n	8004d66 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004966:	4b51      	ldr	r3, [pc, #324]	@ (8004aac <HAL_RCC_OscConfig+0x240>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1f0      	bne.n	8004954 <HAL_RCC_OscConfig+0xe8>
 8004972:	e000      	b.n	8004976 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004974:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0302 	and.w	r3, r3, #2
 800497e:	2b00      	cmp	r3, #0
 8004980:	d063      	beq.n	8004a4a <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004982:	4b4a      	ldr	r3, [pc, #296]	@ (8004aac <HAL_RCC_OscConfig+0x240>)
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f003 030c 	and.w	r3, r3, #12
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00b      	beq.n	80049a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800498e:	4b47      	ldr	r3, [pc, #284]	@ (8004aac <HAL_RCC_OscConfig+0x240>)
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004996:	2b08      	cmp	r3, #8
 8004998:	d11c      	bne.n	80049d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800499a:	4b44      	ldr	r3, [pc, #272]	@ (8004aac <HAL_RCC_OscConfig+0x240>)
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d116      	bne.n	80049d4 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049a6:	4b41      	ldr	r3, [pc, #260]	@ (8004aac <HAL_RCC_OscConfig+0x240>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0302 	and.w	r3, r3, #2
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d005      	beq.n	80049be <HAL_RCC_OscConfig+0x152>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d001      	beq.n	80049be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e1d3      	b.n	8004d66 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049be:	4b3b      	ldr	r3, [pc, #236]	@ (8004aac <HAL_RCC_OscConfig+0x240>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	00db      	lsls	r3, r3, #3
 80049cc:	4937      	ldr	r1, [pc, #220]	@ (8004aac <HAL_RCC_OscConfig+0x240>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049d2:	e03a      	b.n	8004a4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d020      	beq.n	8004a1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049dc:	4b34      	ldr	r3, [pc, #208]	@ (8004ab0 <HAL_RCC_OscConfig+0x244>)
 80049de:	2201      	movs	r2, #1
 80049e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e2:	f7fc fb51 	bl	8001088 <HAL_GetTick>
 80049e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049e8:	e008      	b.n	80049fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049ea:	f7fc fb4d 	bl	8001088 <HAL_GetTick>
 80049ee:	4602      	mov	r2, r0
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d901      	bls.n	80049fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	e1b4      	b.n	8004d66 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049fc:	4b2b      	ldr	r3, [pc, #172]	@ (8004aac <HAL_RCC_OscConfig+0x240>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 0302 	and.w	r3, r3, #2
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d0f0      	beq.n	80049ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a08:	4b28      	ldr	r3, [pc, #160]	@ (8004aac <HAL_RCC_OscConfig+0x240>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	00db      	lsls	r3, r3, #3
 8004a16:	4925      	ldr	r1, [pc, #148]	@ (8004aac <HAL_RCC_OscConfig+0x240>)
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	600b      	str	r3, [r1, #0]
 8004a1c:	e015      	b.n	8004a4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a1e:	4b24      	ldr	r3, [pc, #144]	@ (8004ab0 <HAL_RCC_OscConfig+0x244>)
 8004a20:	2200      	movs	r2, #0
 8004a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a24:	f7fc fb30 	bl	8001088 <HAL_GetTick>
 8004a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a2a:	e008      	b.n	8004a3e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a2c:	f7fc fb2c 	bl	8001088 <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d901      	bls.n	8004a3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e193      	b.n	8004d66 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a3e:	4b1b      	ldr	r3, [pc, #108]	@ (8004aac <HAL_RCC_OscConfig+0x240>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0302 	and.w	r3, r3, #2
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d1f0      	bne.n	8004a2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0308 	and.w	r3, r3, #8
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d036      	beq.n	8004ac4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d016      	beq.n	8004a8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a5e:	4b15      	ldr	r3, [pc, #84]	@ (8004ab4 <HAL_RCC_OscConfig+0x248>)
 8004a60:	2201      	movs	r2, #1
 8004a62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a64:	f7fc fb10 	bl	8001088 <HAL_GetTick>
 8004a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a6a:	e008      	b.n	8004a7e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a6c:	f7fc fb0c 	bl	8001088 <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d901      	bls.n	8004a7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e173      	b.n	8004d66 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8004aac <HAL_RCC_OscConfig+0x240>)
 8004a80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a82:	f003 0302 	and.w	r3, r3, #2
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d0f0      	beq.n	8004a6c <HAL_RCC_OscConfig+0x200>
 8004a8a:	e01b      	b.n	8004ac4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a8c:	4b09      	ldr	r3, [pc, #36]	@ (8004ab4 <HAL_RCC_OscConfig+0x248>)
 8004a8e:	2200      	movs	r2, #0
 8004a90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a92:	f7fc faf9 	bl	8001088 <HAL_GetTick>
 8004a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a98:	e00e      	b.n	8004ab8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a9a:	f7fc faf5 	bl	8001088 <HAL_GetTick>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d907      	bls.n	8004ab8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e15c      	b.n	8004d66 <HAL_RCC_OscConfig+0x4fa>
 8004aac:	40023800 	.word	0x40023800
 8004ab0:	42470000 	.word	0x42470000
 8004ab4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ab8:	4b8a      	ldr	r3, [pc, #552]	@ (8004ce4 <HAL_RCC_OscConfig+0x478>)
 8004aba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004abc:	f003 0302 	and.w	r3, r3, #2
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d1ea      	bne.n	8004a9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0304 	and.w	r3, r3, #4
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f000 8097 	beq.w	8004c00 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ad6:	4b83      	ldr	r3, [pc, #524]	@ (8004ce4 <HAL_RCC_OscConfig+0x478>)
 8004ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ada:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d10f      	bne.n	8004b02 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	60bb      	str	r3, [r7, #8]
 8004ae6:	4b7f      	ldr	r3, [pc, #508]	@ (8004ce4 <HAL_RCC_OscConfig+0x478>)
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aea:	4a7e      	ldr	r2, [pc, #504]	@ (8004ce4 <HAL_RCC_OscConfig+0x478>)
 8004aec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004af0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004af2:	4b7c      	ldr	r3, [pc, #496]	@ (8004ce4 <HAL_RCC_OscConfig+0x478>)
 8004af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004afa:	60bb      	str	r3, [r7, #8]
 8004afc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004afe:	2301      	movs	r3, #1
 8004b00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b02:	4b79      	ldr	r3, [pc, #484]	@ (8004ce8 <HAL_RCC_OscConfig+0x47c>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d118      	bne.n	8004b40 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b0e:	4b76      	ldr	r3, [pc, #472]	@ (8004ce8 <HAL_RCC_OscConfig+0x47c>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a75      	ldr	r2, [pc, #468]	@ (8004ce8 <HAL_RCC_OscConfig+0x47c>)
 8004b14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b1a:	f7fc fab5 	bl	8001088 <HAL_GetTick>
 8004b1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b20:	e008      	b.n	8004b34 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b22:	f7fc fab1 	bl	8001088 <HAL_GetTick>
 8004b26:	4602      	mov	r2, r0
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d901      	bls.n	8004b34 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004b30:	2303      	movs	r3, #3
 8004b32:	e118      	b.n	8004d66 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b34:	4b6c      	ldr	r3, [pc, #432]	@ (8004ce8 <HAL_RCC_OscConfig+0x47c>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d0f0      	beq.n	8004b22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d106      	bne.n	8004b56 <HAL_RCC_OscConfig+0x2ea>
 8004b48:	4b66      	ldr	r3, [pc, #408]	@ (8004ce4 <HAL_RCC_OscConfig+0x478>)
 8004b4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b4c:	4a65      	ldr	r2, [pc, #404]	@ (8004ce4 <HAL_RCC_OscConfig+0x478>)
 8004b4e:	f043 0301 	orr.w	r3, r3, #1
 8004b52:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b54:	e01c      	b.n	8004b90 <HAL_RCC_OscConfig+0x324>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	2b05      	cmp	r3, #5
 8004b5c:	d10c      	bne.n	8004b78 <HAL_RCC_OscConfig+0x30c>
 8004b5e:	4b61      	ldr	r3, [pc, #388]	@ (8004ce4 <HAL_RCC_OscConfig+0x478>)
 8004b60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b62:	4a60      	ldr	r2, [pc, #384]	@ (8004ce4 <HAL_RCC_OscConfig+0x478>)
 8004b64:	f043 0304 	orr.w	r3, r3, #4
 8004b68:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b6a:	4b5e      	ldr	r3, [pc, #376]	@ (8004ce4 <HAL_RCC_OscConfig+0x478>)
 8004b6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b6e:	4a5d      	ldr	r2, [pc, #372]	@ (8004ce4 <HAL_RCC_OscConfig+0x478>)
 8004b70:	f043 0301 	orr.w	r3, r3, #1
 8004b74:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b76:	e00b      	b.n	8004b90 <HAL_RCC_OscConfig+0x324>
 8004b78:	4b5a      	ldr	r3, [pc, #360]	@ (8004ce4 <HAL_RCC_OscConfig+0x478>)
 8004b7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b7c:	4a59      	ldr	r2, [pc, #356]	@ (8004ce4 <HAL_RCC_OscConfig+0x478>)
 8004b7e:	f023 0301 	bic.w	r3, r3, #1
 8004b82:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b84:	4b57      	ldr	r3, [pc, #348]	@ (8004ce4 <HAL_RCC_OscConfig+0x478>)
 8004b86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b88:	4a56      	ldr	r2, [pc, #344]	@ (8004ce4 <HAL_RCC_OscConfig+0x478>)
 8004b8a:	f023 0304 	bic.w	r3, r3, #4
 8004b8e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d015      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b98:	f7fc fa76 	bl	8001088 <HAL_GetTick>
 8004b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b9e:	e00a      	b.n	8004bb6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ba0:	f7fc fa72 	bl	8001088 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e0d7      	b.n	8004d66 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bb6:	4b4b      	ldr	r3, [pc, #300]	@ (8004ce4 <HAL_RCC_OscConfig+0x478>)
 8004bb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bba:	f003 0302 	and.w	r3, r3, #2
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d0ee      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x334>
 8004bc2:	e014      	b.n	8004bee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bc4:	f7fc fa60 	bl	8001088 <HAL_GetTick>
 8004bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bca:	e00a      	b.n	8004be2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bcc:	f7fc fa5c 	bl	8001088 <HAL_GetTick>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d901      	bls.n	8004be2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e0c1      	b.n	8004d66 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004be2:	4b40      	ldr	r3, [pc, #256]	@ (8004ce4 <HAL_RCC_OscConfig+0x478>)
 8004be4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004be6:	f003 0302 	and.w	r3, r3, #2
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d1ee      	bne.n	8004bcc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bee:	7dfb      	ldrb	r3, [r7, #23]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d105      	bne.n	8004c00 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bf4:	4b3b      	ldr	r3, [pc, #236]	@ (8004ce4 <HAL_RCC_OscConfig+0x478>)
 8004bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bf8:	4a3a      	ldr	r2, [pc, #232]	@ (8004ce4 <HAL_RCC_OscConfig+0x478>)
 8004bfa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004bfe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	699b      	ldr	r3, [r3, #24]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	f000 80ad 	beq.w	8004d64 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c0a:	4b36      	ldr	r3, [pc, #216]	@ (8004ce4 <HAL_RCC_OscConfig+0x478>)
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f003 030c 	and.w	r3, r3, #12
 8004c12:	2b08      	cmp	r3, #8
 8004c14:	d060      	beq.n	8004cd8 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	699b      	ldr	r3, [r3, #24]
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d145      	bne.n	8004caa <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c1e:	4b33      	ldr	r3, [pc, #204]	@ (8004cec <HAL_RCC_OscConfig+0x480>)
 8004c20:	2200      	movs	r2, #0
 8004c22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c24:	f7fc fa30 	bl	8001088 <HAL_GetTick>
 8004c28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c2a:	e008      	b.n	8004c3e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c2c:	f7fc fa2c 	bl	8001088 <HAL_GetTick>
 8004c30:	4602      	mov	r2, r0
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d901      	bls.n	8004c3e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e093      	b.n	8004d66 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c3e:	4b29      	ldr	r3, [pc, #164]	@ (8004ce4 <HAL_RCC_OscConfig+0x478>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d1f0      	bne.n	8004c2c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	69da      	ldr	r2, [r3, #28]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a1b      	ldr	r3, [r3, #32]
 8004c52:	431a      	orrs	r2, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c58:	019b      	lsls	r3, r3, #6
 8004c5a:	431a      	orrs	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c60:	085b      	lsrs	r3, r3, #1
 8004c62:	3b01      	subs	r3, #1
 8004c64:	041b      	lsls	r3, r3, #16
 8004c66:	431a      	orrs	r2, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c6c:	061b      	lsls	r3, r3, #24
 8004c6e:	431a      	orrs	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c74:	071b      	lsls	r3, r3, #28
 8004c76:	491b      	ldr	r1, [pc, #108]	@ (8004ce4 <HAL_RCC_OscConfig+0x478>)
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c7c:	4b1b      	ldr	r3, [pc, #108]	@ (8004cec <HAL_RCC_OscConfig+0x480>)
 8004c7e:	2201      	movs	r2, #1
 8004c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c82:	f7fc fa01 	bl	8001088 <HAL_GetTick>
 8004c86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c88:	e008      	b.n	8004c9c <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c8a:	f7fc f9fd 	bl	8001088 <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d901      	bls.n	8004c9c <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e064      	b.n	8004d66 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c9c:	4b11      	ldr	r3, [pc, #68]	@ (8004ce4 <HAL_RCC_OscConfig+0x478>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d0f0      	beq.n	8004c8a <HAL_RCC_OscConfig+0x41e>
 8004ca8:	e05c      	b.n	8004d64 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004caa:	4b10      	ldr	r3, [pc, #64]	@ (8004cec <HAL_RCC_OscConfig+0x480>)
 8004cac:	2200      	movs	r2, #0
 8004cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb0:	f7fc f9ea 	bl	8001088 <HAL_GetTick>
 8004cb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cb6:	e008      	b.n	8004cca <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cb8:	f7fc f9e6 	bl	8001088 <HAL_GetTick>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	d901      	bls.n	8004cca <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e04d      	b.n	8004d66 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cca:	4b06      	ldr	r3, [pc, #24]	@ (8004ce4 <HAL_RCC_OscConfig+0x478>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d1f0      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x44c>
 8004cd6:	e045      	b.n	8004d64 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	699b      	ldr	r3, [r3, #24]
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d107      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e040      	b.n	8004d66 <HAL_RCC_OscConfig+0x4fa>
 8004ce4:	40023800 	.word	0x40023800
 8004ce8:	40007000 	.word	0x40007000
 8004cec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004cf0:	4b1f      	ldr	r3, [pc, #124]	@ (8004d70 <HAL_RCC_OscConfig+0x504>)
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d030      	beq.n	8004d60 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d129      	bne.n	8004d60 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d122      	bne.n	8004d60 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004d20:	4013      	ands	r3, r2
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004d26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d119      	bne.n	8004d60 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d36:	085b      	lsrs	r3, r3, #1
 8004d38:	3b01      	subs	r3, #1
 8004d3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d10f      	bne.n	8004d60 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d107      	bne.n	8004d60 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d5a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d001      	beq.n	8004d64 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e000      	b.n	8004d66 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3718      	adds	r7, #24
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	40023800 	.word	0x40023800

08004d74 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d74:	b084      	sub	sp, #16
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b084      	sub	sp, #16
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
 8004d7e:	f107 001c 	add.w	r0, r7, #28
 8004d82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d122      	bne.n	8004dd2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d90:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004da0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004db4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d105      	bne.n	8004dc6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f001 fbe8 	bl	800659c <USB_CoreReset>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	73fb      	strb	r3, [r7, #15]
 8004dd0:	e01a      	b.n	8004e08 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f001 fbdc 	bl	800659c <USB_CoreReset>
 8004de4:	4603      	mov	r3, r0
 8004de6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004de8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d106      	bne.n	8004dfc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004df2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	639a      	str	r2, [r3, #56]	@ 0x38
 8004dfa:	e005      	b.n	8004e08 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e00:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d10b      	bne.n	8004e26 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	f043 0206 	orr.w	r2, r3, #6
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	f043 0220 	orr.w	r2, r3, #32
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3710      	adds	r7, #16
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e32:	b004      	add	sp, #16
 8004e34:	4770      	bx	lr
	...

08004e38 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b087      	sub	sp, #28
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	4613      	mov	r3, r2
 8004e44:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004e46:	79fb      	ldrb	r3, [r7, #7]
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d165      	bne.n	8004f18 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	4a41      	ldr	r2, [pc, #260]	@ (8004f54 <USB_SetTurnaroundTime+0x11c>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d906      	bls.n	8004e62 <USB_SetTurnaroundTime+0x2a>
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	4a40      	ldr	r2, [pc, #256]	@ (8004f58 <USB_SetTurnaroundTime+0x120>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d202      	bcs.n	8004e62 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004e5c:	230f      	movs	r3, #15
 8004e5e:	617b      	str	r3, [r7, #20]
 8004e60:	e062      	b.n	8004f28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	4a3c      	ldr	r2, [pc, #240]	@ (8004f58 <USB_SetTurnaroundTime+0x120>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d306      	bcc.n	8004e78 <USB_SetTurnaroundTime+0x40>
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	4a3b      	ldr	r2, [pc, #236]	@ (8004f5c <USB_SetTurnaroundTime+0x124>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d202      	bcs.n	8004e78 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004e72:	230e      	movs	r3, #14
 8004e74:	617b      	str	r3, [r7, #20]
 8004e76:	e057      	b.n	8004f28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	4a38      	ldr	r2, [pc, #224]	@ (8004f5c <USB_SetTurnaroundTime+0x124>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d306      	bcc.n	8004e8e <USB_SetTurnaroundTime+0x56>
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	4a37      	ldr	r2, [pc, #220]	@ (8004f60 <USB_SetTurnaroundTime+0x128>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d202      	bcs.n	8004e8e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004e88:	230d      	movs	r3, #13
 8004e8a:	617b      	str	r3, [r7, #20]
 8004e8c:	e04c      	b.n	8004f28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	4a33      	ldr	r2, [pc, #204]	@ (8004f60 <USB_SetTurnaroundTime+0x128>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d306      	bcc.n	8004ea4 <USB_SetTurnaroundTime+0x6c>
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	4a32      	ldr	r2, [pc, #200]	@ (8004f64 <USB_SetTurnaroundTime+0x12c>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d802      	bhi.n	8004ea4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004e9e:	230c      	movs	r3, #12
 8004ea0:	617b      	str	r3, [r7, #20]
 8004ea2:	e041      	b.n	8004f28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	4a2f      	ldr	r2, [pc, #188]	@ (8004f64 <USB_SetTurnaroundTime+0x12c>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d906      	bls.n	8004eba <USB_SetTurnaroundTime+0x82>
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	4a2e      	ldr	r2, [pc, #184]	@ (8004f68 <USB_SetTurnaroundTime+0x130>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d802      	bhi.n	8004eba <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004eb4:	230b      	movs	r3, #11
 8004eb6:	617b      	str	r3, [r7, #20]
 8004eb8:	e036      	b.n	8004f28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	4a2a      	ldr	r2, [pc, #168]	@ (8004f68 <USB_SetTurnaroundTime+0x130>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d906      	bls.n	8004ed0 <USB_SetTurnaroundTime+0x98>
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	4a29      	ldr	r2, [pc, #164]	@ (8004f6c <USB_SetTurnaroundTime+0x134>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d802      	bhi.n	8004ed0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004eca:	230a      	movs	r3, #10
 8004ecc:	617b      	str	r3, [r7, #20]
 8004ece:	e02b      	b.n	8004f28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	4a26      	ldr	r2, [pc, #152]	@ (8004f6c <USB_SetTurnaroundTime+0x134>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d906      	bls.n	8004ee6 <USB_SetTurnaroundTime+0xae>
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	4a25      	ldr	r2, [pc, #148]	@ (8004f70 <USB_SetTurnaroundTime+0x138>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d202      	bcs.n	8004ee6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004ee0:	2309      	movs	r3, #9
 8004ee2:	617b      	str	r3, [r7, #20]
 8004ee4:	e020      	b.n	8004f28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	4a21      	ldr	r2, [pc, #132]	@ (8004f70 <USB_SetTurnaroundTime+0x138>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d306      	bcc.n	8004efc <USB_SetTurnaroundTime+0xc4>
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	4a20      	ldr	r2, [pc, #128]	@ (8004f74 <USB_SetTurnaroundTime+0x13c>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d802      	bhi.n	8004efc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004ef6:	2308      	movs	r3, #8
 8004ef8:	617b      	str	r3, [r7, #20]
 8004efa:	e015      	b.n	8004f28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	4a1d      	ldr	r2, [pc, #116]	@ (8004f74 <USB_SetTurnaroundTime+0x13c>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d906      	bls.n	8004f12 <USB_SetTurnaroundTime+0xda>
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	4a1c      	ldr	r2, [pc, #112]	@ (8004f78 <USB_SetTurnaroundTime+0x140>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d202      	bcs.n	8004f12 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004f0c:	2307      	movs	r3, #7
 8004f0e:	617b      	str	r3, [r7, #20]
 8004f10:	e00a      	b.n	8004f28 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004f12:	2306      	movs	r3, #6
 8004f14:	617b      	str	r3, [r7, #20]
 8004f16:	e007      	b.n	8004f28 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004f18:	79fb      	ldrb	r3, [r7, #7]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d102      	bne.n	8004f24 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004f1e:	2309      	movs	r3, #9
 8004f20:	617b      	str	r3, [r7, #20]
 8004f22:	e001      	b.n	8004f28 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004f24:	2309      	movs	r3, #9
 8004f26:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	68da      	ldr	r2, [r3, #12]
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	029b      	lsls	r3, r3, #10
 8004f3c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004f40:	431a      	orrs	r2, r3
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	371c      	adds	r7, #28
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr
 8004f54:	00d8acbf 	.word	0x00d8acbf
 8004f58:	00e4e1c0 	.word	0x00e4e1c0
 8004f5c:	00f42400 	.word	0x00f42400
 8004f60:	01067380 	.word	0x01067380
 8004f64:	011a499f 	.word	0x011a499f
 8004f68:	01312cff 	.word	0x01312cff
 8004f6c:	014ca43f 	.word	0x014ca43f
 8004f70:	016e3600 	.word	0x016e3600
 8004f74:	01a6ab1f 	.word	0x01a6ab1f
 8004f78:	01e84800 	.word	0x01e84800

08004f7c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f043 0201 	orr.w	r2, r3, #1
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	370c      	adds	r7, #12
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr

08004f9e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f9e:	b480      	push	{r7}
 8004fa0:	b083      	sub	sp, #12
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f023 0201 	bic.w	r2, r3, #1
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004fb2:	2300      	movs	r3, #0
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	460b      	mov	r3, r1
 8004fca:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004fdc:	78fb      	ldrb	r3, [r7, #3]
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d115      	bne.n	800500e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004fee:	2001      	movs	r0, #1
 8004ff0:	f7fc f856 	bl	80010a0 <HAL_Delay>
      ms++;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f001 fa3f 	bl	800647e <USB_GetMode>
 8005000:	4603      	mov	r3, r0
 8005002:	2b01      	cmp	r3, #1
 8005004:	d01e      	beq.n	8005044 <USB_SetCurrentMode+0x84>
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2b31      	cmp	r3, #49	@ 0x31
 800500a:	d9f0      	bls.n	8004fee <USB_SetCurrentMode+0x2e>
 800500c:	e01a      	b.n	8005044 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800500e:	78fb      	ldrb	r3, [r7, #3]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d115      	bne.n	8005040 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005020:	2001      	movs	r0, #1
 8005022:	f7fc f83d 	bl	80010a0 <HAL_Delay>
      ms++;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	3301      	adds	r3, #1
 800502a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f001 fa26 	bl	800647e <USB_GetMode>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d005      	beq.n	8005044 <USB_SetCurrentMode+0x84>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2b31      	cmp	r3, #49	@ 0x31
 800503c:	d9f0      	bls.n	8005020 <USB_SetCurrentMode+0x60>
 800503e:	e001      	b.n	8005044 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e005      	b.n	8005050 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2b32      	cmp	r3, #50	@ 0x32
 8005048:	d101      	bne.n	800504e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e000      	b.n	8005050 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	3710      	adds	r7, #16
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005058:	b084      	sub	sp, #16
 800505a:	b580      	push	{r7, lr}
 800505c:	b086      	sub	sp, #24
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
 8005062:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005066:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800506a:	2300      	movs	r3, #0
 800506c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005072:	2300      	movs	r3, #0
 8005074:	613b      	str	r3, [r7, #16]
 8005076:	e009      	b.n	800508c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	3340      	adds	r3, #64	@ 0x40
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	4413      	add	r3, r2
 8005082:	2200      	movs	r2, #0
 8005084:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	3301      	adds	r3, #1
 800508a:	613b      	str	r3, [r7, #16]
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	2b0e      	cmp	r3, #14
 8005090:	d9f2      	bls.n	8005078 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005092:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005094:	2b00      	cmp	r3, #0
 8005096:	d11c      	bne.n	80050d2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80050a6:	f043 0302 	orr.w	r3, r3, #2
 80050aa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050b0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	601a      	str	r2, [r3, #0]
 80050d0:	e005      	b.n	80050de <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050d6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80050e4:	461a      	mov	r2, r3
 80050e6:	2300      	movs	r3, #0
 80050e8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050f0:	4619      	mov	r1, r3
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050f8:	461a      	mov	r2, r3
 80050fa:	680b      	ldr	r3, [r1, #0]
 80050fc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005100:	2b01      	cmp	r3, #1
 8005102:	d10c      	bne.n	800511e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005106:	2b00      	cmp	r3, #0
 8005108:	d104      	bne.n	8005114 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800510a:	2100      	movs	r1, #0
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f000 f965 	bl	80053dc <USB_SetDevSpeed>
 8005112:	e008      	b.n	8005126 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005114:	2101      	movs	r1, #1
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 f960 	bl	80053dc <USB_SetDevSpeed>
 800511c:	e003      	b.n	8005126 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800511e:	2103      	movs	r1, #3
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 f95b 	bl	80053dc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005126:	2110      	movs	r1, #16
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 f8f3 	bl	8005314 <USB_FlushTxFifo>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d001      	beq.n	8005138 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f000 f91f 	bl	800537c <USB_FlushRxFifo>
 800513e:	4603      	mov	r3, r0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d001      	beq.n	8005148 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800514e:	461a      	mov	r2, r3
 8005150:	2300      	movs	r3, #0
 8005152:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800515a:	461a      	mov	r2, r3
 800515c:	2300      	movs	r3, #0
 800515e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005166:	461a      	mov	r2, r3
 8005168:	2300      	movs	r3, #0
 800516a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800516c:	2300      	movs	r3, #0
 800516e:	613b      	str	r3, [r7, #16]
 8005170:	e043      	b.n	80051fa <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	015a      	lsls	r2, r3, #5
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	4413      	add	r3, r2
 800517a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005184:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005188:	d118      	bne.n	80051bc <USB_DevInit+0x164>
    {
      if (i == 0U)
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d10a      	bne.n	80051a6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	015a      	lsls	r2, r3, #5
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	4413      	add	r3, r2
 8005198:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800519c:	461a      	mov	r2, r3
 800519e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80051a2:	6013      	str	r3, [r2, #0]
 80051a4:	e013      	b.n	80051ce <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	015a      	lsls	r2, r3, #5
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	4413      	add	r3, r2
 80051ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051b2:	461a      	mov	r2, r3
 80051b4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80051b8:	6013      	str	r3, [r2, #0]
 80051ba:	e008      	b.n	80051ce <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	015a      	lsls	r2, r3, #5
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	4413      	add	r3, r2
 80051c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051c8:	461a      	mov	r2, r3
 80051ca:	2300      	movs	r3, #0
 80051cc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	015a      	lsls	r2, r3, #5
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	4413      	add	r3, r2
 80051d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051da:	461a      	mov	r2, r3
 80051dc:	2300      	movs	r3, #0
 80051de:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	015a      	lsls	r2, r3, #5
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	4413      	add	r3, r2
 80051e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051ec:	461a      	mov	r2, r3
 80051ee:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80051f2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	3301      	adds	r3, #1
 80051f8:	613b      	str	r3, [r7, #16]
 80051fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051fc:	693a      	ldr	r2, [r7, #16]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d3b7      	bcc.n	8005172 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005202:	2300      	movs	r3, #0
 8005204:	613b      	str	r3, [r7, #16]
 8005206:	e043      	b.n	8005290 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	015a      	lsls	r2, r3, #5
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	4413      	add	r3, r2
 8005210:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800521a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800521e:	d118      	bne.n	8005252 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d10a      	bne.n	800523c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	015a      	lsls	r2, r3, #5
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	4413      	add	r3, r2
 800522e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005232:	461a      	mov	r2, r3
 8005234:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005238:	6013      	str	r3, [r2, #0]
 800523a:	e013      	b.n	8005264 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	015a      	lsls	r2, r3, #5
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	4413      	add	r3, r2
 8005244:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005248:	461a      	mov	r2, r3
 800524a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800524e:	6013      	str	r3, [r2, #0]
 8005250:	e008      	b.n	8005264 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	015a      	lsls	r2, r3, #5
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	4413      	add	r3, r2
 800525a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800525e:	461a      	mov	r2, r3
 8005260:	2300      	movs	r3, #0
 8005262:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	015a      	lsls	r2, r3, #5
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	4413      	add	r3, r2
 800526c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005270:	461a      	mov	r2, r3
 8005272:	2300      	movs	r3, #0
 8005274:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	015a      	lsls	r2, r3, #5
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	4413      	add	r3, r2
 800527e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005282:	461a      	mov	r2, r3
 8005284:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005288:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	3301      	adds	r3, #1
 800528e:	613b      	str	r3, [r7, #16]
 8005290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	429a      	cmp	r2, r3
 8005296:	d3b7      	bcc.n	8005208 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80052a6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052aa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80052b8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80052ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d105      	bne.n	80052cc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	699b      	ldr	r3, [r3, #24]
 80052c4:	f043 0210 	orr.w	r2, r3, #16
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	699a      	ldr	r2, [r3, #24]
 80052d0:	4b0f      	ldr	r3, [pc, #60]	@ (8005310 <USB_DevInit+0x2b8>)
 80052d2:	4313      	orrs	r3, r2
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80052d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d005      	beq.n	80052ea <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	699b      	ldr	r3, [r3, #24]
 80052e2:	f043 0208 	orr.w	r2, r3, #8
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80052ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d107      	bne.n	8005300 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	699b      	ldr	r3, [r3, #24]
 80052f4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80052f8:	f043 0304 	orr.w	r3, r3, #4
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005300:	7dfb      	ldrb	r3, [r7, #23]
}
 8005302:	4618      	mov	r0, r3
 8005304:	3718      	adds	r7, #24
 8005306:	46bd      	mov	sp, r7
 8005308:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800530c:	b004      	add	sp, #16
 800530e:	4770      	bx	lr
 8005310:	803c3800 	.word	0x803c3800

08005314 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005314:	b480      	push	{r7}
 8005316:	b085      	sub	sp, #20
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800531e:	2300      	movs	r3, #0
 8005320:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	3301      	adds	r3, #1
 8005326:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	4a13      	ldr	r2, [pc, #76]	@ (8005378 <USB_FlushTxFifo+0x64>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d901      	bls.n	8005334 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005330:	2303      	movs	r3, #3
 8005332:	e01b      	b.n	800536c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	2b00      	cmp	r3, #0
 800533a:	daf2      	bge.n	8005322 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800533c:	2300      	movs	r3, #0
 800533e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	019b      	lsls	r3, r3, #6
 8005344:	f043 0220 	orr.w	r2, r3, #32
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	3301      	adds	r3, #1
 8005350:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	4a08      	ldr	r2, [pc, #32]	@ (8005378 <USB_FlushTxFifo+0x64>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d901      	bls.n	800535e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e006      	b.n	800536c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	f003 0320 	and.w	r3, r3, #32
 8005366:	2b20      	cmp	r3, #32
 8005368:	d0f0      	beq.n	800534c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800536a:	2300      	movs	r3, #0
}
 800536c:	4618      	mov	r0, r3
 800536e:	3714      	adds	r7, #20
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr
 8005378:	00030d40 	.word	0x00030d40

0800537c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800537c:	b480      	push	{r7}
 800537e:	b085      	sub	sp, #20
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005384:	2300      	movs	r3, #0
 8005386:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	3301      	adds	r3, #1
 800538c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	4a11      	ldr	r2, [pc, #68]	@ (80053d8 <USB_FlushRxFifo+0x5c>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d901      	bls.n	800539a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	e018      	b.n	80053cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	daf2      	bge.n	8005388 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80053a2:	2300      	movs	r3, #0
 80053a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2210      	movs	r2, #16
 80053aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	3301      	adds	r3, #1
 80053b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	4a08      	ldr	r2, [pc, #32]	@ (80053d8 <USB_FlushRxFifo+0x5c>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d901      	bls.n	80053be <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e006      	b.n	80053cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	f003 0310 	and.w	r3, r3, #16
 80053c6:	2b10      	cmp	r3, #16
 80053c8:	d0f0      	beq.n	80053ac <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80053ca:	2300      	movs	r3, #0
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3714      	adds	r7, #20
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr
 80053d8:	00030d40 	.word	0x00030d40

080053dc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	460b      	mov	r3, r1
 80053e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	78fb      	ldrb	r3, [r7, #3]
 80053f6:	68f9      	ldr	r1, [r7, #12]
 80053f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80053fc:	4313      	orrs	r3, r2
 80053fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3714      	adds	r7, #20
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr

0800540e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800540e:	b480      	push	{r7}
 8005410:	b087      	sub	sp, #28
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f003 0306 	and.w	r3, r3, #6
 8005426:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d102      	bne.n	8005434 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800542e:	2300      	movs	r3, #0
 8005430:	75fb      	strb	r3, [r7, #23]
 8005432:	e00a      	b.n	800544a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2b02      	cmp	r3, #2
 8005438:	d002      	beq.n	8005440 <USB_GetDevSpeed+0x32>
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2b06      	cmp	r3, #6
 800543e:	d102      	bne.n	8005446 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005440:	2302      	movs	r3, #2
 8005442:	75fb      	strb	r3, [r7, #23]
 8005444:	e001      	b.n	800544a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005446:	230f      	movs	r3, #15
 8005448:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800544a:	7dfb      	ldrb	r3, [r7, #23]
}
 800544c:	4618      	mov	r0, r3
 800544e:	371c      	adds	r7, #28
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	785b      	ldrb	r3, [r3, #1]
 8005470:	2b01      	cmp	r3, #1
 8005472:	d13a      	bne.n	80054ea <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800547a:	69da      	ldr	r2, [r3, #28]
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	f003 030f 	and.w	r3, r3, #15
 8005484:	2101      	movs	r1, #1
 8005486:	fa01 f303 	lsl.w	r3, r1, r3
 800548a:	b29b      	uxth	r3, r3
 800548c:	68f9      	ldr	r1, [r7, #12]
 800548e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005492:	4313      	orrs	r3, r2
 8005494:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	015a      	lsls	r2, r3, #5
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	4413      	add	r3, r2
 800549e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d155      	bne.n	8005558 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	015a      	lsls	r2, r3, #5
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	4413      	add	r3, r2
 80054b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	791b      	ldrb	r3, [r3, #4]
 80054c6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80054c8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	059b      	lsls	r3, r3, #22
 80054ce:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80054d0:	4313      	orrs	r3, r2
 80054d2:	68ba      	ldr	r2, [r7, #8]
 80054d4:	0151      	lsls	r1, r2, #5
 80054d6:	68fa      	ldr	r2, [r7, #12]
 80054d8:	440a      	add	r2, r1
 80054da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054e6:	6013      	str	r3, [r2, #0]
 80054e8:	e036      	b.n	8005558 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054f0:	69da      	ldr	r2, [r3, #28]
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	f003 030f 	and.w	r3, r3, #15
 80054fa:	2101      	movs	r1, #1
 80054fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005500:	041b      	lsls	r3, r3, #16
 8005502:	68f9      	ldr	r1, [r7, #12]
 8005504:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005508:	4313      	orrs	r3, r2
 800550a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	015a      	lsls	r2, r3, #5
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	4413      	add	r3, r2
 8005514:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800551e:	2b00      	cmp	r3, #0
 8005520:	d11a      	bne.n	8005558 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	015a      	lsls	r2, r3, #5
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	4413      	add	r3, r2
 800552a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	791b      	ldrb	r3, [r3, #4]
 800553c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800553e:	430b      	orrs	r3, r1
 8005540:	4313      	orrs	r3, r2
 8005542:	68ba      	ldr	r2, [r7, #8]
 8005544:	0151      	lsls	r1, r2, #5
 8005546:	68fa      	ldr	r2, [r7, #12]
 8005548:	440a      	add	r2, r1
 800554a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800554e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005552:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005556:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3714      	adds	r7, #20
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr
	...

08005568 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005568:	b480      	push	{r7}
 800556a:	b085      	sub	sp, #20
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	785b      	ldrb	r3, [r3, #1]
 8005580:	2b01      	cmp	r3, #1
 8005582:	d161      	bne.n	8005648 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	015a      	lsls	r2, r3, #5
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	4413      	add	r3, r2
 800558c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005596:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800559a:	d11f      	bne.n	80055dc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	015a      	lsls	r2, r3, #5
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	4413      	add	r3, r2
 80055a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68ba      	ldr	r2, [r7, #8]
 80055ac:	0151      	lsls	r1, r2, #5
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	440a      	add	r2, r1
 80055b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80055b6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80055ba:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	015a      	lsls	r2, r3, #5
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	4413      	add	r3, r2
 80055c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68ba      	ldr	r2, [r7, #8]
 80055cc:	0151      	lsls	r1, r2, #5
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	440a      	add	r2, r1
 80055d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80055d6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80055da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	f003 030f 	and.w	r3, r3, #15
 80055ec:	2101      	movs	r1, #1
 80055ee:	fa01 f303 	lsl.w	r3, r1, r3
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	43db      	mvns	r3, r3
 80055f6:	68f9      	ldr	r1, [r7, #12]
 80055f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80055fc:	4013      	ands	r3, r2
 80055fe:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005606:	69da      	ldr	r2, [r3, #28]
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	f003 030f 	and.w	r3, r3, #15
 8005610:	2101      	movs	r1, #1
 8005612:	fa01 f303 	lsl.w	r3, r1, r3
 8005616:	b29b      	uxth	r3, r3
 8005618:	43db      	mvns	r3, r3
 800561a:	68f9      	ldr	r1, [r7, #12]
 800561c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005620:	4013      	ands	r3, r2
 8005622:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	015a      	lsls	r2, r3, #5
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	4413      	add	r3, r2
 800562c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	0159      	lsls	r1, r3, #5
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	440b      	add	r3, r1
 800563a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800563e:	4619      	mov	r1, r3
 8005640:	4b35      	ldr	r3, [pc, #212]	@ (8005718 <USB_DeactivateEndpoint+0x1b0>)
 8005642:	4013      	ands	r3, r2
 8005644:	600b      	str	r3, [r1, #0]
 8005646:	e060      	b.n	800570a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	015a      	lsls	r2, r3, #5
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	4413      	add	r3, r2
 8005650:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800565a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800565e:	d11f      	bne.n	80056a0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	015a      	lsls	r2, r3, #5
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	4413      	add	r3, r2
 8005668:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68ba      	ldr	r2, [r7, #8]
 8005670:	0151      	lsls	r1, r2, #5
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	440a      	add	r2, r1
 8005676:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800567a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800567e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	015a      	lsls	r2, r3, #5
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	4413      	add	r3, r2
 8005688:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68ba      	ldr	r2, [r7, #8]
 8005690:	0151      	lsls	r1, r2, #5
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	440a      	add	r2, r1
 8005696:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800569a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800569e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	f003 030f 	and.w	r3, r3, #15
 80056b0:	2101      	movs	r1, #1
 80056b2:	fa01 f303 	lsl.w	r3, r1, r3
 80056b6:	041b      	lsls	r3, r3, #16
 80056b8:	43db      	mvns	r3, r3
 80056ba:	68f9      	ldr	r1, [r7, #12]
 80056bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80056c0:	4013      	ands	r3, r2
 80056c2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056ca:	69da      	ldr	r2, [r3, #28]
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	f003 030f 	and.w	r3, r3, #15
 80056d4:	2101      	movs	r1, #1
 80056d6:	fa01 f303 	lsl.w	r3, r1, r3
 80056da:	041b      	lsls	r3, r3, #16
 80056dc:	43db      	mvns	r3, r3
 80056de:	68f9      	ldr	r1, [r7, #12]
 80056e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80056e4:	4013      	ands	r3, r2
 80056e6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	015a      	lsls	r2, r3, #5
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	4413      	add	r3, r2
 80056f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	0159      	lsls	r1, r3, #5
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	440b      	add	r3, r1
 80056fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005702:	4619      	mov	r1, r3
 8005704:	4b05      	ldr	r3, [pc, #20]	@ (800571c <USB_DeactivateEndpoint+0x1b4>)
 8005706:	4013      	ands	r3, r2
 8005708:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800570a:	2300      	movs	r3, #0
}
 800570c:	4618      	mov	r0, r3
 800570e:	3714      	adds	r7, #20
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr
 8005718:	ec337800 	.word	0xec337800
 800571c:	eff37800 	.word	0xeff37800

08005720 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b08a      	sub	sp, #40	@ 0x28
 8005724:	af02      	add	r7, sp, #8
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	4613      	mov	r3, r2
 800572c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	785b      	ldrb	r3, [r3, #1]
 800573c:	2b01      	cmp	r3, #1
 800573e:	f040 815c 	bne.w	80059fa <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	699b      	ldr	r3, [r3, #24]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d132      	bne.n	80057b0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	015a      	lsls	r2, r3, #5
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	4413      	add	r3, r2
 8005752:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005756:	691b      	ldr	r3, [r3, #16]
 8005758:	69ba      	ldr	r2, [r7, #24]
 800575a:	0151      	lsls	r1, r2, #5
 800575c:	69fa      	ldr	r2, [r7, #28]
 800575e:	440a      	add	r2, r1
 8005760:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005764:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005768:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800576c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800576e:	69bb      	ldr	r3, [r7, #24]
 8005770:	015a      	lsls	r2, r3, #5
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	4413      	add	r3, r2
 8005776:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800577a:	691b      	ldr	r3, [r3, #16]
 800577c:	69ba      	ldr	r2, [r7, #24]
 800577e:	0151      	lsls	r1, r2, #5
 8005780:	69fa      	ldr	r2, [r7, #28]
 8005782:	440a      	add	r2, r1
 8005784:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005788:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800578c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	015a      	lsls	r2, r3, #5
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	4413      	add	r3, r2
 8005796:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	69ba      	ldr	r2, [r7, #24]
 800579e:	0151      	lsls	r1, r2, #5
 80057a0:	69fa      	ldr	r2, [r7, #28]
 80057a2:	440a      	add	r2, r1
 80057a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057a8:	0cdb      	lsrs	r3, r3, #19
 80057aa:	04db      	lsls	r3, r3, #19
 80057ac:	6113      	str	r3, [r2, #16]
 80057ae:	e074      	b.n	800589a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	015a      	lsls	r2, r3, #5
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	4413      	add	r3, r2
 80057b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	69ba      	ldr	r2, [r7, #24]
 80057c0:	0151      	lsls	r1, r2, #5
 80057c2:	69fa      	ldr	r2, [r7, #28]
 80057c4:	440a      	add	r2, r1
 80057c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057ca:	0cdb      	lsrs	r3, r3, #19
 80057cc:	04db      	lsls	r3, r3, #19
 80057ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	015a      	lsls	r2, r3, #5
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	4413      	add	r3, r2
 80057d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	69ba      	ldr	r2, [r7, #24]
 80057e0:	0151      	lsls	r1, r2, #5
 80057e2:	69fa      	ldr	r2, [r7, #28]
 80057e4:	440a      	add	r2, r1
 80057e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057ea:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80057ee:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80057f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	015a      	lsls	r2, r3, #5
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	4413      	add	r3, r2
 80057fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005800:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	6999      	ldr	r1, [r3, #24]
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	440b      	add	r3, r1
 800580c:	1e59      	subs	r1, r3, #1
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	fbb1 f3f3 	udiv	r3, r1, r3
 8005816:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005818:	4b9d      	ldr	r3, [pc, #628]	@ (8005a90 <USB_EPStartXfer+0x370>)
 800581a:	400b      	ands	r3, r1
 800581c:	69b9      	ldr	r1, [r7, #24]
 800581e:	0148      	lsls	r0, r1, #5
 8005820:	69f9      	ldr	r1, [r7, #28]
 8005822:	4401      	add	r1, r0
 8005824:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005828:	4313      	orrs	r3, r2
 800582a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800582c:	69bb      	ldr	r3, [r7, #24]
 800582e:	015a      	lsls	r2, r3, #5
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	4413      	add	r3, r2
 8005834:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005838:	691a      	ldr	r2, [r3, #16]
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	699b      	ldr	r3, [r3, #24]
 800583e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005842:	69b9      	ldr	r1, [r7, #24]
 8005844:	0148      	lsls	r0, r1, #5
 8005846:	69f9      	ldr	r1, [r7, #28]
 8005848:	4401      	add	r1, r0
 800584a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800584e:	4313      	orrs	r3, r2
 8005850:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	791b      	ldrb	r3, [r3, #4]
 8005856:	2b01      	cmp	r3, #1
 8005858:	d11f      	bne.n	800589a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	015a      	lsls	r2, r3, #5
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	4413      	add	r3, r2
 8005862:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	69ba      	ldr	r2, [r7, #24]
 800586a:	0151      	lsls	r1, r2, #5
 800586c:	69fa      	ldr	r2, [r7, #28]
 800586e:	440a      	add	r2, r1
 8005870:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005874:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005878:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	015a      	lsls	r2, r3, #5
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	4413      	add	r3, r2
 8005882:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	69ba      	ldr	r2, [r7, #24]
 800588a:	0151      	lsls	r1, r2, #5
 800588c:	69fa      	ldr	r2, [r7, #28]
 800588e:	440a      	add	r2, r1
 8005890:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005894:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005898:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800589a:	79fb      	ldrb	r3, [r7, #7]
 800589c:	2b01      	cmp	r3, #1
 800589e:	d14b      	bne.n	8005938 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	695b      	ldr	r3, [r3, #20]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d009      	beq.n	80058bc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80058a8:	69bb      	ldr	r3, [r7, #24]
 80058aa:	015a      	lsls	r2, r3, #5
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	4413      	add	r3, r2
 80058b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058b4:	461a      	mov	r2, r3
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	695b      	ldr	r3, [r3, #20]
 80058ba:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	791b      	ldrb	r3, [r3, #4]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d128      	bne.n	8005916 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d110      	bne.n	80058f6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	015a      	lsls	r2, r3, #5
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	4413      	add	r3, r2
 80058dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	69ba      	ldr	r2, [r7, #24]
 80058e4:	0151      	lsls	r1, r2, #5
 80058e6:	69fa      	ldr	r2, [r7, #28]
 80058e8:	440a      	add	r2, r1
 80058ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058ee:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80058f2:	6013      	str	r3, [r2, #0]
 80058f4:	e00f      	b.n	8005916 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	015a      	lsls	r2, r3, #5
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	4413      	add	r3, r2
 80058fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	69ba      	ldr	r2, [r7, #24]
 8005906:	0151      	lsls	r1, r2, #5
 8005908:	69fa      	ldr	r2, [r7, #28]
 800590a:	440a      	add	r2, r1
 800590c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005910:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005914:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	015a      	lsls	r2, r3, #5
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	4413      	add	r3, r2
 800591e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	69ba      	ldr	r2, [r7, #24]
 8005926:	0151      	lsls	r1, r2, #5
 8005928:	69fa      	ldr	r2, [r7, #28]
 800592a:	440a      	add	r2, r1
 800592c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005930:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005934:	6013      	str	r3, [r2, #0]
 8005936:	e133      	b.n	8005ba0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	015a      	lsls	r2, r3, #5
 800593c:	69fb      	ldr	r3, [r7, #28]
 800593e:	4413      	add	r3, r2
 8005940:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	69ba      	ldr	r2, [r7, #24]
 8005948:	0151      	lsls	r1, r2, #5
 800594a:	69fa      	ldr	r2, [r7, #28]
 800594c:	440a      	add	r2, r1
 800594e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005952:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005956:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	791b      	ldrb	r3, [r3, #4]
 800595c:	2b01      	cmp	r3, #1
 800595e:	d015      	beq.n	800598c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	699b      	ldr	r3, [r3, #24]
 8005964:	2b00      	cmp	r3, #0
 8005966:	f000 811b 	beq.w	8005ba0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005970:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	f003 030f 	and.w	r3, r3, #15
 800597a:	2101      	movs	r1, #1
 800597c:	fa01 f303 	lsl.w	r3, r1, r3
 8005980:	69f9      	ldr	r1, [r7, #28]
 8005982:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005986:	4313      	orrs	r3, r2
 8005988:	634b      	str	r3, [r1, #52]	@ 0x34
 800598a:	e109      	b.n	8005ba0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005998:	2b00      	cmp	r3, #0
 800599a:	d110      	bne.n	80059be <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	015a      	lsls	r2, r3, #5
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	4413      	add	r3, r2
 80059a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	69ba      	ldr	r2, [r7, #24]
 80059ac:	0151      	lsls	r1, r2, #5
 80059ae:	69fa      	ldr	r2, [r7, #28]
 80059b0:	440a      	add	r2, r1
 80059b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059b6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80059ba:	6013      	str	r3, [r2, #0]
 80059bc:	e00f      	b.n	80059de <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	015a      	lsls	r2, r3, #5
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	4413      	add	r3, r2
 80059c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	69ba      	ldr	r2, [r7, #24]
 80059ce:	0151      	lsls	r1, r2, #5
 80059d0:	69fa      	ldr	r2, [r7, #28]
 80059d2:	440a      	add	r2, r1
 80059d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059dc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	6919      	ldr	r1, [r3, #16]
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	781a      	ldrb	r2, [r3, #0]
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	699b      	ldr	r3, [r3, #24]
 80059ea:	b298      	uxth	r0, r3
 80059ec:	79fb      	ldrb	r3, [r7, #7]
 80059ee:	9300      	str	r3, [sp, #0]
 80059f0:	4603      	mov	r3, r0
 80059f2:	68f8      	ldr	r0, [r7, #12]
 80059f4:	f000 fade 	bl	8005fb4 <USB_WritePacket>
 80059f8:	e0d2      	b.n	8005ba0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	015a      	lsls	r2, r3, #5
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	4413      	add	r3, r2
 8005a02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a06:	691b      	ldr	r3, [r3, #16]
 8005a08:	69ba      	ldr	r2, [r7, #24]
 8005a0a:	0151      	lsls	r1, r2, #5
 8005a0c:	69fa      	ldr	r2, [r7, #28]
 8005a0e:	440a      	add	r2, r1
 8005a10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a14:	0cdb      	lsrs	r3, r3, #19
 8005a16:	04db      	lsls	r3, r3, #19
 8005a18:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005a1a:	69bb      	ldr	r3, [r7, #24]
 8005a1c:	015a      	lsls	r2, r3, #5
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	4413      	add	r3, r2
 8005a22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	69ba      	ldr	r2, [r7, #24]
 8005a2a:	0151      	lsls	r1, r2, #5
 8005a2c:	69fa      	ldr	r2, [r7, #28]
 8005a2e:	440a      	add	r2, r1
 8005a30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a34:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005a38:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005a3c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	699b      	ldr	r3, [r3, #24]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d126      	bne.n	8005a94 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	015a      	lsls	r2, r3, #5
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a52:	691a      	ldr	r2, [r3, #16]
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a5c:	69b9      	ldr	r1, [r7, #24]
 8005a5e:	0148      	lsls	r0, r1, #5
 8005a60:	69f9      	ldr	r1, [r7, #28]
 8005a62:	4401      	add	r1, r0
 8005a64:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a6c:	69bb      	ldr	r3, [r7, #24]
 8005a6e:	015a      	lsls	r2, r3, #5
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	4413      	add	r3, r2
 8005a74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a78:	691b      	ldr	r3, [r3, #16]
 8005a7a:	69ba      	ldr	r2, [r7, #24]
 8005a7c:	0151      	lsls	r1, r2, #5
 8005a7e:	69fa      	ldr	r2, [r7, #28]
 8005a80:	440a      	add	r2, r1
 8005a82:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a86:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005a8a:	6113      	str	r3, [r2, #16]
 8005a8c:	e03a      	b.n	8005b04 <USB_EPStartXfer+0x3e4>
 8005a8e:	bf00      	nop
 8005a90:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	699a      	ldr	r2, [r3, #24]
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	1e5a      	subs	r2, r3, #1
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aa8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	8afa      	ldrh	r2, [r7, #22]
 8005ab0:	fb03 f202 	mul.w	r2, r3, r2
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	015a      	lsls	r2, r3, #5
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	4413      	add	r3, r2
 8005ac0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ac4:	691a      	ldr	r2, [r3, #16]
 8005ac6:	8afb      	ldrh	r3, [r7, #22]
 8005ac8:	04d9      	lsls	r1, r3, #19
 8005aca:	4b38      	ldr	r3, [pc, #224]	@ (8005bac <USB_EPStartXfer+0x48c>)
 8005acc:	400b      	ands	r3, r1
 8005ace:	69b9      	ldr	r1, [r7, #24]
 8005ad0:	0148      	lsls	r0, r1, #5
 8005ad2:	69f9      	ldr	r1, [r7, #28]
 8005ad4:	4401      	add	r1, r0
 8005ad6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005ada:	4313      	orrs	r3, r2
 8005adc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	015a      	lsls	r2, r3, #5
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	4413      	add	r3, r2
 8005ae6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005aea:	691a      	ldr	r2, [r3, #16]
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	69db      	ldr	r3, [r3, #28]
 8005af0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005af4:	69b9      	ldr	r1, [r7, #24]
 8005af6:	0148      	lsls	r0, r1, #5
 8005af8:	69f9      	ldr	r1, [r7, #28]
 8005afa:	4401      	add	r1, r0
 8005afc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005b00:	4313      	orrs	r3, r2
 8005b02:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005b04:	79fb      	ldrb	r3, [r7, #7]
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d10d      	bne.n	8005b26 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d009      	beq.n	8005b26 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	6919      	ldr	r1, [r3, #16]
 8005b16:	69bb      	ldr	r3, [r7, #24]
 8005b18:	015a      	lsls	r2, r3, #5
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b22:	460a      	mov	r2, r1
 8005b24:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	791b      	ldrb	r3, [r3, #4]
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d128      	bne.n	8005b80 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d110      	bne.n	8005b60 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	015a      	lsls	r2, r3, #5
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	4413      	add	r3, r2
 8005b46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	69ba      	ldr	r2, [r7, #24]
 8005b4e:	0151      	lsls	r1, r2, #5
 8005b50:	69fa      	ldr	r2, [r7, #28]
 8005b52:	440a      	add	r2, r1
 8005b54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b58:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005b5c:	6013      	str	r3, [r2, #0]
 8005b5e:	e00f      	b.n	8005b80 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	015a      	lsls	r2, r3, #5
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	4413      	add	r3, r2
 8005b68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	69ba      	ldr	r2, [r7, #24]
 8005b70:	0151      	lsls	r1, r2, #5
 8005b72:	69fa      	ldr	r2, [r7, #28]
 8005b74:	440a      	add	r2, r1
 8005b76:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b7e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	015a      	lsls	r2, r3, #5
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	4413      	add	r3, r2
 8005b88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	69ba      	ldr	r2, [r7, #24]
 8005b90:	0151      	lsls	r1, r2, #5
 8005b92:	69fa      	ldr	r2, [r7, #28]
 8005b94:	440a      	add	r2, r1
 8005b96:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b9a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005b9e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3720      	adds	r7, #32
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	1ff80000 	.word	0x1ff80000

08005bb0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b087      	sub	sp, #28
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	4613      	mov	r3, r2
 8005bbc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	785b      	ldrb	r3, [r3, #1]
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	f040 80ce 	bne.w	8005d6e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	699b      	ldr	r3, [r3, #24]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d132      	bne.n	8005c40 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	015a      	lsls	r2, r3, #5
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	4413      	add	r3, r2
 8005be2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005be6:	691b      	ldr	r3, [r3, #16]
 8005be8:	693a      	ldr	r2, [r7, #16]
 8005bea:	0151      	lsls	r1, r2, #5
 8005bec:	697a      	ldr	r2, [r7, #20]
 8005bee:	440a      	add	r2, r1
 8005bf0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005bf4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005bf8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005bfc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	015a      	lsls	r2, r3, #5
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	4413      	add	r3, r2
 8005c06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c0a:	691b      	ldr	r3, [r3, #16]
 8005c0c:	693a      	ldr	r2, [r7, #16]
 8005c0e:	0151      	lsls	r1, r2, #5
 8005c10:	697a      	ldr	r2, [r7, #20]
 8005c12:	440a      	add	r2, r1
 8005c14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c18:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005c1c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	015a      	lsls	r2, r3, #5
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	4413      	add	r3, r2
 8005c26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c2a:	691b      	ldr	r3, [r3, #16]
 8005c2c:	693a      	ldr	r2, [r7, #16]
 8005c2e:	0151      	lsls	r1, r2, #5
 8005c30:	697a      	ldr	r2, [r7, #20]
 8005c32:	440a      	add	r2, r1
 8005c34:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c38:	0cdb      	lsrs	r3, r3, #19
 8005c3a:	04db      	lsls	r3, r3, #19
 8005c3c:	6113      	str	r3, [r2, #16]
 8005c3e:	e04e      	b.n	8005cde <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	015a      	lsls	r2, r3, #5
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	4413      	add	r3, r2
 8005c48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	693a      	ldr	r2, [r7, #16]
 8005c50:	0151      	lsls	r1, r2, #5
 8005c52:	697a      	ldr	r2, [r7, #20]
 8005c54:	440a      	add	r2, r1
 8005c56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c5a:	0cdb      	lsrs	r3, r3, #19
 8005c5c:	04db      	lsls	r3, r3, #19
 8005c5e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	015a      	lsls	r2, r3, #5
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	4413      	add	r3, r2
 8005c68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	693a      	ldr	r2, [r7, #16]
 8005c70:	0151      	lsls	r1, r2, #5
 8005c72:	697a      	ldr	r2, [r7, #20]
 8005c74:	440a      	add	r2, r1
 8005c76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c7a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005c7e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005c82:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	699a      	ldr	r2, [r3, #24]
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d903      	bls.n	8005c98 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	68da      	ldr	r2, [r3, #12]
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	015a      	lsls	r2, r3, #5
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	4413      	add	r3, r2
 8005ca0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ca4:	691b      	ldr	r3, [r3, #16]
 8005ca6:	693a      	ldr	r2, [r7, #16]
 8005ca8:	0151      	lsls	r1, r2, #5
 8005caa:	697a      	ldr	r2, [r7, #20]
 8005cac:	440a      	add	r2, r1
 8005cae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005cb2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005cb6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	015a      	lsls	r2, r3, #5
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cc4:	691a      	ldr	r2, [r3, #16]
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	699b      	ldr	r3, [r3, #24]
 8005cca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cce:	6939      	ldr	r1, [r7, #16]
 8005cd0:	0148      	lsls	r0, r1, #5
 8005cd2:	6979      	ldr	r1, [r7, #20]
 8005cd4:	4401      	add	r1, r0
 8005cd6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005cde:	79fb      	ldrb	r3, [r7, #7]
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d11e      	bne.n	8005d22 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	695b      	ldr	r3, [r3, #20]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d009      	beq.n	8005d00 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	015a      	lsls	r2, r3, #5
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	4413      	add	r3, r2
 8005cf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	695b      	ldr	r3, [r3, #20]
 8005cfe:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	015a      	lsls	r2, r3, #5
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	4413      	add	r3, r2
 8005d08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	693a      	ldr	r2, [r7, #16]
 8005d10:	0151      	lsls	r1, r2, #5
 8005d12:	697a      	ldr	r2, [r7, #20]
 8005d14:	440a      	add	r2, r1
 8005d16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d1a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005d1e:	6013      	str	r3, [r2, #0]
 8005d20:	e097      	b.n	8005e52 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	015a      	lsls	r2, r3, #5
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	4413      	add	r3, r2
 8005d2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	693a      	ldr	r2, [r7, #16]
 8005d32:	0151      	lsls	r1, r2, #5
 8005d34:	697a      	ldr	r2, [r7, #20]
 8005d36:	440a      	add	r2, r1
 8005d38:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d3c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005d40:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	699b      	ldr	r3, [r3, #24]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	f000 8083 	beq.w	8005e52 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	f003 030f 	and.w	r3, r3, #15
 8005d5c:	2101      	movs	r1, #1
 8005d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8005d62:	6979      	ldr	r1, [r7, #20]
 8005d64:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	634b      	str	r3, [r1, #52]	@ 0x34
 8005d6c:	e071      	b.n	8005e52 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	015a      	lsls	r2, r3, #5
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	4413      	add	r3, r2
 8005d76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	693a      	ldr	r2, [r7, #16]
 8005d7e:	0151      	lsls	r1, r2, #5
 8005d80:	697a      	ldr	r2, [r7, #20]
 8005d82:	440a      	add	r2, r1
 8005d84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d88:	0cdb      	lsrs	r3, r3, #19
 8005d8a:	04db      	lsls	r3, r3, #19
 8005d8c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	015a      	lsls	r2, r3, #5
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	4413      	add	r3, r2
 8005d96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d9a:	691b      	ldr	r3, [r3, #16]
 8005d9c:	693a      	ldr	r2, [r7, #16]
 8005d9e:	0151      	lsls	r1, r2, #5
 8005da0:	697a      	ldr	r2, [r7, #20]
 8005da2:	440a      	add	r2, r1
 8005da4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005da8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005dac:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005db0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	699b      	ldr	r3, [r3, #24]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d003      	beq.n	8005dc2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	68da      	ldr	r2, [r3, #12]
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	68da      	ldr	r2, [r3, #12]
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	015a      	lsls	r2, r3, #5
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	4413      	add	r3, r2
 8005dd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	693a      	ldr	r2, [r7, #16]
 8005dda:	0151      	lsls	r1, r2, #5
 8005ddc:	697a      	ldr	r2, [r7, #20]
 8005dde:	440a      	add	r2, r1
 8005de0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005de4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005de8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	015a      	lsls	r2, r3, #5
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	4413      	add	r3, r2
 8005df2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005df6:	691a      	ldr	r2, [r3, #16]
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	69db      	ldr	r3, [r3, #28]
 8005dfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e00:	6939      	ldr	r1, [r7, #16]
 8005e02:	0148      	lsls	r0, r1, #5
 8005e04:	6979      	ldr	r1, [r7, #20]
 8005e06:	4401      	add	r1, r0
 8005e08:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005e10:	79fb      	ldrb	r3, [r7, #7]
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d10d      	bne.n	8005e32 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d009      	beq.n	8005e32 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	6919      	ldr	r1, [r3, #16]
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	015a      	lsls	r2, r3, #5
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	4413      	add	r3, r2
 8005e2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e2e:	460a      	mov	r2, r1
 8005e30:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	015a      	lsls	r2, r3, #5
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	4413      	add	r3, r2
 8005e3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	693a      	ldr	r2, [r7, #16]
 8005e42:	0151      	lsls	r1, r2, #5
 8005e44:	697a      	ldr	r2, [r7, #20]
 8005e46:	440a      	add	r2, r1
 8005e48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e4c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005e50:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e52:	2300      	movs	r3, #0
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	371c      	adds	r7, #28
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b087      	sub	sp, #28
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	785b      	ldrb	r3, [r3, #1]
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d14a      	bne.n	8005f14 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	015a      	lsls	r2, r3, #5
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	4413      	add	r3, r2
 8005e88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005e92:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e96:	f040 8086 	bne.w	8005fa6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	015a      	lsls	r2, r3, #5
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	4413      	add	r3, r2
 8005ea4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	683a      	ldr	r2, [r7, #0]
 8005eac:	7812      	ldrb	r2, [r2, #0]
 8005eae:	0151      	lsls	r1, r2, #5
 8005eb0:	693a      	ldr	r2, [r7, #16]
 8005eb2:	440a      	add	r2, r1
 8005eb4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005eb8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005ebc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	015a      	lsls	r2, r3, #5
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	4413      	add	r3, r2
 8005ec8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	683a      	ldr	r2, [r7, #0]
 8005ed0:	7812      	ldrb	r2, [r2, #0]
 8005ed2:	0151      	lsls	r1, r2, #5
 8005ed4:	693a      	ldr	r2, [r7, #16]
 8005ed6:	440a      	add	r2, r1
 8005ed8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005edc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005ee0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d902      	bls.n	8005ef8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	75fb      	strb	r3, [r7, #23]
          break;
 8005ef6:	e056      	b.n	8005fa6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	015a      	lsls	r2, r3, #5
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	4413      	add	r3, r2
 8005f02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f0c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f10:	d0e7      	beq.n	8005ee2 <USB_EPStopXfer+0x82>
 8005f12:	e048      	b.n	8005fa6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	015a      	lsls	r2, r3, #5
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f2c:	d13b      	bne.n	8005fa6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	015a      	lsls	r2, r3, #5
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	4413      	add	r3, r2
 8005f38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	683a      	ldr	r2, [r7, #0]
 8005f40:	7812      	ldrb	r2, [r2, #0]
 8005f42:	0151      	lsls	r1, r2, #5
 8005f44:	693a      	ldr	r2, [r7, #16]
 8005f46:	440a      	add	r2, r1
 8005f48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f4c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005f50:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	015a      	lsls	r2, r3, #5
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	683a      	ldr	r2, [r7, #0]
 8005f64:	7812      	ldrb	r2, [r2, #0]
 8005f66:	0151      	lsls	r1, r2, #5
 8005f68:	693a      	ldr	r2, [r7, #16]
 8005f6a:	440a      	add	r2, r1
 8005f6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f70:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005f74:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	3301      	adds	r3, #1
 8005f7a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d902      	bls.n	8005f8c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	75fb      	strb	r3, [r7, #23]
          break;
 8005f8a:	e00c      	b.n	8005fa6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	015a      	lsls	r2, r3, #5
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	4413      	add	r3, r2
 8005f96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005fa0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005fa4:	d0e7      	beq.n	8005f76 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005fa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	371c      	adds	r7, #28
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr

08005fb4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b089      	sub	sp, #36	@ 0x24
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	60b9      	str	r1, [r7, #8]
 8005fbe:	4611      	mov	r1, r2
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	460b      	mov	r3, r1
 8005fc4:	71fb      	strb	r3, [r7, #7]
 8005fc6:	4613      	mov	r3, r2
 8005fc8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005fd2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d123      	bne.n	8006022 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005fda:	88bb      	ldrh	r3, [r7, #4]
 8005fdc:	3303      	adds	r3, #3
 8005fde:	089b      	lsrs	r3, r3, #2
 8005fe0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	61bb      	str	r3, [r7, #24]
 8005fe6:	e018      	b.n	800601a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005fe8:	79fb      	ldrb	r3, [r7, #7]
 8005fea:	031a      	lsls	r2, r3, #12
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	4413      	add	r3, r2
 8005ff0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	3301      	adds	r3, #1
 8006000:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	3301      	adds	r3, #1
 8006006:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	3301      	adds	r3, #1
 800600c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	3301      	adds	r3, #1
 8006012:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006014:	69bb      	ldr	r3, [r7, #24]
 8006016:	3301      	adds	r3, #1
 8006018:	61bb      	str	r3, [r7, #24]
 800601a:	69ba      	ldr	r2, [r7, #24]
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	429a      	cmp	r2, r3
 8006020:	d3e2      	bcc.n	8005fe8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006022:	2300      	movs	r3, #0
}
 8006024:	4618      	mov	r0, r3
 8006026:	3724      	adds	r7, #36	@ 0x24
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006030:	b480      	push	{r7}
 8006032:	b08b      	sub	sp, #44	@ 0x2c
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	4613      	mov	r3, r2
 800603c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006046:	88fb      	ldrh	r3, [r7, #6]
 8006048:	089b      	lsrs	r3, r3, #2
 800604a:	b29b      	uxth	r3, r3
 800604c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800604e:	88fb      	ldrh	r3, [r7, #6]
 8006050:	f003 0303 	and.w	r3, r3, #3
 8006054:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006056:	2300      	movs	r3, #0
 8006058:	623b      	str	r3, [r7, #32]
 800605a:	e014      	b.n	8006086 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006066:	601a      	str	r2, [r3, #0]
    pDest++;
 8006068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800606a:	3301      	adds	r3, #1
 800606c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800606e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006070:	3301      	adds	r3, #1
 8006072:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006076:	3301      	adds	r3, #1
 8006078:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800607a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800607c:	3301      	adds	r3, #1
 800607e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006080:	6a3b      	ldr	r3, [r7, #32]
 8006082:	3301      	adds	r3, #1
 8006084:	623b      	str	r3, [r7, #32]
 8006086:	6a3a      	ldr	r2, [r7, #32]
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	429a      	cmp	r2, r3
 800608c:	d3e6      	bcc.n	800605c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800608e:	8bfb      	ldrh	r3, [r7, #30]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d01e      	beq.n	80060d2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006094:	2300      	movs	r3, #0
 8006096:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800609e:	461a      	mov	r2, r3
 80060a0:	f107 0310 	add.w	r3, r7, #16
 80060a4:	6812      	ldr	r2, [r2, #0]
 80060a6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80060a8:	693a      	ldr	r2, [r7, #16]
 80060aa:	6a3b      	ldr	r3, [r7, #32]
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	00db      	lsls	r3, r3, #3
 80060b0:	fa22 f303 	lsr.w	r3, r2, r3
 80060b4:	b2da      	uxtb	r2, r3
 80060b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b8:	701a      	strb	r2, [r3, #0]
      i++;
 80060ba:	6a3b      	ldr	r3, [r7, #32]
 80060bc:	3301      	adds	r3, #1
 80060be:	623b      	str	r3, [r7, #32]
      pDest++;
 80060c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c2:	3301      	adds	r3, #1
 80060c4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80060c6:	8bfb      	ldrh	r3, [r7, #30]
 80060c8:	3b01      	subs	r3, #1
 80060ca:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80060cc:	8bfb      	ldrh	r3, [r7, #30]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d1ea      	bne.n	80060a8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80060d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	372c      	adds	r7, #44	@ 0x2c
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b085      	sub	sp, #20
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	785b      	ldrb	r3, [r3, #1]
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d12c      	bne.n	8006156 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	015a      	lsls	r2, r3, #5
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	4413      	add	r3, r2
 8006104:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2b00      	cmp	r3, #0
 800610c:	db12      	blt.n	8006134 <USB_EPSetStall+0x54>
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d00f      	beq.n	8006134 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	015a      	lsls	r2, r3, #5
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	4413      	add	r3, r2
 800611c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	68ba      	ldr	r2, [r7, #8]
 8006124:	0151      	lsls	r1, r2, #5
 8006126:	68fa      	ldr	r2, [r7, #12]
 8006128:	440a      	add	r2, r1
 800612a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800612e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006132:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	015a      	lsls	r2, r3, #5
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	4413      	add	r3, r2
 800613c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	68ba      	ldr	r2, [r7, #8]
 8006144:	0151      	lsls	r1, r2, #5
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	440a      	add	r2, r1
 800614a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800614e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006152:	6013      	str	r3, [r2, #0]
 8006154:	e02b      	b.n	80061ae <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	015a      	lsls	r2, r3, #5
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	4413      	add	r3, r2
 800615e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2b00      	cmp	r3, #0
 8006166:	db12      	blt.n	800618e <USB_EPSetStall+0xae>
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00f      	beq.n	800618e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	015a      	lsls	r2, r3, #5
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	4413      	add	r3, r2
 8006176:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68ba      	ldr	r2, [r7, #8]
 800617e:	0151      	lsls	r1, r2, #5
 8006180:	68fa      	ldr	r2, [r7, #12]
 8006182:	440a      	add	r2, r1
 8006184:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006188:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800618c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	015a      	lsls	r2, r3, #5
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	4413      	add	r3, r2
 8006196:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	68ba      	ldr	r2, [r7, #8]
 800619e:	0151      	lsls	r1, r2, #5
 80061a0:	68fa      	ldr	r2, [r7, #12]
 80061a2:	440a      	add	r2, r1
 80061a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80061a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80061ac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80061ae:	2300      	movs	r3, #0
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3714      	adds	r7, #20
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80061bc:	b480      	push	{r7}
 80061be:	b085      	sub	sp, #20
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	785b      	ldrb	r3, [r3, #1]
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d128      	bne.n	800622a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	015a      	lsls	r2, r3, #5
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	4413      	add	r3, r2
 80061e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	68ba      	ldr	r2, [r7, #8]
 80061e8:	0151      	lsls	r1, r2, #5
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	440a      	add	r2, r1
 80061ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061f2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80061f6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	791b      	ldrb	r3, [r3, #4]
 80061fc:	2b03      	cmp	r3, #3
 80061fe:	d003      	beq.n	8006208 <USB_EPClearStall+0x4c>
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	791b      	ldrb	r3, [r3, #4]
 8006204:	2b02      	cmp	r3, #2
 8006206:	d138      	bne.n	800627a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	015a      	lsls	r2, r3, #5
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	4413      	add	r3, r2
 8006210:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68ba      	ldr	r2, [r7, #8]
 8006218:	0151      	lsls	r1, r2, #5
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	440a      	add	r2, r1
 800621e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006222:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006226:	6013      	str	r3, [r2, #0]
 8006228:	e027      	b.n	800627a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	015a      	lsls	r2, r3, #5
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	4413      	add	r3, r2
 8006232:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	68ba      	ldr	r2, [r7, #8]
 800623a:	0151      	lsls	r1, r2, #5
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	440a      	add	r2, r1
 8006240:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006244:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006248:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	791b      	ldrb	r3, [r3, #4]
 800624e:	2b03      	cmp	r3, #3
 8006250:	d003      	beq.n	800625a <USB_EPClearStall+0x9e>
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	791b      	ldrb	r3, [r3, #4]
 8006256:	2b02      	cmp	r3, #2
 8006258:	d10f      	bne.n	800627a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	015a      	lsls	r2, r3, #5
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	4413      	add	r3, r2
 8006262:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	68ba      	ldr	r2, [r7, #8]
 800626a:	0151      	lsls	r1, r2, #5
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	440a      	add	r2, r1
 8006270:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006274:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006278:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	3714      	adds	r7, #20
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr

08006288 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006288:	b480      	push	{r7}
 800628a:	b085      	sub	sp, #20
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	460b      	mov	r3, r1
 8006292:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	68fa      	ldr	r2, [r7, #12]
 80062a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80062a6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80062aa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	78fb      	ldrb	r3, [r7, #3]
 80062b6:	011b      	lsls	r3, r3, #4
 80062b8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80062bc:	68f9      	ldr	r1, [r7, #12]
 80062be:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80062c2:	4313      	orrs	r3, r2
 80062c4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80062c6:	2300      	movs	r3, #0
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3714      	adds	r7, #20
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b085      	sub	sp, #20
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80062ee:	f023 0303 	bic.w	r3, r3, #3
 80062f2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	68fa      	ldr	r2, [r7, #12]
 80062fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006302:	f023 0302 	bic.w	r3, r3, #2
 8006306:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	3714      	adds	r7, #20
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr

08006316 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006316:	b480      	push	{r7}
 8006318:	b085      	sub	sp, #20
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006330:	f023 0303 	bic.w	r3, r3, #3
 8006334:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	68fa      	ldr	r2, [r7, #12]
 8006340:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006344:	f043 0302 	orr.w	r3, r3, #2
 8006348:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800634a:	2300      	movs	r3, #0
}
 800634c:	4618      	mov	r0, r3
 800634e:	3714      	adds	r7, #20
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006358:	b480      	push	{r7}
 800635a:	b085      	sub	sp, #20
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	695b      	ldr	r3, [r3, #20]
 8006364:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	699b      	ldr	r3, [r3, #24]
 800636a:	68fa      	ldr	r2, [r7, #12]
 800636c:	4013      	ands	r3, r2
 800636e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006370:	68fb      	ldr	r3, [r7, #12]
}
 8006372:	4618      	mov	r0, r3
 8006374:	3714      	adds	r7, #20
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr

0800637e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800637e:	b480      	push	{r7}
 8006380:	b085      	sub	sp, #20
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006390:	699b      	ldr	r3, [r3, #24]
 8006392:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800639a:	69db      	ldr	r3, [r3, #28]
 800639c:	68ba      	ldr	r2, [r7, #8]
 800639e:	4013      	ands	r3, r2
 80063a0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	0c1b      	lsrs	r3, r3, #16
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3714      	adds	r7, #20
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr

080063b2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80063b2:	b480      	push	{r7}
 80063b4:	b085      	sub	sp, #20
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063c4:	699b      	ldr	r3, [r3, #24]
 80063c6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063ce:	69db      	ldr	r3, [r3, #28]
 80063d0:	68ba      	ldr	r2, [r7, #8]
 80063d2:	4013      	ands	r3, r2
 80063d4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	b29b      	uxth	r3, r3
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3714      	adds	r7, #20
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr

080063e6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80063e6:	b480      	push	{r7}
 80063e8:	b085      	sub	sp, #20
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]
 80063ee:	460b      	mov	r3, r1
 80063f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80063f6:	78fb      	ldrb	r3, [r7, #3]
 80063f8:	015a      	lsls	r2, r3, #5
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	4413      	add	r3, r2
 80063fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800640c:	695b      	ldr	r3, [r3, #20]
 800640e:	68ba      	ldr	r2, [r7, #8]
 8006410:	4013      	ands	r3, r2
 8006412:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006414:	68bb      	ldr	r3, [r7, #8]
}
 8006416:	4618      	mov	r0, r3
 8006418:	3714      	adds	r7, #20
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr

08006422 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006422:	b480      	push	{r7}
 8006424:	b087      	sub	sp, #28
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
 800642a:	460b      	mov	r3, r1
 800642c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006442:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006444:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006446:	78fb      	ldrb	r3, [r7, #3]
 8006448:	f003 030f 	and.w	r3, r3, #15
 800644c:	68fa      	ldr	r2, [r7, #12]
 800644e:	fa22 f303 	lsr.w	r3, r2, r3
 8006452:	01db      	lsls	r3, r3, #7
 8006454:	b2db      	uxtb	r3, r3
 8006456:	693a      	ldr	r2, [r7, #16]
 8006458:	4313      	orrs	r3, r2
 800645a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800645c:	78fb      	ldrb	r3, [r7, #3]
 800645e:	015a      	lsls	r2, r3, #5
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	4413      	add	r3, r2
 8006464:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	693a      	ldr	r2, [r7, #16]
 800646c:	4013      	ands	r3, r2
 800646e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006470:	68bb      	ldr	r3, [r7, #8]
}
 8006472:	4618      	mov	r0, r3
 8006474:	371c      	adds	r7, #28
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr

0800647e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800647e:	b480      	push	{r7}
 8006480:	b083      	sub	sp, #12
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	695b      	ldr	r3, [r3, #20]
 800648a:	f003 0301 	and.w	r3, r3, #1
}
 800648e:	4618      	mov	r0, r3
 8006490:	370c      	adds	r7, #12
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr

0800649a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800649a:	b480      	push	{r7}
 800649c:	b085      	sub	sp, #20
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064b4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80064b8:	f023 0307 	bic.w	r3, r3, #7
 80064bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80064cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80064d2:	2300      	movs	r3, #0
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3714      	adds	r7, #20
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr

080064e0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b087      	sub	sp, #28
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	460b      	mov	r3, r1
 80064ea:	607a      	str	r2, [r7, #4]
 80064ec:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	333c      	adds	r3, #60	@ 0x3c
 80064f6:	3304      	adds	r3, #4
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	4a26      	ldr	r2, [pc, #152]	@ (8006598 <USB_EP0_OutStart+0xb8>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d90a      	bls.n	800651a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006510:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006514:	d101      	bne.n	800651a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006516:	2300      	movs	r3, #0
 8006518:	e037      	b.n	800658a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006520:	461a      	mov	r2, r3
 8006522:	2300      	movs	r3, #0
 8006524:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800652c:	691b      	ldr	r3, [r3, #16]
 800652e:	697a      	ldr	r2, [r7, #20]
 8006530:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006534:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006538:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006540:	691b      	ldr	r3, [r3, #16]
 8006542:	697a      	ldr	r2, [r7, #20]
 8006544:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006548:	f043 0318 	orr.w	r3, r3, #24
 800654c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	697a      	ldr	r2, [r7, #20]
 8006558:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800655c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006560:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006562:	7afb      	ldrb	r3, [r7, #11]
 8006564:	2b01      	cmp	r3, #1
 8006566:	d10f      	bne.n	8006588 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800656e:	461a      	mov	r2, r3
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	697a      	ldr	r2, [r7, #20]
 800657e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006582:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006586:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006588:	2300      	movs	r3, #0
}
 800658a:	4618      	mov	r0, r3
 800658c:	371c      	adds	r7, #28
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr
 8006596:	bf00      	nop
 8006598:	4f54300a 	.word	0x4f54300a

0800659c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800659c:	b480      	push	{r7}
 800659e:	b085      	sub	sp, #20
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065a4:	2300      	movs	r3, #0
 80065a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	3301      	adds	r3, #1
 80065ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	4a13      	ldr	r2, [pc, #76]	@ (8006600 <USB_CoreReset+0x64>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d901      	bls.n	80065ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80065b6:	2303      	movs	r3, #3
 80065b8:	e01b      	b.n	80065f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	daf2      	bge.n	80065a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80065c2:	2300      	movs	r3, #0
 80065c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	691b      	ldr	r3, [r3, #16]
 80065ca:	f043 0201 	orr.w	r2, r3, #1
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	3301      	adds	r3, #1
 80065d6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	4a09      	ldr	r2, [pc, #36]	@ (8006600 <USB_CoreReset+0x64>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d901      	bls.n	80065e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80065e0:	2303      	movs	r3, #3
 80065e2:	e006      	b.n	80065f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	691b      	ldr	r3, [r3, #16]
 80065e8:	f003 0301 	and.w	r3, r3, #1
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d0f0      	beq.n	80065d2 <USB_CoreReset+0x36>

  return HAL_OK;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3714      	adds	r7, #20
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr
 80065fe:	bf00      	nop
 8006600:	00030d40 	.word	0x00030d40

08006604 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	460b      	mov	r3, r1
 800660e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006610:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006614:	f002 fcc0 	bl	8008f98 <USBD_static_malloc>
 8006618:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d109      	bne.n	8006634 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	32b0      	adds	r2, #176	@ 0xb0
 800662a:	2100      	movs	r1, #0
 800662c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006630:	2302      	movs	r3, #2
 8006632:	e0d4      	b.n	80067de <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006634:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006638:	2100      	movs	r1, #0
 800663a:	68f8      	ldr	r0, [r7, #12]
 800663c:	f002 fd4c 	bl	80090d8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	32b0      	adds	r2, #176	@ 0xb0
 800664a:	68f9      	ldr	r1, [r7, #12]
 800664c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	32b0      	adds	r2, #176	@ 0xb0
 800665a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	7c1b      	ldrb	r3, [r3, #16]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d138      	bne.n	80066de <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800666c:	4b5e      	ldr	r3, [pc, #376]	@ (80067e8 <USBD_CDC_Init+0x1e4>)
 800666e:	7819      	ldrb	r1, [r3, #0]
 8006670:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006674:	2202      	movs	r2, #2
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f002 fb1d 	bl	8008cb6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800667c:	4b5a      	ldr	r3, [pc, #360]	@ (80067e8 <USBD_CDC_Init+0x1e4>)
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	f003 020f 	and.w	r2, r3, #15
 8006684:	6879      	ldr	r1, [r7, #4]
 8006686:	4613      	mov	r3, r2
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	4413      	add	r3, r2
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	440b      	add	r3, r1
 8006690:	3324      	adds	r3, #36	@ 0x24
 8006692:	2201      	movs	r2, #1
 8006694:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006696:	4b55      	ldr	r3, [pc, #340]	@ (80067ec <USBD_CDC_Init+0x1e8>)
 8006698:	7819      	ldrb	r1, [r3, #0]
 800669a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800669e:	2202      	movs	r2, #2
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f002 fb08 	bl	8008cb6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80066a6:	4b51      	ldr	r3, [pc, #324]	@ (80067ec <USBD_CDC_Init+0x1e8>)
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	f003 020f 	and.w	r2, r3, #15
 80066ae:	6879      	ldr	r1, [r7, #4]
 80066b0:	4613      	mov	r3, r2
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	4413      	add	r3, r2
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	440b      	add	r3, r1
 80066ba:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80066be:	2201      	movs	r2, #1
 80066c0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80066c2:	4b4b      	ldr	r3, [pc, #300]	@ (80067f0 <USBD_CDC_Init+0x1ec>)
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	f003 020f 	and.w	r2, r3, #15
 80066ca:	6879      	ldr	r1, [r7, #4]
 80066cc:	4613      	mov	r3, r2
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	4413      	add	r3, r2
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	440b      	add	r3, r1
 80066d6:	3326      	adds	r3, #38	@ 0x26
 80066d8:	2210      	movs	r2, #16
 80066da:	801a      	strh	r2, [r3, #0]
 80066dc:	e035      	b.n	800674a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80066de:	4b42      	ldr	r3, [pc, #264]	@ (80067e8 <USBD_CDC_Init+0x1e4>)
 80066e0:	7819      	ldrb	r1, [r3, #0]
 80066e2:	2340      	movs	r3, #64	@ 0x40
 80066e4:	2202      	movs	r2, #2
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f002 fae5 	bl	8008cb6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80066ec:	4b3e      	ldr	r3, [pc, #248]	@ (80067e8 <USBD_CDC_Init+0x1e4>)
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	f003 020f 	and.w	r2, r3, #15
 80066f4:	6879      	ldr	r1, [r7, #4]
 80066f6:	4613      	mov	r3, r2
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	4413      	add	r3, r2
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	440b      	add	r3, r1
 8006700:	3324      	adds	r3, #36	@ 0x24
 8006702:	2201      	movs	r2, #1
 8006704:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006706:	4b39      	ldr	r3, [pc, #228]	@ (80067ec <USBD_CDC_Init+0x1e8>)
 8006708:	7819      	ldrb	r1, [r3, #0]
 800670a:	2340      	movs	r3, #64	@ 0x40
 800670c:	2202      	movs	r2, #2
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f002 fad1 	bl	8008cb6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006714:	4b35      	ldr	r3, [pc, #212]	@ (80067ec <USBD_CDC_Init+0x1e8>)
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	f003 020f 	and.w	r2, r3, #15
 800671c:	6879      	ldr	r1, [r7, #4]
 800671e:	4613      	mov	r3, r2
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	4413      	add	r3, r2
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	440b      	add	r3, r1
 8006728:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800672c:	2201      	movs	r2, #1
 800672e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006730:	4b2f      	ldr	r3, [pc, #188]	@ (80067f0 <USBD_CDC_Init+0x1ec>)
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	f003 020f 	and.w	r2, r3, #15
 8006738:	6879      	ldr	r1, [r7, #4]
 800673a:	4613      	mov	r3, r2
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	4413      	add	r3, r2
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	440b      	add	r3, r1
 8006744:	3326      	adds	r3, #38	@ 0x26
 8006746:	2210      	movs	r2, #16
 8006748:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800674a:	4b29      	ldr	r3, [pc, #164]	@ (80067f0 <USBD_CDC_Init+0x1ec>)
 800674c:	7819      	ldrb	r1, [r3, #0]
 800674e:	2308      	movs	r3, #8
 8006750:	2203      	movs	r2, #3
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f002 faaf 	bl	8008cb6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006758:	4b25      	ldr	r3, [pc, #148]	@ (80067f0 <USBD_CDC_Init+0x1ec>)
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	f003 020f 	and.w	r2, r3, #15
 8006760:	6879      	ldr	r1, [r7, #4]
 8006762:	4613      	mov	r3, r2
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	4413      	add	r3, r2
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	440b      	add	r3, r1
 800676c:	3324      	adds	r3, #36	@ 0x24
 800676e:	2201      	movs	r2, #1
 8006770:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2200      	movs	r2, #0
 8006776:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	33b0      	adds	r3, #176	@ 0xb0
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	4413      	add	r3, r2
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2200      	movs	r2, #0
 8006792:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2200      	movs	r2, #0
 800679a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d101      	bne.n	80067ac <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80067a8:	2302      	movs	r3, #2
 80067aa:	e018      	b.n	80067de <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	7c1b      	ldrb	r3, [r3, #16]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d10a      	bne.n	80067ca <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80067b4:	4b0d      	ldr	r3, [pc, #52]	@ (80067ec <USBD_CDC_Init+0x1e8>)
 80067b6:	7819      	ldrb	r1, [r3, #0]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80067be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f002 fb66 	bl	8008e94 <USBD_LL_PrepareReceive>
 80067c8:	e008      	b.n	80067dc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80067ca:	4b08      	ldr	r3, [pc, #32]	@ (80067ec <USBD_CDC_Init+0x1e8>)
 80067cc:	7819      	ldrb	r1, [r3, #0]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80067d4:	2340      	movs	r3, #64	@ 0x40
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f002 fb5c 	bl	8008e94 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3710      	adds	r7, #16
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	20000093 	.word	0x20000093
 80067ec:	20000094 	.word	0x20000094
 80067f0:	20000095 	.word	0x20000095

080067f4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b082      	sub	sp, #8
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	460b      	mov	r3, r1
 80067fe:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006800:	4b3a      	ldr	r3, [pc, #232]	@ (80068ec <USBD_CDC_DeInit+0xf8>)
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	4619      	mov	r1, r3
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f002 fa7b 	bl	8008d02 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800680c:	4b37      	ldr	r3, [pc, #220]	@ (80068ec <USBD_CDC_DeInit+0xf8>)
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	f003 020f 	and.w	r2, r3, #15
 8006814:	6879      	ldr	r1, [r7, #4]
 8006816:	4613      	mov	r3, r2
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	4413      	add	r3, r2
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	440b      	add	r3, r1
 8006820:	3324      	adds	r3, #36	@ 0x24
 8006822:	2200      	movs	r2, #0
 8006824:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006826:	4b32      	ldr	r3, [pc, #200]	@ (80068f0 <USBD_CDC_DeInit+0xfc>)
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	4619      	mov	r1, r3
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f002 fa68 	bl	8008d02 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006832:	4b2f      	ldr	r3, [pc, #188]	@ (80068f0 <USBD_CDC_DeInit+0xfc>)
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	f003 020f 	and.w	r2, r3, #15
 800683a:	6879      	ldr	r1, [r7, #4]
 800683c:	4613      	mov	r3, r2
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	4413      	add	r3, r2
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	440b      	add	r3, r1
 8006846:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800684a:	2200      	movs	r2, #0
 800684c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800684e:	4b29      	ldr	r3, [pc, #164]	@ (80068f4 <USBD_CDC_DeInit+0x100>)
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	4619      	mov	r1, r3
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f002 fa54 	bl	8008d02 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800685a:	4b26      	ldr	r3, [pc, #152]	@ (80068f4 <USBD_CDC_DeInit+0x100>)
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	f003 020f 	and.w	r2, r3, #15
 8006862:	6879      	ldr	r1, [r7, #4]
 8006864:	4613      	mov	r3, r2
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	4413      	add	r3, r2
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	440b      	add	r3, r1
 800686e:	3324      	adds	r3, #36	@ 0x24
 8006870:	2200      	movs	r2, #0
 8006872:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006874:	4b1f      	ldr	r3, [pc, #124]	@ (80068f4 <USBD_CDC_DeInit+0x100>)
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	f003 020f 	and.w	r2, r3, #15
 800687c:	6879      	ldr	r1, [r7, #4]
 800687e:	4613      	mov	r3, r2
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	4413      	add	r3, r2
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	440b      	add	r3, r1
 8006888:	3326      	adds	r3, #38	@ 0x26
 800688a:	2200      	movs	r2, #0
 800688c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	32b0      	adds	r2, #176	@ 0xb0
 8006898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d01f      	beq.n	80068e0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	33b0      	adds	r3, #176	@ 0xb0
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	4413      	add	r3, r2
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	32b0      	adds	r2, #176	@ 0xb0
 80068be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068c2:	4618      	mov	r0, r3
 80068c4:	f002 fb76 	bl	8008fb4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	32b0      	adds	r2, #176	@ 0xb0
 80068d2:	2100      	movs	r1, #0
 80068d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80068e0:	2300      	movs	r3, #0
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3708      	adds	r7, #8
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	20000093 	.word	0x20000093
 80068f0:	20000094 	.word	0x20000094
 80068f4:	20000095 	.word	0x20000095

080068f8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b086      	sub	sp, #24
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	32b0      	adds	r2, #176	@ 0xb0
 800690c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006910:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006912:	2300      	movs	r3, #0
 8006914:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006916:	2300      	movs	r3, #0
 8006918:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800691a:	2300      	movs	r3, #0
 800691c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d101      	bne.n	8006928 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006924:	2303      	movs	r3, #3
 8006926:	e0bf      	b.n	8006aa8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006930:	2b00      	cmp	r3, #0
 8006932:	d050      	beq.n	80069d6 <USBD_CDC_Setup+0xde>
 8006934:	2b20      	cmp	r3, #32
 8006936:	f040 80af 	bne.w	8006a98 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	88db      	ldrh	r3, [r3, #6]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d03a      	beq.n	80069b8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	b25b      	sxtb	r3, r3
 8006948:	2b00      	cmp	r3, #0
 800694a:	da1b      	bge.n	8006984 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	33b0      	adds	r3, #176	@ 0xb0
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	4413      	add	r3, r2
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	683a      	ldr	r2, [r7, #0]
 8006960:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006962:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006964:	683a      	ldr	r2, [r7, #0]
 8006966:	88d2      	ldrh	r2, [r2, #6]
 8006968:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	88db      	ldrh	r3, [r3, #6]
 800696e:	2b07      	cmp	r3, #7
 8006970:	bf28      	it	cs
 8006972:	2307      	movcs	r3, #7
 8006974:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	89fa      	ldrh	r2, [r7, #14]
 800697a:	4619      	mov	r1, r3
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f001 fd6b 	bl	8008458 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006982:	e090      	b.n	8006aa6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	785a      	ldrb	r2, [r3, #1]
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	88db      	ldrh	r3, [r3, #6]
 8006992:	2b3f      	cmp	r3, #63	@ 0x3f
 8006994:	d803      	bhi.n	800699e <USBD_CDC_Setup+0xa6>
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	88db      	ldrh	r3, [r3, #6]
 800699a:	b2da      	uxtb	r2, r3
 800699c:	e000      	b.n	80069a0 <USBD_CDC_Setup+0xa8>
 800699e:	2240      	movs	r2, #64	@ 0x40
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80069a6:	6939      	ldr	r1, [r7, #16]
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80069ae:	461a      	mov	r2, r3
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f001 fd7d 	bl	80084b0 <USBD_CtlPrepareRx>
      break;
 80069b6:	e076      	b.n	8006aa6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	33b0      	adds	r3, #176	@ 0xb0
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	4413      	add	r3, r2
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	683a      	ldr	r2, [r7, #0]
 80069cc:	7850      	ldrb	r0, [r2, #1]
 80069ce:	2200      	movs	r2, #0
 80069d0:	6839      	ldr	r1, [r7, #0]
 80069d2:	4798      	blx	r3
      break;
 80069d4:	e067      	b.n	8006aa6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	785b      	ldrb	r3, [r3, #1]
 80069da:	2b0b      	cmp	r3, #11
 80069dc:	d851      	bhi.n	8006a82 <USBD_CDC_Setup+0x18a>
 80069de:	a201      	add	r2, pc, #4	@ (adr r2, 80069e4 <USBD_CDC_Setup+0xec>)
 80069e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e4:	08006a15 	.word	0x08006a15
 80069e8:	08006a91 	.word	0x08006a91
 80069ec:	08006a83 	.word	0x08006a83
 80069f0:	08006a83 	.word	0x08006a83
 80069f4:	08006a83 	.word	0x08006a83
 80069f8:	08006a83 	.word	0x08006a83
 80069fc:	08006a83 	.word	0x08006a83
 8006a00:	08006a83 	.word	0x08006a83
 8006a04:	08006a83 	.word	0x08006a83
 8006a08:	08006a83 	.word	0x08006a83
 8006a0c:	08006a3f 	.word	0x08006a3f
 8006a10:	08006a69 	.word	0x08006a69
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	2b03      	cmp	r3, #3
 8006a1e:	d107      	bne.n	8006a30 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006a20:	f107 030a 	add.w	r3, r7, #10
 8006a24:	2202      	movs	r2, #2
 8006a26:	4619      	mov	r1, r3
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f001 fd15 	bl	8008458 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a2e:	e032      	b.n	8006a96 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006a30:	6839      	ldr	r1, [r7, #0]
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f001 fc9f 	bl	8008376 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a38:	2303      	movs	r3, #3
 8006a3a:	75fb      	strb	r3, [r7, #23]
          break;
 8006a3c:	e02b      	b.n	8006a96 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	2b03      	cmp	r3, #3
 8006a48:	d107      	bne.n	8006a5a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006a4a:	f107 030d 	add.w	r3, r7, #13
 8006a4e:	2201      	movs	r2, #1
 8006a50:	4619      	mov	r1, r3
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f001 fd00 	bl	8008458 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a58:	e01d      	b.n	8006a96 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006a5a:	6839      	ldr	r1, [r7, #0]
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f001 fc8a 	bl	8008376 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a62:	2303      	movs	r3, #3
 8006a64:	75fb      	strb	r3, [r7, #23]
          break;
 8006a66:	e016      	b.n	8006a96 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	2b03      	cmp	r3, #3
 8006a72:	d00f      	beq.n	8006a94 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006a74:	6839      	ldr	r1, [r7, #0]
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f001 fc7d 	bl	8008376 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a7c:	2303      	movs	r3, #3
 8006a7e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006a80:	e008      	b.n	8006a94 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006a82:	6839      	ldr	r1, [r7, #0]
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f001 fc76 	bl	8008376 <USBD_CtlError>
          ret = USBD_FAIL;
 8006a8a:	2303      	movs	r3, #3
 8006a8c:	75fb      	strb	r3, [r7, #23]
          break;
 8006a8e:	e002      	b.n	8006a96 <USBD_CDC_Setup+0x19e>
          break;
 8006a90:	bf00      	nop
 8006a92:	e008      	b.n	8006aa6 <USBD_CDC_Setup+0x1ae>
          break;
 8006a94:	bf00      	nop
      }
      break;
 8006a96:	e006      	b.n	8006aa6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006a98:	6839      	ldr	r1, [r7, #0]
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f001 fc6b 	bl	8008376 <USBD_CtlError>
      ret = USBD_FAIL;
 8006aa0:	2303      	movs	r3, #3
 8006aa2:	75fb      	strb	r3, [r7, #23]
      break;
 8006aa4:	bf00      	nop
  }

  return (uint8_t)ret;
 8006aa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3718      	adds	r7, #24
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}

08006ab0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	460b      	mov	r3, r1
 8006aba:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006ac2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	32b0      	adds	r2, #176	@ 0xb0
 8006ace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d101      	bne.n	8006ada <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006ad6:	2303      	movs	r3, #3
 8006ad8:	e065      	b.n	8006ba6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	32b0      	adds	r2, #176	@ 0xb0
 8006ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ae8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006aea:	78fb      	ldrb	r3, [r7, #3]
 8006aec:	f003 020f 	and.w	r2, r3, #15
 8006af0:	6879      	ldr	r1, [r7, #4]
 8006af2:	4613      	mov	r3, r2
 8006af4:	009b      	lsls	r3, r3, #2
 8006af6:	4413      	add	r3, r2
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	440b      	add	r3, r1
 8006afc:	3318      	adds	r3, #24
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d02f      	beq.n	8006b64 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006b04:	78fb      	ldrb	r3, [r7, #3]
 8006b06:	f003 020f 	and.w	r2, r3, #15
 8006b0a:	6879      	ldr	r1, [r7, #4]
 8006b0c:	4613      	mov	r3, r2
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	4413      	add	r3, r2
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	440b      	add	r3, r1
 8006b16:	3318      	adds	r3, #24
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	78fb      	ldrb	r3, [r7, #3]
 8006b1c:	f003 010f 	and.w	r1, r3, #15
 8006b20:	68f8      	ldr	r0, [r7, #12]
 8006b22:	460b      	mov	r3, r1
 8006b24:	00db      	lsls	r3, r3, #3
 8006b26:	440b      	add	r3, r1
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	4403      	add	r3, r0
 8006b2c:	3348      	adds	r3, #72	@ 0x48
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	fbb2 f1f3 	udiv	r1, r2, r3
 8006b34:	fb01 f303 	mul.w	r3, r1, r3
 8006b38:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d112      	bne.n	8006b64 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006b3e:	78fb      	ldrb	r3, [r7, #3]
 8006b40:	f003 020f 	and.w	r2, r3, #15
 8006b44:	6879      	ldr	r1, [r7, #4]
 8006b46:	4613      	mov	r3, r2
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	4413      	add	r3, r2
 8006b4c:	009b      	lsls	r3, r3, #2
 8006b4e:	440b      	add	r3, r1
 8006b50:	3318      	adds	r3, #24
 8006b52:	2200      	movs	r2, #0
 8006b54:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006b56:	78f9      	ldrb	r1, [r7, #3]
 8006b58:	2300      	movs	r3, #0
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f002 f978 	bl	8008e52 <USBD_LL_Transmit>
 8006b62:	e01f      	b.n	8006ba4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	33b0      	adds	r3, #176	@ 0xb0
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	4413      	add	r3, r2
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d010      	beq.n	8006ba4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	33b0      	adds	r3, #176	@ 0xb0
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	4413      	add	r3, r2
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	691b      	ldr	r3, [r3, #16]
 8006b94:	68ba      	ldr	r2, [r7, #8]
 8006b96:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8006b9a:	68ba      	ldr	r2, [r7, #8]
 8006b9c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006ba0:	78fa      	ldrb	r2, [r7, #3]
 8006ba2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3710      	adds	r7, #16
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}

08006bae <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006bae:	b580      	push	{r7, lr}
 8006bb0:	b084      	sub	sp, #16
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
 8006bb6:	460b      	mov	r3, r1
 8006bb8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	32b0      	adds	r2, #176	@ 0xb0
 8006bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bc8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	32b0      	adds	r2, #176	@ 0xb0
 8006bd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d101      	bne.n	8006be0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006bdc:	2303      	movs	r3, #3
 8006bde:	e01a      	b.n	8006c16 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006be0:	78fb      	ldrb	r3, [r7, #3]
 8006be2:	4619      	mov	r1, r3
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f002 f976 	bl	8008ed6 <USBD_LL_GetRxDataSize>
 8006bea:	4602      	mov	r2, r0
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	33b0      	adds	r3, #176	@ 0xb0
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	4413      	add	r3, r2
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	68fa      	ldr	r2, [r7, #12]
 8006c06:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006c0a:	68fa      	ldr	r2, [r7, #12]
 8006c0c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006c10:	4611      	mov	r1, r2
 8006c12:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006c14:	2300      	movs	r3, #0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3710      	adds	r7, #16
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}

08006c1e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006c1e:	b580      	push	{r7, lr}
 8006c20:	b084      	sub	sp, #16
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	32b0      	adds	r2, #176	@ 0xb0
 8006c30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c34:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d101      	bne.n	8006c40 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006c3c:	2303      	movs	r3, #3
 8006c3e:	e024      	b.n	8006c8a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	33b0      	adds	r3, #176	@ 0xb0
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	4413      	add	r3, r2
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d019      	beq.n	8006c88 <USBD_CDC_EP0_RxReady+0x6a>
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006c5a:	2bff      	cmp	r3, #255	@ 0xff
 8006c5c:	d014      	beq.n	8006c88 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	33b0      	adds	r3, #176	@ 0xb0
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	4413      	add	r3, r2
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	68fa      	ldr	r2, [r7, #12]
 8006c72:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8006c76:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006c78:	68fa      	ldr	r2, [r7, #12]
 8006c7a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006c7e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	22ff      	movs	r2, #255	@ 0xff
 8006c84:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8006c88:	2300      	movs	r3, #0
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3710      	adds	r7, #16
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
	...

08006c94 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b086      	sub	sp, #24
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006c9c:	2182      	movs	r1, #130	@ 0x82
 8006c9e:	4818      	ldr	r0, [pc, #96]	@ (8006d00 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006ca0:	f000 fd09 	bl	80076b6 <USBD_GetEpDesc>
 8006ca4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006ca6:	2101      	movs	r1, #1
 8006ca8:	4815      	ldr	r0, [pc, #84]	@ (8006d00 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006caa:	f000 fd04 	bl	80076b6 <USBD_GetEpDesc>
 8006cae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006cb0:	2181      	movs	r1, #129	@ 0x81
 8006cb2:	4813      	ldr	r0, [pc, #76]	@ (8006d00 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006cb4:	f000 fcff 	bl	80076b6 <USBD_GetEpDesc>
 8006cb8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d002      	beq.n	8006cc6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	2210      	movs	r2, #16
 8006cc4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d006      	beq.n	8006cda <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006cd4:	711a      	strb	r2, [r3, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d006      	beq.n	8006cee <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ce8:	711a      	strb	r2, [r3, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2243      	movs	r2, #67	@ 0x43
 8006cf2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006cf4:	4b02      	ldr	r3, [pc, #8]	@ (8006d00 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3718      	adds	r7, #24
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop
 8006d00:	20000050 	.word	0x20000050

08006d04 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b086      	sub	sp, #24
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006d0c:	2182      	movs	r1, #130	@ 0x82
 8006d0e:	4818      	ldr	r0, [pc, #96]	@ (8006d70 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006d10:	f000 fcd1 	bl	80076b6 <USBD_GetEpDesc>
 8006d14:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006d16:	2101      	movs	r1, #1
 8006d18:	4815      	ldr	r0, [pc, #84]	@ (8006d70 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006d1a:	f000 fccc 	bl	80076b6 <USBD_GetEpDesc>
 8006d1e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006d20:	2181      	movs	r1, #129	@ 0x81
 8006d22:	4813      	ldr	r0, [pc, #76]	@ (8006d70 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006d24:	f000 fcc7 	bl	80076b6 <USBD_GetEpDesc>
 8006d28:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d002      	beq.n	8006d36 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	2210      	movs	r2, #16
 8006d34:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d006      	beq.n	8006d4a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	711a      	strb	r2, [r3, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f042 0202 	orr.w	r2, r2, #2
 8006d48:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d006      	beq.n	8006d5e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2200      	movs	r2, #0
 8006d54:	711a      	strb	r2, [r3, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f042 0202 	orr.w	r2, r2, #2
 8006d5c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2243      	movs	r2, #67	@ 0x43
 8006d62:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006d64:	4b02      	ldr	r3, [pc, #8]	@ (8006d70 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3718      	adds	r7, #24
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}
 8006d6e:	bf00      	nop
 8006d70:	20000050 	.word	0x20000050

08006d74 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b086      	sub	sp, #24
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006d7c:	2182      	movs	r1, #130	@ 0x82
 8006d7e:	4818      	ldr	r0, [pc, #96]	@ (8006de0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006d80:	f000 fc99 	bl	80076b6 <USBD_GetEpDesc>
 8006d84:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006d86:	2101      	movs	r1, #1
 8006d88:	4815      	ldr	r0, [pc, #84]	@ (8006de0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006d8a:	f000 fc94 	bl	80076b6 <USBD_GetEpDesc>
 8006d8e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006d90:	2181      	movs	r1, #129	@ 0x81
 8006d92:	4813      	ldr	r0, [pc, #76]	@ (8006de0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006d94:	f000 fc8f 	bl	80076b6 <USBD_GetEpDesc>
 8006d98:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d002      	beq.n	8006da6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	2210      	movs	r2, #16
 8006da4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d006      	beq.n	8006dba <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	2200      	movs	r2, #0
 8006db0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006db4:	711a      	strb	r2, [r3, #4]
 8006db6:	2200      	movs	r2, #0
 8006db8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d006      	beq.n	8006dce <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006dc8:	711a      	strb	r2, [r3, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2243      	movs	r2, #67	@ 0x43
 8006dd2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006dd4:	4b02      	ldr	r3, [pc, #8]	@ (8006de0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3718      	adds	r7, #24
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop
 8006de0:	20000050 	.word	0x20000050

08006de4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	220a      	movs	r2, #10
 8006df0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006df2:	4b03      	ldr	r3, [pc, #12]	@ (8006e00 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	370c      	adds	r7, #12
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr
 8006e00:	2000000c 	.word	0x2000000c

08006e04 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d101      	bne.n	8006e18 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006e14:	2303      	movs	r3, #3
 8006e16:	e009      	b.n	8006e2c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	33b0      	adds	r3, #176	@ 0xb0
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	4413      	add	r3, r2
 8006e26:	683a      	ldr	r2, [r7, #0]
 8006e28:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006e2a:	2300      	movs	r3, #0
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	370c      	adds	r7, #12
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr

08006e38 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b087      	sub	sp, #28
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	60f8      	str	r0, [r7, #12]
 8006e40:	60b9      	str	r1, [r7, #8]
 8006e42:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	32b0      	adds	r2, #176	@ 0xb0
 8006e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e52:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d101      	bne.n	8006e5e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006e5a:	2303      	movs	r3, #3
 8006e5c:	e008      	b.n	8006e70 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	68ba      	ldr	r2, [r7, #8]
 8006e62:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8006e6e:	2300      	movs	r3, #0
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	371c      	adds	r7, #28
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr

08006e7c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b085      	sub	sp, #20
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	32b0      	adds	r2, #176	@ 0xb0
 8006e90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e94:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d101      	bne.n	8006ea0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006e9c:	2303      	movs	r3, #3
 8006e9e:	e004      	b.n	8006eaa <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	683a      	ldr	r2, [r7, #0]
 8006ea4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8006ea8:	2300      	movs	r3, #0
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3714      	adds	r7, #20
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr
	...

08006eb8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b084      	sub	sp, #16
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	32b0      	adds	r2, #176	@ 0xb0
 8006eca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ece:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	32b0      	adds	r2, #176	@ 0xb0
 8006eda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d101      	bne.n	8006ee6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006ee2:	2303      	movs	r3, #3
 8006ee4:	e018      	b.n	8006f18 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	7c1b      	ldrb	r3, [r3, #16]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d10a      	bne.n	8006f04 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006eee:	4b0c      	ldr	r3, [pc, #48]	@ (8006f20 <USBD_CDC_ReceivePacket+0x68>)
 8006ef0:	7819      	ldrb	r1, [r3, #0]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006ef8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f001 ffc9 	bl	8008e94 <USBD_LL_PrepareReceive>
 8006f02:	e008      	b.n	8006f16 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006f04:	4b06      	ldr	r3, [pc, #24]	@ (8006f20 <USBD_CDC_ReceivePacket+0x68>)
 8006f06:	7819      	ldrb	r1, [r3, #0]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006f0e:	2340      	movs	r3, #64	@ 0x40
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f001 ffbf 	bl	8008e94 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006f16:	2300      	movs	r3, #0
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3710      	adds	r7, #16
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}
 8006f20:	20000094 	.word	0x20000094

08006f24 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b086      	sub	sp, #24
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	60f8      	str	r0, [r7, #12]
 8006f2c:	60b9      	str	r1, [r7, #8]
 8006f2e:	4613      	mov	r3, r2
 8006f30:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d101      	bne.n	8006f3c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006f38:	2303      	movs	r3, #3
 8006f3a:	e01f      	b.n	8006f7c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2200      	movs	r2, #0
 8006f48:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d003      	beq.n	8006f62 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	68ba      	ldr	r2, [r7, #8]
 8006f5e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2201      	movs	r2, #1
 8006f66:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	79fa      	ldrb	r2, [r7, #7]
 8006f6e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006f70:	68f8      	ldr	r0, [r7, #12]
 8006f72:	f001 fe35 	bl	8008be0 <USBD_LL_Init>
 8006f76:	4603      	mov	r3, r0
 8006f78:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006f7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3718      	adds	r7, #24
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b084      	sub	sp, #16
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d101      	bne.n	8006f9c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006f98:	2303      	movs	r3, #3
 8006f9a:	e025      	b.n	8006fe8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	683a      	ldr	r2, [r7, #0]
 8006fa0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	32ae      	adds	r2, #174	@ 0xae
 8006fae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d00f      	beq.n	8006fd8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	32ae      	adds	r2, #174	@ 0xae
 8006fc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fc8:	f107 020e 	add.w	r2, r7, #14
 8006fcc:	4610      	mov	r0, r2
 8006fce:	4798      	blx	r3
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006fde:	1c5a      	adds	r2, r3, #1
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006fe6:	2300      	movs	r3, #0
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3710      	adds	r7, #16
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}

08006ff0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b082      	sub	sp, #8
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f001 fe41 	bl	8008c80 <USBD_LL_Start>
 8006ffe:	4603      	mov	r3, r0
}
 8007000:	4618      	mov	r0, r3
 8007002:	3708      	adds	r7, #8
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007008:	b480      	push	{r7}
 800700a:	b083      	sub	sp, #12
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007010:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007012:	4618      	mov	r0, r3
 8007014:	370c      	adds	r7, #12
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr

0800701e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800701e:	b580      	push	{r7, lr}
 8007020:	b084      	sub	sp, #16
 8007022:	af00      	add	r7, sp, #0
 8007024:	6078      	str	r0, [r7, #4]
 8007026:	460b      	mov	r3, r1
 8007028:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800702a:	2300      	movs	r3, #0
 800702c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007034:	2b00      	cmp	r3, #0
 8007036:	d009      	beq.n	800704c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	78fa      	ldrb	r2, [r7, #3]
 8007042:	4611      	mov	r1, r2
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	4798      	blx	r3
 8007048:	4603      	mov	r3, r0
 800704a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800704c:	7bfb      	ldrb	r3, [r7, #15]
}
 800704e:	4618      	mov	r0, r3
 8007050:	3710      	adds	r7, #16
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}

08007056 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007056:	b580      	push	{r7, lr}
 8007058:	b084      	sub	sp, #16
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
 800705e:	460b      	mov	r3, r1
 8007060:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007062:	2300      	movs	r3, #0
 8007064:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	78fa      	ldrb	r2, [r7, #3]
 8007070:	4611      	mov	r1, r2
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	4798      	blx	r3
 8007076:	4603      	mov	r3, r0
 8007078:	2b00      	cmp	r3, #0
 800707a:	d001      	beq.n	8007080 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800707c:	2303      	movs	r3, #3
 800707e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007080:	7bfb      	ldrb	r3, [r7, #15]
}
 8007082:	4618      	mov	r0, r3
 8007084:	3710      	adds	r7, #16
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}

0800708a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800708a:	b580      	push	{r7, lr}
 800708c:	b084      	sub	sp, #16
 800708e:	af00      	add	r7, sp, #0
 8007090:	6078      	str	r0, [r7, #4]
 8007092:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800709a:	6839      	ldr	r1, [r7, #0]
 800709c:	4618      	mov	r0, r3
 800709e:	f001 f930 	bl	8008302 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2201      	movs	r2, #1
 80070a6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80070b0:	461a      	mov	r2, r3
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80070be:	f003 031f 	and.w	r3, r3, #31
 80070c2:	2b02      	cmp	r3, #2
 80070c4:	d01a      	beq.n	80070fc <USBD_LL_SetupStage+0x72>
 80070c6:	2b02      	cmp	r3, #2
 80070c8:	d822      	bhi.n	8007110 <USBD_LL_SetupStage+0x86>
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d002      	beq.n	80070d4 <USBD_LL_SetupStage+0x4a>
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d00a      	beq.n	80070e8 <USBD_LL_SetupStage+0x5e>
 80070d2:	e01d      	b.n	8007110 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80070da:	4619      	mov	r1, r3
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 fb5d 	bl	800779c <USBD_StdDevReq>
 80070e2:	4603      	mov	r3, r0
 80070e4:	73fb      	strb	r3, [r7, #15]
      break;
 80070e6:	e020      	b.n	800712a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80070ee:	4619      	mov	r1, r3
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 fbc5 	bl	8007880 <USBD_StdItfReq>
 80070f6:	4603      	mov	r3, r0
 80070f8:	73fb      	strb	r3, [r7, #15]
      break;
 80070fa:	e016      	b.n	800712a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007102:	4619      	mov	r1, r3
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f000 fc27 	bl	8007958 <USBD_StdEPReq>
 800710a:	4603      	mov	r3, r0
 800710c:	73fb      	strb	r3, [r7, #15]
      break;
 800710e:	e00c      	b.n	800712a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007116:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800711a:	b2db      	uxtb	r3, r3
 800711c:	4619      	mov	r1, r3
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f001 fe0e 	bl	8008d40 <USBD_LL_StallEP>
 8007124:	4603      	mov	r3, r0
 8007126:	73fb      	strb	r3, [r7, #15]
      break;
 8007128:	bf00      	nop
  }

  return ret;
 800712a:	7bfb      	ldrb	r3, [r7, #15]
}
 800712c:	4618      	mov	r0, r3
 800712e:	3710      	adds	r7, #16
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b086      	sub	sp, #24
 8007138:	af00      	add	r7, sp, #0
 800713a:	60f8      	str	r0, [r7, #12]
 800713c:	460b      	mov	r3, r1
 800713e:	607a      	str	r2, [r7, #4]
 8007140:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007142:	2300      	movs	r3, #0
 8007144:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007146:	7afb      	ldrb	r3, [r7, #11]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d16e      	bne.n	800722a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007152:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800715a:	2b03      	cmp	r3, #3
 800715c:	f040 8098 	bne.w	8007290 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	689a      	ldr	r2, [r3, #8]
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	429a      	cmp	r2, r3
 800716a:	d913      	bls.n	8007194 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	689a      	ldr	r2, [r3, #8]
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	68db      	ldr	r3, [r3, #12]
 8007174:	1ad2      	subs	r2, r2, r3
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	68da      	ldr	r2, [r3, #12]
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	4293      	cmp	r3, r2
 8007184:	bf28      	it	cs
 8007186:	4613      	movcs	r3, r2
 8007188:	461a      	mov	r2, r3
 800718a:	6879      	ldr	r1, [r7, #4]
 800718c:	68f8      	ldr	r0, [r7, #12]
 800718e:	f001 f9ac 	bl	80084ea <USBD_CtlContinueRx>
 8007192:	e07d      	b.n	8007290 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800719a:	f003 031f 	and.w	r3, r3, #31
 800719e:	2b02      	cmp	r3, #2
 80071a0:	d014      	beq.n	80071cc <USBD_LL_DataOutStage+0x98>
 80071a2:	2b02      	cmp	r3, #2
 80071a4:	d81d      	bhi.n	80071e2 <USBD_LL_DataOutStage+0xae>
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d002      	beq.n	80071b0 <USBD_LL_DataOutStage+0x7c>
 80071aa:	2b01      	cmp	r3, #1
 80071ac:	d003      	beq.n	80071b6 <USBD_LL_DataOutStage+0x82>
 80071ae:	e018      	b.n	80071e2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80071b0:	2300      	movs	r3, #0
 80071b2:	75bb      	strb	r3, [r7, #22]
            break;
 80071b4:	e018      	b.n	80071e8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	4619      	mov	r1, r3
 80071c0:	68f8      	ldr	r0, [r7, #12]
 80071c2:	f000 fa5e 	bl	8007682 <USBD_CoreFindIF>
 80071c6:	4603      	mov	r3, r0
 80071c8:	75bb      	strb	r3, [r7, #22]
            break;
 80071ca:	e00d      	b.n	80071e8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	4619      	mov	r1, r3
 80071d6:	68f8      	ldr	r0, [r7, #12]
 80071d8:	f000 fa60 	bl	800769c <USBD_CoreFindEP>
 80071dc:	4603      	mov	r3, r0
 80071de:	75bb      	strb	r3, [r7, #22]
            break;
 80071e0:	e002      	b.n	80071e8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80071e2:	2300      	movs	r3, #0
 80071e4:	75bb      	strb	r3, [r7, #22]
            break;
 80071e6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80071e8:	7dbb      	ldrb	r3, [r7, #22]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d119      	bne.n	8007222 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071f4:	b2db      	uxtb	r3, r3
 80071f6:	2b03      	cmp	r3, #3
 80071f8:	d113      	bne.n	8007222 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80071fa:	7dba      	ldrb	r2, [r7, #22]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	32ae      	adds	r2, #174	@ 0xae
 8007200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007204:	691b      	ldr	r3, [r3, #16]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d00b      	beq.n	8007222 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800720a:	7dba      	ldrb	r2, [r7, #22]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007212:	7dba      	ldrb	r2, [r7, #22]
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	32ae      	adds	r2, #174	@ 0xae
 8007218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800721c:	691b      	ldr	r3, [r3, #16]
 800721e:	68f8      	ldr	r0, [r7, #12]
 8007220:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007222:	68f8      	ldr	r0, [r7, #12]
 8007224:	f001 f972 	bl	800850c <USBD_CtlSendStatus>
 8007228:	e032      	b.n	8007290 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800722a:	7afb      	ldrb	r3, [r7, #11]
 800722c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007230:	b2db      	uxtb	r3, r3
 8007232:	4619      	mov	r1, r3
 8007234:	68f8      	ldr	r0, [r7, #12]
 8007236:	f000 fa31 	bl	800769c <USBD_CoreFindEP>
 800723a:	4603      	mov	r3, r0
 800723c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800723e:	7dbb      	ldrb	r3, [r7, #22]
 8007240:	2bff      	cmp	r3, #255	@ 0xff
 8007242:	d025      	beq.n	8007290 <USBD_LL_DataOutStage+0x15c>
 8007244:	7dbb      	ldrb	r3, [r7, #22]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d122      	bne.n	8007290 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007250:	b2db      	uxtb	r3, r3
 8007252:	2b03      	cmp	r3, #3
 8007254:	d117      	bne.n	8007286 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007256:	7dba      	ldrb	r2, [r7, #22]
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	32ae      	adds	r2, #174	@ 0xae
 800725c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007260:	699b      	ldr	r3, [r3, #24]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d00f      	beq.n	8007286 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007266:	7dba      	ldrb	r2, [r7, #22]
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800726e:	7dba      	ldrb	r2, [r7, #22]
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	32ae      	adds	r2, #174	@ 0xae
 8007274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007278:	699b      	ldr	r3, [r3, #24]
 800727a:	7afa      	ldrb	r2, [r7, #11]
 800727c:	4611      	mov	r1, r2
 800727e:	68f8      	ldr	r0, [r7, #12]
 8007280:	4798      	blx	r3
 8007282:	4603      	mov	r3, r0
 8007284:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007286:	7dfb      	ldrb	r3, [r7, #23]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d001      	beq.n	8007290 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800728c:	7dfb      	ldrb	r3, [r7, #23]
 800728e:	e000      	b.n	8007292 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007290:	2300      	movs	r3, #0
}
 8007292:	4618      	mov	r0, r3
 8007294:	3718      	adds	r7, #24
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}

0800729a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800729a:	b580      	push	{r7, lr}
 800729c:	b086      	sub	sp, #24
 800729e:	af00      	add	r7, sp, #0
 80072a0:	60f8      	str	r0, [r7, #12]
 80072a2:	460b      	mov	r3, r1
 80072a4:	607a      	str	r2, [r7, #4]
 80072a6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80072a8:	7afb      	ldrb	r3, [r7, #11]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d16f      	bne.n	800738e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	3314      	adds	r3, #20
 80072b2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80072ba:	2b02      	cmp	r3, #2
 80072bc:	d15a      	bne.n	8007374 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	689a      	ldr	r2, [r3, #8]
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	68db      	ldr	r3, [r3, #12]
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d914      	bls.n	80072f4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	689a      	ldr	r2, [r3, #8]
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	68db      	ldr	r3, [r3, #12]
 80072d2:	1ad2      	subs	r2, r2, r3
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	461a      	mov	r2, r3
 80072de:	6879      	ldr	r1, [r7, #4]
 80072e0:	68f8      	ldr	r0, [r7, #12]
 80072e2:	f001 f8d4 	bl	800848e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80072e6:	2300      	movs	r3, #0
 80072e8:	2200      	movs	r2, #0
 80072ea:	2100      	movs	r1, #0
 80072ec:	68f8      	ldr	r0, [r7, #12]
 80072ee:	f001 fdd1 	bl	8008e94 <USBD_LL_PrepareReceive>
 80072f2:	e03f      	b.n	8007374 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	68da      	ldr	r2, [r3, #12]
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d11c      	bne.n	800733a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	685a      	ldr	r2, [r3, #4]
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007308:	429a      	cmp	r2, r3
 800730a:	d316      	bcc.n	800733a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	685a      	ldr	r2, [r3, #4]
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007316:	429a      	cmp	r2, r3
 8007318:	d20f      	bcs.n	800733a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800731a:	2200      	movs	r2, #0
 800731c:	2100      	movs	r1, #0
 800731e:	68f8      	ldr	r0, [r7, #12]
 8007320:	f001 f8b5 	bl	800848e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2200      	movs	r2, #0
 8007328:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800732c:	2300      	movs	r3, #0
 800732e:	2200      	movs	r2, #0
 8007330:	2100      	movs	r1, #0
 8007332:	68f8      	ldr	r0, [r7, #12]
 8007334:	f001 fdae 	bl	8008e94 <USBD_LL_PrepareReceive>
 8007338:	e01c      	b.n	8007374 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007340:	b2db      	uxtb	r3, r3
 8007342:	2b03      	cmp	r3, #3
 8007344:	d10f      	bne.n	8007366 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800734c:	68db      	ldr	r3, [r3, #12]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d009      	beq.n	8007366 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2200      	movs	r2, #0
 8007356:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007360:	68db      	ldr	r3, [r3, #12]
 8007362:	68f8      	ldr	r0, [r7, #12]
 8007364:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007366:	2180      	movs	r1, #128	@ 0x80
 8007368:	68f8      	ldr	r0, [r7, #12]
 800736a:	f001 fce9 	bl	8008d40 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800736e:	68f8      	ldr	r0, [r7, #12]
 8007370:	f001 f8df 	bl	8008532 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800737a:	2b00      	cmp	r3, #0
 800737c:	d03a      	beq.n	80073f4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800737e:	68f8      	ldr	r0, [r7, #12]
 8007380:	f7ff fe42 	bl	8007008 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2200      	movs	r2, #0
 8007388:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800738c:	e032      	b.n	80073f4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800738e:	7afb      	ldrb	r3, [r7, #11]
 8007390:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007394:	b2db      	uxtb	r3, r3
 8007396:	4619      	mov	r1, r3
 8007398:	68f8      	ldr	r0, [r7, #12]
 800739a:	f000 f97f 	bl	800769c <USBD_CoreFindEP>
 800739e:	4603      	mov	r3, r0
 80073a0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80073a2:	7dfb      	ldrb	r3, [r7, #23]
 80073a4:	2bff      	cmp	r3, #255	@ 0xff
 80073a6:	d025      	beq.n	80073f4 <USBD_LL_DataInStage+0x15a>
 80073a8:	7dfb      	ldrb	r3, [r7, #23]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d122      	bne.n	80073f4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	2b03      	cmp	r3, #3
 80073b8:	d11c      	bne.n	80073f4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80073ba:	7dfa      	ldrb	r2, [r7, #23]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	32ae      	adds	r2, #174	@ 0xae
 80073c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073c4:	695b      	ldr	r3, [r3, #20]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d014      	beq.n	80073f4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80073ca:	7dfa      	ldrb	r2, [r7, #23]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80073d2:	7dfa      	ldrb	r2, [r7, #23]
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	32ae      	adds	r2, #174	@ 0xae
 80073d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073dc:	695b      	ldr	r3, [r3, #20]
 80073de:	7afa      	ldrb	r2, [r7, #11]
 80073e0:	4611      	mov	r1, r2
 80073e2:	68f8      	ldr	r0, [r7, #12]
 80073e4:	4798      	blx	r3
 80073e6:	4603      	mov	r3, r0
 80073e8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80073ea:	7dbb      	ldrb	r3, [r7, #22]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d001      	beq.n	80073f4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80073f0:	7dbb      	ldrb	r3, [r7, #22]
 80073f2:	e000      	b.n	80073f6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80073f4:	2300      	movs	r3, #0
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3718      	adds	r7, #24
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}

080073fe <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80073fe:	b580      	push	{r7, lr}
 8007400:	b084      	sub	sp, #16
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007406:	2300      	movs	r3, #0
 8007408:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2201      	movs	r2, #1
 800740e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2200      	movs	r2, #0
 8007416:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2200      	movs	r2, #0
 800741e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2200      	movs	r2, #0
 800742c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007436:	2b00      	cmp	r3, #0
 8007438:	d014      	beq.n	8007464 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d00e      	beq.n	8007464 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	6852      	ldr	r2, [r2, #4]
 8007452:	b2d2      	uxtb	r2, r2
 8007454:	4611      	mov	r1, r2
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	4798      	blx	r3
 800745a:	4603      	mov	r3, r0
 800745c:	2b00      	cmp	r3, #0
 800745e:	d001      	beq.n	8007464 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007460:	2303      	movs	r3, #3
 8007462:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007464:	2340      	movs	r3, #64	@ 0x40
 8007466:	2200      	movs	r2, #0
 8007468:	2100      	movs	r1, #0
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f001 fc23 	bl	8008cb6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2201      	movs	r2, #1
 8007474:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2240      	movs	r2, #64	@ 0x40
 800747c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007480:	2340      	movs	r3, #64	@ 0x40
 8007482:	2200      	movs	r2, #0
 8007484:	2180      	movs	r1, #128	@ 0x80
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f001 fc15 	bl	8008cb6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2201      	movs	r2, #1
 8007490:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2240      	movs	r2, #64	@ 0x40
 8007496:	621a      	str	r2, [r3, #32]

  return ret;
 8007498:	7bfb      	ldrb	r3, [r7, #15]
}
 800749a:	4618      	mov	r0, r3
 800749c:	3710      	adds	r7, #16
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}

080074a2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80074a2:	b480      	push	{r7}
 80074a4:	b083      	sub	sp, #12
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	6078      	str	r0, [r7, #4]
 80074aa:	460b      	mov	r3, r1
 80074ac:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	78fa      	ldrb	r2, [r7, #3]
 80074b2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80074b4:	2300      	movs	r3, #0
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	370c      	adds	r7, #12
 80074ba:	46bd      	mov	sp, r7
 80074bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c0:	4770      	bx	lr

080074c2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80074c2:	b480      	push	{r7}
 80074c4:	b083      	sub	sp, #12
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074d0:	b2da      	uxtb	r2, r3
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2204      	movs	r2, #4
 80074dc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80074e0:	2300      	movs	r3, #0
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	370c      	adds	r7, #12
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr

080074ee <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80074ee:	b480      	push	{r7}
 80074f0:	b083      	sub	sp, #12
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074fc:	b2db      	uxtb	r3, r3
 80074fe:	2b04      	cmp	r3, #4
 8007500:	d106      	bne.n	8007510 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007508:	b2da      	uxtb	r2, r3
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007510:	2300      	movs	r3, #0
}
 8007512:	4618      	mov	r0, r3
 8007514:	370c      	adds	r7, #12
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr

0800751e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800751e:	b580      	push	{r7, lr}
 8007520:	b082      	sub	sp, #8
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800752c:	b2db      	uxtb	r3, r3
 800752e:	2b03      	cmp	r3, #3
 8007530:	d110      	bne.n	8007554 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007538:	2b00      	cmp	r3, #0
 800753a:	d00b      	beq.n	8007554 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007542:	69db      	ldr	r3, [r3, #28]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d005      	beq.n	8007554 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800754e:	69db      	ldr	r3, [r3, #28]
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007554:	2300      	movs	r3, #0
}
 8007556:	4618      	mov	r0, r3
 8007558:	3708      	adds	r7, #8
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}

0800755e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800755e:	b580      	push	{r7, lr}
 8007560:	b082      	sub	sp, #8
 8007562:	af00      	add	r7, sp, #0
 8007564:	6078      	str	r0, [r7, #4]
 8007566:	460b      	mov	r3, r1
 8007568:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	32ae      	adds	r2, #174	@ 0xae
 8007574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d101      	bne.n	8007580 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800757c:	2303      	movs	r3, #3
 800757e:	e01c      	b.n	80075ba <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007586:	b2db      	uxtb	r3, r3
 8007588:	2b03      	cmp	r3, #3
 800758a:	d115      	bne.n	80075b8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	32ae      	adds	r2, #174	@ 0xae
 8007596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800759a:	6a1b      	ldr	r3, [r3, #32]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d00b      	beq.n	80075b8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	32ae      	adds	r2, #174	@ 0xae
 80075aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075ae:	6a1b      	ldr	r3, [r3, #32]
 80075b0:	78fa      	ldrb	r2, [r7, #3]
 80075b2:	4611      	mov	r1, r2
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80075b8:	2300      	movs	r3, #0
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3708      	adds	r7, #8
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}

080075c2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b082      	sub	sp, #8
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
 80075ca:	460b      	mov	r3, r1
 80075cc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	32ae      	adds	r2, #174	@ 0xae
 80075d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d101      	bne.n	80075e4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80075e0:	2303      	movs	r3, #3
 80075e2:	e01c      	b.n	800761e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	2b03      	cmp	r3, #3
 80075ee:	d115      	bne.n	800761c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	32ae      	adds	r2, #174	@ 0xae
 80075fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007600:	2b00      	cmp	r3, #0
 8007602:	d00b      	beq.n	800761c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	32ae      	adds	r2, #174	@ 0xae
 800760e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007614:	78fa      	ldrb	r2, [r7, #3]
 8007616:	4611      	mov	r1, r2
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800761c:	2300      	movs	r3, #0
}
 800761e:	4618      	mov	r0, r3
 8007620:	3708      	adds	r7, #8
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}

08007626 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007626:	b480      	push	{r7}
 8007628:	b083      	sub	sp, #12
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800762e:	2300      	movs	r3, #0
}
 8007630:	4618      	mov	r0, r3
 8007632:	370c      	adds	r7, #12
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr

0800763c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b084      	sub	sp, #16
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007644:	2300      	movs	r3, #0
 8007646:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2201      	movs	r2, #1
 800764c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007656:	2b00      	cmp	r3, #0
 8007658:	d00e      	beq.n	8007678 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	6852      	ldr	r2, [r2, #4]
 8007666:	b2d2      	uxtb	r2, r2
 8007668:	4611      	mov	r1, r2
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	4798      	blx	r3
 800766e:	4603      	mov	r3, r0
 8007670:	2b00      	cmp	r3, #0
 8007672:	d001      	beq.n	8007678 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007674:	2303      	movs	r3, #3
 8007676:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007678:	7bfb      	ldrb	r3, [r7, #15]
}
 800767a:	4618      	mov	r0, r3
 800767c:	3710      	adds	r7, #16
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}

08007682 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007682:	b480      	push	{r7}
 8007684:	b083      	sub	sp, #12
 8007686:	af00      	add	r7, sp, #0
 8007688:	6078      	str	r0, [r7, #4]
 800768a:	460b      	mov	r3, r1
 800768c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800768e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007690:	4618      	mov	r0, r3
 8007692:	370c      	adds	r7, #12
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800769c:	b480      	push	{r7}
 800769e:	b083      	sub	sp, #12
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	460b      	mov	r3, r1
 80076a6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80076a8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	370c      	adds	r7, #12
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr

080076b6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80076b6:	b580      	push	{r7, lr}
 80076b8:	b086      	sub	sp, #24
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
 80076be:	460b      	mov	r3, r1
 80076c0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80076ca:	2300      	movs	r3, #0
 80076cc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	885b      	ldrh	r3, [r3, #2]
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	68fa      	ldr	r2, [r7, #12]
 80076d6:	7812      	ldrb	r2, [r2, #0]
 80076d8:	4293      	cmp	r3, r2
 80076da:	d91f      	bls.n	800771c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80076e2:	e013      	b.n	800770c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80076e4:	f107 030a 	add.w	r3, r7, #10
 80076e8:	4619      	mov	r1, r3
 80076ea:	6978      	ldr	r0, [r7, #20]
 80076ec:	f000 f81b 	bl	8007726 <USBD_GetNextDesc>
 80076f0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	785b      	ldrb	r3, [r3, #1]
 80076f6:	2b05      	cmp	r3, #5
 80076f8:	d108      	bne.n	800770c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	789b      	ldrb	r3, [r3, #2]
 8007702:	78fa      	ldrb	r2, [r7, #3]
 8007704:	429a      	cmp	r2, r3
 8007706:	d008      	beq.n	800771a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007708:	2300      	movs	r3, #0
 800770a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	885b      	ldrh	r3, [r3, #2]
 8007710:	b29a      	uxth	r2, r3
 8007712:	897b      	ldrh	r3, [r7, #10]
 8007714:	429a      	cmp	r2, r3
 8007716:	d8e5      	bhi.n	80076e4 <USBD_GetEpDesc+0x2e>
 8007718:	e000      	b.n	800771c <USBD_GetEpDesc+0x66>
          break;
 800771a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800771c:	693b      	ldr	r3, [r7, #16]
}
 800771e:	4618      	mov	r0, r3
 8007720:	3718      	adds	r7, #24
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}

08007726 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007726:	b480      	push	{r7}
 8007728:	b085      	sub	sp, #20
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
 800772e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	881b      	ldrh	r3, [r3, #0]
 8007738:	68fa      	ldr	r2, [r7, #12]
 800773a:	7812      	ldrb	r2, [r2, #0]
 800773c:	4413      	add	r3, r2
 800773e:	b29a      	uxth	r2, r3
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	781b      	ldrb	r3, [r3, #0]
 8007748:	461a      	mov	r2, r3
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	4413      	add	r3, r2
 800774e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007750:	68fb      	ldr	r3, [r7, #12]
}
 8007752:	4618      	mov	r0, r3
 8007754:	3714      	adds	r7, #20
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr

0800775e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800775e:	b480      	push	{r7}
 8007760:	b087      	sub	sp, #28
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	3301      	adds	r3, #1
 8007774:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800777c:	8a3b      	ldrh	r3, [r7, #16]
 800777e:	021b      	lsls	r3, r3, #8
 8007780:	b21a      	sxth	r2, r3
 8007782:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007786:	4313      	orrs	r3, r2
 8007788:	b21b      	sxth	r3, r3
 800778a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800778c:	89fb      	ldrh	r3, [r7, #14]
}
 800778e:	4618      	mov	r0, r3
 8007790:	371c      	adds	r7, #28
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr
	...

0800779c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077a6:	2300      	movs	r3, #0
 80077a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80077b2:	2b40      	cmp	r3, #64	@ 0x40
 80077b4:	d005      	beq.n	80077c2 <USBD_StdDevReq+0x26>
 80077b6:	2b40      	cmp	r3, #64	@ 0x40
 80077b8:	d857      	bhi.n	800786a <USBD_StdDevReq+0xce>
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d00f      	beq.n	80077de <USBD_StdDevReq+0x42>
 80077be:	2b20      	cmp	r3, #32
 80077c0:	d153      	bne.n	800786a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	32ae      	adds	r2, #174	@ 0xae
 80077cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	6839      	ldr	r1, [r7, #0]
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	4798      	blx	r3
 80077d8:	4603      	mov	r3, r0
 80077da:	73fb      	strb	r3, [r7, #15]
      break;
 80077dc:	e04a      	b.n	8007874 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	785b      	ldrb	r3, [r3, #1]
 80077e2:	2b09      	cmp	r3, #9
 80077e4:	d83b      	bhi.n	800785e <USBD_StdDevReq+0xc2>
 80077e6:	a201      	add	r2, pc, #4	@ (adr r2, 80077ec <USBD_StdDevReq+0x50>)
 80077e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ec:	08007841 	.word	0x08007841
 80077f0:	08007855 	.word	0x08007855
 80077f4:	0800785f 	.word	0x0800785f
 80077f8:	0800784b 	.word	0x0800784b
 80077fc:	0800785f 	.word	0x0800785f
 8007800:	0800781f 	.word	0x0800781f
 8007804:	08007815 	.word	0x08007815
 8007808:	0800785f 	.word	0x0800785f
 800780c:	08007837 	.word	0x08007837
 8007810:	08007829 	.word	0x08007829
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007814:	6839      	ldr	r1, [r7, #0]
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 fa3c 	bl	8007c94 <USBD_GetDescriptor>
          break;
 800781c:	e024      	b.n	8007868 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800781e:	6839      	ldr	r1, [r7, #0]
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 fbcb 	bl	8007fbc <USBD_SetAddress>
          break;
 8007826:	e01f      	b.n	8007868 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007828:	6839      	ldr	r1, [r7, #0]
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 fc0a 	bl	8008044 <USBD_SetConfig>
 8007830:	4603      	mov	r3, r0
 8007832:	73fb      	strb	r3, [r7, #15]
          break;
 8007834:	e018      	b.n	8007868 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007836:	6839      	ldr	r1, [r7, #0]
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 fcad 	bl	8008198 <USBD_GetConfig>
          break;
 800783e:	e013      	b.n	8007868 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007840:	6839      	ldr	r1, [r7, #0]
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 fcde 	bl	8008204 <USBD_GetStatus>
          break;
 8007848:	e00e      	b.n	8007868 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800784a:	6839      	ldr	r1, [r7, #0]
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f000 fd0d 	bl	800826c <USBD_SetFeature>
          break;
 8007852:	e009      	b.n	8007868 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007854:	6839      	ldr	r1, [r7, #0]
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 fd31 	bl	80082be <USBD_ClrFeature>
          break;
 800785c:	e004      	b.n	8007868 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800785e:	6839      	ldr	r1, [r7, #0]
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 fd88 	bl	8008376 <USBD_CtlError>
          break;
 8007866:	bf00      	nop
      }
      break;
 8007868:	e004      	b.n	8007874 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800786a:	6839      	ldr	r1, [r7, #0]
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 fd82 	bl	8008376 <USBD_CtlError>
      break;
 8007872:	bf00      	nop
  }

  return ret;
 8007874:	7bfb      	ldrb	r3, [r7, #15]
}
 8007876:	4618      	mov	r0, r3
 8007878:	3710      	adds	r7, #16
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
 800787e:	bf00      	nop

08007880 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800788a:	2300      	movs	r3, #0
 800788c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007896:	2b40      	cmp	r3, #64	@ 0x40
 8007898:	d005      	beq.n	80078a6 <USBD_StdItfReq+0x26>
 800789a:	2b40      	cmp	r3, #64	@ 0x40
 800789c:	d852      	bhi.n	8007944 <USBD_StdItfReq+0xc4>
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d001      	beq.n	80078a6 <USBD_StdItfReq+0x26>
 80078a2:	2b20      	cmp	r3, #32
 80078a4:	d14e      	bne.n	8007944 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	3b01      	subs	r3, #1
 80078b0:	2b02      	cmp	r3, #2
 80078b2:	d840      	bhi.n	8007936 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	889b      	ldrh	r3, [r3, #4]
 80078b8:	b2db      	uxtb	r3, r3
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d836      	bhi.n	800792c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	889b      	ldrh	r3, [r3, #4]
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	4619      	mov	r1, r3
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f7ff fedb 	bl	8007682 <USBD_CoreFindIF>
 80078cc:	4603      	mov	r3, r0
 80078ce:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80078d0:	7bbb      	ldrb	r3, [r7, #14]
 80078d2:	2bff      	cmp	r3, #255	@ 0xff
 80078d4:	d01d      	beq.n	8007912 <USBD_StdItfReq+0x92>
 80078d6:	7bbb      	ldrb	r3, [r7, #14]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d11a      	bne.n	8007912 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80078dc:	7bba      	ldrb	r2, [r7, #14]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	32ae      	adds	r2, #174	@ 0xae
 80078e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078e6:	689b      	ldr	r3, [r3, #8]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d00f      	beq.n	800790c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80078ec:	7bba      	ldrb	r2, [r7, #14]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80078f4:	7bba      	ldrb	r2, [r7, #14]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	32ae      	adds	r2, #174	@ 0xae
 80078fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	6839      	ldr	r1, [r7, #0]
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	4798      	blx	r3
 8007906:	4603      	mov	r3, r0
 8007908:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800790a:	e004      	b.n	8007916 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800790c:	2303      	movs	r3, #3
 800790e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007910:	e001      	b.n	8007916 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007912:	2303      	movs	r3, #3
 8007914:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	88db      	ldrh	r3, [r3, #6]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d110      	bne.n	8007940 <USBD_StdItfReq+0xc0>
 800791e:	7bfb      	ldrb	r3, [r7, #15]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d10d      	bne.n	8007940 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 fdf1 	bl	800850c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800792a:	e009      	b.n	8007940 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800792c:	6839      	ldr	r1, [r7, #0]
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 fd21 	bl	8008376 <USBD_CtlError>
          break;
 8007934:	e004      	b.n	8007940 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007936:	6839      	ldr	r1, [r7, #0]
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f000 fd1c 	bl	8008376 <USBD_CtlError>
          break;
 800793e:	e000      	b.n	8007942 <USBD_StdItfReq+0xc2>
          break;
 8007940:	bf00      	nop
      }
      break;
 8007942:	e004      	b.n	800794e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007944:	6839      	ldr	r1, [r7, #0]
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 fd15 	bl	8008376 <USBD_CtlError>
      break;
 800794c:	bf00      	nop
  }

  return ret;
 800794e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007950:	4618      	mov	r0, r3
 8007952:	3710      	adds	r7, #16
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}

08007958 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b084      	sub	sp, #16
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007962:	2300      	movs	r3, #0
 8007964:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	889b      	ldrh	r3, [r3, #4]
 800796a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	781b      	ldrb	r3, [r3, #0]
 8007970:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007974:	2b40      	cmp	r3, #64	@ 0x40
 8007976:	d007      	beq.n	8007988 <USBD_StdEPReq+0x30>
 8007978:	2b40      	cmp	r3, #64	@ 0x40
 800797a:	f200 817f 	bhi.w	8007c7c <USBD_StdEPReq+0x324>
 800797e:	2b00      	cmp	r3, #0
 8007980:	d02a      	beq.n	80079d8 <USBD_StdEPReq+0x80>
 8007982:	2b20      	cmp	r3, #32
 8007984:	f040 817a 	bne.w	8007c7c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007988:	7bbb      	ldrb	r3, [r7, #14]
 800798a:	4619      	mov	r1, r3
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f7ff fe85 	bl	800769c <USBD_CoreFindEP>
 8007992:	4603      	mov	r3, r0
 8007994:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007996:	7b7b      	ldrb	r3, [r7, #13]
 8007998:	2bff      	cmp	r3, #255	@ 0xff
 800799a:	f000 8174 	beq.w	8007c86 <USBD_StdEPReq+0x32e>
 800799e:	7b7b      	ldrb	r3, [r7, #13]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	f040 8170 	bne.w	8007c86 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80079a6:	7b7a      	ldrb	r2, [r7, #13]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80079ae:	7b7a      	ldrb	r2, [r7, #13]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	32ae      	adds	r2, #174	@ 0xae
 80079b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	f000 8163 	beq.w	8007c86 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80079c0:	7b7a      	ldrb	r2, [r7, #13]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	32ae      	adds	r2, #174	@ 0xae
 80079c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	6839      	ldr	r1, [r7, #0]
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	4798      	blx	r3
 80079d2:	4603      	mov	r3, r0
 80079d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80079d6:	e156      	b.n	8007c86 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	785b      	ldrb	r3, [r3, #1]
 80079dc:	2b03      	cmp	r3, #3
 80079de:	d008      	beq.n	80079f2 <USBD_StdEPReq+0x9a>
 80079e0:	2b03      	cmp	r3, #3
 80079e2:	f300 8145 	bgt.w	8007c70 <USBD_StdEPReq+0x318>
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	f000 809b 	beq.w	8007b22 <USBD_StdEPReq+0x1ca>
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d03c      	beq.n	8007a6a <USBD_StdEPReq+0x112>
 80079f0:	e13e      	b.n	8007c70 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079f8:	b2db      	uxtb	r3, r3
 80079fa:	2b02      	cmp	r3, #2
 80079fc:	d002      	beq.n	8007a04 <USBD_StdEPReq+0xac>
 80079fe:	2b03      	cmp	r3, #3
 8007a00:	d016      	beq.n	8007a30 <USBD_StdEPReq+0xd8>
 8007a02:	e02c      	b.n	8007a5e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a04:	7bbb      	ldrb	r3, [r7, #14]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d00d      	beq.n	8007a26 <USBD_StdEPReq+0xce>
 8007a0a:	7bbb      	ldrb	r3, [r7, #14]
 8007a0c:	2b80      	cmp	r3, #128	@ 0x80
 8007a0e:	d00a      	beq.n	8007a26 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a10:	7bbb      	ldrb	r3, [r7, #14]
 8007a12:	4619      	mov	r1, r3
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f001 f993 	bl	8008d40 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a1a:	2180      	movs	r1, #128	@ 0x80
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f001 f98f 	bl	8008d40 <USBD_LL_StallEP>
 8007a22:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a24:	e020      	b.n	8007a68 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007a26:	6839      	ldr	r1, [r7, #0]
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f000 fca4 	bl	8008376 <USBD_CtlError>
              break;
 8007a2e:	e01b      	b.n	8007a68 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	885b      	ldrh	r3, [r3, #2]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d10e      	bne.n	8007a56 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007a38:	7bbb      	ldrb	r3, [r7, #14]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d00b      	beq.n	8007a56 <USBD_StdEPReq+0xfe>
 8007a3e:	7bbb      	ldrb	r3, [r7, #14]
 8007a40:	2b80      	cmp	r3, #128	@ 0x80
 8007a42:	d008      	beq.n	8007a56 <USBD_StdEPReq+0xfe>
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	88db      	ldrh	r3, [r3, #6]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d104      	bne.n	8007a56 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a4c:	7bbb      	ldrb	r3, [r7, #14]
 8007a4e:	4619      	mov	r1, r3
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f001 f975 	bl	8008d40 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 fd58 	bl	800850c <USBD_CtlSendStatus>

              break;
 8007a5c:	e004      	b.n	8007a68 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007a5e:	6839      	ldr	r1, [r7, #0]
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f000 fc88 	bl	8008376 <USBD_CtlError>
              break;
 8007a66:	bf00      	nop
          }
          break;
 8007a68:	e107      	b.n	8007c7a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a70:	b2db      	uxtb	r3, r3
 8007a72:	2b02      	cmp	r3, #2
 8007a74:	d002      	beq.n	8007a7c <USBD_StdEPReq+0x124>
 8007a76:	2b03      	cmp	r3, #3
 8007a78:	d016      	beq.n	8007aa8 <USBD_StdEPReq+0x150>
 8007a7a:	e04b      	b.n	8007b14 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a7c:	7bbb      	ldrb	r3, [r7, #14]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d00d      	beq.n	8007a9e <USBD_StdEPReq+0x146>
 8007a82:	7bbb      	ldrb	r3, [r7, #14]
 8007a84:	2b80      	cmp	r3, #128	@ 0x80
 8007a86:	d00a      	beq.n	8007a9e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a88:	7bbb      	ldrb	r3, [r7, #14]
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f001 f957 	bl	8008d40 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a92:	2180      	movs	r1, #128	@ 0x80
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f001 f953 	bl	8008d40 <USBD_LL_StallEP>
 8007a9a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a9c:	e040      	b.n	8007b20 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007a9e:	6839      	ldr	r1, [r7, #0]
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f000 fc68 	bl	8008376 <USBD_CtlError>
              break;
 8007aa6:	e03b      	b.n	8007b20 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	885b      	ldrh	r3, [r3, #2]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d136      	bne.n	8007b1e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007ab0:	7bbb      	ldrb	r3, [r7, #14]
 8007ab2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d004      	beq.n	8007ac4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007aba:	7bbb      	ldrb	r3, [r7, #14]
 8007abc:	4619      	mov	r1, r3
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f001 f95d 	bl	8008d7e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f000 fd21 	bl	800850c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007aca:	7bbb      	ldrb	r3, [r7, #14]
 8007acc:	4619      	mov	r1, r3
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f7ff fde4 	bl	800769c <USBD_CoreFindEP>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ad8:	7b7b      	ldrb	r3, [r7, #13]
 8007ada:	2bff      	cmp	r3, #255	@ 0xff
 8007adc:	d01f      	beq.n	8007b1e <USBD_StdEPReq+0x1c6>
 8007ade:	7b7b      	ldrb	r3, [r7, #13]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d11c      	bne.n	8007b1e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007ae4:	7b7a      	ldrb	r2, [r7, #13]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007aec:	7b7a      	ldrb	r2, [r7, #13]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	32ae      	adds	r2, #174	@ 0xae
 8007af2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d010      	beq.n	8007b1e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007afc:	7b7a      	ldrb	r2, [r7, #13]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	32ae      	adds	r2, #174	@ 0xae
 8007b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b06:	689b      	ldr	r3, [r3, #8]
 8007b08:	6839      	ldr	r1, [r7, #0]
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	4798      	blx	r3
 8007b0e:	4603      	mov	r3, r0
 8007b10:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007b12:	e004      	b.n	8007b1e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007b14:	6839      	ldr	r1, [r7, #0]
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 fc2d 	bl	8008376 <USBD_CtlError>
              break;
 8007b1c:	e000      	b.n	8007b20 <USBD_StdEPReq+0x1c8>
              break;
 8007b1e:	bf00      	nop
          }
          break;
 8007b20:	e0ab      	b.n	8007c7a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b28:	b2db      	uxtb	r3, r3
 8007b2a:	2b02      	cmp	r3, #2
 8007b2c:	d002      	beq.n	8007b34 <USBD_StdEPReq+0x1dc>
 8007b2e:	2b03      	cmp	r3, #3
 8007b30:	d032      	beq.n	8007b98 <USBD_StdEPReq+0x240>
 8007b32:	e097      	b.n	8007c64 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b34:	7bbb      	ldrb	r3, [r7, #14]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d007      	beq.n	8007b4a <USBD_StdEPReq+0x1f2>
 8007b3a:	7bbb      	ldrb	r3, [r7, #14]
 8007b3c:	2b80      	cmp	r3, #128	@ 0x80
 8007b3e:	d004      	beq.n	8007b4a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007b40:	6839      	ldr	r1, [r7, #0]
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 fc17 	bl	8008376 <USBD_CtlError>
                break;
 8007b48:	e091      	b.n	8007c6e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	da0b      	bge.n	8007b6a <USBD_StdEPReq+0x212>
 8007b52:	7bbb      	ldrb	r3, [r7, #14]
 8007b54:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007b58:	4613      	mov	r3, r2
 8007b5a:	009b      	lsls	r3, r3, #2
 8007b5c:	4413      	add	r3, r2
 8007b5e:	009b      	lsls	r3, r3, #2
 8007b60:	3310      	adds	r3, #16
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	4413      	add	r3, r2
 8007b66:	3304      	adds	r3, #4
 8007b68:	e00b      	b.n	8007b82 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007b6a:	7bbb      	ldrb	r3, [r7, #14]
 8007b6c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b70:	4613      	mov	r3, r2
 8007b72:	009b      	lsls	r3, r3, #2
 8007b74:	4413      	add	r3, r2
 8007b76:	009b      	lsls	r3, r3, #2
 8007b78:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	4413      	add	r3, r2
 8007b80:	3304      	adds	r3, #4
 8007b82:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	2200      	movs	r2, #0
 8007b88:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	2202      	movs	r2, #2
 8007b8e:	4619      	mov	r1, r3
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 fc61 	bl	8008458 <USBD_CtlSendData>
              break;
 8007b96:	e06a      	b.n	8007c6e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007b98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	da11      	bge.n	8007bc4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007ba0:	7bbb      	ldrb	r3, [r7, #14]
 8007ba2:	f003 020f 	and.w	r2, r3, #15
 8007ba6:	6879      	ldr	r1, [r7, #4]
 8007ba8:	4613      	mov	r3, r2
 8007baa:	009b      	lsls	r3, r3, #2
 8007bac:	4413      	add	r3, r2
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	440b      	add	r3, r1
 8007bb2:	3324      	adds	r3, #36	@ 0x24
 8007bb4:	881b      	ldrh	r3, [r3, #0]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d117      	bne.n	8007bea <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007bba:	6839      	ldr	r1, [r7, #0]
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 fbda 	bl	8008376 <USBD_CtlError>
                  break;
 8007bc2:	e054      	b.n	8007c6e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007bc4:	7bbb      	ldrb	r3, [r7, #14]
 8007bc6:	f003 020f 	and.w	r2, r3, #15
 8007bca:	6879      	ldr	r1, [r7, #4]
 8007bcc:	4613      	mov	r3, r2
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	4413      	add	r3, r2
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	440b      	add	r3, r1
 8007bd6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007bda:	881b      	ldrh	r3, [r3, #0]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d104      	bne.n	8007bea <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007be0:	6839      	ldr	r1, [r7, #0]
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 fbc7 	bl	8008376 <USBD_CtlError>
                  break;
 8007be8:	e041      	b.n	8007c6e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	da0b      	bge.n	8007c0a <USBD_StdEPReq+0x2b2>
 8007bf2:	7bbb      	ldrb	r3, [r7, #14]
 8007bf4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007bf8:	4613      	mov	r3, r2
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	4413      	add	r3, r2
 8007bfe:	009b      	lsls	r3, r3, #2
 8007c00:	3310      	adds	r3, #16
 8007c02:	687a      	ldr	r2, [r7, #4]
 8007c04:	4413      	add	r3, r2
 8007c06:	3304      	adds	r3, #4
 8007c08:	e00b      	b.n	8007c22 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007c0a:	7bbb      	ldrb	r3, [r7, #14]
 8007c0c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c10:	4613      	mov	r3, r2
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	4413      	add	r3, r2
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007c1c:	687a      	ldr	r2, [r7, #4]
 8007c1e:	4413      	add	r3, r2
 8007c20:	3304      	adds	r3, #4
 8007c22:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007c24:	7bbb      	ldrb	r3, [r7, #14]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d002      	beq.n	8007c30 <USBD_StdEPReq+0x2d8>
 8007c2a:	7bbb      	ldrb	r3, [r7, #14]
 8007c2c:	2b80      	cmp	r3, #128	@ 0x80
 8007c2e:	d103      	bne.n	8007c38 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	2200      	movs	r2, #0
 8007c34:	601a      	str	r2, [r3, #0]
 8007c36:	e00e      	b.n	8007c56 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007c38:	7bbb      	ldrb	r3, [r7, #14]
 8007c3a:	4619      	mov	r1, r3
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f001 f8bd 	bl	8008dbc <USBD_LL_IsStallEP>
 8007c42:	4603      	mov	r3, r0
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d003      	beq.n	8007c50 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	601a      	str	r2, [r3, #0]
 8007c4e:	e002      	b.n	8007c56 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	2200      	movs	r2, #0
 8007c54:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	2202      	movs	r2, #2
 8007c5a:	4619      	mov	r1, r3
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f000 fbfb 	bl	8008458 <USBD_CtlSendData>
              break;
 8007c62:	e004      	b.n	8007c6e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007c64:	6839      	ldr	r1, [r7, #0]
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f000 fb85 	bl	8008376 <USBD_CtlError>
              break;
 8007c6c:	bf00      	nop
          }
          break;
 8007c6e:	e004      	b.n	8007c7a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007c70:	6839      	ldr	r1, [r7, #0]
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 fb7f 	bl	8008376 <USBD_CtlError>
          break;
 8007c78:	bf00      	nop
      }
      break;
 8007c7a:	e005      	b.n	8007c88 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007c7c:	6839      	ldr	r1, [r7, #0]
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 fb79 	bl	8008376 <USBD_CtlError>
      break;
 8007c84:	e000      	b.n	8007c88 <USBD_StdEPReq+0x330>
      break;
 8007c86:	bf00      	nop
  }

  return ret;
 8007c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3710      	adds	r7, #16
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}
	...

08007c94 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b084      	sub	sp, #16
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	885b      	ldrh	r3, [r3, #2]
 8007cae:	0a1b      	lsrs	r3, r3, #8
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	3b01      	subs	r3, #1
 8007cb4:	2b0e      	cmp	r3, #14
 8007cb6:	f200 8152 	bhi.w	8007f5e <USBD_GetDescriptor+0x2ca>
 8007cba:	a201      	add	r2, pc, #4	@ (adr r2, 8007cc0 <USBD_GetDescriptor+0x2c>)
 8007cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cc0:	08007d31 	.word	0x08007d31
 8007cc4:	08007d49 	.word	0x08007d49
 8007cc8:	08007d89 	.word	0x08007d89
 8007ccc:	08007f5f 	.word	0x08007f5f
 8007cd0:	08007f5f 	.word	0x08007f5f
 8007cd4:	08007eff 	.word	0x08007eff
 8007cd8:	08007f2b 	.word	0x08007f2b
 8007cdc:	08007f5f 	.word	0x08007f5f
 8007ce0:	08007f5f 	.word	0x08007f5f
 8007ce4:	08007f5f 	.word	0x08007f5f
 8007ce8:	08007f5f 	.word	0x08007f5f
 8007cec:	08007f5f 	.word	0x08007f5f
 8007cf0:	08007f5f 	.word	0x08007f5f
 8007cf4:	08007f5f 	.word	0x08007f5f
 8007cf8:	08007cfd 	.word	0x08007cfd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d02:	69db      	ldr	r3, [r3, #28]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d00b      	beq.n	8007d20 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d0e:	69db      	ldr	r3, [r3, #28]
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	7c12      	ldrb	r2, [r2, #16]
 8007d14:	f107 0108 	add.w	r1, r7, #8
 8007d18:	4610      	mov	r0, r2
 8007d1a:	4798      	blx	r3
 8007d1c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d1e:	e126      	b.n	8007f6e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007d20:	6839      	ldr	r1, [r7, #0]
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 fb27 	bl	8008376 <USBD_CtlError>
        err++;
 8007d28:	7afb      	ldrb	r3, [r7, #11]
 8007d2a:	3301      	adds	r3, #1
 8007d2c:	72fb      	strb	r3, [r7, #11]
      break;
 8007d2e:	e11e      	b.n	8007f6e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	687a      	ldr	r2, [r7, #4]
 8007d3a:	7c12      	ldrb	r2, [r2, #16]
 8007d3c:	f107 0108 	add.w	r1, r7, #8
 8007d40:	4610      	mov	r0, r2
 8007d42:	4798      	blx	r3
 8007d44:	60f8      	str	r0, [r7, #12]
      break;
 8007d46:	e112      	b.n	8007f6e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	7c1b      	ldrb	r3, [r3, #16]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d10d      	bne.n	8007d6c <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d58:	f107 0208 	add.w	r2, r7, #8
 8007d5c:	4610      	mov	r0, r2
 8007d5e:	4798      	blx	r3
 8007d60:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	3301      	adds	r3, #1
 8007d66:	2202      	movs	r2, #2
 8007d68:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007d6a:	e100      	b.n	8007f6e <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d74:	f107 0208 	add.w	r2, r7, #8
 8007d78:	4610      	mov	r0, r2
 8007d7a:	4798      	blx	r3
 8007d7c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	3301      	adds	r3, #1
 8007d82:	2202      	movs	r2, #2
 8007d84:	701a      	strb	r2, [r3, #0]
      break;
 8007d86:	e0f2      	b.n	8007f6e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	885b      	ldrh	r3, [r3, #2]
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	2b05      	cmp	r3, #5
 8007d90:	f200 80ac 	bhi.w	8007eec <USBD_GetDescriptor+0x258>
 8007d94:	a201      	add	r2, pc, #4	@ (adr r2, 8007d9c <USBD_GetDescriptor+0x108>)
 8007d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d9a:	bf00      	nop
 8007d9c:	08007db5 	.word	0x08007db5
 8007da0:	08007de9 	.word	0x08007de9
 8007da4:	08007e1d 	.word	0x08007e1d
 8007da8:	08007e51 	.word	0x08007e51
 8007dac:	08007e85 	.word	0x08007e85
 8007db0:	08007eb9 	.word	0x08007eb9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d00b      	beq.n	8007dd8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	687a      	ldr	r2, [r7, #4]
 8007dca:	7c12      	ldrb	r2, [r2, #16]
 8007dcc:	f107 0108 	add.w	r1, r7, #8
 8007dd0:	4610      	mov	r0, r2
 8007dd2:	4798      	blx	r3
 8007dd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dd6:	e091      	b.n	8007efc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007dd8:	6839      	ldr	r1, [r7, #0]
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f000 facb 	bl	8008376 <USBD_CtlError>
            err++;
 8007de0:	7afb      	ldrb	r3, [r7, #11]
 8007de2:	3301      	adds	r3, #1
 8007de4:	72fb      	strb	r3, [r7, #11]
          break;
 8007de6:	e089      	b.n	8007efc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007dee:	689b      	ldr	r3, [r3, #8]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d00b      	beq.n	8007e0c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007dfa:	689b      	ldr	r3, [r3, #8]
 8007dfc:	687a      	ldr	r2, [r7, #4]
 8007dfe:	7c12      	ldrb	r2, [r2, #16]
 8007e00:	f107 0108 	add.w	r1, r7, #8
 8007e04:	4610      	mov	r0, r2
 8007e06:	4798      	blx	r3
 8007e08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e0a:	e077      	b.n	8007efc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007e0c:	6839      	ldr	r1, [r7, #0]
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 fab1 	bl	8008376 <USBD_CtlError>
            err++;
 8007e14:	7afb      	ldrb	r3, [r7, #11]
 8007e16:	3301      	adds	r3, #1
 8007e18:	72fb      	strb	r3, [r7, #11]
          break;
 8007e1a:	e06f      	b.n	8007efc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e22:	68db      	ldr	r3, [r3, #12]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d00b      	beq.n	8007e40 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e2e:	68db      	ldr	r3, [r3, #12]
 8007e30:	687a      	ldr	r2, [r7, #4]
 8007e32:	7c12      	ldrb	r2, [r2, #16]
 8007e34:	f107 0108 	add.w	r1, r7, #8
 8007e38:	4610      	mov	r0, r2
 8007e3a:	4798      	blx	r3
 8007e3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e3e:	e05d      	b.n	8007efc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007e40:	6839      	ldr	r1, [r7, #0]
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 fa97 	bl	8008376 <USBD_CtlError>
            err++;
 8007e48:	7afb      	ldrb	r3, [r7, #11]
 8007e4a:	3301      	adds	r3, #1
 8007e4c:	72fb      	strb	r3, [r7, #11]
          break;
 8007e4e:	e055      	b.n	8007efc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e56:	691b      	ldr	r3, [r3, #16]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d00b      	beq.n	8007e74 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e62:	691b      	ldr	r3, [r3, #16]
 8007e64:	687a      	ldr	r2, [r7, #4]
 8007e66:	7c12      	ldrb	r2, [r2, #16]
 8007e68:	f107 0108 	add.w	r1, r7, #8
 8007e6c:	4610      	mov	r0, r2
 8007e6e:	4798      	blx	r3
 8007e70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e72:	e043      	b.n	8007efc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007e74:	6839      	ldr	r1, [r7, #0]
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 fa7d 	bl	8008376 <USBD_CtlError>
            err++;
 8007e7c:	7afb      	ldrb	r3, [r7, #11]
 8007e7e:	3301      	adds	r3, #1
 8007e80:	72fb      	strb	r3, [r7, #11]
          break;
 8007e82:	e03b      	b.n	8007efc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e8a:	695b      	ldr	r3, [r3, #20]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d00b      	beq.n	8007ea8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e96:	695b      	ldr	r3, [r3, #20]
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	7c12      	ldrb	r2, [r2, #16]
 8007e9c:	f107 0108 	add.w	r1, r7, #8
 8007ea0:	4610      	mov	r0, r2
 8007ea2:	4798      	blx	r3
 8007ea4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ea6:	e029      	b.n	8007efc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007ea8:	6839      	ldr	r1, [r7, #0]
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 fa63 	bl	8008376 <USBD_CtlError>
            err++;
 8007eb0:	7afb      	ldrb	r3, [r7, #11]
 8007eb2:	3301      	adds	r3, #1
 8007eb4:	72fb      	strb	r3, [r7, #11]
          break;
 8007eb6:	e021      	b.n	8007efc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ebe:	699b      	ldr	r3, [r3, #24]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d00b      	beq.n	8007edc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007eca:	699b      	ldr	r3, [r3, #24]
 8007ecc:	687a      	ldr	r2, [r7, #4]
 8007ece:	7c12      	ldrb	r2, [r2, #16]
 8007ed0:	f107 0108 	add.w	r1, r7, #8
 8007ed4:	4610      	mov	r0, r2
 8007ed6:	4798      	blx	r3
 8007ed8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007eda:	e00f      	b.n	8007efc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007edc:	6839      	ldr	r1, [r7, #0]
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 fa49 	bl	8008376 <USBD_CtlError>
            err++;
 8007ee4:	7afb      	ldrb	r3, [r7, #11]
 8007ee6:	3301      	adds	r3, #1
 8007ee8:	72fb      	strb	r3, [r7, #11]
          break;
 8007eea:	e007      	b.n	8007efc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007eec:	6839      	ldr	r1, [r7, #0]
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 fa41 	bl	8008376 <USBD_CtlError>
          err++;
 8007ef4:	7afb      	ldrb	r3, [r7, #11]
 8007ef6:	3301      	adds	r3, #1
 8007ef8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007efa:	bf00      	nop
      }
      break;
 8007efc:	e037      	b.n	8007f6e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	7c1b      	ldrb	r3, [r3, #16]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d109      	bne.n	8007f1a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f0e:	f107 0208 	add.w	r2, r7, #8
 8007f12:	4610      	mov	r0, r2
 8007f14:	4798      	blx	r3
 8007f16:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f18:	e029      	b.n	8007f6e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007f1a:	6839      	ldr	r1, [r7, #0]
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 fa2a 	bl	8008376 <USBD_CtlError>
        err++;
 8007f22:	7afb      	ldrb	r3, [r7, #11]
 8007f24:	3301      	adds	r3, #1
 8007f26:	72fb      	strb	r3, [r7, #11]
      break;
 8007f28:	e021      	b.n	8007f6e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	7c1b      	ldrb	r3, [r3, #16]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d10d      	bne.n	8007f4e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f3a:	f107 0208 	add.w	r2, r7, #8
 8007f3e:	4610      	mov	r0, r2
 8007f40:	4798      	blx	r3
 8007f42:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	3301      	adds	r3, #1
 8007f48:	2207      	movs	r2, #7
 8007f4a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f4c:	e00f      	b.n	8007f6e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007f4e:	6839      	ldr	r1, [r7, #0]
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f000 fa10 	bl	8008376 <USBD_CtlError>
        err++;
 8007f56:	7afb      	ldrb	r3, [r7, #11]
 8007f58:	3301      	adds	r3, #1
 8007f5a:	72fb      	strb	r3, [r7, #11]
      break;
 8007f5c:	e007      	b.n	8007f6e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007f5e:	6839      	ldr	r1, [r7, #0]
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f000 fa08 	bl	8008376 <USBD_CtlError>
      err++;
 8007f66:	7afb      	ldrb	r3, [r7, #11]
 8007f68:	3301      	adds	r3, #1
 8007f6a:	72fb      	strb	r3, [r7, #11]
      break;
 8007f6c:	bf00      	nop
  }

  if (err != 0U)
 8007f6e:	7afb      	ldrb	r3, [r7, #11]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d11e      	bne.n	8007fb2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	88db      	ldrh	r3, [r3, #6]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d016      	beq.n	8007faa <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007f7c:	893b      	ldrh	r3, [r7, #8]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d00e      	beq.n	8007fa0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	88da      	ldrh	r2, [r3, #6]
 8007f86:	893b      	ldrh	r3, [r7, #8]
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	bf28      	it	cs
 8007f8c:	4613      	movcs	r3, r2
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007f92:	893b      	ldrh	r3, [r7, #8]
 8007f94:	461a      	mov	r2, r3
 8007f96:	68f9      	ldr	r1, [r7, #12]
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 fa5d 	bl	8008458 <USBD_CtlSendData>
 8007f9e:	e009      	b.n	8007fb4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007fa0:	6839      	ldr	r1, [r7, #0]
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 f9e7 	bl	8008376 <USBD_CtlError>
 8007fa8:	e004      	b.n	8007fb4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 faae 	bl	800850c <USBD_CtlSendStatus>
 8007fb0:	e000      	b.n	8007fb4 <USBD_GetDescriptor+0x320>
    return;
 8007fb2:	bf00      	nop
  }
}
 8007fb4:	3710      	adds	r7, #16
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}
 8007fba:	bf00      	nop

08007fbc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b084      	sub	sp, #16
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	889b      	ldrh	r3, [r3, #4]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d131      	bne.n	8008032 <USBD_SetAddress+0x76>
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	88db      	ldrh	r3, [r3, #6]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d12d      	bne.n	8008032 <USBD_SetAddress+0x76>
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	885b      	ldrh	r3, [r3, #2]
 8007fda:	2b7f      	cmp	r3, #127	@ 0x7f
 8007fdc:	d829      	bhi.n	8008032 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	885b      	ldrh	r3, [r3, #2]
 8007fe2:	b2db      	uxtb	r3, r3
 8007fe4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007fe8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	2b03      	cmp	r3, #3
 8007ff4:	d104      	bne.n	8008000 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007ff6:	6839      	ldr	r1, [r7, #0]
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 f9bc 	bl	8008376 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ffe:	e01d      	b.n	800803c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	7bfa      	ldrb	r2, [r7, #15]
 8008004:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008008:	7bfb      	ldrb	r3, [r7, #15]
 800800a:	4619      	mov	r1, r3
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 ff01 	bl	8008e14 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 fa7a 	bl	800850c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008018:	7bfb      	ldrb	r3, [r7, #15]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d004      	beq.n	8008028 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2202      	movs	r2, #2
 8008022:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008026:	e009      	b.n	800803c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2201      	movs	r2, #1
 800802c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008030:	e004      	b.n	800803c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008032:	6839      	ldr	r1, [r7, #0]
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 f99e 	bl	8008376 <USBD_CtlError>
  }
}
 800803a:	bf00      	nop
 800803c:	bf00      	nop
 800803e:	3710      	adds	r7, #16
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b084      	sub	sp, #16
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800804e:	2300      	movs	r3, #0
 8008050:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	885b      	ldrh	r3, [r3, #2]
 8008056:	b2da      	uxtb	r2, r3
 8008058:	4b4e      	ldr	r3, [pc, #312]	@ (8008194 <USBD_SetConfig+0x150>)
 800805a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800805c:	4b4d      	ldr	r3, [pc, #308]	@ (8008194 <USBD_SetConfig+0x150>)
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	2b01      	cmp	r3, #1
 8008062:	d905      	bls.n	8008070 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008064:	6839      	ldr	r1, [r7, #0]
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 f985 	bl	8008376 <USBD_CtlError>
    return USBD_FAIL;
 800806c:	2303      	movs	r3, #3
 800806e:	e08c      	b.n	800818a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008076:	b2db      	uxtb	r3, r3
 8008078:	2b02      	cmp	r3, #2
 800807a:	d002      	beq.n	8008082 <USBD_SetConfig+0x3e>
 800807c:	2b03      	cmp	r3, #3
 800807e:	d029      	beq.n	80080d4 <USBD_SetConfig+0x90>
 8008080:	e075      	b.n	800816e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008082:	4b44      	ldr	r3, [pc, #272]	@ (8008194 <USBD_SetConfig+0x150>)
 8008084:	781b      	ldrb	r3, [r3, #0]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d020      	beq.n	80080cc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800808a:	4b42      	ldr	r3, [pc, #264]	@ (8008194 <USBD_SetConfig+0x150>)
 800808c:	781b      	ldrb	r3, [r3, #0]
 800808e:	461a      	mov	r2, r3
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008094:	4b3f      	ldr	r3, [pc, #252]	@ (8008194 <USBD_SetConfig+0x150>)
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	4619      	mov	r1, r3
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f7fe ffbf 	bl	800701e <USBD_SetClassConfig>
 80080a0:	4603      	mov	r3, r0
 80080a2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80080a4:	7bfb      	ldrb	r3, [r7, #15]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d008      	beq.n	80080bc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80080aa:	6839      	ldr	r1, [r7, #0]
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 f962 	bl	8008376 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2202      	movs	r2, #2
 80080b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80080ba:	e065      	b.n	8008188 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 fa25 	bl	800850c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2203      	movs	r2, #3
 80080c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80080ca:	e05d      	b.n	8008188 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 fa1d 	bl	800850c <USBD_CtlSendStatus>
      break;
 80080d2:	e059      	b.n	8008188 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80080d4:	4b2f      	ldr	r3, [pc, #188]	@ (8008194 <USBD_SetConfig+0x150>)
 80080d6:	781b      	ldrb	r3, [r3, #0]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d112      	bne.n	8008102 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2202      	movs	r2, #2
 80080e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80080e4:	4b2b      	ldr	r3, [pc, #172]	@ (8008194 <USBD_SetConfig+0x150>)
 80080e6:	781b      	ldrb	r3, [r3, #0]
 80080e8:	461a      	mov	r2, r3
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80080ee:	4b29      	ldr	r3, [pc, #164]	@ (8008194 <USBD_SetConfig+0x150>)
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	4619      	mov	r1, r3
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f7fe ffae 	bl	8007056 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 fa06 	bl	800850c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008100:	e042      	b.n	8008188 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008102:	4b24      	ldr	r3, [pc, #144]	@ (8008194 <USBD_SetConfig+0x150>)
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	461a      	mov	r2, r3
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	429a      	cmp	r2, r3
 800810e:	d02a      	beq.n	8008166 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	b2db      	uxtb	r3, r3
 8008116:	4619      	mov	r1, r3
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f7fe ff9c 	bl	8007056 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800811e:	4b1d      	ldr	r3, [pc, #116]	@ (8008194 <USBD_SetConfig+0x150>)
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	461a      	mov	r2, r3
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008128:	4b1a      	ldr	r3, [pc, #104]	@ (8008194 <USBD_SetConfig+0x150>)
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	4619      	mov	r1, r3
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f7fe ff75 	bl	800701e <USBD_SetClassConfig>
 8008134:	4603      	mov	r3, r0
 8008136:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008138:	7bfb      	ldrb	r3, [r7, #15]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d00f      	beq.n	800815e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800813e:	6839      	ldr	r1, [r7, #0]
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f000 f918 	bl	8008376 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	685b      	ldr	r3, [r3, #4]
 800814a:	b2db      	uxtb	r3, r3
 800814c:	4619      	mov	r1, r3
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f7fe ff81 	bl	8007056 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2202      	movs	r2, #2
 8008158:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800815c:	e014      	b.n	8008188 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 f9d4 	bl	800850c <USBD_CtlSendStatus>
      break;
 8008164:	e010      	b.n	8008188 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 f9d0 	bl	800850c <USBD_CtlSendStatus>
      break;
 800816c:	e00c      	b.n	8008188 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800816e:	6839      	ldr	r1, [r7, #0]
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 f900 	bl	8008376 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008176:	4b07      	ldr	r3, [pc, #28]	@ (8008194 <USBD_SetConfig+0x150>)
 8008178:	781b      	ldrb	r3, [r3, #0]
 800817a:	4619      	mov	r1, r3
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f7fe ff6a 	bl	8007056 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008182:	2303      	movs	r3, #3
 8008184:	73fb      	strb	r3, [r7, #15]
      break;
 8008186:	bf00      	nop
  }

  return ret;
 8008188:	7bfb      	ldrb	r3, [r7, #15]
}
 800818a:	4618      	mov	r0, r3
 800818c:	3710      	adds	r7, #16
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
 8008192:	bf00      	nop
 8008194:	20000204 	.word	0x20000204

08008198 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b082      	sub	sp, #8
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	88db      	ldrh	r3, [r3, #6]
 80081a6:	2b01      	cmp	r3, #1
 80081a8:	d004      	beq.n	80081b4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80081aa:	6839      	ldr	r1, [r7, #0]
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 f8e2 	bl	8008376 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80081b2:	e023      	b.n	80081fc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081ba:	b2db      	uxtb	r3, r3
 80081bc:	2b02      	cmp	r3, #2
 80081be:	dc02      	bgt.n	80081c6 <USBD_GetConfig+0x2e>
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	dc03      	bgt.n	80081cc <USBD_GetConfig+0x34>
 80081c4:	e015      	b.n	80081f2 <USBD_GetConfig+0x5a>
 80081c6:	2b03      	cmp	r3, #3
 80081c8:	d00b      	beq.n	80081e2 <USBD_GetConfig+0x4a>
 80081ca:	e012      	b.n	80081f2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2200      	movs	r2, #0
 80081d0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	3308      	adds	r3, #8
 80081d6:	2201      	movs	r2, #1
 80081d8:	4619      	mov	r1, r3
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 f93c 	bl	8008458 <USBD_CtlSendData>
        break;
 80081e0:	e00c      	b.n	80081fc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	3304      	adds	r3, #4
 80081e6:	2201      	movs	r2, #1
 80081e8:	4619      	mov	r1, r3
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 f934 	bl	8008458 <USBD_CtlSendData>
        break;
 80081f0:	e004      	b.n	80081fc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80081f2:	6839      	ldr	r1, [r7, #0]
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f000 f8be 	bl	8008376 <USBD_CtlError>
        break;
 80081fa:	bf00      	nop
}
 80081fc:	bf00      	nop
 80081fe:	3708      	adds	r7, #8
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}

08008204 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b082      	sub	sp, #8
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
 800820c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008214:	b2db      	uxtb	r3, r3
 8008216:	3b01      	subs	r3, #1
 8008218:	2b02      	cmp	r3, #2
 800821a:	d81e      	bhi.n	800825a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	88db      	ldrh	r3, [r3, #6]
 8008220:	2b02      	cmp	r3, #2
 8008222:	d004      	beq.n	800822e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008224:	6839      	ldr	r1, [r7, #0]
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 f8a5 	bl	8008376 <USBD_CtlError>
        break;
 800822c:	e01a      	b.n	8008264 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2201      	movs	r2, #1
 8008232:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800823a:	2b00      	cmp	r3, #0
 800823c:	d005      	beq.n	800824a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	68db      	ldr	r3, [r3, #12]
 8008242:	f043 0202 	orr.w	r2, r3, #2
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	330c      	adds	r3, #12
 800824e:	2202      	movs	r2, #2
 8008250:	4619      	mov	r1, r3
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f000 f900 	bl	8008458 <USBD_CtlSendData>
      break;
 8008258:	e004      	b.n	8008264 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800825a:	6839      	ldr	r1, [r7, #0]
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f000 f88a 	bl	8008376 <USBD_CtlError>
      break;
 8008262:	bf00      	nop
  }
}
 8008264:	bf00      	nop
 8008266:	3708      	adds	r7, #8
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}

0800826c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b082      	sub	sp, #8
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	885b      	ldrh	r3, [r3, #2]
 800827a:	2b01      	cmp	r3, #1
 800827c:	d107      	bne.n	800828e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2201      	movs	r2, #1
 8008282:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 f940 	bl	800850c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800828c:	e013      	b.n	80082b6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	885b      	ldrh	r3, [r3, #2]
 8008292:	2b02      	cmp	r3, #2
 8008294:	d10b      	bne.n	80082ae <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	889b      	ldrh	r3, [r3, #4]
 800829a:	0a1b      	lsrs	r3, r3, #8
 800829c:	b29b      	uxth	r3, r3
 800829e:	b2da      	uxtb	r2, r3
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f000 f930 	bl	800850c <USBD_CtlSendStatus>
}
 80082ac:	e003      	b.n	80082b6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80082ae:	6839      	ldr	r1, [r7, #0]
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f000 f860 	bl	8008376 <USBD_CtlError>
}
 80082b6:	bf00      	nop
 80082b8:	3708      	adds	r7, #8
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}

080082be <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082be:	b580      	push	{r7, lr}
 80082c0:	b082      	sub	sp, #8
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
 80082c6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082ce:	b2db      	uxtb	r3, r3
 80082d0:	3b01      	subs	r3, #1
 80082d2:	2b02      	cmp	r3, #2
 80082d4:	d80b      	bhi.n	80082ee <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	885b      	ldrh	r3, [r3, #2]
 80082da:	2b01      	cmp	r3, #1
 80082dc:	d10c      	bne.n	80082f8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2200      	movs	r2, #0
 80082e2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f000 f910 	bl	800850c <USBD_CtlSendStatus>
      }
      break;
 80082ec:	e004      	b.n	80082f8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80082ee:	6839      	ldr	r1, [r7, #0]
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f000 f840 	bl	8008376 <USBD_CtlError>
      break;
 80082f6:	e000      	b.n	80082fa <USBD_ClrFeature+0x3c>
      break;
 80082f8:	bf00      	nop
  }
}
 80082fa:	bf00      	nop
 80082fc:	3708      	adds	r7, #8
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}

08008302 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008302:	b580      	push	{r7, lr}
 8008304:	b084      	sub	sp, #16
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]
 800830a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	781a      	ldrb	r2, [r3, #0]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	3301      	adds	r3, #1
 800831c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	781a      	ldrb	r2, [r3, #0]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	3301      	adds	r3, #1
 800832a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800832c:	68f8      	ldr	r0, [r7, #12]
 800832e:	f7ff fa16 	bl	800775e <SWAPBYTE>
 8008332:	4603      	mov	r3, r0
 8008334:	461a      	mov	r2, r3
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	3301      	adds	r3, #1
 800833e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	3301      	adds	r3, #1
 8008344:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008346:	68f8      	ldr	r0, [r7, #12]
 8008348:	f7ff fa09 	bl	800775e <SWAPBYTE>
 800834c:	4603      	mov	r3, r0
 800834e:	461a      	mov	r2, r3
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	3301      	adds	r3, #1
 8008358:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	3301      	adds	r3, #1
 800835e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008360:	68f8      	ldr	r0, [r7, #12]
 8008362:	f7ff f9fc 	bl	800775e <SWAPBYTE>
 8008366:	4603      	mov	r3, r0
 8008368:	461a      	mov	r2, r3
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	80da      	strh	r2, [r3, #6]
}
 800836e:	bf00      	nop
 8008370:	3710      	adds	r7, #16
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}

08008376 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008376:	b580      	push	{r7, lr}
 8008378:	b082      	sub	sp, #8
 800837a:	af00      	add	r7, sp, #0
 800837c:	6078      	str	r0, [r7, #4]
 800837e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008380:	2180      	movs	r1, #128	@ 0x80
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 fcdc 	bl	8008d40 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008388:	2100      	movs	r1, #0
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f000 fcd8 	bl	8008d40 <USBD_LL_StallEP>
}
 8008390:	bf00      	nop
 8008392:	3708      	adds	r7, #8
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b086      	sub	sp, #24
 800839c:	af00      	add	r7, sp, #0
 800839e:	60f8      	str	r0, [r7, #12]
 80083a0:	60b9      	str	r1, [r7, #8]
 80083a2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80083a4:	2300      	movs	r3, #0
 80083a6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d036      	beq.n	800841c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80083b2:	6938      	ldr	r0, [r7, #16]
 80083b4:	f000 f836 	bl	8008424 <USBD_GetLen>
 80083b8:	4603      	mov	r3, r0
 80083ba:	3301      	adds	r3, #1
 80083bc:	b29b      	uxth	r3, r3
 80083be:	005b      	lsls	r3, r3, #1
 80083c0:	b29a      	uxth	r2, r3
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80083c6:	7dfb      	ldrb	r3, [r7, #23]
 80083c8:	68ba      	ldr	r2, [r7, #8]
 80083ca:	4413      	add	r3, r2
 80083cc:	687a      	ldr	r2, [r7, #4]
 80083ce:	7812      	ldrb	r2, [r2, #0]
 80083d0:	701a      	strb	r2, [r3, #0]
  idx++;
 80083d2:	7dfb      	ldrb	r3, [r7, #23]
 80083d4:	3301      	adds	r3, #1
 80083d6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80083d8:	7dfb      	ldrb	r3, [r7, #23]
 80083da:	68ba      	ldr	r2, [r7, #8]
 80083dc:	4413      	add	r3, r2
 80083de:	2203      	movs	r2, #3
 80083e0:	701a      	strb	r2, [r3, #0]
  idx++;
 80083e2:	7dfb      	ldrb	r3, [r7, #23]
 80083e4:	3301      	adds	r3, #1
 80083e6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80083e8:	e013      	b.n	8008412 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80083ea:	7dfb      	ldrb	r3, [r7, #23]
 80083ec:	68ba      	ldr	r2, [r7, #8]
 80083ee:	4413      	add	r3, r2
 80083f0:	693a      	ldr	r2, [r7, #16]
 80083f2:	7812      	ldrb	r2, [r2, #0]
 80083f4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	3301      	adds	r3, #1
 80083fa:	613b      	str	r3, [r7, #16]
    idx++;
 80083fc:	7dfb      	ldrb	r3, [r7, #23]
 80083fe:	3301      	adds	r3, #1
 8008400:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008402:	7dfb      	ldrb	r3, [r7, #23]
 8008404:	68ba      	ldr	r2, [r7, #8]
 8008406:	4413      	add	r3, r2
 8008408:	2200      	movs	r2, #0
 800840a:	701a      	strb	r2, [r3, #0]
    idx++;
 800840c:	7dfb      	ldrb	r3, [r7, #23]
 800840e:	3301      	adds	r3, #1
 8008410:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	781b      	ldrb	r3, [r3, #0]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d1e7      	bne.n	80083ea <USBD_GetString+0x52>
 800841a:	e000      	b.n	800841e <USBD_GetString+0x86>
    return;
 800841c:	bf00      	nop
  }
}
 800841e:	3718      	adds	r7, #24
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008424:	b480      	push	{r7}
 8008426:	b085      	sub	sp, #20
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800842c:	2300      	movs	r3, #0
 800842e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008434:	e005      	b.n	8008442 <USBD_GetLen+0x1e>
  {
    len++;
 8008436:	7bfb      	ldrb	r3, [r7, #15]
 8008438:	3301      	adds	r3, #1
 800843a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	3301      	adds	r3, #1
 8008440:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	781b      	ldrb	r3, [r3, #0]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d1f5      	bne.n	8008436 <USBD_GetLen+0x12>
  }

  return len;
 800844a:	7bfb      	ldrb	r3, [r7, #15]
}
 800844c:	4618      	mov	r0, r3
 800844e:	3714      	adds	r7, #20
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr

08008458 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b084      	sub	sp, #16
 800845c:	af00      	add	r7, sp, #0
 800845e:	60f8      	str	r0, [r7, #12]
 8008460:	60b9      	str	r1, [r7, #8]
 8008462:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2202      	movs	r2, #2
 8008468:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	687a      	ldr	r2, [r7, #4]
 8008476:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	68ba      	ldr	r2, [r7, #8]
 800847c:	2100      	movs	r1, #0
 800847e:	68f8      	ldr	r0, [r7, #12]
 8008480:	f000 fce7 	bl	8008e52 <USBD_LL_Transmit>

  return USBD_OK;
 8008484:	2300      	movs	r3, #0
}
 8008486:	4618      	mov	r0, r3
 8008488:	3710      	adds	r7, #16
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}

0800848e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800848e:	b580      	push	{r7, lr}
 8008490:	b084      	sub	sp, #16
 8008492:	af00      	add	r7, sp, #0
 8008494:	60f8      	str	r0, [r7, #12]
 8008496:	60b9      	str	r1, [r7, #8]
 8008498:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	68ba      	ldr	r2, [r7, #8]
 800849e:	2100      	movs	r1, #0
 80084a0:	68f8      	ldr	r0, [r7, #12]
 80084a2:	f000 fcd6 	bl	8008e52 <USBD_LL_Transmit>

  return USBD_OK;
 80084a6:	2300      	movs	r3, #0
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3710      	adds	r7, #16
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b084      	sub	sp, #16
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	60f8      	str	r0, [r7, #12]
 80084b8:	60b9      	str	r1, [r7, #8]
 80084ba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	2203      	movs	r2, #3
 80084c0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	687a      	ldr	r2, [r7, #4]
 80084c8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	68ba      	ldr	r2, [r7, #8]
 80084d8:	2100      	movs	r1, #0
 80084da:	68f8      	ldr	r0, [r7, #12]
 80084dc:	f000 fcda 	bl	8008e94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084e0:	2300      	movs	r3, #0
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3710      	adds	r7, #16
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}

080084ea <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80084ea:	b580      	push	{r7, lr}
 80084ec:	b084      	sub	sp, #16
 80084ee:	af00      	add	r7, sp, #0
 80084f0:	60f8      	str	r0, [r7, #12]
 80084f2:	60b9      	str	r1, [r7, #8]
 80084f4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	68ba      	ldr	r2, [r7, #8]
 80084fa:	2100      	movs	r1, #0
 80084fc:	68f8      	ldr	r0, [r7, #12]
 80084fe:	f000 fcc9 	bl	8008e94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008502:	2300      	movs	r3, #0
}
 8008504:	4618      	mov	r0, r3
 8008506:	3710      	adds	r7, #16
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}

0800850c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b082      	sub	sp, #8
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2204      	movs	r2, #4
 8008518:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800851c:	2300      	movs	r3, #0
 800851e:	2200      	movs	r2, #0
 8008520:	2100      	movs	r1, #0
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f000 fc95 	bl	8008e52 <USBD_LL_Transmit>

  return USBD_OK;
 8008528:	2300      	movs	r3, #0
}
 800852a:	4618      	mov	r0, r3
 800852c:	3708      	adds	r7, #8
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}

08008532 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008532:	b580      	push	{r7, lr}
 8008534:	b082      	sub	sp, #8
 8008536:	af00      	add	r7, sp, #0
 8008538:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2205      	movs	r2, #5
 800853e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008542:	2300      	movs	r3, #0
 8008544:	2200      	movs	r2, #0
 8008546:	2100      	movs	r1, #0
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f000 fca3 	bl	8008e94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800854e:	2300      	movs	r3, #0
}
 8008550:	4618      	mov	r0, r3
 8008552:	3708      	adds	r7, #8
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}

08008558 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800855c:	2200      	movs	r2, #0
 800855e:	4912      	ldr	r1, [pc, #72]	@ (80085a8 <MX_USB_DEVICE_Init+0x50>)
 8008560:	4812      	ldr	r0, [pc, #72]	@ (80085ac <MX_USB_DEVICE_Init+0x54>)
 8008562:	f7fe fcdf 	bl	8006f24 <USBD_Init>
 8008566:	4603      	mov	r3, r0
 8008568:	2b00      	cmp	r3, #0
 800856a:	d001      	beq.n	8008570 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800856c:	f7f8 fb90 	bl	8000c90 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008570:	490f      	ldr	r1, [pc, #60]	@ (80085b0 <MX_USB_DEVICE_Init+0x58>)
 8008572:	480e      	ldr	r0, [pc, #56]	@ (80085ac <MX_USB_DEVICE_Init+0x54>)
 8008574:	f7fe fd06 	bl	8006f84 <USBD_RegisterClass>
 8008578:	4603      	mov	r3, r0
 800857a:	2b00      	cmp	r3, #0
 800857c:	d001      	beq.n	8008582 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800857e:	f7f8 fb87 	bl	8000c90 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008582:	490c      	ldr	r1, [pc, #48]	@ (80085b4 <MX_USB_DEVICE_Init+0x5c>)
 8008584:	4809      	ldr	r0, [pc, #36]	@ (80085ac <MX_USB_DEVICE_Init+0x54>)
 8008586:	f7fe fc3d 	bl	8006e04 <USBD_CDC_RegisterInterface>
 800858a:	4603      	mov	r3, r0
 800858c:	2b00      	cmp	r3, #0
 800858e:	d001      	beq.n	8008594 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008590:	f7f8 fb7e 	bl	8000c90 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008594:	4805      	ldr	r0, [pc, #20]	@ (80085ac <MX_USB_DEVICE_Init+0x54>)
 8008596:	f7fe fd2b 	bl	8006ff0 <USBD_Start>
 800859a:	4603      	mov	r3, r0
 800859c:	2b00      	cmp	r3, #0
 800859e:	d001      	beq.n	80085a4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80085a0:	f7f8 fb76 	bl	8000c90 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80085a4:	bf00      	nop
 80085a6:	bd80      	pop	{r7, pc}
 80085a8:	200000ac 	.word	0x200000ac
 80085ac:	20000208 	.word	0x20000208
 80085b0:	20000018 	.word	0x20000018
 80085b4:	20000098 	.word	0x20000098

080085b8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80085bc:	2200      	movs	r2, #0
 80085be:	4905      	ldr	r1, [pc, #20]	@ (80085d4 <CDC_Init_FS+0x1c>)
 80085c0:	4805      	ldr	r0, [pc, #20]	@ (80085d8 <CDC_Init_FS+0x20>)
 80085c2:	f7fe fc39 	bl	8006e38 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80085c6:	4905      	ldr	r1, [pc, #20]	@ (80085dc <CDC_Init_FS+0x24>)
 80085c8:	4803      	ldr	r0, [pc, #12]	@ (80085d8 <CDC_Init_FS+0x20>)
 80085ca:	f7fe fc57 	bl	8006e7c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80085ce:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	bd80      	pop	{r7, pc}
 80085d4:	20000ce4 	.word	0x20000ce4
 80085d8:	20000208 	.word	0x20000208
 80085dc:	200004e4 	.word	0x200004e4

080085e0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80085e0:	b480      	push	{r7}
 80085e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80085e4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b083      	sub	sp, #12
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	4603      	mov	r3, r0
 80085f8:	6039      	str	r1, [r7, #0]
 80085fa:	71fb      	strb	r3, [r7, #7]
 80085fc:	4613      	mov	r3, r2
 80085fe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008600:	79fb      	ldrb	r3, [r7, #7]
 8008602:	2b23      	cmp	r3, #35	@ 0x23
 8008604:	d84a      	bhi.n	800869c <CDC_Control_FS+0xac>
 8008606:	a201      	add	r2, pc, #4	@ (adr r2, 800860c <CDC_Control_FS+0x1c>)
 8008608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800860c:	0800869d 	.word	0x0800869d
 8008610:	0800869d 	.word	0x0800869d
 8008614:	0800869d 	.word	0x0800869d
 8008618:	0800869d 	.word	0x0800869d
 800861c:	0800869d 	.word	0x0800869d
 8008620:	0800869d 	.word	0x0800869d
 8008624:	0800869d 	.word	0x0800869d
 8008628:	0800869d 	.word	0x0800869d
 800862c:	0800869d 	.word	0x0800869d
 8008630:	0800869d 	.word	0x0800869d
 8008634:	0800869d 	.word	0x0800869d
 8008638:	0800869d 	.word	0x0800869d
 800863c:	0800869d 	.word	0x0800869d
 8008640:	0800869d 	.word	0x0800869d
 8008644:	0800869d 	.word	0x0800869d
 8008648:	0800869d 	.word	0x0800869d
 800864c:	0800869d 	.word	0x0800869d
 8008650:	0800869d 	.word	0x0800869d
 8008654:	0800869d 	.word	0x0800869d
 8008658:	0800869d 	.word	0x0800869d
 800865c:	0800869d 	.word	0x0800869d
 8008660:	0800869d 	.word	0x0800869d
 8008664:	0800869d 	.word	0x0800869d
 8008668:	0800869d 	.word	0x0800869d
 800866c:	0800869d 	.word	0x0800869d
 8008670:	0800869d 	.word	0x0800869d
 8008674:	0800869d 	.word	0x0800869d
 8008678:	0800869d 	.word	0x0800869d
 800867c:	0800869d 	.word	0x0800869d
 8008680:	0800869d 	.word	0x0800869d
 8008684:	0800869d 	.word	0x0800869d
 8008688:	0800869d 	.word	0x0800869d
 800868c:	0800869d 	.word	0x0800869d
 8008690:	0800869d 	.word	0x0800869d
 8008694:	0800869d 	.word	0x0800869d
 8008698:	0800869d 	.word	0x0800869d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800869c:	bf00      	nop
  }

  return (USBD_OK);
 800869e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	370c      	adds	r7, #12
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr

080086ac <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b082      	sub	sp, #8
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80086b6:	6879      	ldr	r1, [r7, #4]
 80086b8:	4805      	ldr	r0, [pc, #20]	@ (80086d0 <CDC_Receive_FS+0x24>)
 80086ba:	f7fe fbdf 	bl	8006e7c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80086be:	4804      	ldr	r0, [pc, #16]	@ (80086d0 <CDC_Receive_FS+0x24>)
 80086c0:	f7fe fbfa 	bl	8006eb8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80086c4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3708      	adds	r7, #8
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}
 80086ce:	bf00      	nop
 80086d0:	20000208 	.word	0x20000208

080086d4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b087      	sub	sp, #28
 80086d8:	af00      	add	r7, sp, #0
 80086da:	60f8      	str	r0, [r7, #12]
 80086dc:	60b9      	str	r1, [r7, #8]
 80086de:	4613      	mov	r3, r2
 80086e0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80086e2:	2300      	movs	r3, #0
 80086e4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80086e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	371c      	adds	r7, #28
 80086ee:	46bd      	mov	sp, r7
 80086f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f4:	4770      	bx	lr
	...

080086f8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b083      	sub	sp, #12
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	4603      	mov	r3, r0
 8008700:	6039      	str	r1, [r7, #0]
 8008702:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	2212      	movs	r2, #18
 8008708:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800870a:	4b03      	ldr	r3, [pc, #12]	@ (8008718 <USBD_FS_DeviceDescriptor+0x20>)
}
 800870c:	4618      	mov	r0, r3
 800870e:	370c      	adds	r7, #12
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr
 8008718:	200000cc 	.word	0x200000cc

0800871c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800871c:	b480      	push	{r7}
 800871e:	b083      	sub	sp, #12
 8008720:	af00      	add	r7, sp, #0
 8008722:	4603      	mov	r3, r0
 8008724:	6039      	str	r1, [r7, #0]
 8008726:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	2204      	movs	r2, #4
 800872c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800872e:	4b03      	ldr	r3, [pc, #12]	@ (800873c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008730:	4618      	mov	r0, r3
 8008732:	370c      	adds	r7, #12
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr
 800873c:	200000ec 	.word	0x200000ec

08008740 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b082      	sub	sp, #8
 8008744:	af00      	add	r7, sp, #0
 8008746:	4603      	mov	r3, r0
 8008748:	6039      	str	r1, [r7, #0]
 800874a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800874c:	79fb      	ldrb	r3, [r7, #7]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d105      	bne.n	800875e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008752:	683a      	ldr	r2, [r7, #0]
 8008754:	4907      	ldr	r1, [pc, #28]	@ (8008774 <USBD_FS_ProductStrDescriptor+0x34>)
 8008756:	4808      	ldr	r0, [pc, #32]	@ (8008778 <USBD_FS_ProductStrDescriptor+0x38>)
 8008758:	f7ff fe1e 	bl	8008398 <USBD_GetString>
 800875c:	e004      	b.n	8008768 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800875e:	683a      	ldr	r2, [r7, #0]
 8008760:	4904      	ldr	r1, [pc, #16]	@ (8008774 <USBD_FS_ProductStrDescriptor+0x34>)
 8008762:	4805      	ldr	r0, [pc, #20]	@ (8008778 <USBD_FS_ProductStrDescriptor+0x38>)
 8008764:	f7ff fe18 	bl	8008398 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008768:	4b02      	ldr	r3, [pc, #8]	@ (8008774 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800876a:	4618      	mov	r0, r3
 800876c:	3708      	adds	r7, #8
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}
 8008772:	bf00      	nop
 8008774:	200014e4 	.word	0x200014e4
 8008778:	08009148 	.word	0x08009148

0800877c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b082      	sub	sp, #8
 8008780:	af00      	add	r7, sp, #0
 8008782:	4603      	mov	r3, r0
 8008784:	6039      	str	r1, [r7, #0]
 8008786:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008788:	683a      	ldr	r2, [r7, #0]
 800878a:	4904      	ldr	r1, [pc, #16]	@ (800879c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800878c:	4804      	ldr	r0, [pc, #16]	@ (80087a0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800878e:	f7ff fe03 	bl	8008398 <USBD_GetString>
  return USBD_StrDesc;
 8008792:	4b02      	ldr	r3, [pc, #8]	@ (800879c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008794:	4618      	mov	r0, r3
 8008796:	3708      	adds	r7, #8
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}
 800879c:	200014e4 	.word	0x200014e4
 80087a0:	08009160 	.word	0x08009160

080087a4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b082      	sub	sp, #8
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	4603      	mov	r3, r0
 80087ac:	6039      	str	r1, [r7, #0]
 80087ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	221a      	movs	r2, #26
 80087b4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80087b6:	f000 f855 	bl	8008864 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80087ba:	4b02      	ldr	r3, [pc, #8]	@ (80087c4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3708      	adds	r7, #8
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}
 80087c4:	200000f0 	.word	0x200000f0

080087c8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	4603      	mov	r3, r0
 80087d0:	6039      	str	r1, [r7, #0]
 80087d2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80087d4:	79fb      	ldrb	r3, [r7, #7]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d105      	bne.n	80087e6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80087da:	683a      	ldr	r2, [r7, #0]
 80087dc:	4907      	ldr	r1, [pc, #28]	@ (80087fc <USBD_FS_ConfigStrDescriptor+0x34>)
 80087de:	4808      	ldr	r0, [pc, #32]	@ (8008800 <USBD_FS_ConfigStrDescriptor+0x38>)
 80087e0:	f7ff fdda 	bl	8008398 <USBD_GetString>
 80087e4:	e004      	b.n	80087f0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80087e6:	683a      	ldr	r2, [r7, #0]
 80087e8:	4904      	ldr	r1, [pc, #16]	@ (80087fc <USBD_FS_ConfigStrDescriptor+0x34>)
 80087ea:	4805      	ldr	r0, [pc, #20]	@ (8008800 <USBD_FS_ConfigStrDescriptor+0x38>)
 80087ec:	f7ff fdd4 	bl	8008398 <USBD_GetString>
  }
  return USBD_StrDesc;
 80087f0:	4b02      	ldr	r3, [pc, #8]	@ (80087fc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3708      	adds	r7, #8
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}
 80087fa:	bf00      	nop
 80087fc:	200014e4 	.word	0x200014e4
 8008800:	08009174 	.word	0x08009174

08008804 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b082      	sub	sp, #8
 8008808:	af00      	add	r7, sp, #0
 800880a:	4603      	mov	r3, r0
 800880c:	6039      	str	r1, [r7, #0]
 800880e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008810:	79fb      	ldrb	r3, [r7, #7]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d105      	bne.n	8008822 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008816:	683a      	ldr	r2, [r7, #0]
 8008818:	4907      	ldr	r1, [pc, #28]	@ (8008838 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800881a:	4808      	ldr	r0, [pc, #32]	@ (800883c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800881c:	f7ff fdbc 	bl	8008398 <USBD_GetString>
 8008820:	e004      	b.n	800882c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008822:	683a      	ldr	r2, [r7, #0]
 8008824:	4904      	ldr	r1, [pc, #16]	@ (8008838 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008826:	4805      	ldr	r0, [pc, #20]	@ (800883c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008828:	f7ff fdb6 	bl	8008398 <USBD_GetString>
  }
  return USBD_StrDesc;
 800882c:	4b02      	ldr	r3, [pc, #8]	@ (8008838 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800882e:	4618      	mov	r0, r3
 8008830:	3708      	adds	r7, #8
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}
 8008836:	bf00      	nop
 8008838:	200014e4 	.word	0x200014e4
 800883c:	08009180 	.word	0x08009180

08008840 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008840:	b480      	push	{r7}
 8008842:	b083      	sub	sp, #12
 8008844:	af00      	add	r7, sp, #0
 8008846:	4603      	mov	r3, r0
 8008848:	6039      	str	r1, [r7, #0]
 800884a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	220c      	movs	r2, #12
 8008850:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8008852:	4b03      	ldr	r3, [pc, #12]	@ (8008860 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8008854:	4618      	mov	r0, r3
 8008856:	370c      	adds	r7, #12
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr
 8008860:	200000e0 	.word	0x200000e0

08008864 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b084      	sub	sp, #16
 8008868:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800886a:	4b0f      	ldr	r3, [pc, #60]	@ (80088a8 <Get_SerialNum+0x44>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008870:	4b0e      	ldr	r3, [pc, #56]	@ (80088ac <Get_SerialNum+0x48>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008876:	4b0e      	ldr	r3, [pc, #56]	@ (80088b0 <Get_SerialNum+0x4c>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800887c:	68fa      	ldr	r2, [r7, #12]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	4413      	add	r3, r2
 8008882:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d009      	beq.n	800889e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800888a:	2208      	movs	r2, #8
 800888c:	4909      	ldr	r1, [pc, #36]	@ (80088b4 <Get_SerialNum+0x50>)
 800888e:	68f8      	ldr	r0, [r7, #12]
 8008890:	f000 f814 	bl	80088bc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008894:	2204      	movs	r2, #4
 8008896:	4908      	ldr	r1, [pc, #32]	@ (80088b8 <Get_SerialNum+0x54>)
 8008898:	68b8      	ldr	r0, [r7, #8]
 800889a:	f000 f80f 	bl	80088bc <IntToUnicode>
  }
}
 800889e:	bf00      	nop
 80088a0:	3710      	adds	r7, #16
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}
 80088a6:	bf00      	nop
 80088a8:	1fff7a10 	.word	0x1fff7a10
 80088ac:	1fff7a14 	.word	0x1fff7a14
 80088b0:	1fff7a18 	.word	0x1fff7a18
 80088b4:	200000f2 	.word	0x200000f2
 80088b8:	20000102 	.word	0x20000102

080088bc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80088bc:	b480      	push	{r7}
 80088be:	b087      	sub	sp, #28
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	60f8      	str	r0, [r7, #12]
 80088c4:	60b9      	str	r1, [r7, #8]
 80088c6:	4613      	mov	r3, r2
 80088c8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80088ca:	2300      	movs	r3, #0
 80088cc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80088ce:	2300      	movs	r3, #0
 80088d0:	75fb      	strb	r3, [r7, #23]
 80088d2:	e027      	b.n	8008924 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	0f1b      	lsrs	r3, r3, #28
 80088d8:	2b09      	cmp	r3, #9
 80088da:	d80b      	bhi.n	80088f4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	0f1b      	lsrs	r3, r3, #28
 80088e0:	b2da      	uxtb	r2, r3
 80088e2:	7dfb      	ldrb	r3, [r7, #23]
 80088e4:	005b      	lsls	r3, r3, #1
 80088e6:	4619      	mov	r1, r3
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	440b      	add	r3, r1
 80088ec:	3230      	adds	r2, #48	@ 0x30
 80088ee:	b2d2      	uxtb	r2, r2
 80088f0:	701a      	strb	r2, [r3, #0]
 80088f2:	e00a      	b.n	800890a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	0f1b      	lsrs	r3, r3, #28
 80088f8:	b2da      	uxtb	r2, r3
 80088fa:	7dfb      	ldrb	r3, [r7, #23]
 80088fc:	005b      	lsls	r3, r3, #1
 80088fe:	4619      	mov	r1, r3
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	440b      	add	r3, r1
 8008904:	3237      	adds	r2, #55	@ 0x37
 8008906:	b2d2      	uxtb	r2, r2
 8008908:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	011b      	lsls	r3, r3, #4
 800890e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008910:	7dfb      	ldrb	r3, [r7, #23]
 8008912:	005b      	lsls	r3, r3, #1
 8008914:	3301      	adds	r3, #1
 8008916:	68ba      	ldr	r2, [r7, #8]
 8008918:	4413      	add	r3, r2
 800891a:	2200      	movs	r2, #0
 800891c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800891e:	7dfb      	ldrb	r3, [r7, #23]
 8008920:	3301      	adds	r3, #1
 8008922:	75fb      	strb	r3, [r7, #23]
 8008924:	7dfa      	ldrb	r2, [r7, #23]
 8008926:	79fb      	ldrb	r3, [r7, #7]
 8008928:	429a      	cmp	r2, r3
 800892a:	d3d3      	bcc.n	80088d4 <IntToUnicode+0x18>
  }
}
 800892c:	bf00      	nop
 800892e:	bf00      	nop
 8008930:	371c      	adds	r7, #28
 8008932:	46bd      	mov	sp, r7
 8008934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008938:	4770      	bx	lr
	...

0800893c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b098      	sub	sp, #96	@ 0x60
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008944:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8008948:	2200      	movs	r2, #0
 800894a:	601a      	str	r2, [r3, #0]
 800894c:	605a      	str	r2, [r3, #4]
 800894e:	609a      	str	r2, [r3, #8]
 8008950:	60da      	str	r2, [r3, #12]
 8008952:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008954:	f107 0310 	add.w	r3, r7, #16
 8008958:	223c      	movs	r2, #60	@ 0x3c
 800895a:	2100      	movs	r1, #0
 800895c:	4618      	mov	r0, r3
 800895e:	f000 fbbb 	bl	80090d8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800896a:	d148      	bne.n	80089fe <HAL_PCD_MspInit+0xc2>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800896c:	2320      	movs	r3, #32
 800896e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8008970:	2300      	movs	r3, #0
 8008972:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008974:	f107 0310 	add.w	r3, r7, #16
 8008978:	4618      	mov	r0, r3
 800897a:	f7fb fda9 	bl	80044d0 <HAL_RCCEx_PeriphCLKConfig>
 800897e:	4603      	mov	r3, r0
 8008980:	2b00      	cmp	r3, #0
 8008982:	d001      	beq.n	8008988 <HAL_PCD_MspInit+0x4c>
    {
      Error_Handler();
 8008984:	f7f8 f984 	bl	8000c90 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008988:	2300      	movs	r3, #0
 800898a:	60fb      	str	r3, [r7, #12]
 800898c:	4b1e      	ldr	r3, [pc, #120]	@ (8008a08 <HAL_PCD_MspInit+0xcc>)
 800898e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008990:	4a1d      	ldr	r2, [pc, #116]	@ (8008a08 <HAL_PCD_MspInit+0xcc>)
 8008992:	f043 0301 	orr.w	r3, r3, #1
 8008996:	6313      	str	r3, [r2, #48]	@ 0x30
 8008998:	4b1b      	ldr	r3, [pc, #108]	@ (8008a08 <HAL_PCD_MspInit+0xcc>)
 800899a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800899c:	f003 0301 	and.w	r3, r3, #1
 80089a0:	60fb      	str	r3, [r7, #12]
 80089a2:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80089a4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80089a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089aa:	2302      	movs	r3, #2
 80089ac:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089ae:	2300      	movs	r3, #0
 80089b0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80089b2:	2303      	movs	r3, #3
 80089b4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80089b6:	230a      	movs	r3, #10
 80089b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80089ba:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80089be:	4619      	mov	r1, r3
 80089c0:	4812      	ldr	r0, [pc, #72]	@ (8008a0c <HAL_PCD_MspInit+0xd0>)
 80089c2:	f7f9 fee7 	bl	8002794 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80089c6:	4b10      	ldr	r3, [pc, #64]	@ (8008a08 <HAL_PCD_MspInit+0xcc>)
 80089c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089ca:	4a0f      	ldr	r2, [pc, #60]	@ (8008a08 <HAL_PCD_MspInit+0xcc>)
 80089cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089d0:	6353      	str	r3, [r2, #52]	@ 0x34
 80089d2:	2300      	movs	r3, #0
 80089d4:	60bb      	str	r3, [r7, #8]
 80089d6:	4b0c      	ldr	r3, [pc, #48]	@ (8008a08 <HAL_PCD_MspInit+0xcc>)
 80089d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089da:	4a0b      	ldr	r2, [pc, #44]	@ (8008a08 <HAL_PCD_MspInit+0xcc>)
 80089dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80089e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80089e2:	4b09      	ldr	r3, [pc, #36]	@ (8008a08 <HAL_PCD_MspInit+0xcc>)
 80089e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80089ea:	60bb      	str	r3, [r7, #8]
 80089ec:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80089ee:	2200      	movs	r2, #0
 80089f0:	2100      	movs	r1, #0
 80089f2:	2043      	movs	r0, #67	@ 0x43
 80089f4:	f7f9 fe97 	bl	8002726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80089f8:	2043      	movs	r0, #67	@ 0x43
 80089fa:	f7f9 feb0 	bl	800275e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80089fe:	bf00      	nop
 8008a00:	3760      	adds	r7, #96	@ 0x60
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}
 8008a06:	bf00      	nop
 8008a08:	40023800 	.word	0x40023800
 8008a0c:	40020000 	.word	0x40020000

08008a10 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b082      	sub	sp, #8
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8008a24:	4619      	mov	r1, r3
 8008a26:	4610      	mov	r0, r2
 8008a28:	f7fe fb2f 	bl	800708a <USBD_LL_SetupStage>
}
 8008a2c:	bf00      	nop
 8008a2e:	3708      	adds	r7, #8
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}

08008a34 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b082      	sub	sp, #8
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	460b      	mov	r3, r1
 8008a3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 8008a46:	78fa      	ldrb	r2, [r7, #3]
 8008a48:	6879      	ldr	r1, [r7, #4]
 8008a4a:	4613      	mov	r3, r2
 8008a4c:	00db      	lsls	r3, r3, #3
 8008a4e:	4413      	add	r3, r2
 8008a50:	009b      	lsls	r3, r3, #2
 8008a52:	440b      	add	r3, r1
 8008a54:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8008a58:	681a      	ldr	r2, [r3, #0]
 8008a5a:	78fb      	ldrb	r3, [r7, #3]
 8008a5c:	4619      	mov	r1, r3
 8008a5e:	f7fe fb69 	bl	8007134 <USBD_LL_DataOutStage>
}
 8008a62:	bf00      	nop
 8008a64:	3708      	adds	r7, #8
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}

08008a6a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a6a:	b580      	push	{r7, lr}
 8008a6c:	b082      	sub	sp, #8
 8008a6e:	af00      	add	r7, sp, #0
 8008a70:	6078      	str	r0, [r7, #4]
 8008a72:	460b      	mov	r3, r1
 8008a74:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 8008a7c:	78fa      	ldrb	r2, [r7, #3]
 8008a7e:	6879      	ldr	r1, [r7, #4]
 8008a80:	4613      	mov	r3, r2
 8008a82:	00db      	lsls	r3, r3, #3
 8008a84:	4413      	add	r3, r2
 8008a86:	009b      	lsls	r3, r3, #2
 8008a88:	440b      	add	r3, r1
 8008a8a:	334c      	adds	r3, #76	@ 0x4c
 8008a8c:	681a      	ldr	r2, [r3, #0]
 8008a8e:	78fb      	ldrb	r3, [r7, #3]
 8008a90:	4619      	mov	r1, r3
 8008a92:	f7fe fc02 	bl	800729a <USBD_LL_DataInStage>
}
 8008a96:	bf00      	nop
 8008a98:	3708      	adds	r7, #8
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}

08008a9e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a9e:	b580      	push	{r7, lr}
 8008aa0:	b082      	sub	sp, #8
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008aac:	4618      	mov	r0, r3
 8008aae:	f7fe fd36 	bl	800751e <USBD_LL_SOF>
}
 8008ab2:	bf00      	nop
 8008ab4:	3708      	adds	r7, #8
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}

08008aba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008aba:	b580      	push	{r7, lr}
 8008abc:	b084      	sub	sp, #16
 8008abe:	af00      	add	r7, sp, #0
 8008ac0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	68db      	ldr	r3, [r3, #12]
 8008aca:	2b02      	cmp	r3, #2
 8008acc:	d001      	beq.n	8008ad2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008ace:	f7f8 f8df 	bl	8000c90 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008ad8:	7bfa      	ldrb	r2, [r7, #15]
 8008ada:	4611      	mov	r1, r2
 8008adc:	4618      	mov	r0, r3
 8008ade:	f7fe fce0 	bl	80074a2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f7fe fc88 	bl	80073fe <USBD_LL_Reset>
}
 8008aee:	bf00      	nop
 8008af0:	3710      	adds	r7, #16
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
	...

08008af8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b082      	sub	sp, #8
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008b06:	4618      	mov	r0, r3
 8008b08:	f7fe fcdb 	bl	80074c2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	687a      	ldr	r2, [r7, #4]
 8008b18:	6812      	ldr	r2, [r2, #0]
 8008b1a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008b1e:	f043 0301 	orr.w	r3, r3, #1
 8008b22:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6a1b      	ldr	r3, [r3, #32]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d005      	beq.n	8008b38 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008b2c:	4b04      	ldr	r3, [pc, #16]	@ (8008b40 <HAL_PCD_SuspendCallback+0x48>)
 8008b2e:	691b      	ldr	r3, [r3, #16]
 8008b30:	4a03      	ldr	r2, [pc, #12]	@ (8008b40 <HAL_PCD_SuspendCallback+0x48>)
 8008b32:	f043 0306 	orr.w	r3, r3, #6
 8008b36:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008b38:	bf00      	nop
 8008b3a:	3708      	adds	r7, #8
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}
 8008b40:	e000ed00 	.word	0xe000ed00

08008b44 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b082      	sub	sp, #8
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008b52:	4618      	mov	r0, r3
 8008b54:	f7fe fccb 	bl	80074ee <USBD_LL_Resume>
}
 8008b58:	bf00      	nop
 8008b5a:	3708      	adds	r7, #8
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}

08008b60 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b082      	sub	sp, #8
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	460b      	mov	r3, r1
 8008b6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008b72:	78fa      	ldrb	r2, [r7, #3]
 8008b74:	4611      	mov	r1, r2
 8008b76:	4618      	mov	r0, r3
 8008b78:	f7fe fd23 	bl	80075c2 <USBD_LL_IsoOUTIncomplete>
}
 8008b7c:	bf00      	nop
 8008b7e:	3708      	adds	r7, #8
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b082      	sub	sp, #8
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	460b      	mov	r3, r1
 8008b8e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008b96:	78fa      	ldrb	r2, [r7, #3]
 8008b98:	4611      	mov	r1, r2
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f7fe fcdf 	bl	800755e <USBD_LL_IsoINIncomplete>
}
 8008ba0:	bf00      	nop
 8008ba2:	3708      	adds	r7, #8
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b082      	sub	sp, #8
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f7fe fd35 	bl	8007626 <USBD_LL_DevConnected>
}
 8008bbc:	bf00      	nop
 8008bbe:	3708      	adds	r7, #8
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}

08008bc4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b082      	sub	sp, #8
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f7fe fd32 	bl	800763c <USBD_LL_DevDisconnected>
}
 8008bd8:	bf00      	nop
 8008bda:	3708      	adds	r7, #8
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}

08008be0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b082      	sub	sp, #8
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	781b      	ldrb	r3, [r3, #0]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d13f      	bne.n	8008c70 <USBD_LL_Init+0x90>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008bf0:	4a22      	ldr	r2, [pc, #136]	@ (8008c7c <USBD_LL_Init+0x9c>)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	4a20      	ldr	r2, [pc, #128]	@ (8008c7c <USBD_LL_Init+0x9c>)
 8008bfc:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008c00:	4b1e      	ldr	r3, [pc, #120]	@ (8008c7c <USBD_LL_Init+0x9c>)
 8008c02:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008c06:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8008c08:	4b1c      	ldr	r3, [pc, #112]	@ (8008c7c <USBD_LL_Init+0x9c>)
 8008c0a:	2206      	movs	r2, #6
 8008c0c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008c0e:	4b1b      	ldr	r3, [pc, #108]	@ (8008c7c <USBD_LL_Init+0x9c>)
 8008c10:	2202      	movs	r2, #2
 8008c12:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008c14:	4b19      	ldr	r3, [pc, #100]	@ (8008c7c <USBD_LL_Init+0x9c>)
 8008c16:	2200      	movs	r2, #0
 8008c18:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008c1a:	4b18      	ldr	r3, [pc, #96]	@ (8008c7c <USBD_LL_Init+0x9c>)
 8008c1c:	2202      	movs	r2, #2
 8008c1e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008c20:	4b16      	ldr	r3, [pc, #88]	@ (8008c7c <USBD_LL_Init+0x9c>)
 8008c22:	2200      	movs	r2, #0
 8008c24:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008c26:	4b15      	ldr	r3, [pc, #84]	@ (8008c7c <USBD_LL_Init+0x9c>)
 8008c28:	2200      	movs	r2, #0
 8008c2a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008c2c:	4b13      	ldr	r3, [pc, #76]	@ (8008c7c <USBD_LL_Init+0x9c>)
 8008c2e:	2200      	movs	r2, #0
 8008c30:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8008c32:	4b12      	ldr	r3, [pc, #72]	@ (8008c7c <USBD_LL_Init+0x9c>)
 8008c34:	2200      	movs	r2, #0
 8008c36:	629a      	str	r2, [r3, #40]	@ 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008c38:	4b10      	ldr	r3, [pc, #64]	@ (8008c7c <USBD_LL_Init+0x9c>)
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008c3e:	4b0f      	ldr	r3, [pc, #60]	@ (8008c7c <USBD_LL_Init+0x9c>)
 8008c40:	2200      	movs	r2, #0
 8008c42:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008c44:	480d      	ldr	r0, [pc, #52]	@ (8008c7c <USBD_LL_Init+0x9c>)
 8008c46:	f7f9 ff5a 	bl	8002afe <HAL_PCD_Init>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d001      	beq.n	8008c54 <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 8008c50:	f7f8 f81e 	bl	8000c90 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008c54:	2180      	movs	r1, #128	@ 0x80
 8008c56:	4809      	ldr	r0, [pc, #36]	@ (8008c7c <USBD_LL_Init+0x9c>)
 8008c58:	f7fb f9e5 	bl	8004026 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008c5c:	2240      	movs	r2, #64	@ 0x40
 8008c5e:	2100      	movs	r1, #0
 8008c60:	4806      	ldr	r0, [pc, #24]	@ (8008c7c <USBD_LL_Init+0x9c>)
 8008c62:	f7fb f999 	bl	8003f98 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008c66:	2280      	movs	r2, #128	@ 0x80
 8008c68:	2101      	movs	r1, #1
 8008c6a:	4804      	ldr	r0, [pc, #16]	@ (8008c7c <USBD_LL_Init+0x9c>)
 8008c6c:	f7fb f994 	bl	8003f98 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008c70:	2300      	movs	r3, #0
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3708      	adds	r7, #8
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}
 8008c7a:	bf00      	nop
 8008c7c:	200016e4 	.word	0x200016e4

08008c80 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b084      	sub	sp, #16
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008c96:	4618      	mov	r0, r3
 8008c98:	f7fa f855 	bl	8002d46 <HAL_PCD_Start>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ca0:	7bfb      	ldrb	r3, [r7, #15]
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f000 f990 	bl	8008fc8 <USBD_Get_USB_Status>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cac:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3710      	adds	r7, #16
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}

08008cb6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008cb6:	b580      	push	{r7, lr}
 8008cb8:	b084      	sub	sp, #16
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	6078      	str	r0, [r7, #4]
 8008cbe:	4608      	mov	r0, r1
 8008cc0:	4611      	mov	r1, r2
 8008cc2:	461a      	mov	r2, r3
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	70fb      	strb	r3, [r7, #3]
 8008cc8:	460b      	mov	r3, r1
 8008cca:	70bb      	strb	r3, [r7, #2]
 8008ccc:	4613      	mov	r3, r2
 8008cce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008cde:	78bb      	ldrb	r3, [r7, #2]
 8008ce0:	883a      	ldrh	r2, [r7, #0]
 8008ce2:	78f9      	ldrb	r1, [r7, #3]
 8008ce4:	f7fa fd53 	bl	800378e <HAL_PCD_EP_Open>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cec:	7bfb      	ldrb	r3, [r7, #15]
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f000 f96a 	bl	8008fc8 <USBD_Get_USB_Status>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cf8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3710      	adds	r7, #16
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}

08008d02 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d02:	b580      	push	{r7, lr}
 8008d04:	b084      	sub	sp, #16
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	6078      	str	r0, [r7, #4]
 8008d0a:	460b      	mov	r3, r1
 8008d0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d12:	2300      	movs	r3, #0
 8008d14:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008d1c:	78fa      	ldrb	r2, [r7, #3]
 8008d1e:	4611      	mov	r1, r2
 8008d20:	4618      	mov	r0, r3
 8008d22:	f7fa fd9c 	bl	800385e <HAL_PCD_EP_Close>
 8008d26:	4603      	mov	r3, r0
 8008d28:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d2a:	7bfb      	ldrb	r3, [r7, #15]
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f000 f94b 	bl	8008fc8 <USBD_Get_USB_Status>
 8008d32:	4603      	mov	r3, r0
 8008d34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d36:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3710      	adds	r7, #16
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}

08008d40 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b084      	sub	sp, #16
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	460b      	mov	r3, r1
 8008d4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d50:	2300      	movs	r3, #0
 8008d52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008d5a:	78fa      	ldrb	r2, [r7, #3]
 8008d5c:	4611      	mov	r1, r2
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f7fa fe74 	bl	8003a4c <HAL_PCD_EP_SetStall>
 8008d64:	4603      	mov	r3, r0
 8008d66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d68:	7bfb      	ldrb	r3, [r7, #15]
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f000 f92c 	bl	8008fc8 <USBD_Get_USB_Status>
 8008d70:	4603      	mov	r3, r0
 8008d72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d74:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3710      	adds	r7, #16
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}

08008d7e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d7e:	b580      	push	{r7, lr}
 8008d80:	b084      	sub	sp, #16
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	6078      	str	r0, [r7, #4]
 8008d86:	460b      	mov	r3, r1
 8008d88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008d98:	78fa      	ldrb	r2, [r7, #3]
 8008d9a:	4611      	mov	r1, r2
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f7fa feb9 	bl	8003b14 <HAL_PCD_EP_ClrStall>
 8008da2:	4603      	mov	r3, r0
 8008da4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008da6:	7bfb      	ldrb	r3, [r7, #15]
 8008da8:	4618      	mov	r0, r3
 8008daa:	f000 f90d 	bl	8008fc8 <USBD_Get_USB_Status>
 8008dae:	4603      	mov	r3, r0
 8008db0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008db2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	3710      	adds	r7, #16
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}

08008dbc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b085      	sub	sp, #20
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	460b      	mov	r3, r1
 8008dc6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008dce:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008dd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	da0b      	bge.n	8008df0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008dd8:	78fb      	ldrb	r3, [r7, #3]
 8008dda:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008dde:	68f9      	ldr	r1, [r7, #12]
 8008de0:	4613      	mov	r3, r2
 8008de2:	00db      	lsls	r3, r3, #3
 8008de4:	4413      	add	r3, r2
 8008de6:	009b      	lsls	r3, r3, #2
 8008de8:	440b      	add	r3, r1
 8008dea:	333e      	adds	r3, #62	@ 0x3e
 8008dec:	781b      	ldrb	r3, [r3, #0]
 8008dee:	e00b      	b.n	8008e08 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008df0:	78fb      	ldrb	r3, [r7, #3]
 8008df2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008df6:	68f9      	ldr	r1, [r7, #12]
 8008df8:	4613      	mov	r3, r2
 8008dfa:	00db      	lsls	r3, r3, #3
 8008dfc:	4413      	add	r3, r2
 8008dfe:	009b      	lsls	r3, r3, #2
 8008e00:	440b      	add	r3, r1
 8008e02:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 8008e06:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3714      	adds	r7, #20
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e12:	4770      	bx	lr

08008e14 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b084      	sub	sp, #16
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	460b      	mov	r3, r1
 8008e1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e20:	2300      	movs	r3, #0
 8008e22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e24:	2300      	movs	r3, #0
 8008e26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008e2e:	78fa      	ldrb	r2, [r7, #3]
 8008e30:	4611      	mov	r1, r2
 8008e32:	4618      	mov	r0, r3
 8008e34:	f7fa fc86 	bl	8003744 <HAL_PCD_SetAddress>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e3c:	7bfb      	ldrb	r3, [r7, #15]
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f000 f8c2 	bl	8008fc8 <USBD_Get_USB_Status>
 8008e44:	4603      	mov	r3, r0
 8008e46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e48:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3710      	adds	r7, #16
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}

08008e52 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008e52:	b580      	push	{r7, lr}
 8008e54:	b086      	sub	sp, #24
 8008e56:	af00      	add	r7, sp, #0
 8008e58:	60f8      	str	r0, [r7, #12]
 8008e5a:	607a      	str	r2, [r7, #4]
 8008e5c:	603b      	str	r3, [r7, #0]
 8008e5e:	460b      	mov	r3, r1
 8008e60:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e62:	2300      	movs	r3, #0
 8008e64:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e66:	2300      	movs	r3, #0
 8008e68:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008e70:	7af9      	ldrb	r1, [r7, #11]
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	687a      	ldr	r2, [r7, #4]
 8008e76:	f7fa fd9f 	bl	80039b8 <HAL_PCD_EP_Transmit>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e7e:	7dfb      	ldrb	r3, [r7, #23]
 8008e80:	4618      	mov	r0, r3
 8008e82:	f000 f8a1 	bl	8008fc8 <USBD_Get_USB_Status>
 8008e86:	4603      	mov	r3, r0
 8008e88:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008e8a:	7dbb      	ldrb	r3, [r7, #22]
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3718      	adds	r7, #24
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b086      	sub	sp, #24
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	60f8      	str	r0, [r7, #12]
 8008e9c:	607a      	str	r2, [r7, #4]
 8008e9e:	603b      	str	r3, [r7, #0]
 8008ea0:	460b      	mov	r3, r1
 8008ea2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008eb2:	7af9      	ldrb	r1, [r7, #11]
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	687a      	ldr	r2, [r7, #4]
 8008eb8:	f7fa fd1b 	bl	80038f2 <HAL_PCD_EP_Receive>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ec0:	7dfb      	ldrb	r3, [r7, #23]
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f000 f880 	bl	8008fc8 <USBD_Get_USB_Status>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008ecc:	7dbb      	ldrb	r3, [r7, #22]
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3718      	adds	r7, #24
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}

08008ed6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ed6:	b580      	push	{r7, lr}
 8008ed8:	b082      	sub	sp, #8
 8008eda:	af00      	add	r7, sp, #0
 8008edc:	6078      	str	r0, [r7, #4]
 8008ede:	460b      	mov	r3, r1
 8008ee0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008ee8:	78fa      	ldrb	r2, [r7, #3]
 8008eea:	4611      	mov	r1, r2
 8008eec:	4618      	mov	r0, r3
 8008eee:	f7fa fd4b 	bl	8003988 <HAL_PCD_EP_GetRxCount>
 8008ef2:	4603      	mov	r3, r0
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3708      	adds	r7, #8
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}

08008efc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b082      	sub	sp, #8
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	460b      	mov	r3, r1
 8008f06:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008f08:	78fb      	ldrb	r3, [r7, #3]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d002      	beq.n	8008f14 <HAL_PCDEx_LPM_Callback+0x18>
 8008f0e:	2b01      	cmp	r3, #1
 8008f10:	d01f      	beq.n	8008f52 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8008f12:	e03b      	b.n	8008f8c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6a1b      	ldr	r3, [r3, #32]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d007      	beq.n	8008f2c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8008f1c:	f7f7 fcda 	bl	80008d4 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008f20:	4b1c      	ldr	r3, [pc, #112]	@ (8008f94 <HAL_PCDEx_LPM_Callback+0x98>)
 8008f22:	691b      	ldr	r3, [r3, #16]
 8008f24:	4a1b      	ldr	r2, [pc, #108]	@ (8008f94 <HAL_PCDEx_LPM_Callback+0x98>)
 8008f26:	f023 0306 	bic.w	r3, r3, #6
 8008f2a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	687a      	ldr	r2, [r7, #4]
 8008f38:	6812      	ldr	r2, [r2, #0]
 8008f3a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008f3e:	f023 0301 	bic.w	r3, r3, #1
 8008f42:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f7fe facf 	bl	80074ee <USBD_LL_Resume>
    break;
 8008f50:	e01c      	b.n	8008f8c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	687a      	ldr	r2, [r7, #4]
 8008f5e:	6812      	ldr	r2, [r2, #0]
 8008f60:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008f64:	f043 0301 	orr.w	r3, r3, #1
 8008f68:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008f70:	4618      	mov	r0, r3
 8008f72:	f7fe faa6 	bl	80074c2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6a1b      	ldr	r3, [r3, #32]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d005      	beq.n	8008f8a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008f7e:	4b05      	ldr	r3, [pc, #20]	@ (8008f94 <HAL_PCDEx_LPM_Callback+0x98>)
 8008f80:	691b      	ldr	r3, [r3, #16]
 8008f82:	4a04      	ldr	r2, [pc, #16]	@ (8008f94 <HAL_PCDEx_LPM_Callback+0x98>)
 8008f84:	f043 0306 	orr.w	r3, r3, #6
 8008f88:	6113      	str	r3, [r2, #16]
    break;
 8008f8a:	bf00      	nop
}
 8008f8c:	bf00      	nop
 8008f8e:	3708      	adds	r7, #8
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}
 8008f94:	e000ed00 	.word	0xe000ed00

08008f98 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b083      	sub	sp, #12
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008fa0:	4b03      	ldr	r3, [pc, #12]	@ (8008fb0 <USBD_static_malloc+0x18>)
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	370c      	adds	r7, #12
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fac:	4770      	bx	lr
 8008fae:	bf00      	nop
 8008fb0:	20001bf0 	.word	0x20001bf0

08008fb4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b083      	sub	sp, #12
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]

}
 8008fbc:	bf00      	nop
 8008fbe:	370c      	adds	r7, #12
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr

08008fc8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b085      	sub	sp, #20
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	4603      	mov	r3, r0
 8008fd0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008fd6:	79fb      	ldrb	r3, [r7, #7]
 8008fd8:	2b03      	cmp	r3, #3
 8008fda:	d817      	bhi.n	800900c <USBD_Get_USB_Status+0x44>
 8008fdc:	a201      	add	r2, pc, #4	@ (adr r2, 8008fe4 <USBD_Get_USB_Status+0x1c>)
 8008fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fe2:	bf00      	nop
 8008fe4:	08008ff5 	.word	0x08008ff5
 8008fe8:	08008ffb 	.word	0x08008ffb
 8008fec:	08009001 	.word	0x08009001
 8008ff0:	08009007 	.word	0x08009007
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	73fb      	strb	r3, [r7, #15]
    break;
 8008ff8:	e00b      	b.n	8009012 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008ffa:	2303      	movs	r3, #3
 8008ffc:	73fb      	strb	r3, [r7, #15]
    break;
 8008ffe:	e008      	b.n	8009012 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009000:	2301      	movs	r3, #1
 8009002:	73fb      	strb	r3, [r7, #15]
    break;
 8009004:	e005      	b.n	8009012 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009006:	2303      	movs	r3, #3
 8009008:	73fb      	strb	r3, [r7, #15]
    break;
 800900a:	e002      	b.n	8009012 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800900c:	2303      	movs	r3, #3
 800900e:	73fb      	strb	r3, [r7, #15]
    break;
 8009010:	bf00      	nop
  }
  return usb_status;
 8009012:	7bfb      	ldrb	r3, [r7, #15]
}
 8009014:	4618      	mov	r0, r3
 8009016:	3714      	adds	r7, #20
 8009018:	46bd      	mov	sp, r7
 800901a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901e:	4770      	bx	lr

08009020 <__itoa>:
 8009020:	1e93      	subs	r3, r2, #2
 8009022:	2b22      	cmp	r3, #34	@ 0x22
 8009024:	b510      	push	{r4, lr}
 8009026:	460c      	mov	r4, r1
 8009028:	d904      	bls.n	8009034 <__itoa+0x14>
 800902a:	2300      	movs	r3, #0
 800902c:	700b      	strb	r3, [r1, #0]
 800902e:	461c      	mov	r4, r3
 8009030:	4620      	mov	r0, r4
 8009032:	bd10      	pop	{r4, pc}
 8009034:	2a0a      	cmp	r2, #10
 8009036:	d109      	bne.n	800904c <__itoa+0x2c>
 8009038:	2800      	cmp	r0, #0
 800903a:	da07      	bge.n	800904c <__itoa+0x2c>
 800903c:	232d      	movs	r3, #45	@ 0x2d
 800903e:	700b      	strb	r3, [r1, #0]
 8009040:	4240      	negs	r0, r0
 8009042:	2101      	movs	r1, #1
 8009044:	4421      	add	r1, r4
 8009046:	f000 f805 	bl	8009054 <__utoa>
 800904a:	e7f1      	b.n	8009030 <__itoa+0x10>
 800904c:	2100      	movs	r1, #0
 800904e:	e7f9      	b.n	8009044 <__itoa+0x24>

08009050 <itoa>:
 8009050:	f7ff bfe6 	b.w	8009020 <__itoa>

08009054 <__utoa>:
 8009054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009056:	4c1f      	ldr	r4, [pc, #124]	@ (80090d4 <__utoa+0x80>)
 8009058:	b08b      	sub	sp, #44	@ 0x2c
 800905a:	4605      	mov	r5, r0
 800905c:	460b      	mov	r3, r1
 800905e:	466e      	mov	r6, sp
 8009060:	f104 0c20 	add.w	ip, r4, #32
 8009064:	6820      	ldr	r0, [r4, #0]
 8009066:	6861      	ldr	r1, [r4, #4]
 8009068:	4637      	mov	r7, r6
 800906a:	c703      	stmia	r7!, {r0, r1}
 800906c:	3408      	adds	r4, #8
 800906e:	4564      	cmp	r4, ip
 8009070:	463e      	mov	r6, r7
 8009072:	d1f7      	bne.n	8009064 <__utoa+0x10>
 8009074:	7921      	ldrb	r1, [r4, #4]
 8009076:	7139      	strb	r1, [r7, #4]
 8009078:	1e91      	subs	r1, r2, #2
 800907a:	6820      	ldr	r0, [r4, #0]
 800907c:	6038      	str	r0, [r7, #0]
 800907e:	2922      	cmp	r1, #34	@ 0x22
 8009080:	f04f 0100 	mov.w	r1, #0
 8009084:	d904      	bls.n	8009090 <__utoa+0x3c>
 8009086:	7019      	strb	r1, [r3, #0]
 8009088:	460b      	mov	r3, r1
 800908a:	4618      	mov	r0, r3
 800908c:	b00b      	add	sp, #44	@ 0x2c
 800908e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009090:	1e58      	subs	r0, r3, #1
 8009092:	4684      	mov	ip, r0
 8009094:	fbb5 f7f2 	udiv	r7, r5, r2
 8009098:	fb02 5617 	mls	r6, r2, r7, r5
 800909c:	3628      	adds	r6, #40	@ 0x28
 800909e:	446e      	add	r6, sp
 80090a0:	460c      	mov	r4, r1
 80090a2:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80090a6:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80090aa:	462e      	mov	r6, r5
 80090ac:	42b2      	cmp	r2, r6
 80090ae:	f101 0101 	add.w	r1, r1, #1
 80090b2:	463d      	mov	r5, r7
 80090b4:	d9ee      	bls.n	8009094 <__utoa+0x40>
 80090b6:	2200      	movs	r2, #0
 80090b8:	545a      	strb	r2, [r3, r1]
 80090ba:	1919      	adds	r1, r3, r4
 80090bc:	1aa5      	subs	r5, r4, r2
 80090be:	42aa      	cmp	r2, r5
 80090c0:	dae3      	bge.n	800908a <__utoa+0x36>
 80090c2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80090c6:	780e      	ldrb	r6, [r1, #0]
 80090c8:	7006      	strb	r6, [r0, #0]
 80090ca:	3201      	adds	r2, #1
 80090cc:	f801 5901 	strb.w	r5, [r1], #-1
 80090d0:	e7f4      	b.n	80090bc <__utoa+0x68>
 80090d2:	bf00      	nop
 80090d4:	080091c8 	.word	0x080091c8

080090d8 <memset>:
 80090d8:	4402      	add	r2, r0
 80090da:	4603      	mov	r3, r0
 80090dc:	4293      	cmp	r3, r2
 80090de:	d100      	bne.n	80090e2 <memset+0xa>
 80090e0:	4770      	bx	lr
 80090e2:	f803 1b01 	strb.w	r1, [r3], #1
 80090e6:	e7f9      	b.n	80090dc <memset+0x4>

080090e8 <__libc_init_array>:
 80090e8:	b570      	push	{r4, r5, r6, lr}
 80090ea:	4d0d      	ldr	r5, [pc, #52]	@ (8009120 <__libc_init_array+0x38>)
 80090ec:	4c0d      	ldr	r4, [pc, #52]	@ (8009124 <__libc_init_array+0x3c>)
 80090ee:	1b64      	subs	r4, r4, r5
 80090f0:	10a4      	asrs	r4, r4, #2
 80090f2:	2600      	movs	r6, #0
 80090f4:	42a6      	cmp	r6, r4
 80090f6:	d109      	bne.n	800910c <__libc_init_array+0x24>
 80090f8:	4d0b      	ldr	r5, [pc, #44]	@ (8009128 <__libc_init_array+0x40>)
 80090fa:	4c0c      	ldr	r4, [pc, #48]	@ (800912c <__libc_init_array+0x44>)
 80090fc:	f000 f818 	bl	8009130 <_init>
 8009100:	1b64      	subs	r4, r4, r5
 8009102:	10a4      	asrs	r4, r4, #2
 8009104:	2600      	movs	r6, #0
 8009106:	42a6      	cmp	r6, r4
 8009108:	d105      	bne.n	8009116 <__libc_init_array+0x2e>
 800910a:	bd70      	pop	{r4, r5, r6, pc}
 800910c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009110:	4798      	blx	r3
 8009112:	3601      	adds	r6, #1
 8009114:	e7ee      	b.n	80090f4 <__libc_init_array+0xc>
 8009116:	f855 3b04 	ldr.w	r3, [r5], #4
 800911a:	4798      	blx	r3
 800911c:	3601      	adds	r6, #1
 800911e:	e7f2      	b.n	8009106 <__libc_init_array+0x1e>
 8009120:	080091f8 	.word	0x080091f8
 8009124:	080091f8 	.word	0x080091f8
 8009128:	080091f8 	.word	0x080091f8
 800912c:	080091fc 	.word	0x080091fc

08009130 <_init>:
 8009130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009132:	bf00      	nop
 8009134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009136:	bc08      	pop	{r3}
 8009138:	469e      	mov	lr, r3
 800913a:	4770      	bx	lr

0800913c <_fini>:
 800913c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800913e:	bf00      	nop
 8009140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009142:	bc08      	pop	{r3}
 8009144:	469e      	mov	lr, r3
 8009146:	4770      	bx	lr
