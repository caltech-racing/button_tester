
pedal_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f68  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  0800912c  0800912c  0001912c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091d4  080091d4  0002010c  2**0
                  CONTENTS
  4 .ARM          00000008  080091d4  080091d4  000191d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080091dc  080091dc  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091dc  080091dc  000191dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080091e0  080091e0  000191e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  080091e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d04  2000010c  080092f0  0002010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e10  080092f0  00021e10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012227  00000000  00000000  0002017f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003445  00000000  00000000  000323a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e70  00000000  00000000  000357f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000abf  00000000  00000000  00036660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000230cc  00000000  00000000  0003711f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013b0f  00000000  00000000  0005a1eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c9a64  00000000  00000000  0006dcfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003adc  00000000  00000000  00137760  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  0013b23c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000010c 	.word	0x2000010c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08009114 	.word	0x08009114

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000110 	.word	0x20000110
 8000200:	08009114 	.word	0x08009114

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b970 	b.w	800050c <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9e08      	ldr	r6, [sp, #32]
 800024a:	460d      	mov	r5, r1
 800024c:	4604      	mov	r4, r0
 800024e:	460f      	mov	r7, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14a      	bne.n	80002ea <__udivmoddi4+0xa6>
 8000254:	428a      	cmp	r2, r1
 8000256:	4694      	mov	ip, r2
 8000258:	d965      	bls.n	8000326 <__udivmoddi4+0xe2>
 800025a:	fab2 f382 	clz	r3, r2
 800025e:	b143      	cbz	r3, 8000272 <__udivmoddi4+0x2e>
 8000260:	fa02 fc03 	lsl.w	ip, r2, r3
 8000264:	f1c3 0220 	rsb	r2, r3, #32
 8000268:	409f      	lsls	r7, r3
 800026a:	fa20 f202 	lsr.w	r2, r0, r2
 800026e:	4317      	orrs	r7, r2
 8000270:	409c      	lsls	r4, r3
 8000272:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000276:	fa1f f58c 	uxth.w	r5, ip
 800027a:	fbb7 f1fe 	udiv	r1, r7, lr
 800027e:	0c22      	lsrs	r2, r4, #16
 8000280:	fb0e 7711 	mls	r7, lr, r1, r7
 8000284:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000288:	fb01 f005 	mul.w	r0, r1, r5
 800028c:	4290      	cmp	r0, r2
 800028e:	d90a      	bls.n	80002a6 <__udivmoddi4+0x62>
 8000290:	eb1c 0202 	adds.w	r2, ip, r2
 8000294:	f101 37ff 	add.w	r7, r1, #4294967295
 8000298:	f080 811c 	bcs.w	80004d4 <__udivmoddi4+0x290>
 800029c:	4290      	cmp	r0, r2
 800029e:	f240 8119 	bls.w	80004d4 <__udivmoddi4+0x290>
 80002a2:	3902      	subs	r1, #2
 80002a4:	4462      	add	r2, ip
 80002a6:	1a12      	subs	r2, r2, r0
 80002a8:	b2a4      	uxth	r4, r4
 80002aa:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ae:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b6:	fb00 f505 	mul.w	r5, r0, r5
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x90>
 80002be:	eb1c 0404 	adds.w	r4, ip, r4
 80002c2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x294>
 80002ca:	42a5      	cmp	r5, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x294>
 80002d0:	4464      	add	r4, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d8:	1b64      	subs	r4, r4, r5
 80002da:	2100      	movs	r1, #0
 80002dc:	b11e      	cbz	r6, 80002e6 <__udivmoddi4+0xa2>
 80002de:	40dc      	lsrs	r4, r3
 80002e0:	2300      	movs	r3, #0
 80002e2:	e9c6 4300 	strd	r4, r3, [r6]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d908      	bls.n	8000300 <__udivmoddi4+0xbc>
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f000 80ed 	beq.w	80004ce <__udivmoddi4+0x28a>
 80002f4:	2100      	movs	r1, #0
 80002f6:	e9c6 0500 	strd	r0, r5, [r6]
 80002fa:	4608      	mov	r0, r1
 80002fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000300:	fab3 f183 	clz	r1, r3
 8000304:	2900      	cmp	r1, #0
 8000306:	d149      	bne.n	800039c <__udivmoddi4+0x158>
 8000308:	42ab      	cmp	r3, r5
 800030a:	d302      	bcc.n	8000312 <__udivmoddi4+0xce>
 800030c:	4282      	cmp	r2, r0
 800030e:	f200 80f8 	bhi.w	8000502 <__udivmoddi4+0x2be>
 8000312:	1a84      	subs	r4, r0, r2
 8000314:	eb65 0203 	sbc.w	r2, r5, r3
 8000318:	2001      	movs	r0, #1
 800031a:	4617      	mov	r7, r2
 800031c:	2e00      	cmp	r6, #0
 800031e:	d0e2      	beq.n	80002e6 <__udivmoddi4+0xa2>
 8000320:	e9c6 4700 	strd	r4, r7, [r6]
 8000324:	e7df      	b.n	80002e6 <__udivmoddi4+0xa2>
 8000326:	b902      	cbnz	r2, 800032a <__udivmoddi4+0xe6>
 8000328:	deff      	udf	#255	; 0xff
 800032a:	fab2 f382 	clz	r3, r2
 800032e:	2b00      	cmp	r3, #0
 8000330:	f040 8090 	bne.w	8000454 <__udivmoddi4+0x210>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f fe8c 	uxth.w	lr, ip
 800033e:	2101      	movs	r1, #1
 8000340:	fbb2 f5f7 	udiv	r5, r2, r7
 8000344:	fb07 2015 	mls	r0, r7, r5, r2
 8000348:	0c22      	lsrs	r2, r4, #16
 800034a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034e:	fb0e f005 	mul.w	r0, lr, r5
 8000352:	4290      	cmp	r0, r2
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x124>
 8000356:	eb1c 0202 	adds.w	r2, ip, r2
 800035a:	f105 38ff 	add.w	r8, r5, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x122>
 8000360:	4290      	cmp	r0, r2
 8000362:	f200 80cb 	bhi.w	80004fc <__udivmoddi4+0x2b8>
 8000366:	4645      	mov	r5, r8
 8000368:	1a12      	subs	r2, r2, r0
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000370:	fb07 2210 	mls	r2, r7, r0, r2
 8000374:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000378:	fb0e fe00 	mul.w	lr, lr, r0
 800037c:	45a6      	cmp	lr, r4
 800037e:	d908      	bls.n	8000392 <__udivmoddi4+0x14e>
 8000380:	eb1c 0404 	adds.w	r4, ip, r4
 8000384:	f100 32ff 	add.w	r2, r0, #4294967295
 8000388:	d202      	bcs.n	8000390 <__udivmoddi4+0x14c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f200 80bb 	bhi.w	8000506 <__udivmoddi4+0x2c2>
 8000390:	4610      	mov	r0, r2
 8000392:	eba4 040e 	sub.w	r4, r4, lr
 8000396:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039a:	e79f      	b.n	80002dc <__udivmoddi4+0x98>
 800039c:	f1c1 0720 	rsb	r7, r1, #32
 80003a0:	408b      	lsls	r3, r1
 80003a2:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a6:	ea4c 0c03 	orr.w	ip, ip, r3
 80003aa:	fa05 f401 	lsl.w	r4, r5, r1
 80003ae:	fa20 f307 	lsr.w	r3, r0, r7
 80003b2:	40fd      	lsrs	r5, r7
 80003b4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b8:	4323      	orrs	r3, r4
 80003ba:	fbb5 f8f9 	udiv	r8, r5, r9
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	fb09 5518 	mls	r5, r9, r8, r5
 80003c6:	0c1c      	lsrs	r4, r3, #16
 80003c8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003cc:	fb08 f50e 	mul.w	r5, r8, lr
 80003d0:	42a5      	cmp	r5, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	fa00 f001 	lsl.w	r0, r0, r1
 80003da:	d90b      	bls.n	80003f4 <__udivmoddi4+0x1b0>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e4:	f080 8088 	bcs.w	80004f8 <__udivmoddi4+0x2b4>
 80003e8:	42a5      	cmp	r5, r4
 80003ea:	f240 8085 	bls.w	80004f8 <__udivmoddi4+0x2b4>
 80003ee:	f1a8 0802 	sub.w	r8, r8, #2
 80003f2:	4464      	add	r4, ip
 80003f4:	1b64      	subs	r4, r4, r5
 80003f6:	b29d      	uxth	r5, r3
 80003f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000400:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000404:	fb03 fe0e 	mul.w	lr, r3, lr
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1da>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f103 35ff 	add.w	r5, r3, #4294967295
 8000414:	d26c      	bcs.n	80004f0 <__udivmoddi4+0x2ac>
 8000416:	45a6      	cmp	lr, r4
 8000418:	d96a      	bls.n	80004f0 <__udivmoddi4+0x2ac>
 800041a:	3b02      	subs	r3, #2
 800041c:	4464      	add	r4, ip
 800041e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000422:	fba3 9502 	umull	r9, r5, r3, r2
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	42ac      	cmp	r4, r5
 800042c:	46c8      	mov	r8, r9
 800042e:	46ae      	mov	lr, r5
 8000430:	d356      	bcc.n	80004e0 <__udivmoddi4+0x29c>
 8000432:	d053      	beq.n	80004dc <__udivmoddi4+0x298>
 8000434:	b156      	cbz	r6, 800044c <__udivmoddi4+0x208>
 8000436:	ebb0 0208 	subs.w	r2, r0, r8
 800043a:	eb64 040e 	sbc.w	r4, r4, lr
 800043e:	fa04 f707 	lsl.w	r7, r4, r7
 8000442:	40ca      	lsrs	r2, r1
 8000444:	40cc      	lsrs	r4, r1
 8000446:	4317      	orrs	r7, r2
 8000448:	e9c6 7400 	strd	r7, r4, [r6]
 800044c:	4618      	mov	r0, r3
 800044e:	2100      	movs	r1, #0
 8000450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000454:	f1c3 0120 	rsb	r1, r3, #32
 8000458:	fa02 fc03 	lsl.w	ip, r2, r3
 800045c:	fa20 f201 	lsr.w	r2, r0, r1
 8000460:	fa25 f101 	lsr.w	r1, r5, r1
 8000464:	409d      	lsls	r5, r3
 8000466:	432a      	orrs	r2, r5
 8000468:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800046c:	fa1f fe8c 	uxth.w	lr, ip
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1510 	mls	r5, r7, r0, r1
 8000478:	0c11      	lsrs	r1, r2, #16
 800047a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047e:	fb00 f50e 	mul.w	r5, r0, lr
 8000482:	428d      	cmp	r5, r1
 8000484:	fa04 f403 	lsl.w	r4, r4, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x258>
 800048a:	eb1c 0101 	adds.w	r1, ip, r1
 800048e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000492:	d22f      	bcs.n	80004f4 <__udivmoddi4+0x2b0>
 8000494:	428d      	cmp	r5, r1
 8000496:	d92d      	bls.n	80004f4 <__udivmoddi4+0x2b0>
 8000498:	3802      	subs	r0, #2
 800049a:	4461      	add	r1, ip
 800049c:	1b49      	subs	r1, r1, r5
 800049e:	b292      	uxth	r2, r2
 80004a0:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a4:	fb07 1115 	mls	r1, r7, r5, r1
 80004a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004ac:	fb05 f10e 	mul.w	r1, r5, lr
 80004b0:	4291      	cmp	r1, r2
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x282>
 80004b4:	eb1c 0202 	adds.w	r2, ip, r2
 80004b8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004bc:	d216      	bcs.n	80004ec <__udivmoddi4+0x2a8>
 80004be:	4291      	cmp	r1, r2
 80004c0:	d914      	bls.n	80004ec <__udivmoddi4+0x2a8>
 80004c2:	3d02      	subs	r5, #2
 80004c4:	4462      	add	r2, ip
 80004c6:	1a52      	subs	r2, r2, r1
 80004c8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004cc:	e738      	b.n	8000340 <__udivmoddi4+0xfc>
 80004ce:	4631      	mov	r1, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e708      	b.n	80002e6 <__udivmoddi4+0xa2>
 80004d4:	4639      	mov	r1, r7
 80004d6:	e6e6      	b.n	80002a6 <__udivmoddi4+0x62>
 80004d8:	4610      	mov	r0, r2
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x90>
 80004dc:	4548      	cmp	r0, r9
 80004de:	d2a9      	bcs.n	8000434 <__udivmoddi4+0x1f0>
 80004e0:	ebb9 0802 	subs.w	r8, r9, r2
 80004e4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e8:	3b01      	subs	r3, #1
 80004ea:	e7a3      	b.n	8000434 <__udivmoddi4+0x1f0>
 80004ec:	4645      	mov	r5, r8
 80004ee:	e7ea      	b.n	80004c6 <__udivmoddi4+0x282>
 80004f0:	462b      	mov	r3, r5
 80004f2:	e794      	b.n	800041e <__udivmoddi4+0x1da>
 80004f4:	4640      	mov	r0, r8
 80004f6:	e7d1      	b.n	800049c <__udivmoddi4+0x258>
 80004f8:	46d0      	mov	r8, sl
 80004fa:	e77b      	b.n	80003f4 <__udivmoddi4+0x1b0>
 80004fc:	3d02      	subs	r5, #2
 80004fe:	4462      	add	r2, ip
 8000500:	e732      	b.n	8000368 <__udivmoddi4+0x124>
 8000502:	4608      	mov	r0, r1
 8000504:	e70a      	b.n	800031c <__udivmoddi4+0xd8>
 8000506:	4464      	add	r4, ip
 8000508:	3802      	subs	r0, #2
 800050a:	e742      	b.n	8000392 <__udivmoddi4+0x14e>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <shift_reg_init>:
 * @param	hspi	The pointer to the SPI handle. This should be directly available from the cubeMX setup code
 * @param 	latch_port	A pointer to latch signal port on the chip.
 * @param	latch_pin	The pin number of the latch signal pin
 */
void shift_reg_init(GPIO_TypeDef *shcp_port, GPIO_TypeDef *stcp_port, GPIO_TypeDef *data_port,
                    uint16_t shcp_pin, uint16_t stcp_pin, uint16_t data_pin) {
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
 8000516:	60f8      	str	r0, [r7, #12]
 8000518:	60b9      	str	r1, [r7, #8]
 800051a:	607a      	str	r2, [r7, #4]
 800051c:	807b      	strh	r3, [r7, #2]
    sr_stcp_port = stcp_port;
 800051e:	4a0c      	ldr	r2, [pc, #48]	; (8000550 <shift_reg_init+0x40>)
 8000520:	68bb      	ldr	r3, [r7, #8]
 8000522:	6013      	str	r3, [r2, #0]
    sr_shcp_port = shcp_port;
 8000524:	4a0b      	ldr	r2, [pc, #44]	; (8000554 <shift_reg_init+0x44>)
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	6013      	str	r3, [r2, #0]
    sr_data_port = data_port;
 800052a:	4a0b      	ldr	r2, [pc, #44]	; (8000558 <shift_reg_init+0x48>)
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	6013      	str	r3, [r2, #0]
    sr_stcp_pin = stcp_pin;
 8000530:	4a0a      	ldr	r2, [pc, #40]	; (800055c <shift_reg_init+0x4c>)
 8000532:	8b3b      	ldrh	r3, [r7, #24]
 8000534:	8013      	strh	r3, [r2, #0]
    sr_shcp_pin = shcp_pin;
 8000536:	4a0a      	ldr	r2, [pc, #40]	; (8000560 <shift_reg_init+0x50>)
 8000538:	887b      	ldrh	r3, [r7, #2]
 800053a:	8013      	strh	r3, [r2, #0]
    sr_data_pin = data_pin;
 800053c:	4a09      	ldr	r2, [pc, #36]	; (8000564 <shift_reg_init+0x54>)
 800053e:	8bbb      	ldrh	r3, [r7, #28]
 8000540:	8013      	strh	r3, [r2, #0]
}
 8000542:	bf00      	nop
 8000544:	3714      	adds	r7, #20
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	20000128 	.word	0x20000128
 8000554:	2000012c 	.word	0x2000012c
 8000558:	20000130 	.word	0x20000130
 800055c:	20000134 	.word	0x20000134
 8000560:	20000136 	.word	0x20000136
 8000564:	20000138 	.word	0x20000138

08000568 <shift_reg_display>:
 * 					is passed, then it is written to the right digit on the display.
 * @param	dp1		the left decimal point on the LED display, should be either DP1 or 0
 * @param	dp2 	the right decimal point on the LED display, should be either DP2 or 0
 * @retval	-1 if an error occurred, 0 if success
 */
int shift_reg_display(uint8_t num, uint8_t dp1, uint8_t dp2) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b08a      	sub	sp, #40	; 0x28
 800056c:	af00      	add	r7, sp, #0
 800056e:	4603      	mov	r3, r0
 8000570:	71fb      	strb	r3, [r7, #7]
 8000572:	460b      	mov	r3, r1
 8000574:	71bb      	strb	r3, [r7, #6]
 8000576:	4613      	mov	r3, r2
 8000578:	717b      	strb	r3, [r7, #5]
	char num_str[8];
	if (num >= 100 || num < 0) {
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	2b63      	cmp	r3, #99	; 0x63
 800057e:	d902      	bls.n	8000586 <shift_reg_display+0x1e>
		return -1;
 8000580:	f04f 33ff 	mov.w	r3, #4294967295
 8000584:	e08b      	b.n	800069e <shift_reg_display+0x136>
	}
	itoa(num, num_str, 10);
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	f107 0110 	add.w	r1, r7, #16
 800058c:	220a      	movs	r2, #10
 800058e:	4618      	mov	r0, r3
 8000590:	f008 fd50 	bl	8009034 <itoa>
	unsigned int len = strlen(num_str);
 8000594:	f107 0310 	add.w	r3, r7, #16
 8000598:	4618      	mov	r0, r3
 800059a:	f7ff fe33 	bl	8000204 <strlen>
 800059e:	61f8      	str	r0, [r7, #28]
	uint8_t spi_data[2];
	if (len == 1) {
 80005a0:	69fb      	ldr	r3, [r7, #28]
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	d10a      	bne.n	80005bc <shift_reg_display+0x54>
		// defaults to displaying on the lowest digit
		spi_data[0] = DIGITS2[num_str[0]-'0'] | dp1;
 80005a6:	7c3b      	ldrb	r3, [r7, #16]
 80005a8:	3b30      	subs	r3, #48	; 0x30
 80005aa:	4a3f      	ldr	r2, [pc, #252]	; (80006a8 <shift_reg_display+0x140>)
 80005ac:	5cd2      	ldrb	r2, [r2, r3]
 80005ae:	79bb      	ldrb	r3, [r7, #6]
 80005b0:	4313      	orrs	r3, r2
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	733b      	strb	r3, [r7, #12]
		spi_data[1] = dp2;
 80005b6:	797b      	ldrb	r3, [r7, #5]
 80005b8:	737b      	strb	r3, [r7, #13]
 80005ba:	e016      	b.n	80005ea <shift_reg_display+0x82>
	} else if (len == 2) {
 80005bc:	69fb      	ldr	r3, [r7, #28]
 80005be:	2b02      	cmp	r3, #2
 80005c0:	d110      	bne.n	80005e4 <shift_reg_display+0x7c>
		spi_data[0] = DIGITS2[num_str[1]-'0'] | dp2;
 80005c2:	7c7b      	ldrb	r3, [r7, #17]
 80005c4:	3b30      	subs	r3, #48	; 0x30
 80005c6:	4a38      	ldr	r2, [pc, #224]	; (80006a8 <shift_reg_display+0x140>)
 80005c8:	5cd2      	ldrb	r2, [r2, r3]
 80005ca:	797b      	ldrb	r3, [r7, #5]
 80005cc:	4313      	orrs	r3, r2
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	733b      	strb	r3, [r7, #12]
		spi_data[1] = DIGITS1[num_str[0]-'0'] | dp1;
 80005d2:	7c3b      	ldrb	r3, [r7, #16]
 80005d4:	3b30      	subs	r3, #48	; 0x30
 80005d6:	4a35      	ldr	r2, [pc, #212]	; (80006ac <shift_reg_display+0x144>)
 80005d8:	5cd2      	ldrb	r2, [r2, r3]
 80005da:	79bb      	ldrb	r3, [r7, #6]
 80005dc:	4313      	orrs	r3, r2
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	737b      	strb	r3, [r7, #13]
 80005e2:	e002      	b.n	80005ea <shift_reg_display+0x82>
	} else {
		return -1;
 80005e4:	f04f 33ff 	mov.w	r3, #4294967295
 80005e8:	e059      	b.n	800069e <shift_reg_display+0x136>
	}
	spi_data[0] = 1;
 80005ea:	2301      	movs	r3, #1
 80005ec:	733b      	strb	r3, [r7, #12]
	spi_data[1] = 1;
 80005ee:	2301      	movs	r3, #1
 80005f0:	737b      	strb	r3, [r7, #13]
	// set stcp (storage clock) pin to low, as the data goes to the storage register
    // on the rising edge of the clock
	HAL_GPIO_WritePin(sr_stcp_port, sr_stcp_pin, GPIO_PIN_RESET);
 80005f2:	4b2f      	ldr	r3, [pc, #188]	; (80006b0 <shift_reg_display+0x148>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4a2f      	ldr	r2, [pc, #188]	; (80006b4 <shift_reg_display+0x14c>)
 80005f8:	8811      	ldrh	r1, [r2, #0]
 80005fa:	2200      	movs	r2, #0
 80005fc:	4618      	mov	r0, r3
 80005fe:	f002 fa55 	bl	8002aac <HAL_GPIO_WritePin>
	// write using SPI
	for (int i = 0; i < 2; i++) {
 8000602:	2300      	movs	r3, #0
 8000604:	627b      	str	r3, [r7, #36]	; 0x24
 8000606:	e03e      	b.n	8000686 <shift_reg_display+0x11e>
        for (int j = 0; j < 8; j++) {
 8000608:	2300      	movs	r3, #0
 800060a:	623b      	str	r3, [r7, #32]
 800060c:	e035      	b.n	800067a <shift_reg_display+0x112>
            // Lower the shift register clock. The shift happens on the rising edge.
            HAL_GPIO_WritePin(sr_shcp_port, sr_shcp_pin, GPIO_PIN_RESET);
 800060e:	4b2a      	ldr	r3, [pc, #168]	; (80006b8 <shift_reg_display+0x150>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4a2a      	ldr	r2, [pc, #168]	; (80006bc <shift_reg_display+0x154>)
 8000614:	8811      	ldrh	r1, [r2, #0]
 8000616:	2200      	movs	r2, #0
 8000618:	4618      	mov	r0, r3
 800061a:	f002 fa47 	bl	8002aac <HAL_GPIO_WritePin>
            uint8_t lsb = spi_data[i] & 1;
 800061e:	f107 020c 	add.w	r2, r7, #12
 8000622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000624:	4413      	add	r3, r2
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	f003 0301 	and.w	r3, r3, #1
 800062c:	76fb      	strb	r3, [r7, #27]
            spi_data[i] >>= 1;
 800062e:	f107 020c 	add.w	r2, r7, #12
 8000632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000634:	4413      	add	r3, r2
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	085b      	lsrs	r3, r3, #1
 800063a:	b2d9      	uxtb	r1, r3
 800063c:	f107 020c 	add.w	r2, r7, #12
 8000640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000642:	4413      	add	r3, r2
 8000644:	460a      	mov	r2, r1
 8000646:	701a      	strb	r2, [r3, #0]
            HAL_GPIO_WritePin(sr_data_port, sr_data_pin, lsb);
 8000648:	4b1d      	ldr	r3, [pc, #116]	; (80006c0 <shift_reg_display+0x158>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a1d      	ldr	r2, [pc, #116]	; (80006c4 <shift_reg_display+0x15c>)
 800064e:	8811      	ldrh	r1, [r2, #0]
 8000650:	7efa      	ldrb	r2, [r7, #27]
 8000652:	4618      	mov	r0, r3
 8000654:	f002 fa2a 	bl	8002aac <HAL_GPIO_WritePin>
            HAL_Delay(1);
 8000658:	2001      	movs	r0, #1
 800065a:	f000 fd11 	bl	8001080 <HAL_Delay>
            HAL_GPIO_WritePin(sr_shcp_port, sr_shcp_pin, GPIO_PIN_SET);
 800065e:	4b16      	ldr	r3, [pc, #88]	; (80006b8 <shift_reg_display+0x150>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4a16      	ldr	r2, [pc, #88]	; (80006bc <shift_reg_display+0x154>)
 8000664:	8811      	ldrh	r1, [r2, #0]
 8000666:	2201      	movs	r2, #1
 8000668:	4618      	mov	r0, r3
 800066a:	f002 fa1f 	bl	8002aac <HAL_GPIO_WritePin>
            HAL_Delay(1);
 800066e:	2001      	movs	r0, #1
 8000670:	f000 fd06 	bl	8001080 <HAL_Delay>
        for (int j = 0; j < 8; j++) {
 8000674:	6a3b      	ldr	r3, [r7, #32]
 8000676:	3301      	adds	r3, #1
 8000678:	623b      	str	r3, [r7, #32]
 800067a:	6a3b      	ldr	r3, [r7, #32]
 800067c:	2b07      	cmp	r3, #7
 800067e:	ddc6      	ble.n	800060e <shift_reg_display+0xa6>
	for (int i = 0; i < 2; i++) {
 8000680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000682:	3301      	adds	r3, #1
 8000684:	627b      	str	r3, [r7, #36]	; 0x24
 8000686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000688:	2b01      	cmp	r3, #1
 800068a:	ddbd      	ble.n	8000608 <shift_reg_display+0xa0>
        }
	}
	// once data is ready set latch pin to high
    HAL_GPIO_WritePin(sr_stcp_port, sr_stcp_pin, GPIO_PIN_SET);
 800068c:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <shift_reg_display+0x148>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a08      	ldr	r2, [pc, #32]	; (80006b4 <shift_reg_display+0x14c>)
 8000692:	8811      	ldrh	r1, [r2, #0]
 8000694:	2201      	movs	r2, #1
 8000696:	4618      	mov	r0, r3
 8000698:	f002 fa08 	bl	8002aac <HAL_GPIO_WritePin>
	return 0;
 800069c:	2300      	movs	r3, #0
}
 800069e:	4618      	mov	r0, r3
 80006a0:	3728      	adds	r7, #40	; 0x28
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	08009180 	.word	0x08009180
 80006ac:	08009174 	.word	0x08009174
 80006b0:	20000128 	.word	0x20000128
 80006b4:	20000134 	.word	0x20000134
 80006b8:	2000012c 	.word	0x2000012c
 80006bc:	20000136 	.word	0x20000136
 80006c0:	20000130 	.word	0x20000130
 80006c4:	20000138 	.word	0x20000138

080006c8 <ADC_channel_select>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ADC_channel_select(int channel)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b086      	sub	sp, #24
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006d0:	f107 0308 	add.w	r3, r7, #8
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
  sConfig.Channel = channel;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = 1;
 80006e2:	2301      	movs	r3, #1
 80006e4:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006e6:	2300      	movs	r3, #0
 80006e8:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ea:	f107 0308 	add.w	r3, r7, #8
 80006ee:	4619      	mov	r1, r3
 80006f0:	4805      	ldr	r0, [pc, #20]	; (8000708 <ADC_channel_select+0x40>)
 80006f2:	f000 fead 	bl	8001450 <HAL_ADC_ConfigChannel>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <ADC_channel_select+0x38>
  {
    Error_Handler();
 80006fc:	f000 fac0 	bl	8000c80 <Error_Handler>
  }
}
 8000700:	bf00      	nop
 8000702:	3718      	adds	r7, #24
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	2000013c 	.word	0x2000013c

0800070c <HAL_CAN_RxFifo0MsgPendingCallback>:
	HAL_GPIO_TogglePin(GPIOA, DEBUG_LED_0_Pin);
}


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);	// don't delay after this!
 8000714:	4b04      	ldr	r3, [pc, #16]	; (8000728 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>)
 8000716:	4a05      	ldr	r2, [pc, #20]	; (800072c <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 8000718:	2100      	movs	r1, #0
 800071a:	6878      	ldr	r0, [r7, #4]
 800071c:	f001 fbb1 	bl	8001e82 <HAL_CAN_GetRxMessage>
}
 8000720:	bf00      	nop
 8000722:	3708      	adds	r7, #8
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	200001b8 	.word	0x200001b8
 800072c:	200001e0 	.word	0x200001e0

08000730 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000736:	f000 fc31 	bl	8000f9c <HAL_Init>

  /* USER CODE BEGIN Init */
  TxHeader.IDE = CAN_ID_STD;
 800073a:	4b55      	ldr	r3, [pc, #340]	; (8000890 <main+0x160>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  TxHeader.StdId = 0x466;
 8000740:	4b53      	ldr	r3, [pc, #332]	; (8000890 <main+0x160>)
 8000742:	f240 4266 	movw	r2, #1126	; 0x466
 8000746:	601a      	str	r2, [r3, #0]
  TxHeader.RTR = CAN_RTR_DATA;
 8000748:	4b51      	ldr	r3, [pc, #324]	; (8000890 <main+0x160>)
 800074a:	2200      	movs	r2, #0
 800074c:	60da      	str	r2, [r3, #12]
  TxHeader.DLC = 5;
 800074e:	4b50      	ldr	r3, [pc, #320]	; (8000890 <main+0x160>)
 8000750:	2205      	movs	r2, #5
 8000752:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 8000754:	4b4e      	ldr	r3, [pc, #312]	; (8000890 <main+0x160>)
 8000756:	2200      	movs	r2, #0
 8000758:	751a      	strb	r2, [r3, #20]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800075a:	f000 f8b3 	bl	80008c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800075e:	f000 f9c1 	bl	8000ae4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000762:	f000 f91b 	bl	800099c <MX_ADC1_Init>
  MX_CAN1_Init();
 8000766:	f000 f96b 	bl	8000a40 <MX_CAN1_Init>
  MX_USB_DEVICE_Init();
 800076a:	f007 fee7 	bl	800853c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 800076e:	4849      	ldr	r0, [pc, #292]	; (8000894 <main+0x164>)
 8000770:	f001 fa68 	bl	8001c44 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000774:	2102      	movs	r1, #2
 8000776:	4847      	ldr	r0, [pc, #284]	; (8000894 <main+0x164>)
 8000778:	f001 fc95 	bl	80020a6 <HAL_CAN_ActivateNotification>

  shift_reg_init(ShiftRegSHCP_GPIO_Port, ShiftRegSTCP_GPIO_Port, ShiftRegDAT_GPIO_Port,
 800077c:	2310      	movs	r3, #16
 800077e:	9301      	str	r3, [sp, #4]
 8000780:	2340      	movs	r3, #64	; 0x40
 8000782:	9300      	str	r3, [sp, #0]
 8000784:	2320      	movs	r3, #32
 8000786:	4a44      	ldr	r2, [pc, #272]	; (8000898 <main+0x168>)
 8000788:	4943      	ldr	r1, [pc, #268]	; (8000898 <main+0x168>)
 800078a:	4843      	ldr	r0, [pc, #268]	; (8000898 <main+0x168>)
 800078c:	f7ff fec0 	bl	8000510 <shift_reg_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  hvil_out = HAL_GPIO_ReadPin(GPIOE, HVIL_OUT_OBSERVE_Pin);
 8000790:	2104      	movs	r1, #4
 8000792:	4842      	ldr	r0, [pc, #264]	; (800089c <main+0x16c>)
 8000794:	f002 f972 	bl	8002a7c <HAL_GPIO_ReadPin>
 8000798:	4603      	mov	r3, r0
 800079a:	461a      	mov	r2, r3
 800079c:	4b40      	ldr	r3, [pc, #256]	; (80008a0 <main+0x170>)
 800079e:	701a      	strb	r2, [r3, #0]
	  hvil_logic = HAL_GPIO_ReadPin(GPIOE, HVIL_LOGIC_OBSERVE_Pin);
 80007a0:	2140      	movs	r1, #64	; 0x40
 80007a2:	483e      	ldr	r0, [pc, #248]	; (800089c <main+0x16c>)
 80007a4:	f002 f96a 	bl	8002a7c <HAL_GPIO_ReadPin>
 80007a8:	4603      	mov	r3, r0
 80007aa:	461a      	mov	r2, r3
 80007ac:	4b3d      	ldr	r3, [pc, #244]	; (80008a4 <main+0x174>)
 80007ae:	701a      	strb	r2, [r3, #0]
	  hvil_in = HAL_GPIO_ReadPin(GPIOE, HVIL_IN_OBSERVE_Pin);
 80007b0:	2110      	movs	r1, #16
 80007b2:	483a      	ldr	r0, [pc, #232]	; (800089c <main+0x16c>)
 80007b4:	f002 f962 	bl	8002a7c <HAL_GPIO_ReadPin>
 80007b8:	4603      	mov	r3, r0
 80007ba:	461a      	mov	r2, r3
 80007bc:	4b3a      	ldr	r3, [pc, #232]	; (80008a8 <main+0x178>)
 80007be:	701a      	strb	r2, [r3, #0]
	  brakes_on = !HAL_GPIO_ReadPin(GPIOE, N_BRAKES_ON_Pin);
 80007c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007c4:	4835      	ldr	r0, [pc, #212]	; (800089c <main+0x16c>)
 80007c6:	f002 f959 	bl	8002a7c <HAL_GPIO_ReadPin>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	bf0c      	ite	eq
 80007d0:	2301      	moveq	r3, #1
 80007d2:	2300      	movne	r3, #0
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	461a      	mov	r2, r3
 80007d8:	4b34      	ldr	r3, [pc, #208]	; (80008ac <main+0x17c>)
 80007da:	701a      	strb	r2, [r3, #0]

	  if (HAL_GPIO_ReadPin(GPIOE, RANGE_ANOMALY_Pin)) {
 80007dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007e0:	482e      	ldr	r0, [pc, #184]	; (800089c <main+0x16c>)
 80007e2:	f002 f94b 	bl	8002a7c <HAL_GPIO_ReadPin>
//		  Error_Handler();
	  }

	  /* Read petal sensor values from ADC */
	  for (int i = 0; i < 4; i++) {
 80007e6:	2300      	movs	r3, #0
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	e01d      	b.n	8000828 <main+0xf8>
		  HAL_ADC_Start(&hadc1);
 80007ec:	4830      	ldr	r0, [pc, #192]	; (80008b0 <main+0x180>)
 80007ee:	f000 fcaf 	bl	8001150 <HAL_ADC_Start>
		  ADC_channel_select(sensor_channels[i]);
 80007f2:	4a30      	ldr	r2, [pc, #192]	; (80008b4 <main+0x184>)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff ff64 	bl	80006c8 <ADC_channel_select>
		  HAL_ADC_PollForConversion(&hadc1, ADC_TIMEOUT_MS);
 8000800:	2164      	movs	r1, #100	; 0x64
 8000802:	482b      	ldr	r0, [pc, #172]	; (80008b0 <main+0x180>)
 8000804:	f000 fd8b 	bl	800131e <HAL_ADC_PollForConversion>
		  pedal_vals[i] = HAL_ADC_GetValue(&hadc1);
 8000808:	4829      	ldr	r0, [pc, #164]	; (80008b0 <main+0x180>)
 800080a:	f000 fe13 	bl	8001434 <HAL_ADC_GetValue>
 800080e:	4603      	mov	r3, r0
 8000810:	b2d9      	uxtb	r1, r3
 8000812:	4a29      	ldr	r2, [pc, #164]	; (80008b8 <main+0x188>)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	4413      	add	r3, r2
 8000818:	460a      	mov	r2, r1
 800081a:	701a      	strb	r2, [r3, #0]
		  HAL_ADC_Stop(&hadc1);
 800081c:	4824      	ldr	r0, [pc, #144]	; (80008b0 <main+0x180>)
 800081e:	f000 fd4b 	bl	80012b8 <HAL_ADC_Stop>
	  for (int i = 0; i < 4; i++) {
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	3301      	adds	r3, #1
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	2b03      	cmp	r3, #3
 800082c:	ddde      	ble.n	80007ec <main+0xbc>
	  }
	  pedal_vals[4] = brakes_on;
 800082e:	4b1f      	ldr	r3, [pc, #124]	; (80008ac <main+0x17c>)
 8000830:	781a      	ldrb	r2, [r3, #0]
 8000832:	4b21      	ldr	r3, [pc, #132]	; (80008b8 <main+0x188>)
 8000834:	711a      	strb	r2, [r3, #4]


	  for (int i = 0; i < 5; i++) {
 8000836:	2300      	movs	r3, #0
 8000838:	603b      	str	r3, [r7, #0]
 800083a:	e00e      	b.n	800085a <main+0x12a>
		  TxData[i] = 10 * i;
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	b2db      	uxtb	r3, r3
 8000840:	461a      	mov	r2, r3
 8000842:	0092      	lsls	r2, r2, #2
 8000844:	4413      	add	r3, r2
 8000846:	005b      	lsls	r3, r3, #1
 8000848:	b2d9      	uxtb	r1, r3
 800084a:	4a1c      	ldr	r2, [pc, #112]	; (80008bc <main+0x18c>)
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	4413      	add	r3, r2
 8000850:	460a      	mov	r2, r1
 8000852:	701a      	strb	r2, [r3, #0]
	  for (int i = 0; i < 5; i++) {
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	3301      	adds	r3, #1
 8000858:	603b      	str	r3, [r7, #0]
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	2b04      	cmp	r3, #4
 800085e:	dded      	ble.n	800083c <main+0x10c>
	  }

	  HAL_Delay(1);	// so that the CAN transmissions don't pile up
 8000860:	2001      	movs	r0, #1
 8000862:	f000 fc0d 	bl	8001080 <HAL_Delay>
	  if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK) {
 8000866:	4b16      	ldr	r3, [pc, #88]	; (80008c0 <main+0x190>)
 8000868:	4a14      	ldr	r2, [pc, #80]	; (80008bc <main+0x18c>)
 800086a:	4909      	ldr	r1, [pc, #36]	; (8000890 <main+0x160>)
 800086c:	4809      	ldr	r0, [pc, #36]	; (8000894 <main+0x164>)
 800086e:	f001 fa2d 	bl	8001ccc <HAL_CAN_AddTxMessage>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d004      	beq.n	8000882 <main+0x152>
		  HAL_GPIO_WritePin(GPIOA, DEBUG_LED_1_Pin, GPIO_PIN_SET);
 8000878:	2201      	movs	r2, #1
 800087a:	2108      	movs	r1, #8
 800087c:	4806      	ldr	r0, [pc, #24]	; (8000898 <main+0x168>)
 800087e:	f002 f915 	bl	8002aac <HAL_GPIO_WritePin>
	//	   Error_Handler ();
	  }
//	  HAL_GPIO_WritePin(DEBUG_LED_0_GPIO_Port, DEBUG_LED_0_Pin, GPIO_PIN_SET);

	  shift_reg_display(00, DP1, DP2);
 8000882:	23df      	movs	r3, #223	; 0xdf
 8000884:	22ff      	movs	r2, #255	; 0xff
 8000886:	4619      	mov	r1, r3
 8000888:	2000      	movs	r0, #0
 800088a:	f7ff fe6d 	bl	8000568 <shift_reg_display>
	  hvil_out = HAL_GPIO_ReadPin(GPIOE, HVIL_OUT_OBSERVE_Pin);
 800088e:	e77f      	b.n	8000790 <main+0x60>
 8000890:	200001c8 	.word	0x200001c8
 8000894:	20000184 	.word	0x20000184
 8000898:	40020000 	.word	0x40020000
 800089c:	40021000 	.word	0x40021000
 80008a0:	200001ac 	.word	0x200001ac
 80008a4:	200001ad 	.word	0x200001ad
 80008a8:	200001ae 	.word	0x200001ae
 80008ac:	200001af 	.word	0x200001af
 80008b0:	2000013c 	.word	0x2000013c
 80008b4:	0800918c 	.word	0x0800918c
 80008b8:	200001c0 	.word	0x200001c0
 80008bc:	200001b0 	.word	0x200001b0
 80008c0:	200001fc 	.word	0x200001fc

080008c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b094      	sub	sp, #80	; 0x50
 80008c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ca:	f107 031c 	add.w	r3, r7, #28
 80008ce:	2234      	movs	r2, #52	; 0x34
 80008d0:	2100      	movs	r1, #0
 80008d2:	4618      	mov	r0, r3
 80008d4:	f008 fbf2 	bl	80090bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d8:	f107 0308 	add.w	r3, r7, #8
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]
 80008e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e8:	2300      	movs	r3, #0
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	4b29      	ldr	r3, [pc, #164]	; (8000994 <SystemClock_Config+0xd0>)
 80008ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f0:	4a28      	ldr	r2, [pc, #160]	; (8000994 <SystemClock_Config+0xd0>)
 80008f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f6:	6413      	str	r3, [r2, #64]	; 0x40
 80008f8:	4b26      	ldr	r3, [pc, #152]	; (8000994 <SystemClock_Config+0xd0>)
 80008fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000904:	2300      	movs	r3, #0
 8000906:	603b      	str	r3, [r7, #0]
 8000908:	4b23      	ldr	r3, [pc, #140]	; (8000998 <SystemClock_Config+0xd4>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a22      	ldr	r2, [pc, #136]	; (8000998 <SystemClock_Config+0xd4>)
 800090e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000912:	6013      	str	r3, [r2, #0]
 8000914:	4b20      	ldr	r3, [pc, #128]	; (8000998 <SystemClock_Config+0xd4>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800091c:	603b      	str	r3, [r7, #0]
 800091e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000920:	2301      	movs	r3, #1
 8000922:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000924:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000928:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800092a:	2302      	movs	r3, #2
 800092c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800092e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000932:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000934:	2304      	movs	r3, #4
 8000936:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000938:	2348      	movs	r3, #72	; 0x48
 800093a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800093c:	2302      	movs	r3, #2
 800093e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000940:	2303      	movs	r3, #3
 8000942:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000944:	2302      	movs	r3, #2
 8000946:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000948:	f107 031c 	add.w	r3, r7, #28
 800094c:	4618      	mov	r0, r3
 800094e:	f003 ff7d 	bl	800484c <HAL_RCC_OscConfig>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000958:	f000 f992 	bl	8000c80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800095c:	230f      	movs	r3, #15
 800095e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000960:	2302      	movs	r3, #2
 8000962:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000964:	2300      	movs	r3, #0
 8000966:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000968:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800096c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800096e:	2300      	movs	r3, #0
 8000970:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000972:	f107 0308 	add.w	r3, r7, #8
 8000976:	2102      	movs	r1, #2
 8000978:	4618      	mov	r0, r3
 800097a:	f003 fb79 	bl	8004070 <HAL_RCC_ClockConfig>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000984:	f000 f97c 	bl	8000c80 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000988:	f003 fc58 	bl	800423c <HAL_RCC_EnableCSS>
}
 800098c:	bf00      	nop
 800098e:	3750      	adds	r7, #80	; 0x50
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40023800 	.word	0x40023800
 8000998:	40007000 	.word	0x40007000

0800099c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009a2:	463b      	mov	r3, r7
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009ae:	4b21      	ldr	r3, [pc, #132]	; (8000a34 <MX_ADC1_Init+0x98>)
 80009b0:	4a21      	ldr	r2, [pc, #132]	; (8000a38 <MX_ADC1_Init+0x9c>)
 80009b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80009b4:	4b1f      	ldr	r3, [pc, #124]	; (8000a34 <MX_ADC1_Init+0x98>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009ba:	4b1e      	ldr	r3, [pc, #120]	; (8000a34 <MX_ADC1_Init+0x98>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80009c0:	4b1c      	ldr	r3, [pc, #112]	; (8000a34 <MX_ADC1_Init+0x98>)
 80009c2:	2201      	movs	r2, #1
 80009c4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80009c6:	4b1b      	ldr	r3, [pc, #108]	; (8000a34 <MX_ADC1_Init+0x98>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009cc:	4b19      	ldr	r3, [pc, #100]	; (8000a34 <MX_ADC1_Init+0x98>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009d4:	4b17      	ldr	r3, [pc, #92]	; (8000a34 <MX_ADC1_Init+0x98>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009da:	4b16      	ldr	r3, [pc, #88]	; (8000a34 <MX_ADC1_Init+0x98>)
 80009dc:	4a17      	ldr	r2, [pc, #92]	; (8000a3c <MX_ADC1_Init+0xa0>)
 80009de:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009e0:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <MX_ADC1_Init+0x98>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80009e6:	4b13      	ldr	r3, [pc, #76]	; (8000a34 <MX_ADC1_Init+0x98>)
 80009e8:	2201      	movs	r2, #1
 80009ea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009ec:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <MX_ADC1_Init+0x98>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009f4:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <MX_ADC1_Init+0x98>)
 80009f6:	2201      	movs	r2, #1
 80009f8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009fa:	480e      	ldr	r0, [pc, #56]	; (8000a34 <MX_ADC1_Init+0x98>)
 80009fc:	f000 fb64 	bl	80010c8 <HAL_ADC_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000a06:	f000 f93b 	bl	8000c80 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000a0a:	2307      	movs	r3, #7
 8000a0c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a12:	2300      	movs	r3, #0
 8000a14:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a16:	463b      	mov	r3, r7
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4806      	ldr	r0, [pc, #24]	; (8000a34 <MX_ADC1_Init+0x98>)
 8000a1c:	f000 fd18 	bl	8001450 <HAL_ADC_ConfigChannel>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000a26:	f000 f92b 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a2a:	bf00      	nop
 8000a2c:	3710      	adds	r7, #16
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	2000013c 	.word	0x2000013c
 8000a38:	40012000 	.word	0x40012000
 8000a3c:	0f000001 	.word	0x0f000001

08000a40 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08a      	sub	sp, #40	; 0x28
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000a46:	4b25      	ldr	r3, [pc, #148]	; (8000adc <MX_CAN1_Init+0x9c>)
 8000a48:	4a25      	ldr	r2, [pc, #148]	; (8000ae0 <MX_CAN1_Init+0xa0>)
 8000a4a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 8000a4c:	4b23      	ldr	r3, [pc, #140]	; (8000adc <MX_CAN1_Init+0x9c>)
 8000a4e:	2212      	movs	r2, #18
 8000a50:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 8000a52:	4b22      	ldr	r3, [pc, #136]	; (8000adc <MX_CAN1_Init+0x9c>)
 8000a54:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a58:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a5a:	4b20      	ldr	r3, [pc, #128]	; (8000adc <MX_CAN1_Init+0x9c>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000a60:	4b1e      	ldr	r3, [pc, #120]	; (8000adc <MX_CAN1_Init+0x9c>)
 8000a62:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a66:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000a68:	4b1c      	ldr	r3, [pc, #112]	; (8000adc <MX_CAN1_Init+0x9c>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a6e:	4b1b      	ldr	r3, [pc, #108]	; (8000adc <MX_CAN1_Init+0x9c>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a74:	4b19      	ldr	r3, [pc, #100]	; (8000adc <MX_CAN1_Init+0x9c>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a7a:	4b18      	ldr	r3, [pc, #96]	; (8000adc <MX_CAN1_Init+0x9c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a80:	4b16      	ldr	r3, [pc, #88]	; (8000adc <MX_CAN1_Init+0x9c>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a86:	4b15      	ldr	r3, [pc, #84]	; (8000adc <MX_CAN1_Init+0x9c>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a8c:	4b13      	ldr	r3, [pc, #76]	; (8000adc <MX_CAN1_Init+0x9c>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a92:	4812      	ldr	r0, [pc, #72]	; (8000adc <MX_CAN1_Init+0x9c>)
 8000a94:	f000 fefa 	bl	800188c <HAL_CAN_Init>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000a9e:	f000 f8ef 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;
  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 10;
 8000aa6:	230a      	movs	r3, #10
 8000aa8:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0x000;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x000;
 8000aba:	2300      	movs	r3, #0
 8000abc:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 0;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8000aca:	463b      	mov	r3, r7
 8000acc:	4619      	mov	r1, r3
 8000ace:	4803      	ldr	r0, [pc, #12]	; (8000adc <MX_CAN1_Init+0x9c>)
 8000ad0:	f000 ffd8 	bl	8001a84 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 8000ad4:	bf00      	nop
 8000ad6:	3728      	adds	r7, #40	; 0x28
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	20000184 	.word	0x20000184
 8000ae0:	40006400 	.word	0x40006400

08000ae4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08a      	sub	sp, #40	; 0x28
 8000ae8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aea:	f107 0314 	add.w	r3, r7, #20
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]
 8000af4:	609a      	str	r2, [r3, #8]
 8000af6:	60da      	str	r2, [r3, #12]
 8000af8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	613b      	str	r3, [r7, #16]
 8000afe:	4b5c      	ldr	r3, [pc, #368]	; (8000c70 <MX_GPIO_Init+0x18c>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a5b      	ldr	r2, [pc, #364]	; (8000c70 <MX_GPIO_Init+0x18c>)
 8000b04:	f043 0310 	orr.w	r3, r3, #16
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b59      	ldr	r3, [pc, #356]	; (8000c70 <MX_GPIO_Init+0x18c>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0310 	and.w	r3, r3, #16
 8000b12:	613b      	str	r3, [r7, #16]
 8000b14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	4b55      	ldr	r3, [pc, #340]	; (8000c70 <MX_GPIO_Init+0x18c>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a54      	ldr	r2, [pc, #336]	; (8000c70 <MX_GPIO_Init+0x18c>)
 8000b20:	f043 0304 	orr.w	r3, r3, #4
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b52      	ldr	r3, [pc, #328]	; (8000c70 <MX_GPIO_Init+0x18c>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0304 	and.w	r3, r3, #4
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	60bb      	str	r3, [r7, #8]
 8000b36:	4b4e      	ldr	r3, [pc, #312]	; (8000c70 <MX_GPIO_Init+0x18c>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a4d      	ldr	r2, [pc, #308]	; (8000c70 <MX_GPIO_Init+0x18c>)
 8000b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b4b      	ldr	r3, [pc, #300]	; (8000c70 <MX_GPIO_Init+0x18c>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b4a:	60bb      	str	r3, [r7, #8]
 8000b4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	607b      	str	r3, [r7, #4]
 8000b52:	4b47      	ldr	r3, [pc, #284]	; (8000c70 <MX_GPIO_Init+0x18c>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	4a46      	ldr	r2, [pc, #280]	; (8000c70 <MX_GPIO_Init+0x18c>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5e:	4b44      	ldr	r3, [pc, #272]	; (8000c70 <MX_GPIO_Init+0x18c>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	603b      	str	r3, [r7, #0]
 8000b6e:	4b40      	ldr	r3, [pc, #256]	; (8000c70 <MX_GPIO_Init+0x18c>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a3f      	ldr	r2, [pc, #252]	; (8000c70 <MX_GPIO_Init+0x18c>)
 8000b74:	f043 0302 	orr.w	r3, r3, #2
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b3d      	ldr	r3, [pc, #244]	; (8000c70 <MX_GPIO_Init+0x18c>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f003 0302 	and.w	r3, r3, #2
 8000b82:	603b      	str	r3, [r7, #0]
 8000b84:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, N_HVIL_FLOAT_Pin|N_HVIL_RESET_Pin, GPIO_PIN_SET);
 8000b86:	2201      	movs	r2, #1
 8000b88:	2128      	movs	r1, #40	; 0x28
 8000b8a:	483a      	ldr	r0, [pc, #232]	; (8000c74 <MX_GPIO_Init+0x190>)
 8000b8c:	f001 ff8e 	bl	8002aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8000b90:	2200      	movs	r2, #0
 8000b92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b96:	4838      	ldr	r0, [pc, #224]	; (8000c78 <MX_GPIO_Init+0x194>)
 8000b98:	f001 ff88 	bl	8002aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED_0_Pin|DEBUG_LED_1_Pin|ShiftRegDAT_Pin|ShiftRegSHCP_Pin
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	2179      	movs	r1, #121	; 0x79
 8000ba0:	4836      	ldr	r0, [pc, #216]	; (8000c7c <MX_GPIO_Init+0x198>)
 8000ba2:	f001 ff83 	bl	8002aac <HAL_GPIO_WritePin>
                          |ShiftRegSTCP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : HVIL_OUT_OBSERVE_Pin HVIL_IN_OBSERVE_Pin HVIL_LOGIC_OBSERVE_Pin RANGE_ANOMALY_Pin */
  GPIO_InitStruct.Pin = HVIL_OUT_OBSERVE_Pin|HVIL_IN_OBSERVE_Pin|HVIL_LOGIC_OBSERVE_Pin|RANGE_ANOMALY_Pin;
 8000ba6:	f248 0354 	movw	r3, #32852	; 0x8054
 8000baa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bac:	2300      	movs	r3, #0
 8000bae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	4619      	mov	r1, r3
 8000bba:	482e      	ldr	r0, [pc, #184]	; (8000c74 <MX_GPIO_Init+0x190>)
 8000bbc:	f001 fdda 	bl	8002774 <HAL_GPIO_Init>

  /*Configure GPIO pins : N_HVIL_FLOAT_Pin N_HVIL_RESET_Pin */
  GPIO_InitStruct.Pin = N_HVIL_FLOAT_Pin|N_HVIL_RESET_Pin;
 8000bc0:	2328      	movs	r3, #40	; 0x28
 8000bc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4827      	ldr	r0, [pc, #156]	; (8000c74 <MX_GPIO_Init+0x190>)
 8000bd8:	f001 fdcc 	bl	8002774 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000bdc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000be0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be2:	2301      	movs	r3, #1
 8000be4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bea:	2300      	movs	r3, #0
 8000bec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bee:	f107 0314 	add.w	r3, r7, #20
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4820      	ldr	r0, [pc, #128]	; (8000c78 <MX_GPIO_Init+0x194>)
 8000bf6:	f001 fdbd 	bl	8002774 <HAL_GPIO_Init>

  /*Configure GPIO pins : DEBUG_LED_0_Pin DEBUG_LED_1_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_0_Pin|DEBUG_LED_1_Pin;
 8000bfa:	2309      	movs	r3, #9
 8000bfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c02:	2302      	movs	r3, #2
 8000c04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	2300      	movs	r3, #0
 8000c08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0a:	f107 0314 	add.w	r3, r7, #20
 8000c0e:	4619      	mov	r1, r3
 8000c10:	481a      	ldr	r0, [pc, #104]	; (8000c7c <MX_GPIO_Init+0x198>)
 8000c12:	f001 fdaf 	bl	8002774 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN0_EXTI_Pin BTN1_EXTI_Pin */
  GPIO_InitStruct.Pin = BTN0_EXTI_Pin|BTN1_EXTI_Pin;
 8000c16:	2306      	movs	r3, #6
 8000c18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c1a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4814      	ldr	r0, [pc, #80]	; (8000c7c <MX_GPIO_Init+0x198>)
 8000c2c:	f001 fda2 	bl	8002774 <HAL_GPIO_Init>

  /*Configure GPIO pins : ShiftRegDAT_Pin ShiftRegSHCP_Pin ShiftRegSTCP_Pin */
  GPIO_InitStruct.Pin = ShiftRegDAT_Pin|ShiftRegSHCP_Pin|ShiftRegSTCP_Pin;
 8000c30:	2370      	movs	r3, #112	; 0x70
 8000c32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c34:	2301      	movs	r3, #1
 8000c36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	4619      	mov	r1, r3
 8000c46:	480d      	ldr	r0, [pc, #52]	; (8000c7c <MX_GPIO_Init+0x198>)
 8000c48:	f001 fd94 	bl	8002774 <HAL_GPIO_Init>

  /*Configure GPIO pin : N_BRAKES_ON_Pin */
  GPIO_InitStruct.Pin = N_BRAKES_ON_Pin;
 8000c4c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c56:	2301      	movs	r3, #1
 8000c58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(N_BRAKES_ON_GPIO_Port, &GPIO_InitStruct);
 8000c5a:	f107 0314 	add.w	r3, r7, #20
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4804      	ldr	r0, [pc, #16]	; (8000c74 <MX_GPIO_Init+0x190>)
 8000c62:	f001 fd87 	bl	8002774 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c66:	bf00      	nop
 8000c68:	3728      	adds	r7, #40	; 0x28
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40023800 	.word	0x40023800
 8000c74:	40021000 	.word	0x40021000
 8000c78:	40020800 	.word	0x40020800
 8000c7c:	40020000 	.word	0x40020000

08000c80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c84:	b672      	cpsid	i
}
 8000c86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_GPIO_WritePin(GPIOE, N_HVIL_FLOAT_Pin, GPIO_PIN_SET);
 8000c88:	2201      	movs	r2, #1
 8000c8a:	2108      	movs	r1, #8
 8000c8c:	4801      	ldr	r0, [pc, #4]	; (8000c94 <Error_Handler+0x14>)
 8000c8e:	f001 ff0d 	bl	8002aac <HAL_GPIO_WritePin>
  while (1)
 8000c92:	e7fe      	b.n	8000c92 <Error_Handler+0x12>
 8000c94:	40021000 	.word	0x40021000

08000c98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	607b      	str	r3, [r7, #4]
 8000ca2:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <HAL_MspInit+0x4c>)
 8000ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca6:	4a0f      	ldr	r2, [pc, #60]	; (8000ce4 <HAL_MspInit+0x4c>)
 8000ca8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cac:	6453      	str	r3, [r2, #68]	; 0x44
 8000cae:	4b0d      	ldr	r3, [pc, #52]	; (8000ce4 <HAL_MspInit+0x4c>)
 8000cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cb6:	607b      	str	r3, [r7, #4]
 8000cb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	603b      	str	r3, [r7, #0]
 8000cbe:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <HAL_MspInit+0x4c>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc2:	4a08      	ldr	r2, [pc, #32]	; (8000ce4 <HAL_MspInit+0x4c>)
 8000cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cca:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <HAL_MspInit+0x4c>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cd2:	603b      	str	r3, [r7, #0]
 8000cd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	40023800 	.word	0x40023800

08000ce8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08c      	sub	sp, #48	; 0x30
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf0:	f107 031c 	add.w	r3, r7, #28
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a31      	ldr	r2, [pc, #196]	; (8000dcc <HAL_ADC_MspInit+0xe4>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d15b      	bne.n	8000dc2 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	61bb      	str	r3, [r7, #24]
 8000d0e:	4b30      	ldr	r3, [pc, #192]	; (8000dd0 <HAL_ADC_MspInit+0xe8>)
 8000d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d12:	4a2f      	ldr	r2, [pc, #188]	; (8000dd0 <HAL_ADC_MspInit+0xe8>)
 8000d14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d18:	6453      	str	r3, [r2, #68]	; 0x44
 8000d1a:	4b2d      	ldr	r3, [pc, #180]	; (8000dd0 <HAL_ADC_MspInit+0xe8>)
 8000d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d22:	61bb      	str	r3, [r7, #24]
 8000d24:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	617b      	str	r3, [r7, #20]
 8000d2a:	4b29      	ldr	r3, [pc, #164]	; (8000dd0 <HAL_ADC_MspInit+0xe8>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	4a28      	ldr	r2, [pc, #160]	; (8000dd0 <HAL_ADC_MspInit+0xe8>)
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	6313      	str	r3, [r2, #48]	; 0x30
 8000d36:	4b26      	ldr	r3, [pc, #152]	; (8000dd0 <HAL_ADC_MspInit+0xe8>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	617b      	str	r3, [r7, #20]
 8000d40:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	613b      	str	r3, [r7, #16]
 8000d46:	4b22      	ldr	r3, [pc, #136]	; (8000dd0 <HAL_ADC_MspInit+0xe8>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	4a21      	ldr	r2, [pc, #132]	; (8000dd0 <HAL_ADC_MspInit+0xe8>)
 8000d4c:	f043 0304 	orr.w	r3, r3, #4
 8000d50:	6313      	str	r3, [r2, #48]	; 0x30
 8000d52:	4b1f      	ldr	r3, [pc, #124]	; (8000dd0 <HAL_ADC_MspInit+0xe8>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	f003 0304 	and.w	r3, r3, #4
 8000d5a:	613b      	str	r3, [r7, #16]
 8000d5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	4b1b      	ldr	r3, [pc, #108]	; (8000dd0 <HAL_ADC_MspInit+0xe8>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	4a1a      	ldr	r2, [pc, #104]	; (8000dd0 <HAL_ADC_MspInit+0xe8>)
 8000d68:	f043 0302 	orr.w	r3, r3, #2
 8000d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6e:	4b18      	ldr	r3, [pc, #96]	; (8000dd0 <HAL_ADC_MspInit+0xe8>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	f003 0302 	and.w	r3, r3, #2
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d7a:	2380      	movs	r3, #128	; 0x80
 8000d7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d86:	f107 031c 	add.w	r3, r7, #28
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4811      	ldr	r0, [pc, #68]	; (8000dd4 <HAL_ADC_MspInit+0xec>)
 8000d8e:	f001 fcf1 	bl	8002774 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000d92:	2330      	movs	r3, #48	; 0x30
 8000d94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d96:	2303      	movs	r3, #3
 8000d98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d9e:	f107 031c 	add.w	r3, r7, #28
 8000da2:	4619      	mov	r1, r3
 8000da4:	480c      	ldr	r0, [pc, #48]	; (8000dd8 <HAL_ADC_MspInit+0xf0>)
 8000da6:	f001 fce5 	bl	8002774 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000daa:	2301      	movs	r3, #1
 8000dac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dae:	2303      	movs	r3, #3
 8000db0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db6:	f107 031c 	add.w	r3, r7, #28
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4807      	ldr	r0, [pc, #28]	; (8000ddc <HAL_ADC_MspInit+0xf4>)
 8000dbe:	f001 fcd9 	bl	8002774 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000dc2:	bf00      	nop
 8000dc4:	3730      	adds	r7, #48	; 0x30
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40012000 	.word	0x40012000
 8000dd0:	40023800 	.word	0x40023800
 8000dd4:	40020000 	.word	0x40020000
 8000dd8:	40020800 	.word	0x40020800
 8000ddc:	40020400 	.word	0x40020400

08000de0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08a      	sub	sp, #40	; 0x28
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a21      	ldr	r2, [pc, #132]	; (8000e84 <HAL_CAN_MspInit+0xa4>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d13c      	bne.n	8000e7c <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	613b      	str	r3, [r7, #16]
 8000e06:	4b20      	ldr	r3, [pc, #128]	; (8000e88 <HAL_CAN_MspInit+0xa8>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0a:	4a1f      	ldr	r2, [pc, #124]	; (8000e88 <HAL_CAN_MspInit+0xa8>)
 8000e0c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e10:	6413      	str	r3, [r2, #64]	; 0x40
 8000e12:	4b1d      	ldr	r3, [pc, #116]	; (8000e88 <HAL_CAN_MspInit+0xa8>)
 8000e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e1a:	613b      	str	r3, [r7, #16]
 8000e1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	4b19      	ldr	r3, [pc, #100]	; (8000e88 <HAL_CAN_MspInit+0xa8>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	4a18      	ldr	r2, [pc, #96]	; (8000e88 <HAL_CAN_MspInit+0xa8>)
 8000e28:	f043 0302 	orr.w	r3, r3, #2
 8000e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2e:	4b16      	ldr	r3, [pc, #88]	; (8000e88 <HAL_CAN_MspInit+0xa8>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	f003 0302 	and.w	r3, r3, #2
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e3a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e40:	2302      	movs	r3, #2
 8000e42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_CAN1;
 8000e4c:	2308      	movs	r3, #8
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	4619      	mov	r1, r3
 8000e56:	480d      	ldr	r0, [pc, #52]	; (8000e8c <HAL_CAN_MspInit+0xac>)
 8000e58:	f001 fc8c 	bl	8002774 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2100      	movs	r1, #0
 8000e60:	2014      	movs	r0, #20
 8000e62:	f001 fc50 	bl	8002706 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000e66:	2014      	movs	r0, #20
 8000e68:	f001 fc69 	bl	800273e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2100      	movs	r1, #0
 8000e70:	2015      	movs	r0, #21
 8000e72:	f001 fc48 	bl	8002706 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000e76:	2015      	movs	r0, #21
 8000e78:	f001 fc61 	bl	800273e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000e7c:	bf00      	nop
 8000e7e:	3728      	adds	r7, #40	; 0x28
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40006400 	.word	0x40006400
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	40020400 	.word	0x40020400

08000e90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000e94:	f003 faf0 	bl	8004478 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e98:	e7fe      	b.n	8000e98 <NMI_Handler+0x8>

08000e9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e9e:	e7fe      	b.n	8000e9e <HardFault_Handler+0x4>

08000ea0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <MemManage_Handler+0x4>

08000ea6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eaa:	e7fe      	b.n	8000eaa <BusFault_Handler+0x4>

08000eac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb0:	e7fe      	b.n	8000eb0 <UsageFault_Handler+0x4>

08000eb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ee0:	f000 f8ae 	bl	8001040 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000eec:	4802      	ldr	r0, [pc, #8]	; (8000ef8 <CAN1_RX0_IRQHandler+0x10>)
 8000eee:	f001 f900 	bl	80020f2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000184 	.word	0x20000184

08000efc <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000f00:	4802      	ldr	r0, [pc, #8]	; (8000f0c <CAN1_RX1_IRQHandler+0x10>)
 8000f02:	f001 f8f6 	bl	80020f2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000184 	.word	0x20000184

08000f10 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000f14:	4802      	ldr	r0, [pc, #8]	; (8000f20 <OTG_FS_IRQHandler+0x10>)
 8000f16:	f001 ff39 	bl	8002d8c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	200016e4 	.word	0x200016e4

08000f24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f28:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <SystemInit+0x20>)
 8000f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f2e:	4a05      	ldr	r2, [pc, #20]	; (8000f44 <SystemInit+0x20>)
 8000f30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000f48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f80 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f4c:	480d      	ldr	r0, [pc, #52]	; (8000f84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f4e:	490e      	ldr	r1, [pc, #56]	; (8000f88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f50:	4a0e      	ldr	r2, [pc, #56]	; (8000f8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f54:	e002      	b.n	8000f5c <LoopCopyDataInit>

08000f56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f5a:	3304      	adds	r3, #4

08000f5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f60:	d3f9      	bcc.n	8000f56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f62:	4a0b      	ldr	r2, [pc, #44]	; (8000f90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f64:	4c0b      	ldr	r4, [pc, #44]	; (8000f94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f68:	e001      	b.n	8000f6e <LoopFillZerobss>

08000f6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f6c:	3204      	adds	r2, #4

08000f6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f70:	d3fb      	bcc.n	8000f6a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f72:	f7ff ffd7 	bl	8000f24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f76:	f008 f8a9 	bl	80090cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f7a:	f7ff fbd9 	bl	8000730 <main>
  bx  lr    
 8000f7e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000f80:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8000f84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f88:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 8000f8c:	080091e4 	.word	0x080091e4
  ldr r2, =_sbss
 8000f90:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 8000f94:	20001e10 	.word	0x20001e10

08000f98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f98:	e7fe      	b.n	8000f98 <ADC_IRQHandler>
	...

08000f9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fa0:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <HAL_Init+0x40>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a0d      	ldr	r2, [pc, #52]	; (8000fdc <HAL_Init+0x40>)
 8000fa6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000faa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fac:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <HAL_Init+0x40>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a0a      	ldr	r2, [pc, #40]	; (8000fdc <HAL_Init+0x40>)
 8000fb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb8:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <HAL_Init+0x40>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a07      	ldr	r2, [pc, #28]	; (8000fdc <HAL_Init+0x40>)
 8000fbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc4:	2003      	movs	r0, #3
 8000fc6:	f001 fb93 	bl	80026f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fca:	200f      	movs	r0, #15
 8000fcc:	f000 f808 	bl	8000fe0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd0:	f7ff fe62 	bl	8000c98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40023c00 	.word	0x40023c00

08000fe0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <HAL_InitTick+0x54>)
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	4b12      	ldr	r3, [pc, #72]	; (8001038 <HAL_InitTick+0x58>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ffe:	4618      	mov	r0, r3
 8001000:	f001 fbab 	bl	800275a <HAL_SYSTICK_Config>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e00e      	b.n	800102c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2b0f      	cmp	r3, #15
 8001012:	d80a      	bhi.n	800102a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001014:	2200      	movs	r2, #0
 8001016:	6879      	ldr	r1, [r7, #4]
 8001018:	f04f 30ff 	mov.w	r0, #4294967295
 800101c:	f001 fb73 	bl	8002706 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001020:	4a06      	ldr	r2, [pc, #24]	; (800103c <HAL_InitTick+0x5c>)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001026:	2300      	movs	r3, #0
 8001028:	e000      	b.n	800102c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
}
 800102c:	4618      	mov	r0, r3
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000000 	.word	0x20000000
 8001038:	20000008 	.word	0x20000008
 800103c:	20000004 	.word	0x20000004

08001040 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001044:	4b06      	ldr	r3, [pc, #24]	; (8001060 <HAL_IncTick+0x20>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	461a      	mov	r2, r3
 800104a:	4b06      	ldr	r3, [pc, #24]	; (8001064 <HAL_IncTick+0x24>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4413      	add	r3, r2
 8001050:	4a04      	ldr	r2, [pc, #16]	; (8001064 <HAL_IncTick+0x24>)
 8001052:	6013      	str	r3, [r2, #0]
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	20000008 	.word	0x20000008
 8001064:	20000200 	.word	0x20000200

08001068 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  return uwTick;
 800106c:	4b03      	ldr	r3, [pc, #12]	; (800107c <HAL_GetTick+0x14>)
 800106e:	681b      	ldr	r3, [r3, #0]
}
 8001070:	4618      	mov	r0, r3
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	20000200 	.word	0x20000200

08001080 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001088:	f7ff ffee 	bl	8001068 <HAL_GetTick>
 800108c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001098:	d005      	beq.n	80010a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800109a:	4b0a      	ldr	r3, [pc, #40]	; (80010c4 <HAL_Delay+0x44>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	461a      	mov	r2, r3
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	4413      	add	r3, r2
 80010a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010a6:	bf00      	nop
 80010a8:	f7ff ffde 	bl	8001068 <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	68fa      	ldr	r2, [r7, #12]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d8f7      	bhi.n	80010a8 <HAL_Delay+0x28>
  {
  }
}
 80010b8:	bf00      	nop
 80010ba:	bf00      	nop
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000008 	.word	0x20000008

080010c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010d0:	2300      	movs	r3, #0
 80010d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d101      	bne.n	80010de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e033      	b.n	8001146 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d109      	bne.n	80010fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff fdfe 	bl	8000ce8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2200      	movs	r2, #0
 80010f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fe:	f003 0310 	and.w	r3, r3, #16
 8001102:	2b00      	cmp	r3, #0
 8001104:	d118      	bne.n	8001138 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800110e:	f023 0302 	bic.w	r3, r3, #2
 8001112:	f043 0202 	orr.w	r2, r3, #2
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f000 faba 	bl	8001694 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2200      	movs	r2, #0
 8001124:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112a:	f023 0303 	bic.w	r3, r3, #3
 800112e:	f043 0201 	orr.w	r2, r3, #1
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	641a      	str	r2, [r3, #64]	; 0x40
 8001136:	e001      	b.n	800113c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2200      	movs	r2, #0
 8001140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001144:	7bfb      	ldrb	r3, [r7, #15]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001158:	2300      	movs	r3, #0
 800115a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001162:	2b01      	cmp	r3, #1
 8001164:	d101      	bne.n	800116a <HAL_ADC_Start+0x1a>
 8001166:	2302      	movs	r3, #2
 8001168:	e097      	b.n	800129a <HAL_ADC_Start+0x14a>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2201      	movs	r2, #1
 800116e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	f003 0301 	and.w	r3, r3, #1
 800117c:	2b01      	cmp	r3, #1
 800117e:	d018      	beq.n	80011b2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	689a      	ldr	r2, [r3, #8]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f042 0201 	orr.w	r2, r2, #1
 800118e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001190:	4b45      	ldr	r3, [pc, #276]	; (80012a8 <HAL_ADC_Start+0x158>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a45      	ldr	r2, [pc, #276]	; (80012ac <HAL_ADC_Start+0x15c>)
 8001196:	fba2 2303 	umull	r2, r3, r2, r3
 800119a:	0c9a      	lsrs	r2, r3, #18
 800119c:	4613      	mov	r3, r2
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	4413      	add	r3, r2
 80011a2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80011a4:	e002      	b.n	80011ac <HAL_ADC_Start+0x5c>
    {
      counter--;
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	3b01      	subs	r3, #1
 80011aa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d1f9      	bne.n	80011a6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	f003 0301 	and.w	r3, r3, #1
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d15f      	bne.n	8001280 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80011c8:	f023 0301 	bic.w	r3, r3, #1
 80011cc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d007      	beq.n	80011f2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011ea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011fe:	d106      	bne.n	800120e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001204:	f023 0206 	bic.w	r2, r3, #6
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	645a      	str	r2, [r3, #68]	; 0x44
 800120c:	e002      	b.n	8001214 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2200      	movs	r2, #0
 8001212:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2200      	movs	r2, #0
 8001218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800121c:	4b24      	ldr	r3, [pc, #144]	; (80012b0 <HAL_ADC_Start+0x160>)
 800121e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001228:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f003 031f 	and.w	r3, r3, #31
 8001232:	2b00      	cmp	r3, #0
 8001234:	d10f      	bne.n	8001256 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d129      	bne.n	8001298 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	689a      	ldr	r2, [r3, #8]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	e020      	b.n	8001298 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a16      	ldr	r2, [pc, #88]	; (80012b4 <HAL_ADC_Start+0x164>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d11b      	bne.n	8001298 <HAL_ADC_Start+0x148>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d114      	bne.n	8001298 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	689a      	ldr	r2, [r3, #8]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	e00b      	b.n	8001298 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001284:	f043 0210 	orr.w	r2, r3, #16
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001290:	f043 0201 	orr.w	r2, r3, #1
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001298:	2300      	movs	r3, #0
}
 800129a:	4618      	mov	r0, r3
 800129c:	3714      	adds	r7, #20
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	20000000 	.word	0x20000000
 80012ac:	431bde83 	.word	0x431bde83
 80012b0:	40012300 	.word	0x40012300
 80012b4:	40012000 	.word	0x40012000

080012b8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d101      	bne.n	80012ce <HAL_ADC_Stop+0x16>
 80012ca:	2302      	movs	r3, #2
 80012cc:	e021      	b.n	8001312 <HAL_ADC_Stop+0x5a>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2201      	movs	r2, #1
 80012d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	689a      	ldr	r2, [r3, #8]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f022 0201 	bic.w	r2, r2, #1
 80012e4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	f003 0301 	and.w	r3, r3, #1
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d109      	bne.n	8001308 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012fc:	f023 0301 	bic.w	r3, r3, #1
 8001300:	f043 0201 	orr.w	r2, r3, #1
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr

0800131e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b084      	sub	sp, #16
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
 8001326:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001328:	2300      	movs	r3, #0
 800132a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001336:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800133a:	d113      	bne.n	8001364 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001346:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800134a:	d10b      	bne.n	8001364 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001350:	f043 0220 	orr.w	r2, r3, #32
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2200      	movs	r2, #0
 800135c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	e063      	b.n	800142c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001364:	f7ff fe80 	bl	8001068 <HAL_GetTick>
 8001368:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800136a:	e021      	b.n	80013b0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001372:	d01d      	beq.n	80013b0 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d007      	beq.n	800138a <HAL_ADC_PollForConversion+0x6c>
 800137a:	f7ff fe75 	bl	8001068 <HAL_GetTick>
 800137e:	4602      	mov	r2, r0
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	683a      	ldr	r2, [r7, #0]
 8001386:	429a      	cmp	r2, r3
 8001388:	d212      	bcs.n	80013b0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0302 	and.w	r3, r3, #2
 8001394:	2b02      	cmp	r3, #2
 8001396:	d00b      	beq.n	80013b0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139c:	f043 0204 	orr.w	r2, r3, #4
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2200      	movs	r2, #0
 80013a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e03d      	b.n	800142c <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d1d6      	bne.n	800136c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f06f 0212 	mvn.w	r2, #18
 80013c6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013cc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d123      	bne.n	800142a <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d11f      	bne.n	800142a <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d006      	beq.n	8001406 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001402:	2b00      	cmp	r3, #0
 8001404:	d111      	bne.n	800142a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d105      	bne.n	800142a <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001422:	f043 0201 	orr.w	r2, r3, #1
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800142a:	2300      	movs	r3, #0
}
 800142c:	4618      	mov	r0, r3
 800142e:	3710      	adds	r7, #16
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001442:	4618      	mov	r0, r3
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
	...

08001450 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001450:	b480      	push	{r7}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800145a:	2300      	movs	r3, #0
 800145c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001464:	2b01      	cmp	r3, #1
 8001466:	d101      	bne.n	800146c <HAL_ADC_ConfigChannel+0x1c>
 8001468:	2302      	movs	r3, #2
 800146a:	e105      	b.n	8001678 <HAL_ADC_ConfigChannel+0x228>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2201      	movs	r2, #1
 8001470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2b09      	cmp	r3, #9
 800147a:	d925      	bls.n	80014c8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	68d9      	ldr	r1, [r3, #12]
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	b29b      	uxth	r3, r3
 8001488:	461a      	mov	r2, r3
 800148a:	4613      	mov	r3, r2
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	4413      	add	r3, r2
 8001490:	3b1e      	subs	r3, #30
 8001492:	2207      	movs	r2, #7
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	43da      	mvns	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	400a      	ands	r2, r1
 80014a0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	68d9      	ldr	r1, [r3, #12]
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	689a      	ldr	r2, [r3, #8]
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	4618      	mov	r0, r3
 80014b4:	4603      	mov	r3, r0
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	4403      	add	r3, r0
 80014ba:	3b1e      	subs	r3, #30
 80014bc:	409a      	lsls	r2, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	430a      	orrs	r2, r1
 80014c4:	60da      	str	r2, [r3, #12]
 80014c6:	e022      	b.n	800150e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	6919      	ldr	r1, [r3, #16]
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	461a      	mov	r2, r3
 80014d6:	4613      	mov	r3, r2
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	4413      	add	r3, r2
 80014dc:	2207      	movs	r2, #7
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	43da      	mvns	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	400a      	ands	r2, r1
 80014ea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	6919      	ldr	r1, [r3, #16]
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	689a      	ldr	r2, [r3, #8]
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	4618      	mov	r0, r3
 80014fe:	4603      	mov	r3, r0
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	4403      	add	r3, r0
 8001504:	409a      	lsls	r2, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	430a      	orrs	r2, r1
 800150c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	2b06      	cmp	r3, #6
 8001514:	d824      	bhi.n	8001560 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685a      	ldr	r2, [r3, #4]
 8001520:	4613      	mov	r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	4413      	add	r3, r2
 8001526:	3b05      	subs	r3, #5
 8001528:	221f      	movs	r2, #31
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	43da      	mvns	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	400a      	ands	r2, r1
 8001536:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	b29b      	uxth	r3, r3
 8001544:	4618      	mov	r0, r3
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685a      	ldr	r2, [r3, #4]
 800154a:	4613      	mov	r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	4413      	add	r3, r2
 8001550:	3b05      	subs	r3, #5
 8001552:	fa00 f203 	lsl.w	r2, r0, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	430a      	orrs	r2, r1
 800155c:	635a      	str	r2, [r3, #52]	; 0x34
 800155e:	e04c      	b.n	80015fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	2b0c      	cmp	r3, #12
 8001566:	d824      	bhi.n	80015b2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685a      	ldr	r2, [r3, #4]
 8001572:	4613      	mov	r3, r2
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	4413      	add	r3, r2
 8001578:	3b23      	subs	r3, #35	; 0x23
 800157a:	221f      	movs	r2, #31
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	43da      	mvns	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	400a      	ands	r2, r1
 8001588:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	b29b      	uxth	r3, r3
 8001596:	4618      	mov	r0, r3
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685a      	ldr	r2, [r3, #4]
 800159c:	4613      	mov	r3, r2
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	4413      	add	r3, r2
 80015a2:	3b23      	subs	r3, #35	; 0x23
 80015a4:	fa00 f203 	lsl.w	r2, r0, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	430a      	orrs	r2, r1
 80015ae:	631a      	str	r2, [r3, #48]	; 0x30
 80015b0:	e023      	b.n	80015fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685a      	ldr	r2, [r3, #4]
 80015bc:	4613      	mov	r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	4413      	add	r3, r2
 80015c2:	3b41      	subs	r3, #65	; 0x41
 80015c4:	221f      	movs	r2, #31
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	43da      	mvns	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	400a      	ands	r2, r1
 80015d2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	b29b      	uxth	r3, r3
 80015e0:	4618      	mov	r0, r3
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685a      	ldr	r2, [r3, #4]
 80015e6:	4613      	mov	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	4413      	add	r3, r2
 80015ec:	3b41      	subs	r3, #65	; 0x41
 80015ee:	fa00 f203 	lsl.w	r2, r0, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	430a      	orrs	r2, r1
 80015f8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015fa:	4b22      	ldr	r3, [pc, #136]	; (8001684 <HAL_ADC_ConfigChannel+0x234>)
 80015fc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a21      	ldr	r2, [pc, #132]	; (8001688 <HAL_ADC_ConfigChannel+0x238>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d109      	bne.n	800161c <HAL_ADC_ConfigChannel+0x1cc>
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2b12      	cmp	r3, #18
 800160e:	d105      	bne.n	800161c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a19      	ldr	r2, [pc, #100]	; (8001688 <HAL_ADC_ConfigChannel+0x238>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d123      	bne.n	800166e <HAL_ADC_ConfigChannel+0x21e>
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2b10      	cmp	r3, #16
 800162c:	d003      	beq.n	8001636 <HAL_ADC_ConfigChannel+0x1e6>
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2b11      	cmp	r3, #17
 8001634:	d11b      	bne.n	800166e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2b10      	cmp	r3, #16
 8001648:	d111      	bne.n	800166e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800164a:	4b10      	ldr	r3, [pc, #64]	; (800168c <HAL_ADC_ConfigChannel+0x23c>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a10      	ldr	r2, [pc, #64]	; (8001690 <HAL_ADC_ConfigChannel+0x240>)
 8001650:	fba2 2303 	umull	r2, r3, r2, r3
 8001654:	0c9a      	lsrs	r2, r3, #18
 8001656:	4613      	mov	r3, r2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	4413      	add	r3, r2
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001660:	e002      	b.n	8001668 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	3b01      	subs	r3, #1
 8001666:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1f9      	bne.n	8001662 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001676:	2300      	movs	r3, #0
}
 8001678:	4618      	mov	r0, r3
 800167a:	3714      	adds	r7, #20
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr
 8001684:	40012300 	.word	0x40012300
 8001688:	40012000 	.word	0x40012000
 800168c:	20000000 	.word	0x20000000
 8001690:	431bde83 	.word	0x431bde83

08001694 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001694:	b480      	push	{r7}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800169c:	4b79      	ldr	r3, [pc, #484]	; (8001884 <ADC_Init+0x1f0>)
 800169e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	685a      	ldr	r2, [r3, #4]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	431a      	orrs	r2, r3
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	685a      	ldr	r2, [r3, #4]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	6859      	ldr	r1, [r3, #4]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	691b      	ldr	r3, [r3, #16]
 80016d4:	021a      	lsls	r2, r3, #8
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	430a      	orrs	r2, r1
 80016dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	685a      	ldr	r2, [r3, #4]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80016ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	6859      	ldr	r1, [r3, #4]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689a      	ldr	r2, [r3, #8]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	430a      	orrs	r2, r1
 80016fe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	689a      	ldr	r2, [r3, #8]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800170e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	6899      	ldr	r1, [r3, #8]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	68da      	ldr	r2, [r3, #12]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	430a      	orrs	r2, r1
 8001720:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001726:	4a58      	ldr	r2, [pc, #352]	; (8001888 <ADC_Init+0x1f4>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d022      	beq.n	8001772 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	689a      	ldr	r2, [r3, #8]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800173a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	6899      	ldr	r1, [r3, #8]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	430a      	orrs	r2, r1
 800174c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	689a      	ldr	r2, [r3, #8]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800175c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	6899      	ldr	r1, [r3, #8]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	430a      	orrs	r2, r1
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	e00f      	b.n	8001792 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	689a      	ldr	r2, [r3, #8]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001780:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	689a      	ldr	r2, [r3, #8]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001790:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	689a      	ldr	r2, [r3, #8]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f022 0202 	bic.w	r2, r2, #2
 80017a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	6899      	ldr	r1, [r3, #8]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	7e1b      	ldrb	r3, [r3, #24]
 80017ac:	005a      	lsls	r2, r3, #1
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	430a      	orrs	r2, r1
 80017b4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d01b      	beq.n	80017f8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	685a      	ldr	r2, [r3, #4]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80017ce:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	685a      	ldr	r2, [r3, #4]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80017de:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	6859      	ldr	r1, [r3, #4]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ea:	3b01      	subs	r3, #1
 80017ec:	035a      	lsls	r2, r3, #13
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	430a      	orrs	r2, r1
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	e007      	b.n	8001808 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	685a      	ldr	r2, [r3, #4]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001806:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001816:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	69db      	ldr	r3, [r3, #28]
 8001822:	3b01      	subs	r3, #1
 8001824:	051a      	lsls	r2, r3, #20
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	430a      	orrs	r2, r1
 800182c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800183c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	6899      	ldr	r1, [r3, #8]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800184a:	025a      	lsls	r2, r3, #9
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	430a      	orrs	r2, r1
 8001852:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	689a      	ldr	r2, [r3, #8]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001862:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	6899      	ldr	r1, [r3, #8]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	695b      	ldr	r3, [r3, #20]
 800186e:	029a      	lsls	r2, r3, #10
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	430a      	orrs	r2, r1
 8001876:	609a      	str	r2, [r3, #8]
}
 8001878:	bf00      	nop
 800187a:	3714      	adds	r7, #20
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	40012300 	.word	0x40012300
 8001888:	0f000001 	.word	0x0f000001

0800188c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d101      	bne.n	800189e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e0ed      	b.n	8001a7a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d102      	bne.n	80018b0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f7ff fa98 	bl	8000de0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f042 0201 	orr.w	r2, r2, #1
 80018be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018c0:	f7ff fbd2 	bl	8001068 <HAL_GetTick>
 80018c4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80018c6:	e012      	b.n	80018ee <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018c8:	f7ff fbce 	bl	8001068 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b0a      	cmp	r3, #10
 80018d4:	d90b      	bls.n	80018ee <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018da:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2205      	movs	r2, #5
 80018e6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e0c5      	b.n	8001a7a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f003 0301 	and.w	r3, r3, #1
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d0e5      	beq.n	80018c8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f022 0202 	bic.w	r2, r2, #2
 800190a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800190c:	f7ff fbac 	bl	8001068 <HAL_GetTick>
 8001910:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001912:	e012      	b.n	800193a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001914:	f7ff fba8 	bl	8001068 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b0a      	cmp	r3, #10
 8001920:	d90b      	bls.n	800193a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001926:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2205      	movs	r2, #5
 8001932:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e09f      	b.n	8001a7a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f003 0302 	and.w	r3, r3, #2
 8001944:	2b00      	cmp	r3, #0
 8001946:	d1e5      	bne.n	8001914 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	7e1b      	ldrb	r3, [r3, #24]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d108      	bne.n	8001962 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	e007      	b.n	8001972 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001970:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	7e5b      	ldrb	r3, [r3, #25]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d108      	bne.n	800198c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	e007      	b.n	800199c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800199a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	7e9b      	ldrb	r3, [r3, #26]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d108      	bne.n	80019b6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f042 0220 	orr.w	r2, r2, #32
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	e007      	b.n	80019c6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f022 0220 	bic.w	r2, r2, #32
 80019c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	7edb      	ldrb	r3, [r3, #27]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d108      	bne.n	80019e0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f022 0210 	bic.w	r2, r2, #16
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	e007      	b.n	80019f0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f042 0210 	orr.w	r2, r2, #16
 80019ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	7f1b      	ldrb	r3, [r3, #28]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d108      	bne.n	8001a0a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f042 0208 	orr.w	r2, r2, #8
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	e007      	b.n	8001a1a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f022 0208 	bic.w	r2, r2, #8
 8001a18:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	7f5b      	ldrb	r3, [r3, #29]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d108      	bne.n	8001a34 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f042 0204 	orr.w	r2, r2, #4
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	e007      	b.n	8001a44 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f022 0204 	bic.w	r2, r2, #4
 8001a42:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689a      	ldr	r2, [r3, #8]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	431a      	orrs	r2, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	691b      	ldr	r3, [r3, #16]
 8001a52:	431a      	orrs	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	695b      	ldr	r3, [r3, #20]
 8001a58:	ea42 0103 	orr.w	r1, r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	1e5a      	subs	r2, r3, #1
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	430a      	orrs	r2, r1
 8001a68:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2201      	movs	r2, #1
 8001a74:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
	...

08001a84 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b087      	sub	sp, #28
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a9a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001a9c:	7cfb      	ldrb	r3, [r7, #19]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d003      	beq.n	8001aaa <HAL_CAN_ConfigFilter+0x26>
 8001aa2:	7cfb      	ldrb	r3, [r7, #19]
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	f040 80be 	bne.w	8001c26 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001aaa:	4b65      	ldr	r3, [pc, #404]	; (8001c40 <HAL_CAN_ConfigFilter+0x1bc>)
 8001aac:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ab4:	f043 0201 	orr.w	r2, r3, #1
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ac4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad8:	021b      	lsls	r3, r3, #8
 8001ada:	431a      	orrs	r2, r3
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	f003 031f 	and.w	r3, r3, #31
 8001aea:	2201      	movs	r2, #1
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	43db      	mvns	r3, r3
 8001afc:	401a      	ands	r2, r3
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	69db      	ldr	r3, [r3, #28]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d123      	bne.n	8001b54 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	43db      	mvns	r3, r3
 8001b16:	401a      	ands	r2, r3
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b2a:	683a      	ldr	r2, [r7, #0]
 8001b2c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b2e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	3248      	adds	r2, #72	; 0x48
 8001b34:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b48:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b4a:	6979      	ldr	r1, [r7, #20]
 8001b4c:	3348      	adds	r3, #72	; 0x48
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	440b      	add	r3, r1
 8001b52:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	69db      	ldr	r3, [r3, #28]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d122      	bne.n	8001ba2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	431a      	orrs	r2, r3
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001b7c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	3248      	adds	r2, #72	; 0x48
 8001b82:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b96:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b98:	6979      	ldr	r1, [r7, #20]
 8001b9a:	3348      	adds	r3, #72	; 0x48
 8001b9c:	00db      	lsls	r3, r3, #3
 8001b9e:	440b      	add	r3, r1
 8001ba0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	699b      	ldr	r3, [r3, #24]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d109      	bne.n	8001bbe <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	401a      	ands	r2, r3
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001bbc:	e007      	b.n	8001bce <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	431a      	orrs	r2, r3
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d109      	bne.n	8001bea <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	43db      	mvns	r3, r3
 8001be0:	401a      	ands	r2, r3
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001be8:	e007      	b.n	8001bfa <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	6a1b      	ldr	r3, [r3, #32]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d107      	bne.n	8001c12 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c18:	f023 0201 	bic.w	r2, r3, #1
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001c22:	2300      	movs	r3, #0
 8001c24:	e006      	b.n	8001c34 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
  }
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	371c      	adds	r7, #28
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	40006400 	.word	0x40006400

08001c44 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d12e      	bne.n	8001cb6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2202      	movs	r2, #2
 8001c5c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f022 0201 	bic.w	r2, r2, #1
 8001c6e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001c70:	f7ff f9fa 	bl	8001068 <HAL_GetTick>
 8001c74:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c76:	e012      	b.n	8001c9e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c78:	f7ff f9f6 	bl	8001068 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b0a      	cmp	r3, #10
 8001c84:	d90b      	bls.n	8001c9e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2205      	movs	r2, #5
 8001c96:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e012      	b.n	8001cc4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d1e5      	bne.n	8001c78 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	e006      	b.n	8001cc4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
  }
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3710      	adds	r7, #16
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b089      	sub	sp, #36	; 0x24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	60b9      	str	r1, [r7, #8]
 8001cd6:	607a      	str	r2, [r7, #4]
 8001cd8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ce0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001cea:	7ffb      	ldrb	r3, [r7, #31]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d003      	beq.n	8001cf8 <HAL_CAN_AddTxMessage+0x2c>
 8001cf0:	7ffb      	ldrb	r3, [r7, #31]
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	f040 80b8 	bne.w	8001e68 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d10a      	bne.n	8001d18 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d105      	bne.n	8001d18 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f000 80a0 	beq.w	8001e58 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	0e1b      	lsrs	r3, r3, #24
 8001d1c:	f003 0303 	and.w	r3, r3, #3
 8001d20:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d907      	bls.n	8001d38 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e09e      	b.n	8001e76 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001d38:	2201      	movs	r2, #1
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	409a      	lsls	r2, r3
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d10d      	bne.n	8001d66 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001d54:	68f9      	ldr	r1, [r7, #12]
 8001d56:	6809      	ldr	r1, [r1, #0]
 8001d58:	431a      	orrs	r2, r3
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	3318      	adds	r3, #24
 8001d5e:	011b      	lsls	r3, r3, #4
 8001d60:	440b      	add	r3, r1
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	e00f      	b.n	8001d86 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d70:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d76:	68f9      	ldr	r1, [r7, #12]
 8001d78:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001d7a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	3318      	adds	r3, #24
 8001d80:	011b      	lsls	r3, r3, #4
 8001d82:	440b      	add	r3, r1
 8001d84:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	6819      	ldr	r1, [r3, #0]
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	691a      	ldr	r2, [r3, #16]
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	3318      	adds	r3, #24
 8001d92:	011b      	lsls	r3, r3, #4
 8001d94:	440b      	add	r3, r1
 8001d96:	3304      	adds	r3, #4
 8001d98:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	7d1b      	ldrb	r3, [r3, #20]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d111      	bne.n	8001dc6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	3318      	adds	r3, #24
 8001daa:	011b      	lsls	r3, r3, #4
 8001dac:	4413      	add	r3, r2
 8001dae:	3304      	adds	r3, #4
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	6811      	ldr	r1, [r2, #0]
 8001db6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	3318      	adds	r3, #24
 8001dbe:	011b      	lsls	r3, r3, #4
 8001dc0:	440b      	add	r3, r1
 8001dc2:	3304      	adds	r3, #4
 8001dc4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	3307      	adds	r3, #7
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	061a      	lsls	r2, r3, #24
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	3306      	adds	r3, #6
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	041b      	lsls	r3, r3, #16
 8001dd6:	431a      	orrs	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	3305      	adds	r3, #5
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	021b      	lsls	r3, r3, #8
 8001de0:	4313      	orrs	r3, r2
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	3204      	adds	r2, #4
 8001de6:	7812      	ldrb	r2, [r2, #0]
 8001de8:	4610      	mov	r0, r2
 8001dea:	68fa      	ldr	r2, [r7, #12]
 8001dec:	6811      	ldr	r1, [r2, #0]
 8001dee:	ea43 0200 	orr.w	r2, r3, r0
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	011b      	lsls	r3, r3, #4
 8001df6:	440b      	add	r3, r1
 8001df8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001dfc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	3303      	adds	r3, #3
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	061a      	lsls	r2, r3, #24
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	3302      	adds	r3, #2
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	041b      	lsls	r3, r3, #16
 8001e0e:	431a      	orrs	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	3301      	adds	r3, #1
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	021b      	lsls	r3, r3, #8
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	7812      	ldrb	r2, [r2, #0]
 8001e1e:	4610      	mov	r0, r2
 8001e20:	68fa      	ldr	r2, [r7, #12]
 8001e22:	6811      	ldr	r1, [r2, #0]
 8001e24:	ea43 0200 	orr.w	r2, r3, r0
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	011b      	lsls	r3, r3, #4
 8001e2c:	440b      	add	r3, r1
 8001e2e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001e32:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	3318      	adds	r3, #24
 8001e3c:	011b      	lsls	r3, r3, #4
 8001e3e:	4413      	add	r3, r2
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68fa      	ldr	r2, [r7, #12]
 8001e44:	6811      	ldr	r1, [r2, #0]
 8001e46:	f043 0201 	orr.w	r2, r3, #1
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	3318      	adds	r3, #24
 8001e4e:	011b      	lsls	r3, r3, #4
 8001e50:	440b      	add	r3, r1
 8001e52:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001e54:	2300      	movs	r3, #0
 8001e56:	e00e      	b.n	8001e76 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e006      	b.n	8001e76 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
  }
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3724      	adds	r7, #36	; 0x24
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr

08001e82 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001e82:	b480      	push	{r7}
 8001e84:	b087      	sub	sp, #28
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	60f8      	str	r0, [r7, #12]
 8001e8a:	60b9      	str	r1, [r7, #8]
 8001e8c:	607a      	str	r2, [r7, #4]
 8001e8e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e96:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e98:	7dfb      	ldrb	r3, [r7, #23]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d003      	beq.n	8001ea6 <HAL_CAN_GetRxMessage+0x24>
 8001e9e:	7dfb      	ldrb	r3, [r7, #23]
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	f040 80f3 	bne.w	800208c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d10e      	bne.n	8001eca <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	f003 0303 	and.w	r3, r3, #3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d116      	bne.n	8001ee8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e0e7      	b.n	800209a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	691b      	ldr	r3, [r3, #16]
 8001ed0:	f003 0303 	and.w	r3, r3, #3
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d107      	bne.n	8001ee8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001edc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e0d8      	b.n	800209a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	331b      	adds	r3, #27
 8001ef0:	011b      	lsls	r3, r3, #4
 8001ef2:	4413      	add	r3, r2
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0204 	and.w	r2, r3, #4
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d10c      	bne.n	8001f20 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	331b      	adds	r3, #27
 8001f0e:	011b      	lsls	r3, r3, #4
 8001f10:	4413      	add	r3, r2
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	0d5b      	lsrs	r3, r3, #21
 8001f16:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	601a      	str	r2, [r3, #0]
 8001f1e:	e00b      	b.n	8001f38 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	331b      	adds	r3, #27
 8001f28:	011b      	lsls	r3, r3, #4
 8001f2a:	4413      	add	r3, r2
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	08db      	lsrs	r3, r3, #3
 8001f30:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	331b      	adds	r3, #27
 8001f40:	011b      	lsls	r3, r3, #4
 8001f42:	4413      	add	r3, r2
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0202 	and.w	r2, r3, #2
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	331b      	adds	r3, #27
 8001f56:	011b      	lsls	r3, r3, #4
 8001f58:	4413      	add	r3, r2
 8001f5a:	3304      	adds	r3, #4
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 020f 	and.w	r2, r3, #15
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	331b      	adds	r3, #27
 8001f6e:	011b      	lsls	r3, r3, #4
 8001f70:	4413      	add	r3, r2
 8001f72:	3304      	adds	r3, #4
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	0a1b      	lsrs	r3, r3, #8
 8001f78:	b2da      	uxtb	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	331b      	adds	r3, #27
 8001f86:	011b      	lsls	r3, r3, #4
 8001f88:	4413      	add	r3, r2
 8001f8a:	3304      	adds	r3, #4
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	0c1b      	lsrs	r3, r3, #16
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	011b      	lsls	r3, r3, #4
 8001f9e:	4413      	add	r3, r2
 8001fa0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	b2da      	uxtb	r2, r3
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	011b      	lsls	r3, r3, #4
 8001fb4:	4413      	add	r3, r2
 8001fb6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	0a1a      	lsrs	r2, r3, #8
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	b2d2      	uxtb	r2, r2
 8001fc4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	011b      	lsls	r3, r3, #4
 8001fce:	4413      	add	r3, r2
 8001fd0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	0c1a      	lsrs	r2, r3, #16
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	3302      	adds	r3, #2
 8001fdc:	b2d2      	uxtb	r2, r2
 8001fde:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	011b      	lsls	r3, r3, #4
 8001fe8:	4413      	add	r3, r2
 8001fea:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	0e1a      	lsrs	r2, r3, #24
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	3303      	adds	r3, #3
 8001ff6:	b2d2      	uxtb	r2, r2
 8001ff8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	011b      	lsls	r3, r3, #4
 8002002:	4413      	add	r3, r2
 8002004:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	3304      	adds	r3, #4
 800200e:	b2d2      	uxtb	r2, r2
 8002010:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	011b      	lsls	r3, r3, #4
 800201a:	4413      	add	r3, r2
 800201c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	0a1a      	lsrs	r2, r3, #8
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	3305      	adds	r3, #5
 8002028:	b2d2      	uxtb	r2, r2
 800202a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	011b      	lsls	r3, r3, #4
 8002034:	4413      	add	r3, r2
 8002036:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	0c1a      	lsrs	r2, r3, #16
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	3306      	adds	r3, #6
 8002042:	b2d2      	uxtb	r2, r2
 8002044:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	011b      	lsls	r3, r3, #4
 800204e:	4413      	add	r3, r2
 8002050:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	0e1a      	lsrs	r2, r3, #24
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	3307      	adds	r3, #7
 800205c:	b2d2      	uxtb	r2, r2
 800205e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d108      	bne.n	8002078 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68da      	ldr	r2, [r3, #12]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f042 0220 	orr.w	r2, r2, #32
 8002074:	60da      	str	r2, [r3, #12]
 8002076:	e007      	b.n	8002088 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	691a      	ldr	r2, [r3, #16]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f042 0220 	orr.w	r2, r2, #32
 8002086:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002088:	2300      	movs	r3, #0
 800208a:	e006      	b.n	800209a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002090:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
  }
}
 800209a:	4618      	mov	r0, r3
 800209c:	371c      	adds	r7, #28
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr

080020a6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80020a6:	b480      	push	{r7}
 80020a8:	b085      	sub	sp, #20
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
 80020ae:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020b6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80020b8:	7bfb      	ldrb	r3, [r7, #15]
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d002      	beq.n	80020c4 <HAL_CAN_ActivateNotification+0x1e>
 80020be:	7bfb      	ldrb	r3, [r7, #15]
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d109      	bne.n	80020d8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	6959      	ldr	r1, [r3, #20]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	430a      	orrs	r2, r1
 80020d2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80020d4:	2300      	movs	r3, #0
 80020d6:	e006      	b.n	80020e6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020dc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
  }
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3714      	adds	r7, #20
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b08a      	sub	sp, #40	; 0x28
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80020fa:	2300      	movs	r3, #0
 80020fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	695b      	ldr	r3, [r3, #20]
 8002104:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	691b      	ldr	r3, [r3, #16]
 8002124:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800212e:	6a3b      	ldr	r3, [r7, #32]
 8002130:	f003 0301 	and.w	r3, r3, #1
 8002134:	2b00      	cmp	r3, #0
 8002136:	d07c      	beq.n	8002232 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	2b00      	cmp	r3, #0
 8002140:	d023      	beq.n	800218a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2201      	movs	r2, #1
 8002148:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d003      	beq.n	800215c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f000 f983 	bl	8002460 <HAL_CAN_TxMailbox0CompleteCallback>
 800215a:	e016      	b.n	800218a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	f003 0304 	and.w	r3, r3, #4
 8002162:	2b00      	cmp	r3, #0
 8002164:	d004      	beq.n	8002170 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002168:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800216c:	627b      	str	r3, [r7, #36]	; 0x24
 800216e:	e00c      	b.n	800218a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	f003 0308 	and.w	r3, r3, #8
 8002176:	2b00      	cmp	r3, #0
 8002178:	d004      	beq.n	8002184 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800217a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002180:	627b      	str	r3, [r7, #36]	; 0x24
 8002182:	e002      	b.n	800218a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f000 f989 	bl	800249c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002190:	2b00      	cmp	r3, #0
 8002192:	d024      	beq.n	80021de <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f44f 7280 	mov.w	r2, #256	; 0x100
 800219c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d003      	beq.n	80021b0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f000 f963 	bl	8002474 <HAL_CAN_TxMailbox1CompleteCallback>
 80021ae:	e016      	b.n	80021de <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d004      	beq.n	80021c4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80021ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80021c0:	627b      	str	r3, [r7, #36]	; 0x24
 80021c2:	e00c      	b.n	80021de <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d004      	beq.n	80021d8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80021ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021d4:	627b      	str	r3, [r7, #36]	; 0x24
 80021d6:	e002      	b.n	80021de <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f000 f969 	bl	80024b0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d024      	beq.n	8002232 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80021f0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d003      	beq.n	8002204 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f000 f943 	bl	8002488 <HAL_CAN_TxMailbox2CompleteCallback>
 8002202:	e016      	b.n	8002232 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d004      	beq.n	8002218 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800220e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002210:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002214:	627b      	str	r3, [r7, #36]	; 0x24
 8002216:	e00c      	b.n	8002232 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d004      	beq.n	800222c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002228:	627b      	str	r3, [r7, #36]	; 0x24
 800222a:	e002      	b.n	8002232 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f000 f949 	bl	80024c4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002232:	6a3b      	ldr	r3, [r7, #32]
 8002234:	f003 0308 	and.w	r3, r3, #8
 8002238:	2b00      	cmp	r3, #0
 800223a:	d00c      	beq.n	8002256 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	f003 0310 	and.w	r3, r3, #16
 8002242:	2b00      	cmp	r3, #0
 8002244:	d007      	beq.n	8002256 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002248:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800224c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2210      	movs	r2, #16
 8002254:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002256:	6a3b      	ldr	r3, [r7, #32]
 8002258:	f003 0304 	and.w	r3, r3, #4
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00b      	beq.n	8002278 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	f003 0308 	and.w	r3, r3, #8
 8002266:	2b00      	cmp	r3, #0
 8002268:	d006      	beq.n	8002278 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2208      	movs	r2, #8
 8002270:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 f930 	bl	80024d8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002278:	6a3b      	ldr	r3, [r7, #32]
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d009      	beq.n	8002296 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	f003 0303 	and.w	r3, r3, #3
 800228c:	2b00      	cmp	r3, #0
 800228e:	d002      	beq.n	8002296 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f7fe fa3b 	bl	800070c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002296:	6a3b      	ldr	r3, [r7, #32]
 8002298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800229c:	2b00      	cmp	r3, #0
 800229e:	d00c      	beq.n	80022ba <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	f003 0310 	and.w	r3, r3, #16
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d007      	beq.n	80022ba <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80022aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022b0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2210      	movs	r2, #16
 80022b8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80022ba:	6a3b      	ldr	r3, [r7, #32]
 80022bc:	f003 0320 	and.w	r3, r3, #32
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d00b      	beq.n	80022dc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	f003 0308 	and.w	r3, r3, #8
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d006      	beq.n	80022dc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2208      	movs	r2, #8
 80022d4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f000 f912 	bl	8002500 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80022dc:	6a3b      	ldr	r3, [r7, #32]
 80022de:	f003 0310 	and.w	r3, r3, #16
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d009      	beq.n	80022fa <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	f003 0303 	and.w	r3, r3, #3
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d002      	beq.n	80022fa <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f000 f8f9 	bl	80024ec <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80022fa:	6a3b      	ldr	r3, [r7, #32]
 80022fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d00b      	beq.n	800231c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	f003 0310 	and.w	r3, r3, #16
 800230a:	2b00      	cmp	r3, #0
 800230c:	d006      	beq.n	800231c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2210      	movs	r2, #16
 8002314:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 f8fc 	bl	8002514 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800231c:	6a3b      	ldr	r3, [r7, #32]
 800231e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d00b      	beq.n	800233e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	f003 0308 	and.w	r3, r3, #8
 800232c:	2b00      	cmp	r3, #0
 800232e:	d006      	beq.n	800233e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2208      	movs	r2, #8
 8002336:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f000 f8f5 	bl	8002528 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800233e:	6a3b      	ldr	r3, [r7, #32]
 8002340:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d07b      	beq.n	8002440 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	f003 0304 	and.w	r3, r3, #4
 800234e:	2b00      	cmp	r3, #0
 8002350:	d072      	beq.n	8002438 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002352:	6a3b      	ldr	r3, [r7, #32]
 8002354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002358:	2b00      	cmp	r3, #0
 800235a:	d008      	beq.n	800236e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002362:	2b00      	cmp	r3, #0
 8002364:	d003      	beq.n	800236e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002368:	f043 0301 	orr.w	r3, r3, #1
 800236c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800236e:	6a3b      	ldr	r3, [r7, #32]
 8002370:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002374:	2b00      	cmp	r3, #0
 8002376:	d008      	beq.n	800238a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800237e:	2b00      	cmp	r3, #0
 8002380:	d003      	beq.n	800238a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002384:	f043 0302 	orr.w	r3, r3, #2
 8002388:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800238a:	6a3b      	ldr	r3, [r7, #32]
 800238c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002390:	2b00      	cmp	r3, #0
 8002392:	d008      	beq.n	80023a6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800239a:	2b00      	cmp	r3, #0
 800239c:	d003      	beq.n	80023a6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a0:	f043 0304 	orr.w	r3, r3, #4
 80023a4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80023a6:	6a3b      	ldr	r3, [r7, #32]
 80023a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d043      	beq.n	8002438 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d03e      	beq.n	8002438 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80023c0:	2b60      	cmp	r3, #96	; 0x60
 80023c2:	d02b      	beq.n	800241c <HAL_CAN_IRQHandler+0x32a>
 80023c4:	2b60      	cmp	r3, #96	; 0x60
 80023c6:	d82e      	bhi.n	8002426 <HAL_CAN_IRQHandler+0x334>
 80023c8:	2b50      	cmp	r3, #80	; 0x50
 80023ca:	d022      	beq.n	8002412 <HAL_CAN_IRQHandler+0x320>
 80023cc:	2b50      	cmp	r3, #80	; 0x50
 80023ce:	d82a      	bhi.n	8002426 <HAL_CAN_IRQHandler+0x334>
 80023d0:	2b40      	cmp	r3, #64	; 0x40
 80023d2:	d019      	beq.n	8002408 <HAL_CAN_IRQHandler+0x316>
 80023d4:	2b40      	cmp	r3, #64	; 0x40
 80023d6:	d826      	bhi.n	8002426 <HAL_CAN_IRQHandler+0x334>
 80023d8:	2b30      	cmp	r3, #48	; 0x30
 80023da:	d010      	beq.n	80023fe <HAL_CAN_IRQHandler+0x30c>
 80023dc:	2b30      	cmp	r3, #48	; 0x30
 80023de:	d822      	bhi.n	8002426 <HAL_CAN_IRQHandler+0x334>
 80023e0:	2b10      	cmp	r3, #16
 80023e2:	d002      	beq.n	80023ea <HAL_CAN_IRQHandler+0x2f8>
 80023e4:	2b20      	cmp	r3, #32
 80023e6:	d005      	beq.n	80023f4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80023e8:	e01d      	b.n	8002426 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80023ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ec:	f043 0308 	orr.w	r3, r3, #8
 80023f0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80023f2:	e019      	b.n	8002428 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80023f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f6:	f043 0310 	orr.w	r3, r3, #16
 80023fa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80023fc:	e014      	b.n	8002428 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80023fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002400:	f043 0320 	orr.w	r3, r3, #32
 8002404:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002406:	e00f      	b.n	8002428 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800240e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002410:	e00a      	b.n	8002428 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002418:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800241a:	e005      	b.n	8002428 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002422:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002424:	e000      	b.n	8002428 <HAL_CAN_IRQHandler+0x336>
            break;
 8002426:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	699a      	ldr	r2, [r3, #24]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002436:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2204      	movs	r2, #4
 800243e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002442:	2b00      	cmp	r3, #0
 8002444:	d008      	beq.n	8002458 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244c:	431a      	orrs	r2, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 f872 	bl	800253c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002458:	bf00      	nop
 800245a:	3728      	adds	r7, #40	; 0x28
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800247c:	bf00      	nop
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002490:	bf00      	nop
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002560:	4b0c      	ldr	r3, [pc, #48]	; (8002594 <__NVIC_SetPriorityGrouping+0x44>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002566:	68ba      	ldr	r2, [r7, #8]
 8002568:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800256c:	4013      	ands	r3, r2
 800256e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002578:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800257c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002580:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002582:	4a04      	ldr	r2, [pc, #16]	; (8002594 <__NVIC_SetPriorityGrouping+0x44>)
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	60d3      	str	r3, [r2, #12]
}
 8002588:	bf00      	nop
 800258a:	3714      	adds	r7, #20
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	e000ed00 	.word	0xe000ed00

08002598 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800259c:	4b04      	ldr	r3, [pc, #16]	; (80025b0 <__NVIC_GetPriorityGrouping+0x18>)
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	0a1b      	lsrs	r3, r3, #8
 80025a2:	f003 0307 	and.w	r3, r3, #7
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr
 80025b0:	e000ed00 	.word	0xe000ed00

080025b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	4603      	mov	r3, r0
 80025bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	db0b      	blt.n	80025de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025c6:	79fb      	ldrb	r3, [r7, #7]
 80025c8:	f003 021f 	and.w	r2, r3, #31
 80025cc:	4907      	ldr	r1, [pc, #28]	; (80025ec <__NVIC_EnableIRQ+0x38>)
 80025ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d2:	095b      	lsrs	r3, r3, #5
 80025d4:	2001      	movs	r0, #1
 80025d6:	fa00 f202 	lsl.w	r2, r0, r2
 80025da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025de:	bf00      	nop
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	e000e100 	.word	0xe000e100

080025f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	4603      	mov	r3, r0
 80025f8:	6039      	str	r1, [r7, #0]
 80025fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002600:	2b00      	cmp	r3, #0
 8002602:	db0a      	blt.n	800261a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	b2da      	uxtb	r2, r3
 8002608:	490c      	ldr	r1, [pc, #48]	; (800263c <__NVIC_SetPriority+0x4c>)
 800260a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260e:	0112      	lsls	r2, r2, #4
 8002610:	b2d2      	uxtb	r2, r2
 8002612:	440b      	add	r3, r1
 8002614:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002618:	e00a      	b.n	8002630 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	b2da      	uxtb	r2, r3
 800261e:	4908      	ldr	r1, [pc, #32]	; (8002640 <__NVIC_SetPriority+0x50>)
 8002620:	79fb      	ldrb	r3, [r7, #7]
 8002622:	f003 030f 	and.w	r3, r3, #15
 8002626:	3b04      	subs	r3, #4
 8002628:	0112      	lsls	r2, r2, #4
 800262a:	b2d2      	uxtb	r2, r2
 800262c:	440b      	add	r3, r1
 800262e:	761a      	strb	r2, [r3, #24]
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr
 800263c:	e000e100 	.word	0xe000e100
 8002640:	e000ed00 	.word	0xe000ed00

08002644 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002644:	b480      	push	{r7}
 8002646:	b089      	sub	sp, #36	; 0x24
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f003 0307 	and.w	r3, r3, #7
 8002656:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	f1c3 0307 	rsb	r3, r3, #7
 800265e:	2b04      	cmp	r3, #4
 8002660:	bf28      	it	cs
 8002662:	2304      	movcs	r3, #4
 8002664:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	3304      	adds	r3, #4
 800266a:	2b06      	cmp	r3, #6
 800266c:	d902      	bls.n	8002674 <NVIC_EncodePriority+0x30>
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	3b03      	subs	r3, #3
 8002672:	e000      	b.n	8002676 <NVIC_EncodePriority+0x32>
 8002674:	2300      	movs	r3, #0
 8002676:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002678:	f04f 32ff 	mov.w	r2, #4294967295
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	43da      	mvns	r2, r3
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	401a      	ands	r2, r3
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800268c:	f04f 31ff 	mov.w	r1, #4294967295
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	fa01 f303 	lsl.w	r3, r1, r3
 8002696:	43d9      	mvns	r1, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800269c:	4313      	orrs	r3, r2
         );
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3724      	adds	r7, #36	; 0x24
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
	...

080026ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	3b01      	subs	r3, #1
 80026b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026bc:	d301      	bcc.n	80026c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026be:	2301      	movs	r3, #1
 80026c0:	e00f      	b.n	80026e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026c2:	4a0a      	ldr	r2, [pc, #40]	; (80026ec <SysTick_Config+0x40>)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	3b01      	subs	r3, #1
 80026c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026ca:	210f      	movs	r1, #15
 80026cc:	f04f 30ff 	mov.w	r0, #4294967295
 80026d0:	f7ff ff8e 	bl	80025f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026d4:	4b05      	ldr	r3, [pc, #20]	; (80026ec <SysTick_Config+0x40>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026da:	4b04      	ldr	r3, [pc, #16]	; (80026ec <SysTick_Config+0x40>)
 80026dc:	2207      	movs	r2, #7
 80026de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	e000e010 	.word	0xe000e010

080026f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f7ff ff29 	bl	8002550 <__NVIC_SetPriorityGrouping>
}
 80026fe:	bf00      	nop
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002706:	b580      	push	{r7, lr}
 8002708:	b086      	sub	sp, #24
 800270a:	af00      	add	r7, sp, #0
 800270c:	4603      	mov	r3, r0
 800270e:	60b9      	str	r1, [r7, #8]
 8002710:	607a      	str	r2, [r7, #4]
 8002712:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002714:	2300      	movs	r3, #0
 8002716:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002718:	f7ff ff3e 	bl	8002598 <__NVIC_GetPriorityGrouping>
 800271c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	68b9      	ldr	r1, [r7, #8]
 8002722:	6978      	ldr	r0, [r7, #20]
 8002724:	f7ff ff8e 	bl	8002644 <NVIC_EncodePriority>
 8002728:	4602      	mov	r2, r0
 800272a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800272e:	4611      	mov	r1, r2
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff ff5d 	bl	80025f0 <__NVIC_SetPriority>
}
 8002736:	bf00      	nop
 8002738:	3718      	adds	r7, #24
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b082      	sub	sp, #8
 8002742:	af00      	add	r7, sp, #0
 8002744:	4603      	mov	r3, r0
 8002746:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff ff31 	bl	80025b4 <__NVIC_EnableIRQ>
}
 8002752:	bf00      	nop
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b082      	sub	sp, #8
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7ff ffa2 	bl	80026ac <SysTick_Config>
 8002768:	4603      	mov	r3, r0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
	...

08002774 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002774:	b480      	push	{r7}
 8002776:	b089      	sub	sp, #36	; 0x24
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800277e:	2300      	movs	r3, #0
 8002780:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002782:	2300      	movs	r3, #0
 8002784:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002786:	2300      	movs	r3, #0
 8002788:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800278a:	2300      	movs	r3, #0
 800278c:	61fb      	str	r3, [r7, #28]
 800278e:	e159      	b.n	8002a44 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002790:	2201      	movs	r2, #1
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	697a      	ldr	r2, [r7, #20]
 80027a0:	4013      	ands	r3, r2
 80027a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	f040 8148 	bne.w	8002a3e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f003 0303 	and.w	r3, r3, #3
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d005      	beq.n	80027c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d130      	bne.n	8002828 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	2203      	movs	r2, #3
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	43db      	mvns	r3, r3
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	4013      	ands	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	68da      	ldr	r2, [r3, #12]
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027fc:	2201      	movs	r2, #1
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	43db      	mvns	r3, r3
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	4013      	ands	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	091b      	lsrs	r3, r3, #4
 8002812:	f003 0201 	and.w	r2, r3, #1
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	4313      	orrs	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f003 0303 	and.w	r3, r3, #3
 8002830:	2b03      	cmp	r3, #3
 8002832:	d017      	beq.n	8002864 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	2203      	movs	r2, #3
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	43db      	mvns	r3, r3
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	4013      	ands	r3, r2
 800284a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	689a      	ldr	r2, [r3, #8]
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	005b      	lsls	r3, r3, #1
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	4313      	orrs	r3, r2
 800285c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f003 0303 	and.w	r3, r3, #3
 800286c:	2b02      	cmp	r3, #2
 800286e:	d123      	bne.n	80028b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	08da      	lsrs	r2, r3, #3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	3208      	adds	r2, #8
 8002878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800287c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	f003 0307 	and.w	r3, r3, #7
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	220f      	movs	r2, #15
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	43db      	mvns	r3, r3
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	4013      	ands	r3, r2
 8002892:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	691a      	ldr	r2, [r3, #16]
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	f003 0307 	and.w	r3, r3, #7
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	fa02 f303 	lsl.w	r3, r2, r3
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	08da      	lsrs	r2, r3, #3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	3208      	adds	r2, #8
 80028b2:	69b9      	ldr	r1, [r7, #24]
 80028b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	2203      	movs	r2, #3
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	43db      	mvns	r3, r3
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	4013      	ands	r3, r2
 80028ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f003 0203 	and.w	r2, r3, #3
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f000 80a2 	beq.w	8002a3e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028fa:	2300      	movs	r3, #0
 80028fc:	60fb      	str	r3, [r7, #12]
 80028fe:	4b57      	ldr	r3, [pc, #348]	; (8002a5c <HAL_GPIO_Init+0x2e8>)
 8002900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002902:	4a56      	ldr	r2, [pc, #344]	; (8002a5c <HAL_GPIO_Init+0x2e8>)
 8002904:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002908:	6453      	str	r3, [r2, #68]	; 0x44
 800290a:	4b54      	ldr	r3, [pc, #336]	; (8002a5c <HAL_GPIO_Init+0x2e8>)
 800290c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002912:	60fb      	str	r3, [r7, #12]
 8002914:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002916:	4a52      	ldr	r2, [pc, #328]	; (8002a60 <HAL_GPIO_Init+0x2ec>)
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	089b      	lsrs	r3, r3, #2
 800291c:	3302      	adds	r3, #2
 800291e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002922:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	f003 0303 	and.w	r3, r3, #3
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	220f      	movs	r2, #15
 800292e:	fa02 f303 	lsl.w	r3, r2, r3
 8002932:	43db      	mvns	r3, r3
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	4013      	ands	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a49      	ldr	r2, [pc, #292]	; (8002a64 <HAL_GPIO_Init+0x2f0>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d019      	beq.n	8002976 <HAL_GPIO_Init+0x202>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a48      	ldr	r2, [pc, #288]	; (8002a68 <HAL_GPIO_Init+0x2f4>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d013      	beq.n	8002972 <HAL_GPIO_Init+0x1fe>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a47      	ldr	r2, [pc, #284]	; (8002a6c <HAL_GPIO_Init+0x2f8>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d00d      	beq.n	800296e <HAL_GPIO_Init+0x1fa>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a46      	ldr	r2, [pc, #280]	; (8002a70 <HAL_GPIO_Init+0x2fc>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d007      	beq.n	800296a <HAL_GPIO_Init+0x1f6>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a45      	ldr	r2, [pc, #276]	; (8002a74 <HAL_GPIO_Init+0x300>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d101      	bne.n	8002966 <HAL_GPIO_Init+0x1f2>
 8002962:	2304      	movs	r3, #4
 8002964:	e008      	b.n	8002978 <HAL_GPIO_Init+0x204>
 8002966:	2307      	movs	r3, #7
 8002968:	e006      	b.n	8002978 <HAL_GPIO_Init+0x204>
 800296a:	2303      	movs	r3, #3
 800296c:	e004      	b.n	8002978 <HAL_GPIO_Init+0x204>
 800296e:	2302      	movs	r3, #2
 8002970:	e002      	b.n	8002978 <HAL_GPIO_Init+0x204>
 8002972:	2301      	movs	r3, #1
 8002974:	e000      	b.n	8002978 <HAL_GPIO_Init+0x204>
 8002976:	2300      	movs	r3, #0
 8002978:	69fa      	ldr	r2, [r7, #28]
 800297a:	f002 0203 	and.w	r2, r2, #3
 800297e:	0092      	lsls	r2, r2, #2
 8002980:	4093      	lsls	r3, r2
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	4313      	orrs	r3, r2
 8002986:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002988:	4935      	ldr	r1, [pc, #212]	; (8002a60 <HAL_GPIO_Init+0x2ec>)
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	089b      	lsrs	r3, r3, #2
 800298e:	3302      	adds	r3, #2
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002996:	4b38      	ldr	r3, [pc, #224]	; (8002a78 <HAL_GPIO_Init+0x304>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	43db      	mvns	r3, r3
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	4013      	ands	r3, r2
 80029a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d003      	beq.n	80029ba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029ba:	4a2f      	ldr	r2, [pc, #188]	; (8002a78 <HAL_GPIO_Init+0x304>)
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029c0:	4b2d      	ldr	r3, [pc, #180]	; (8002a78 <HAL_GPIO_Init+0x304>)
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	43db      	mvns	r3, r3
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	4013      	ands	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d003      	beq.n	80029e4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029e4:	4a24      	ldr	r2, [pc, #144]	; (8002a78 <HAL_GPIO_Init+0x304>)
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029ea:	4b23      	ldr	r3, [pc, #140]	; (8002a78 <HAL_GPIO_Init+0x304>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	43db      	mvns	r3, r3
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	4013      	ands	r3, r2
 80029f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d003      	beq.n	8002a0e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a0e:	4a1a      	ldr	r2, [pc, #104]	; (8002a78 <HAL_GPIO_Init+0x304>)
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a14:	4b18      	ldr	r3, [pc, #96]	; (8002a78 <HAL_GPIO_Init+0x304>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	4013      	ands	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d003      	beq.n	8002a38 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a38:	4a0f      	ldr	r2, [pc, #60]	; (8002a78 <HAL_GPIO_Init+0x304>)
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	3301      	adds	r3, #1
 8002a42:	61fb      	str	r3, [r7, #28]
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	2b0f      	cmp	r3, #15
 8002a48:	f67f aea2 	bls.w	8002790 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a4c:	bf00      	nop
 8002a4e:	bf00      	nop
 8002a50:	3724      	adds	r7, #36	; 0x24
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	40023800 	.word	0x40023800
 8002a60:	40013800 	.word	0x40013800
 8002a64:	40020000 	.word	0x40020000
 8002a68:	40020400 	.word	0x40020400
 8002a6c:	40020800 	.word	0x40020800
 8002a70:	40020c00 	.word	0x40020c00
 8002a74:	40021000 	.word	0x40021000
 8002a78:	40013c00 	.word	0x40013c00

08002a7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	460b      	mov	r3, r1
 8002a86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	691a      	ldr	r2, [r3, #16]
 8002a8c:	887b      	ldrh	r3, [r7, #2]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d002      	beq.n	8002a9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a94:	2301      	movs	r3, #1
 8002a96:	73fb      	strb	r3, [r7, #15]
 8002a98:	e001      	b.n	8002a9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3714      	adds	r7, #20
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	807b      	strh	r3, [r7, #2]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002abc:	787b      	ldrb	r3, [r7, #1]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d003      	beq.n	8002aca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ac2:	887a      	ldrh	r2, [r7, #2]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ac8:	e003      	b.n	8002ad2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002aca:	887b      	ldrh	r3, [r7, #2]
 8002acc:	041a      	lsls	r2, r3, #16
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	619a      	str	r2, [r3, #24]
}
 8002ad2:	bf00      	nop
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr

08002ade <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ade:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ae0:	b08f      	sub	sp, #60	; 0x3c
 8002ae2:	af0a      	add	r7, sp, #40	; 0x28
 8002ae4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d101      	bne.n	8002af0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e116      	b.n	8002d1e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d106      	bne.n	8002b10 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f005 ff08 	bl	8008920 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2203      	movs	r2, #3
 8002b14:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d102      	bne.n	8002b2a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f002 fa25 	bl	8004f7e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	603b      	str	r3, [r7, #0]
 8002b3a:	687e      	ldr	r6, [r7, #4]
 8002b3c:	466d      	mov	r5, sp
 8002b3e:	f106 0410 	add.w	r4, r6, #16
 8002b42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b4a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b4e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b52:	1d33      	adds	r3, r6, #4
 8002b54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b56:	6838      	ldr	r0, [r7, #0]
 8002b58:	f002 f8fc 	bl	8004d54 <USB_CoreInit>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d005      	beq.n	8002b6e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2202      	movs	r2, #2
 8002b66:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e0d7      	b.n	8002d1e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2100      	movs	r1, #0
 8002b74:	4618      	mov	r0, r3
 8002b76:	f002 fa13 	bl	8004fa0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	73fb      	strb	r3, [r7, #15]
 8002b7e:	e04a      	b.n	8002c16 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b80:	7bfa      	ldrb	r2, [r7, #15]
 8002b82:	6879      	ldr	r1, [r7, #4]
 8002b84:	4613      	mov	r3, r2
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	4413      	add	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	440b      	add	r3, r1
 8002b8e:	333d      	adds	r3, #61	; 0x3d
 8002b90:	2201      	movs	r2, #1
 8002b92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b94:	7bfa      	ldrb	r2, [r7, #15]
 8002b96:	6879      	ldr	r1, [r7, #4]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	4413      	add	r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	440b      	add	r3, r1
 8002ba2:	333c      	adds	r3, #60	; 0x3c
 8002ba4:	7bfa      	ldrb	r2, [r7, #15]
 8002ba6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ba8:	7bfa      	ldrb	r2, [r7, #15]
 8002baa:	7bfb      	ldrb	r3, [r7, #15]
 8002bac:	b298      	uxth	r0, r3
 8002bae:	6879      	ldr	r1, [r7, #4]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	4413      	add	r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	440b      	add	r3, r1
 8002bba:	3344      	adds	r3, #68	; 0x44
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002bc0:	7bfa      	ldrb	r2, [r7, #15]
 8002bc2:	6879      	ldr	r1, [r7, #4]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	4413      	add	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	440b      	add	r3, r1
 8002bce:	3340      	adds	r3, #64	; 0x40
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002bd4:	7bfa      	ldrb	r2, [r7, #15]
 8002bd6:	6879      	ldr	r1, [r7, #4]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	4413      	add	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	440b      	add	r3, r1
 8002be2:	3348      	adds	r3, #72	; 0x48
 8002be4:	2200      	movs	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002be8:	7bfa      	ldrb	r2, [r7, #15]
 8002bea:	6879      	ldr	r1, [r7, #4]
 8002bec:	4613      	mov	r3, r2
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	4413      	add	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	440b      	add	r3, r1
 8002bf6:	334c      	adds	r3, #76	; 0x4c
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002bfc:	7bfa      	ldrb	r2, [r7, #15]
 8002bfe:	6879      	ldr	r1, [r7, #4]
 8002c00:	4613      	mov	r3, r2
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	4413      	add	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	440b      	add	r3, r1
 8002c0a:	3354      	adds	r3, #84	; 0x54
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c10:	7bfb      	ldrb	r3, [r7, #15]
 8002c12:	3301      	adds	r3, #1
 8002c14:	73fb      	strb	r3, [r7, #15]
 8002c16:	7bfa      	ldrb	r2, [r7, #15]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d3af      	bcc.n	8002b80 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c20:	2300      	movs	r3, #0
 8002c22:	73fb      	strb	r3, [r7, #15]
 8002c24:	e044      	b.n	8002cb0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c26:	7bfa      	ldrb	r2, [r7, #15]
 8002c28:	6879      	ldr	r1, [r7, #4]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	00db      	lsls	r3, r3, #3
 8002c2e:	4413      	add	r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	440b      	add	r3, r1
 8002c34:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002c38:	2200      	movs	r2, #0
 8002c3a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c3c:	7bfa      	ldrb	r2, [r7, #15]
 8002c3e:	6879      	ldr	r1, [r7, #4]
 8002c40:	4613      	mov	r3, r2
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	4413      	add	r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	440b      	add	r3, r1
 8002c4a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002c4e:	7bfa      	ldrb	r2, [r7, #15]
 8002c50:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c52:	7bfa      	ldrb	r2, [r7, #15]
 8002c54:	6879      	ldr	r1, [r7, #4]
 8002c56:	4613      	mov	r3, r2
 8002c58:	00db      	lsls	r3, r3, #3
 8002c5a:	4413      	add	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	440b      	add	r3, r1
 8002c60:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002c64:	2200      	movs	r2, #0
 8002c66:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c68:	7bfa      	ldrb	r2, [r7, #15]
 8002c6a:	6879      	ldr	r1, [r7, #4]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	4413      	add	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	440b      	add	r3, r1
 8002c76:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c7e:	7bfa      	ldrb	r2, [r7, #15]
 8002c80:	6879      	ldr	r1, [r7, #4]
 8002c82:	4613      	mov	r3, r2
 8002c84:	00db      	lsls	r3, r3, #3
 8002c86:	4413      	add	r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	440b      	add	r3, r1
 8002c8c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002c90:	2200      	movs	r2, #0
 8002c92:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c94:	7bfa      	ldrb	r2, [r7, #15]
 8002c96:	6879      	ldr	r1, [r7, #4]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	4413      	add	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	440b      	add	r3, r1
 8002ca2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002caa:	7bfb      	ldrb	r3, [r7, #15]
 8002cac:	3301      	adds	r3, #1
 8002cae:	73fb      	strb	r3, [r7, #15]
 8002cb0:	7bfa      	ldrb	r2, [r7, #15]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d3b5      	bcc.n	8002c26 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	603b      	str	r3, [r7, #0]
 8002cc0:	687e      	ldr	r6, [r7, #4]
 8002cc2:	466d      	mov	r5, sp
 8002cc4:	f106 0410 	add.w	r4, r6, #16
 8002cc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ccc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cd0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002cd4:	e885 0003 	stmia.w	r5, {r0, r1}
 8002cd8:	1d33      	adds	r3, r6, #4
 8002cda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cdc:	6838      	ldr	r0, [r7, #0]
 8002cde:	f002 f9ab 	bl	8005038 <USB_DevInit>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d005      	beq.n	8002cf4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2202      	movs	r2, #2
 8002cec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e014      	b.n	8002d1e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d102      	bne.n	8002d12 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f001 f98b 	bl	8004028 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f003 faed 	bl	80062f6 <USB_DevDisconnect>

  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3714      	adds	r7, #20
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d26 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b084      	sub	sp, #16
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d101      	bne.n	8002d42 <HAL_PCD_Start+0x1c>
 8002d3e:	2302      	movs	r3, #2
 8002d40:	e020      	b.n	8002d84 <HAL_PCD_Start+0x5e>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d109      	bne.n	8002d66 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d005      	beq.n	8002d66 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f002 f8f6 	bl	8004f5c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f003 fa9d 	bl	80062b4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3710      	adds	r7, #16
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002d8c:	b590      	push	{r4, r7, lr}
 8002d8e:	b08d      	sub	sp, #52	; 0x34
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d9a:	6a3b      	ldr	r3, [r7, #32]
 8002d9c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f003 fb5b 	bl	800645e <USB_GetMode>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	f040 84b7 	bne.w	800371e <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f003 fabf 	bl	8006338 <USB_ReadInterrupts>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 84ad 	beq.w	800371c <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	0a1b      	lsrs	r3, r3, #8
 8002dcc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f003 faac 	bl	8006338 <USB_ReadInterrupts>
 8002de0:	4603      	mov	r3, r0
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d107      	bne.n	8002dfa <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	695a      	ldr	r2, [r3, #20]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f002 0202 	and.w	r2, r2, #2
 8002df8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f003 fa9a 	bl	8006338 <USB_ReadInterrupts>
 8002e04:	4603      	mov	r3, r0
 8002e06:	f003 0310 	and.w	r3, r3, #16
 8002e0a:	2b10      	cmp	r3, #16
 8002e0c:	d161      	bne.n	8002ed2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	699a      	ldr	r2, [r3, #24]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 0210 	bic.w	r2, r2, #16
 8002e1c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002e1e:	6a3b      	ldr	r3, [r7, #32]
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	f003 020f 	and.w	r2, r3, #15
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	00db      	lsls	r3, r3, #3
 8002e2e:	4413      	add	r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	4413      	add	r3, r2
 8002e3a:	3304      	adds	r3, #4
 8002e3c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	0c5b      	lsrs	r3, r3, #17
 8002e42:	f003 030f 	and.w	r3, r3, #15
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d124      	bne.n	8002e94 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002e50:	4013      	ands	r3, r2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d035      	beq.n	8002ec2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	091b      	lsrs	r3, r3, #4
 8002e5e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002e60:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	461a      	mov	r2, r3
 8002e68:	6a38      	ldr	r0, [r7, #32]
 8002e6a:	f003 f8d1 	bl	8006010 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	691a      	ldr	r2, [r3, #16]
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	091b      	lsrs	r3, r3, #4
 8002e76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e7a:	441a      	add	r2, r3
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	6a1a      	ldr	r2, [r3, #32]
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	091b      	lsrs	r3, r3, #4
 8002e88:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e8c:	441a      	add	r2, r3
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	621a      	str	r2, [r3, #32]
 8002e92:	e016      	b.n	8002ec2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	0c5b      	lsrs	r3, r3, #17
 8002e98:	f003 030f 	and.w	r3, r3, #15
 8002e9c:	2b06      	cmp	r3, #6
 8002e9e:	d110      	bne.n	8002ec2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002ea6:	2208      	movs	r2, #8
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	6a38      	ldr	r0, [r7, #32]
 8002eac:	f003 f8b0 	bl	8006010 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	6a1a      	ldr	r2, [r3, #32]
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	091b      	lsrs	r3, r3, #4
 8002eb8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ebc:	441a      	add	r2, r3
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	699a      	ldr	r2, [r3, #24]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f042 0210 	orr.w	r2, r2, #16
 8002ed0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f003 fa2e 	bl	8006338 <USB_ReadInterrupts>
 8002edc:	4603      	mov	r3, r0
 8002ede:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ee2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002ee6:	f040 80a7 	bne.w	8003038 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002eea:	2300      	movs	r3, #0
 8002eec:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f003 fa33 	bl	800635e <USB_ReadDevAllOutEpInterrupt>
 8002ef8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002efa:	e099      	b.n	8003030 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f000 808e 	beq.w	8003024 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f0e:	b2d2      	uxtb	r2, r2
 8002f10:	4611      	mov	r1, r2
 8002f12:	4618      	mov	r0, r3
 8002f14:	f003 fa57 	bl	80063c6 <USB_ReadDevOutEPInterrupt>
 8002f18:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d00c      	beq.n	8002f3e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f26:	015a      	lsls	r2, r3, #5
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f30:	461a      	mov	r2, r3
 8002f32:	2301      	movs	r3, #1
 8002f34:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002f36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f000 feef 	bl	8003d1c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	f003 0308 	and.w	r3, r3, #8
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00c      	beq.n	8002f62 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4a:	015a      	lsls	r2, r3, #5
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	4413      	add	r3, r2
 8002f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f54:	461a      	mov	r2, r3
 8002f56:	2308      	movs	r3, #8
 8002f58:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002f5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f000 ffc5 	bl	8003eec <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	f003 0310 	and.w	r3, r3, #16
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d008      	beq.n	8002f7e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6e:	015a      	lsls	r2, r3, #5
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	4413      	add	r3, r2
 8002f74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f78:	461a      	mov	r2, r3
 8002f7a:	2310      	movs	r3, #16
 8002f7c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d030      	beq.n	8002fea <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002f88:	6a3b      	ldr	r3, [r7, #32]
 8002f8a:	695b      	ldr	r3, [r3, #20]
 8002f8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f90:	2b80      	cmp	r3, #128	; 0x80
 8002f92:	d109      	bne.n	8002fa8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	69fa      	ldr	r2, [r7, #28]
 8002f9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fa2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fa6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002fa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002faa:	4613      	mov	r3, r2
 8002fac:	00db      	lsls	r3, r3, #3
 8002fae:	4413      	add	r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	4413      	add	r3, r2
 8002fba:	3304      	adds	r3, #4
 8002fbc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	78db      	ldrb	r3, [r3, #3]
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d108      	bne.n	8002fd8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f005 fdb6 	bl	8008b44 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fda:	015a      	lsls	r2, r3, #5
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	4413      	add	r3, r2
 8002fe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	f003 0320 	and.w	r3, r3, #32
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d008      	beq.n	8003006 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff6:	015a      	lsls	r2, r3, #5
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003000:	461a      	mov	r2, r3
 8003002:	2320      	movs	r3, #32
 8003004:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d009      	beq.n	8003024 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003012:	015a      	lsls	r2, r3, #5
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	4413      	add	r3, r2
 8003018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800301c:	461a      	mov	r2, r3
 800301e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003022:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003026:	3301      	adds	r3, #1
 8003028:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800302a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800302c:	085b      	lsrs	r3, r3, #1
 800302e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003032:	2b00      	cmp	r3, #0
 8003034:	f47f af62 	bne.w	8002efc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4618      	mov	r0, r3
 800303e:	f003 f97b 	bl	8006338 <USB_ReadInterrupts>
 8003042:	4603      	mov	r3, r0
 8003044:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003048:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800304c:	f040 80db 	bne.w	8003206 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4618      	mov	r0, r3
 8003056:	f003 f99c 	bl	8006392 <USB_ReadDevAllInEpInterrupt>
 800305a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800305c:	2300      	movs	r3, #0
 800305e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003060:	e0cd      	b.n	80031fe <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	2b00      	cmp	r3, #0
 800306a:	f000 80c2 	beq.w	80031f2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003074:	b2d2      	uxtb	r2, r2
 8003076:	4611      	mov	r1, r2
 8003078:	4618      	mov	r0, r3
 800307a:	f003 f9c2 	bl	8006402 <USB_ReadDevInEPInterrupt>
 800307e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	2b00      	cmp	r3, #0
 8003088:	d057      	beq.n	800313a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800308a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308c:	f003 030f 	and.w	r3, r3, #15
 8003090:	2201      	movs	r2, #1
 8003092:	fa02 f303 	lsl.w	r3, r2, r3
 8003096:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800309e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	43db      	mvns	r3, r3
 80030a4:	69f9      	ldr	r1, [r7, #28]
 80030a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80030aa:	4013      	ands	r3, r2
 80030ac:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80030ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b0:	015a      	lsls	r2, r3, #5
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	4413      	add	r3, r2
 80030b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030ba:	461a      	mov	r2, r3
 80030bc:	2301      	movs	r3, #1
 80030be:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d132      	bne.n	800312e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80030c8:	6879      	ldr	r1, [r7, #4]
 80030ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030cc:	4613      	mov	r3, r2
 80030ce:	00db      	lsls	r3, r3, #3
 80030d0:	4413      	add	r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	440b      	add	r3, r1
 80030d6:	334c      	adds	r3, #76	; 0x4c
 80030d8:	6819      	ldr	r1, [r3, #0]
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030de:	4613      	mov	r3, r2
 80030e0:	00db      	lsls	r3, r3, #3
 80030e2:	4413      	add	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	4403      	add	r3, r0
 80030e8:	3348      	adds	r3, #72	; 0x48
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4419      	add	r1, r3
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030f2:	4613      	mov	r3, r2
 80030f4:	00db      	lsls	r3, r3, #3
 80030f6:	4413      	add	r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	4403      	add	r3, r0
 80030fc:	334c      	adds	r3, #76	; 0x4c
 80030fe:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003102:	2b00      	cmp	r3, #0
 8003104:	d113      	bne.n	800312e <HAL_PCD_IRQHandler+0x3a2>
 8003106:	6879      	ldr	r1, [r7, #4]
 8003108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800310a:	4613      	mov	r3, r2
 800310c:	00db      	lsls	r3, r3, #3
 800310e:	4413      	add	r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	440b      	add	r3, r1
 8003114:	3354      	adds	r3, #84	; 0x54
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d108      	bne.n	800312e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6818      	ldr	r0, [r3, #0]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003126:	461a      	mov	r2, r3
 8003128:	2101      	movs	r1, #1
 800312a:	f003 f9c9 	bl	80064c0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800312e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003130:	b2db      	uxtb	r3, r3
 8003132:	4619      	mov	r1, r3
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f005 fc8a 	bl	8008a4e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	f003 0308 	and.w	r3, r3, #8
 8003140:	2b00      	cmp	r3, #0
 8003142:	d008      	beq.n	8003156 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003146:	015a      	lsls	r2, r3, #5
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	4413      	add	r3, r2
 800314c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003150:	461a      	mov	r2, r3
 8003152:	2308      	movs	r3, #8
 8003154:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	f003 0310 	and.w	r3, r3, #16
 800315c:	2b00      	cmp	r3, #0
 800315e:	d008      	beq.n	8003172 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003162:	015a      	lsls	r2, r3, #5
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	4413      	add	r3, r2
 8003168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800316c:	461a      	mov	r2, r3
 800316e:	2310      	movs	r3, #16
 8003170:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003178:	2b00      	cmp	r3, #0
 800317a:	d008      	beq.n	800318e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800317c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317e:	015a      	lsls	r2, r3, #5
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	4413      	add	r3, r2
 8003184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003188:	461a      	mov	r2, r3
 800318a:	2340      	movs	r3, #64	; 0x40
 800318c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	f003 0302 	and.w	r3, r3, #2
 8003194:	2b00      	cmp	r3, #0
 8003196:	d023      	beq.n	80031e0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003198:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800319a:	6a38      	ldr	r0, [r7, #32]
 800319c:	f002 f8aa 	bl	80052f4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80031a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031a2:	4613      	mov	r3, r2
 80031a4:	00db      	lsls	r3, r3, #3
 80031a6:	4413      	add	r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	3338      	adds	r3, #56	; 0x38
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	4413      	add	r3, r2
 80031b0:	3304      	adds	r3, #4
 80031b2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	78db      	ldrb	r3, [r3, #3]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d108      	bne.n	80031ce <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	2200      	movs	r2, #0
 80031c0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80031c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	4619      	mov	r1, r3
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f005 fccd 	bl	8008b68 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80031ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d0:	015a      	lsls	r2, r3, #5
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	4413      	add	r3, r2
 80031d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031da:	461a      	mov	r2, r3
 80031dc:	2302      	movs	r3, #2
 80031de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d003      	beq.n	80031f2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80031ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 fd08 	bl	8003c02 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80031f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f4:	3301      	adds	r3, #1
 80031f6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80031f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031fa:	085b      	lsrs	r3, r3, #1
 80031fc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80031fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003200:	2b00      	cmp	r3, #0
 8003202:	f47f af2e 	bne.w	8003062 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4618      	mov	r0, r3
 800320c:	f003 f894 	bl	8006338 <USB_ReadInterrupts>
 8003210:	4603      	mov	r3, r0
 8003212:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003216:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800321a:	d122      	bne.n	8003262 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	69fa      	ldr	r2, [r7, #28]
 8003226:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800322a:	f023 0301 	bic.w	r3, r3, #1
 800322e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003236:	2b01      	cmp	r3, #1
 8003238:	d108      	bne.n	800324c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003242:	2100      	movs	r1, #0
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f005 fe4b 	bl	8008ee0 <HAL_PCDEx_LPM_Callback>
 800324a:	e002      	b.n	8003252 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f005 fc6b 	bl	8008b28 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	695a      	ldr	r2, [r3, #20]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003260:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4618      	mov	r0, r3
 8003268:	f003 f866 	bl	8006338 <USB_ReadInterrupts>
 800326c:	4603      	mov	r3, r0
 800326e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003272:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003276:	d112      	bne.n	800329e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f003 0301 	and.w	r3, r3, #1
 8003284:	2b01      	cmp	r3, #1
 8003286:	d102      	bne.n	800328e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f005 fc27 	bl	8008adc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	695a      	ldr	r2, [r3, #20]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800329c:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f003 f848 	bl	8006338 <USB_ReadInterrupts>
 80032a8:	4603      	mov	r3, r0
 80032aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032b2:	d121      	bne.n	80032f8 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	695a      	ldr	r2, [r3, #20]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80032c2:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d111      	bne.n	80032f2 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032dc:	089b      	lsrs	r3, r3, #2
 80032de:	f003 020f 	and.w	r2, r3, #15
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80032e8:	2101      	movs	r1, #1
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f005 fdf8 	bl	8008ee0 <HAL_PCDEx_LPM_Callback>
 80032f0:	e002      	b.n	80032f8 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f005 fbf2 	bl	8008adc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4618      	mov	r0, r3
 80032fe:	f003 f81b 	bl	8006338 <USB_ReadInterrupts>
 8003302:	4603      	mov	r3, r0
 8003304:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003308:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800330c:	f040 80b7 	bne.w	800347e <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	69fa      	ldr	r2, [r7, #28]
 800331a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800331e:	f023 0301 	bic.w	r3, r3, #1
 8003322:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2110      	movs	r1, #16
 800332a:	4618      	mov	r0, r3
 800332c:	f001 ffe2 	bl	80052f4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003330:	2300      	movs	r3, #0
 8003332:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003334:	e046      	b.n	80033c4 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003338:	015a      	lsls	r2, r3, #5
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	4413      	add	r3, r2
 800333e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003342:	461a      	mov	r2, r3
 8003344:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003348:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800334a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800334c:	015a      	lsls	r2, r3, #5
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	4413      	add	r3, r2
 8003352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800335a:	0151      	lsls	r1, r2, #5
 800335c:	69fa      	ldr	r2, [r7, #28]
 800335e:	440a      	add	r2, r1
 8003360:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003364:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003368:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800336a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800336c:	015a      	lsls	r2, r3, #5
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	4413      	add	r3, r2
 8003372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003376:	461a      	mov	r2, r3
 8003378:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800337c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800337e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003380:	015a      	lsls	r2, r3, #5
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	4413      	add	r3, r2
 8003386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800338e:	0151      	lsls	r1, r2, #5
 8003390:	69fa      	ldr	r2, [r7, #28]
 8003392:	440a      	add	r2, r1
 8003394:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003398:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800339c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800339e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033a0:	015a      	lsls	r2, r3, #5
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	4413      	add	r3, r2
 80033a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033ae:	0151      	lsls	r1, r2, #5
 80033b0:	69fa      	ldr	r2, [r7, #28]
 80033b2:	440a      	add	r2, r1
 80033b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80033b8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80033bc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c0:	3301      	adds	r3, #1
 80033c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d3b3      	bcc.n	8003336 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033d4:	69db      	ldr	r3, [r3, #28]
 80033d6:	69fa      	ldr	r2, [r7, #28]
 80033d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033dc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80033e0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d016      	beq.n	8003418 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033f4:	69fa      	ldr	r2, [r7, #28]
 80033f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033fa:	f043 030b 	orr.w	r3, r3, #11
 80033fe:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340a:	69fa      	ldr	r2, [r7, #28]
 800340c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003410:	f043 030b 	orr.w	r3, r3, #11
 8003414:	6453      	str	r3, [r2, #68]	; 0x44
 8003416:	e015      	b.n	8003444 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800341e:	695b      	ldr	r3, [r3, #20]
 8003420:	69fa      	ldr	r2, [r7, #28]
 8003422:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003426:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800342a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800342e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	69fa      	ldr	r2, [r7, #28]
 800343a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800343e:	f043 030b 	orr.w	r3, r3, #11
 8003442:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	69fa      	ldr	r2, [r7, #28]
 800344e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003452:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003456:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6818      	ldr	r0, [r3, #0]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003468:	461a      	mov	r2, r3
 800346a:	f003 f829 	bl	80064c0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	695a      	ldr	r2, [r3, #20]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800347c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4618      	mov	r0, r3
 8003484:	f002 ff58 	bl	8006338 <USB_ReadInterrupts>
 8003488:	4603      	mov	r3, r0
 800348a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800348e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003492:	d124      	bne.n	80034de <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4618      	mov	r0, r3
 800349a:	f002 ffee 	bl	800647a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f001 ffa3 	bl	80053ee <USB_GetDevSpeed>
 80034a8:	4603      	mov	r3, r0
 80034aa:	461a      	mov	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681c      	ldr	r4, [r3, #0]
 80034b4:	f000 ffd4 	bl	8004460 <HAL_RCC_GetHCLKFreq>
 80034b8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	461a      	mov	r2, r3
 80034c2:	4620      	mov	r0, r4
 80034c4:	f001 fca8 	bl	8004e18 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f005 fae8 	bl	8008a9e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	695a      	ldr	r2, [r3, #20]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80034dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f002 ff28 	bl	8006338 <USB_ReadInterrupts>
 80034e8:	4603      	mov	r3, r0
 80034ea:	f003 0308 	and.w	r3, r3, #8
 80034ee:	2b08      	cmp	r3, #8
 80034f0:	d10a      	bne.n	8003508 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f005 fac5 	bl	8008a82 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	695a      	ldr	r2, [r3, #20]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f002 0208 	and.w	r2, r2, #8
 8003506:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4618      	mov	r0, r3
 800350e:	f002 ff13 	bl	8006338 <USB_ReadInterrupts>
 8003512:	4603      	mov	r3, r0
 8003514:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003518:	2b80      	cmp	r3, #128	; 0x80
 800351a:	d122      	bne.n	8003562 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800351c:	6a3b      	ldr	r3, [r7, #32]
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003524:	6a3b      	ldr	r3, [r7, #32]
 8003526:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003528:	2301      	movs	r3, #1
 800352a:	627b      	str	r3, [r7, #36]	; 0x24
 800352c:	e014      	b.n	8003558 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800352e:	6879      	ldr	r1, [r7, #4]
 8003530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003532:	4613      	mov	r3, r2
 8003534:	00db      	lsls	r3, r3, #3
 8003536:	4413      	add	r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	440b      	add	r3, r1
 800353c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d105      	bne.n	8003552 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003548:	b2db      	uxtb	r3, r3
 800354a:	4619      	mov	r1, r3
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 fb27 	bl	8003ba0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003554:	3301      	adds	r3, #1
 8003556:	627b      	str	r3, [r7, #36]	; 0x24
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800355e:	429a      	cmp	r2, r3
 8003560:	d3e5      	bcc.n	800352e <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4618      	mov	r0, r3
 8003568:	f002 fee6 	bl	8006338 <USB_ReadInterrupts>
 800356c:	4603      	mov	r3, r0
 800356e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003572:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003576:	d13b      	bne.n	80035f0 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003578:	2301      	movs	r3, #1
 800357a:	627b      	str	r3, [r7, #36]	; 0x24
 800357c:	e02b      	b.n	80035d6 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800357e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003580:	015a      	lsls	r2, r3, #5
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	4413      	add	r3, r2
 8003586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800358e:	6879      	ldr	r1, [r7, #4]
 8003590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003592:	4613      	mov	r3, r2
 8003594:	00db      	lsls	r3, r3, #3
 8003596:	4413      	add	r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	440b      	add	r3, r1
 800359c:	3340      	adds	r3, #64	; 0x40
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d115      	bne.n	80035d0 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80035a4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	da12      	bge.n	80035d0 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80035aa:	6879      	ldr	r1, [r7, #4]
 80035ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ae:	4613      	mov	r3, r2
 80035b0:	00db      	lsls	r3, r3, #3
 80035b2:	4413      	add	r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	440b      	add	r3, r1
 80035b8:	333f      	adds	r3, #63	; 0x3f
 80035ba:	2201      	movs	r2, #1
 80035bc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80035be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	4619      	mov	r1, r3
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 fae8 	bl	8003ba0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d2:	3301      	adds	r3, #1
 80035d4:	627b      	str	r3, [r7, #36]	; 0x24
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035dc:	429a      	cmp	r2, r3
 80035de:	d3ce      	bcc.n	800357e <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	695a      	ldr	r2, [r3, #20]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80035ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f002 fe9f 	bl	8006338 <USB_ReadInterrupts>
 80035fa:	4603      	mov	r3, r0
 80035fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003600:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003604:	d155      	bne.n	80036b2 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003606:	2301      	movs	r3, #1
 8003608:	627b      	str	r3, [r7, #36]	; 0x24
 800360a:	e045      	b.n	8003698 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800360c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360e:	015a      	lsls	r2, r3, #5
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	4413      	add	r3, r2
 8003614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800361c:	6879      	ldr	r1, [r7, #4]
 800361e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003620:	4613      	mov	r3, r2
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	4413      	add	r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	440b      	add	r3, r1
 800362a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d12e      	bne.n	8003692 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003634:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003636:	2b00      	cmp	r3, #0
 8003638:	da2b      	bge.n	8003692 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003646:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800364a:	429a      	cmp	r2, r3
 800364c:	d121      	bne.n	8003692 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800364e:	6879      	ldr	r1, [r7, #4]
 8003650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003652:	4613      	mov	r3, r2
 8003654:	00db      	lsls	r3, r3, #3
 8003656:	4413      	add	r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	440b      	add	r3, r1
 800365c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003660:	2201      	movs	r2, #1
 8003662:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003664:	6a3b      	ldr	r3, [r7, #32]
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800366c:	6a3b      	ldr	r3, [r7, #32]
 800366e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003670:	6a3b      	ldr	r3, [r7, #32]
 8003672:	695b      	ldr	r3, [r3, #20]
 8003674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003678:	2b00      	cmp	r3, #0
 800367a:	d10a      	bne.n	8003692 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	69fa      	ldr	r2, [r7, #28]
 8003686:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800368a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800368e:	6053      	str	r3, [r2, #4]
            break;
 8003690:	e007      	b.n	80036a2 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003694:	3301      	adds	r3, #1
 8003696:	627b      	str	r3, [r7, #36]	; 0x24
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800369e:	429a      	cmp	r2, r3
 80036a0:	d3b4      	bcc.n	800360c <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	695a      	ldr	r2, [r3, #20]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80036b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f002 fe3e 	bl	8006338 <USB_ReadInterrupts>
 80036bc:	4603      	mov	r3, r0
 80036be:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80036c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036c6:	d10a      	bne.n	80036de <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f005 fa5f 	bl	8008b8c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	695a      	ldr	r2, [r3, #20]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80036dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f002 fe28 	bl	8006338 <USB_ReadInterrupts>
 80036e8:	4603      	mov	r3, r0
 80036ea:	f003 0304 	and.w	r3, r3, #4
 80036ee:	2b04      	cmp	r3, #4
 80036f0:	d115      	bne.n	800371e <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	f003 0304 	and.w	r3, r3, #4
 8003700:	2b00      	cmp	r3, #0
 8003702:	d002      	beq.n	800370a <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f005 fa4f 	bl	8008ba8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	6859      	ldr	r1, [r3, #4]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	430a      	orrs	r2, r1
 8003718:	605a      	str	r2, [r3, #4]
 800371a:	e000      	b.n	800371e <HAL_PCD_IRQHandler+0x992>
      return;
 800371c:	bf00      	nop
    }
  }
}
 800371e:	3734      	adds	r7, #52	; 0x34
 8003720:	46bd      	mov	sp, r7
 8003722:	bd90      	pop	{r4, r7, pc}

08003724 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	460b      	mov	r3, r1
 800372e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003736:	2b01      	cmp	r3, #1
 8003738:	d101      	bne.n	800373e <HAL_PCD_SetAddress+0x1a>
 800373a:	2302      	movs	r3, #2
 800373c:	e013      	b.n	8003766 <HAL_PCD_SetAddress+0x42>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	78fa      	ldrb	r2, [r7, #3]
 800374a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	78fa      	ldrb	r2, [r7, #3]
 8003754:	4611      	mov	r1, r2
 8003756:	4618      	mov	r0, r3
 8003758:	f002 fd86 	bl	8006268 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}

0800376e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b084      	sub	sp, #16
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
 8003776:	4608      	mov	r0, r1
 8003778:	4611      	mov	r1, r2
 800377a:	461a      	mov	r2, r3
 800377c:	4603      	mov	r3, r0
 800377e:	70fb      	strb	r3, [r7, #3]
 8003780:	460b      	mov	r3, r1
 8003782:	803b      	strh	r3, [r7, #0]
 8003784:	4613      	mov	r3, r2
 8003786:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003788:	2300      	movs	r3, #0
 800378a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800378c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003790:	2b00      	cmp	r3, #0
 8003792:	da0f      	bge.n	80037b4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003794:	78fb      	ldrb	r3, [r7, #3]
 8003796:	f003 020f 	and.w	r2, r3, #15
 800379a:	4613      	mov	r3, r2
 800379c:	00db      	lsls	r3, r3, #3
 800379e:	4413      	add	r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	3338      	adds	r3, #56	; 0x38
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	4413      	add	r3, r2
 80037a8:	3304      	adds	r3, #4
 80037aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2201      	movs	r2, #1
 80037b0:	705a      	strb	r2, [r3, #1]
 80037b2:	e00f      	b.n	80037d4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037b4:	78fb      	ldrb	r3, [r7, #3]
 80037b6:	f003 020f 	and.w	r2, r3, #15
 80037ba:	4613      	mov	r3, r2
 80037bc:	00db      	lsls	r3, r3, #3
 80037be:	4413      	add	r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	4413      	add	r3, r2
 80037ca:	3304      	adds	r3, #4
 80037cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80037d4:	78fb      	ldrb	r3, [r7, #3]
 80037d6:	f003 030f 	and.w	r3, r3, #15
 80037da:	b2da      	uxtb	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80037e0:	883a      	ldrh	r2, [r7, #0]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	78ba      	ldrb	r2, [r7, #2]
 80037ea:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	785b      	ldrb	r3, [r3, #1]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d004      	beq.n	80037fe <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	b29a      	uxth	r2, r3
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80037fe:	78bb      	ldrb	r3, [r7, #2]
 8003800:	2b02      	cmp	r3, #2
 8003802:	d102      	bne.n	800380a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003810:	2b01      	cmp	r3, #1
 8003812:	d101      	bne.n	8003818 <HAL_PCD_EP_Open+0xaa>
 8003814:	2302      	movs	r3, #2
 8003816:	e00e      	b.n	8003836 <HAL_PCD_EP_Open+0xc8>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68f9      	ldr	r1, [r7, #12]
 8003826:	4618      	mov	r0, r3
 8003828:	f001 fe06 	bl	8005438 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003834:	7afb      	ldrb	r3, [r7, #11]
}
 8003836:	4618      	mov	r0, r3
 8003838:	3710      	adds	r7, #16
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}

0800383e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800383e:	b580      	push	{r7, lr}
 8003840:	b084      	sub	sp, #16
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
 8003846:	460b      	mov	r3, r1
 8003848:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800384a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800384e:	2b00      	cmp	r3, #0
 8003850:	da0f      	bge.n	8003872 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003852:	78fb      	ldrb	r3, [r7, #3]
 8003854:	f003 020f 	and.w	r2, r3, #15
 8003858:	4613      	mov	r3, r2
 800385a:	00db      	lsls	r3, r3, #3
 800385c:	4413      	add	r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	3338      	adds	r3, #56	; 0x38
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	4413      	add	r3, r2
 8003866:	3304      	adds	r3, #4
 8003868:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2201      	movs	r2, #1
 800386e:	705a      	strb	r2, [r3, #1]
 8003870:	e00f      	b.n	8003892 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003872:	78fb      	ldrb	r3, [r7, #3]
 8003874:	f003 020f 	and.w	r2, r3, #15
 8003878:	4613      	mov	r3, r2
 800387a:	00db      	lsls	r3, r3, #3
 800387c:	4413      	add	r3, r2
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	4413      	add	r3, r2
 8003888:	3304      	adds	r3, #4
 800388a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003892:	78fb      	ldrb	r3, [r7, #3]
 8003894:	f003 030f 	and.w	r3, r3, #15
 8003898:	b2da      	uxtb	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d101      	bne.n	80038ac <HAL_PCD_EP_Close+0x6e>
 80038a8:	2302      	movs	r3, #2
 80038aa:	e00e      	b.n	80038ca <HAL_PCD_EP_Close+0x8c>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68f9      	ldr	r1, [r7, #12]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f001 fe44 	bl	8005548 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b086      	sub	sp, #24
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	60f8      	str	r0, [r7, #12]
 80038da:	607a      	str	r2, [r7, #4]
 80038dc:	603b      	str	r3, [r7, #0]
 80038de:	460b      	mov	r3, r1
 80038e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038e2:	7afb      	ldrb	r3, [r7, #11]
 80038e4:	f003 020f 	and.w	r2, r3, #15
 80038e8:	4613      	mov	r3, r2
 80038ea:	00db      	lsls	r3, r3, #3
 80038ec:	4413      	add	r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	4413      	add	r3, r2
 80038f8:	3304      	adds	r3, #4
 80038fa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	683a      	ldr	r2, [r7, #0]
 8003906:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	2200      	movs	r2, #0
 800390c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	2200      	movs	r2, #0
 8003912:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003914:	7afb      	ldrb	r3, [r7, #11]
 8003916:	f003 030f 	and.w	r3, r3, #15
 800391a:	b2da      	uxtb	r2, r3
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d102      	bne.n	800392e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800392e:	7afb      	ldrb	r3, [r7, #11]
 8003930:	f003 030f 	and.w	r3, r3, #15
 8003934:	2b00      	cmp	r3, #0
 8003936:	d109      	bne.n	800394c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6818      	ldr	r0, [r3, #0]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	691b      	ldr	r3, [r3, #16]
 8003940:	b2db      	uxtb	r3, r3
 8003942:	461a      	mov	r2, r3
 8003944:	6979      	ldr	r1, [r7, #20]
 8003946:	f002 f923 	bl	8005b90 <USB_EP0StartXfer>
 800394a:	e008      	b.n	800395e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6818      	ldr	r0, [r3, #0]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	b2db      	uxtb	r3, r3
 8003956:	461a      	mov	r2, r3
 8003958:	6979      	ldr	r1, [r7, #20]
 800395a:	f001 fed1 	bl	8005700 <USB_EPStartXfer>
  }

  return HAL_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	3718      	adds	r7, #24
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	460b      	mov	r3, r1
 8003972:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003974:	78fb      	ldrb	r3, [r7, #3]
 8003976:	f003 020f 	and.w	r2, r3, #15
 800397a:	6879      	ldr	r1, [r7, #4]
 800397c:	4613      	mov	r3, r2
 800397e:	00db      	lsls	r3, r3, #3
 8003980:	4413      	add	r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	440b      	add	r3, r1
 8003986:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800398a:	681b      	ldr	r3, [r3, #0]
}
 800398c:	4618      	mov	r0, r3
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b086      	sub	sp, #24
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	607a      	str	r2, [r7, #4]
 80039a2:	603b      	str	r3, [r7, #0]
 80039a4:	460b      	mov	r3, r1
 80039a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039a8:	7afb      	ldrb	r3, [r7, #11]
 80039aa:	f003 020f 	and.w	r2, r3, #15
 80039ae:	4613      	mov	r3, r2
 80039b0:	00db      	lsls	r3, r3, #3
 80039b2:	4413      	add	r3, r2
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	3338      	adds	r3, #56	; 0x38
 80039b8:	68fa      	ldr	r2, [r7, #12]
 80039ba:	4413      	add	r3, r2
 80039bc:	3304      	adds	r3, #4
 80039be:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	683a      	ldr	r2, [r7, #0]
 80039ca:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	2200      	movs	r2, #0
 80039d0:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	2201      	movs	r2, #1
 80039d6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039d8:	7afb      	ldrb	r3, [r7, #11]
 80039da:	f003 030f 	and.w	r3, r3, #15
 80039de:	b2da      	uxtb	r2, r3
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d102      	bne.n	80039f2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80039f2:	7afb      	ldrb	r3, [r7, #11]
 80039f4:	f003 030f 	and.w	r3, r3, #15
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d109      	bne.n	8003a10 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6818      	ldr	r0, [r3, #0]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	461a      	mov	r2, r3
 8003a08:	6979      	ldr	r1, [r7, #20]
 8003a0a:	f002 f8c1 	bl	8005b90 <USB_EP0StartXfer>
 8003a0e:	e008      	b.n	8003a22 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6818      	ldr	r0, [r3, #0]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	691b      	ldr	r3, [r3, #16]
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	6979      	ldr	r1, [r7, #20]
 8003a1e:	f001 fe6f 	bl	8005700 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003a22:	2300      	movs	r3, #0
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3718      	adds	r7, #24
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	460b      	mov	r3, r1
 8003a36:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003a38:	78fb      	ldrb	r3, [r7, #3]
 8003a3a:	f003 020f 	and.w	r2, r3, #15
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d901      	bls.n	8003a4a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e050      	b.n	8003aec <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	da0f      	bge.n	8003a72 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a52:	78fb      	ldrb	r3, [r7, #3]
 8003a54:	f003 020f 	and.w	r2, r3, #15
 8003a58:	4613      	mov	r3, r2
 8003a5a:	00db      	lsls	r3, r3, #3
 8003a5c:	4413      	add	r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	3338      	adds	r3, #56	; 0x38
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	4413      	add	r3, r2
 8003a66:	3304      	adds	r3, #4
 8003a68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	705a      	strb	r2, [r3, #1]
 8003a70:	e00d      	b.n	8003a8e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003a72:	78fa      	ldrb	r2, [r7, #3]
 8003a74:	4613      	mov	r3, r2
 8003a76:	00db      	lsls	r3, r3, #3
 8003a78:	4413      	add	r3, r2
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	4413      	add	r3, r2
 8003a84:	3304      	adds	r3, #4
 8003a86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2201      	movs	r2, #1
 8003a92:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a94:	78fb      	ldrb	r3, [r7, #3]
 8003a96:	f003 030f 	and.w	r3, r3, #15
 8003a9a:	b2da      	uxtb	r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d101      	bne.n	8003aae <HAL_PCD_EP_SetStall+0x82>
 8003aaa:	2302      	movs	r3, #2
 8003aac:	e01e      	b.n	8003aec <HAL_PCD_EP_SetStall+0xc0>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68f9      	ldr	r1, [r7, #12]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f002 faff 	bl	80060c0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ac2:	78fb      	ldrb	r3, [r7, #3]
 8003ac4:	f003 030f 	and.w	r3, r3, #15
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d10a      	bne.n	8003ae2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6818      	ldr	r0, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	b2d9      	uxtb	r1, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003adc:	461a      	mov	r2, r3
 8003ade:	f002 fcef 	bl	80064c0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3710      	adds	r7, #16
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	460b      	mov	r3, r1
 8003afe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003b00:	78fb      	ldrb	r3, [r7, #3]
 8003b02:	f003 020f 	and.w	r2, r3, #15
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d901      	bls.n	8003b12 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e042      	b.n	8003b98 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	da0f      	bge.n	8003b3a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b1a:	78fb      	ldrb	r3, [r7, #3]
 8003b1c:	f003 020f 	and.w	r2, r3, #15
 8003b20:	4613      	mov	r3, r2
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	4413      	add	r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	3338      	adds	r3, #56	; 0x38
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	3304      	adds	r3, #4
 8003b30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2201      	movs	r2, #1
 8003b36:	705a      	strb	r2, [r3, #1]
 8003b38:	e00f      	b.n	8003b5a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b3a:	78fb      	ldrb	r3, [r7, #3]
 8003b3c:	f003 020f 	and.w	r2, r3, #15
 8003b40:	4613      	mov	r3, r2
 8003b42:	00db      	lsls	r3, r3, #3
 8003b44:	4413      	add	r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	4413      	add	r3, r2
 8003b50:	3304      	adds	r3, #4
 8003b52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2200      	movs	r2, #0
 8003b58:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b60:	78fb      	ldrb	r3, [r7, #3]
 8003b62:	f003 030f 	and.w	r3, r3, #15
 8003b66:	b2da      	uxtb	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d101      	bne.n	8003b7a <HAL_PCD_EP_ClrStall+0x86>
 8003b76:	2302      	movs	r3, #2
 8003b78:	e00e      	b.n	8003b98 <HAL_PCD_EP_ClrStall+0xa4>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68f9      	ldr	r1, [r7, #12]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f002 fb07 	bl	800619c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3710      	adds	r7, #16
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	460b      	mov	r3, r1
 8003baa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003bac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	da0c      	bge.n	8003bce <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bb4:	78fb      	ldrb	r3, [r7, #3]
 8003bb6:	f003 020f 	and.w	r2, r3, #15
 8003bba:	4613      	mov	r3, r2
 8003bbc:	00db      	lsls	r3, r3, #3
 8003bbe:	4413      	add	r3, r2
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	3338      	adds	r3, #56	; 0x38
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	3304      	adds	r3, #4
 8003bca:	60fb      	str	r3, [r7, #12]
 8003bcc:	e00c      	b.n	8003be8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bce:	78fb      	ldrb	r3, [r7, #3]
 8003bd0:	f003 020f 	and.w	r2, r3, #15
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	00db      	lsls	r3, r3, #3
 8003bd8:	4413      	add	r3, r2
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	4413      	add	r3, r2
 8003be4:	3304      	adds	r3, #4
 8003be6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68f9      	ldr	r1, [r7, #12]
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f002 f926 	bl	8005e40 <USB_EPStopXfer>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003bf8:	7afb      	ldrb	r3, [r7, #11]
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b08a      	sub	sp, #40	; 0x28
 8003c06:	af02      	add	r7, sp, #8
 8003c08:	6078      	str	r0, [r7, #4]
 8003c0a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003c16:	683a      	ldr	r2, [r7, #0]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	00db      	lsls	r3, r3, #3
 8003c1c:	4413      	add	r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	3338      	adds	r3, #56	; 0x38
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	4413      	add	r3, r2
 8003c26:	3304      	adds	r3, #4
 8003c28:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6a1a      	ldr	r2, [r3, #32]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	699b      	ldr	r3, [r3, #24]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d901      	bls.n	8003c3a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e06c      	b.n	8003d14 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	699a      	ldr	r2, [r3, #24]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6a1b      	ldr	r3, [r3, #32]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	69fa      	ldr	r2, [r7, #28]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d902      	bls.n	8003c56 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	3303      	adds	r3, #3
 8003c5a:	089b      	lsrs	r3, r3, #2
 8003c5c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c5e:	e02b      	b.n	8003cb8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	699a      	ldr	r2, [r3, #24]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6a1b      	ldr	r3, [r3, #32]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	69fa      	ldr	r2, [r7, #28]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d902      	bls.n	8003c7c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	3303      	adds	r3, #3
 8003c80:	089b      	lsrs	r3, r3, #2
 8003c82:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6919      	ldr	r1, [r3, #16]
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	b2da      	uxtb	r2, r3
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	9300      	str	r3, [sp, #0]
 8003c98:	4603      	mov	r3, r0
 8003c9a:	6978      	ldr	r0, [r7, #20]
 8003c9c:	f002 f97a 	bl	8005f94 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	691a      	ldr	r2, [r3, #16]
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	441a      	add	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6a1a      	ldr	r2, [r3, #32]
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	441a      	add	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	015a      	lsls	r2, r3, #5
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003cc8:	69ba      	ldr	r2, [r7, #24]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d809      	bhi.n	8003ce2 <PCD_WriteEmptyTxFifo+0xe0>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6a1a      	ldr	r2, [r3, #32]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d203      	bcs.n	8003ce2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1be      	bne.n	8003c60 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	699a      	ldr	r2, [r3, #24]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d811      	bhi.n	8003d12 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	f003 030f 	and.w	r3, r3, #15
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfa:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	43db      	mvns	r3, r3
 8003d08:	6939      	ldr	r1, [r7, #16]
 8003d0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d0e:	4013      	ands	r3, r2
 8003d10:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3720      	adds	r7, #32
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b088      	sub	sp, #32
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	333c      	adds	r3, #60	; 0x3c
 8003d34:	3304      	adds	r3, #4
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	015a      	lsls	r2, r3, #5
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	4413      	add	r3, r2
 8003d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d17b      	bne.n	8003e4a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	f003 0308 	and.w	r3, r3, #8
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d015      	beq.n	8003d88 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	4a61      	ldr	r2, [pc, #388]	; (8003ee4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	f240 80b9 	bls.w	8003ed8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f000 80b3 	beq.w	8003ed8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	015a      	lsls	r2, r3, #5
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	4413      	add	r3, r2
 8003d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d7e:	461a      	mov	r2, r3
 8003d80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d84:	6093      	str	r3, [r2, #8]
 8003d86:	e0a7      	b.n	8003ed8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	f003 0320 	and.w	r3, r3, #32
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d009      	beq.n	8003da6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	015a      	lsls	r2, r3, #5
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	4413      	add	r3, r2
 8003d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d9e:	461a      	mov	r2, r3
 8003da0:	2320      	movs	r3, #32
 8003da2:	6093      	str	r3, [r2, #8]
 8003da4:	e098      	b.n	8003ed8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	f040 8093 	bne.w	8003ed8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	4a4b      	ldr	r2, [pc, #300]	; (8003ee4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d90f      	bls.n	8003dda <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00a      	beq.n	8003dda <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	015a      	lsls	r2, r3, #5
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	4413      	add	r3, r2
 8003dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dd6:	6093      	str	r3, [r2, #8]
 8003dd8:	e07e      	b.n	8003ed8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003dda:	683a      	ldr	r2, [r7, #0]
 8003ddc:	4613      	mov	r3, r2
 8003dde:	00db      	lsls	r3, r3, #3
 8003de0:	4413      	add	r3, r2
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	4413      	add	r3, r2
 8003dec:	3304      	adds	r3, #4
 8003dee:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	69da      	ldr	r2, [r3, #28]
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	0159      	lsls	r1, r3, #5
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	440b      	add	r3, r1
 8003dfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e06:	1ad2      	subs	r2, r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d114      	bne.n	8003e3c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d109      	bne.n	8003e2e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6818      	ldr	r0, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003e24:	461a      	mov	r2, r3
 8003e26:	2101      	movs	r1, #1
 8003e28:	f002 fb4a 	bl	80064c0 <USB_EP0_OutStart>
 8003e2c:	e006      	b.n	8003e3c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	691a      	ldr	r2, [r3, #16]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6a1b      	ldr	r3, [r3, #32]
 8003e36:	441a      	add	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	4619      	mov	r1, r3
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f004 fde8 	bl	8008a18 <HAL_PCD_DataOutStageCallback>
 8003e48:	e046      	b.n	8003ed8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	4a26      	ldr	r2, [pc, #152]	; (8003ee8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d124      	bne.n	8003e9c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00a      	beq.n	8003e72 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	015a      	lsls	r2, r3, #5
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	4413      	add	r3, r2
 8003e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e68:	461a      	mov	r2, r3
 8003e6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e6e:	6093      	str	r3, [r2, #8]
 8003e70:	e032      	b.n	8003ed8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	f003 0320 	and.w	r3, r3, #32
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d008      	beq.n	8003e8e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	015a      	lsls	r2, r3, #5
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	4413      	add	r3, r2
 8003e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e88:	461a      	mov	r2, r3
 8003e8a:	2320      	movs	r3, #32
 8003e8c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	4619      	mov	r1, r3
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f004 fdbf 	bl	8008a18 <HAL_PCD_DataOutStageCallback>
 8003e9a:	e01d      	b.n	8003ed8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d114      	bne.n	8003ecc <PCD_EP_OutXfrComplete_int+0x1b0>
 8003ea2:	6879      	ldr	r1, [r7, #4]
 8003ea4:	683a      	ldr	r2, [r7, #0]
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	00db      	lsls	r3, r3, #3
 8003eaa:	4413      	add	r3, r2
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	440b      	add	r3, r1
 8003eb0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d108      	bne.n	8003ecc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6818      	ldr	r0, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	2100      	movs	r1, #0
 8003ec8:	f002 fafa 	bl	80064c0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f004 fda0 	bl	8008a18 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3720      	adds	r7, #32
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	4f54300a 	.word	0x4f54300a
 8003ee8:	4f54310a 	.word	0x4f54310a

08003eec <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b086      	sub	sp, #24
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	333c      	adds	r3, #60	; 0x3c
 8003f04:	3304      	adds	r3, #4
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	015a      	lsls	r2, r3, #5
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	4413      	add	r3, r2
 8003f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	4a15      	ldr	r2, [pc, #84]	; (8003f74 <PCD_EP_OutSetupPacket_int+0x88>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d90e      	bls.n	8003f40 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d009      	beq.n	8003f40 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	015a      	lsls	r2, r3, #5
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	4413      	add	r3, r2
 8003f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f38:	461a      	mov	r2, r3
 8003f3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f3e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f004 fd57 	bl	80089f4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	4a0a      	ldr	r2, [pc, #40]	; (8003f74 <PCD_EP_OutSetupPacket_int+0x88>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d90c      	bls.n	8003f68 <PCD_EP_OutSetupPacket_int+0x7c>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d108      	bne.n	8003f68 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6818      	ldr	r0, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003f60:	461a      	mov	r2, r3
 8003f62:	2101      	movs	r1, #1
 8003f64:	f002 faac 	bl	80064c0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3718      	adds	r7, #24
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	4f54300a 	.word	0x4f54300a

08003f78 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b085      	sub	sp, #20
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	460b      	mov	r3, r1
 8003f82:	70fb      	strb	r3, [r7, #3]
 8003f84:	4613      	mov	r3, r2
 8003f86:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003f90:	78fb      	ldrb	r3, [r7, #3]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d107      	bne.n	8003fa6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003f96:	883b      	ldrh	r3, [r7, #0]
 8003f98:	0419      	lsls	r1, r3, #16
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68ba      	ldr	r2, [r7, #8]
 8003fa0:	430a      	orrs	r2, r1
 8003fa2:	629a      	str	r2, [r3, #40]	; 0x28
 8003fa4:	e028      	b.n	8003ff8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fac:	0c1b      	lsrs	r3, r3, #16
 8003fae:	68ba      	ldr	r2, [r7, #8]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	73fb      	strb	r3, [r7, #15]
 8003fb8:	e00d      	b.n	8003fd6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	7bfb      	ldrb	r3, [r7, #15]
 8003fc0:	3340      	adds	r3, #64	; 0x40
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	4413      	add	r3, r2
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	0c1b      	lsrs	r3, r3, #16
 8003fca:	68ba      	ldr	r2, [r7, #8]
 8003fcc:	4413      	add	r3, r2
 8003fce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003fd0:	7bfb      	ldrb	r3, [r7, #15]
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	73fb      	strb	r3, [r7, #15]
 8003fd6:	7bfa      	ldrb	r2, [r7, #15]
 8003fd8:	78fb      	ldrb	r3, [r7, #3]
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d3ec      	bcc.n	8003fba <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003fe0:	883b      	ldrh	r3, [r7, #0]
 8003fe2:	0418      	lsls	r0, r3, #16
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6819      	ldr	r1, [r3, #0]
 8003fe8:	78fb      	ldrb	r3, [r7, #3]
 8003fea:	3b01      	subs	r3, #1
 8003fec:	68ba      	ldr	r2, [r7, #8]
 8003fee:	4302      	orrs	r2, r0
 8003ff0:	3340      	adds	r3, #64	; 0x40
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	440b      	add	r3, r1
 8003ff6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3714      	adds	r7, #20
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr

08004006 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004006:	b480      	push	{r7}
 8004008:	b083      	sub	sp, #12
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
 800400e:	460b      	mov	r3, r1
 8004010:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	887a      	ldrh	r2, [r7, #2]
 8004018:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800401a:	2300      	movs	r3, #0
}
 800401c:	4618      	mov	r0, r3
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2201      	movs	r2, #1
 800403a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004056:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800405a:	f043 0303 	orr.w	r3, r3, #3
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	3714      	adds	r7, #20
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d101      	bne.n	8004084 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e0cc      	b.n	800421e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004084:	4b68      	ldr	r3, [pc, #416]	; (8004228 <HAL_RCC_ClockConfig+0x1b8>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0307 	and.w	r3, r3, #7
 800408c:	683a      	ldr	r2, [r7, #0]
 800408e:	429a      	cmp	r2, r3
 8004090:	d90c      	bls.n	80040ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004092:	4b65      	ldr	r3, [pc, #404]	; (8004228 <HAL_RCC_ClockConfig+0x1b8>)
 8004094:	683a      	ldr	r2, [r7, #0]
 8004096:	b2d2      	uxtb	r2, r2
 8004098:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800409a:	4b63      	ldr	r3, [pc, #396]	; (8004228 <HAL_RCC_ClockConfig+0x1b8>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0307 	and.w	r3, r3, #7
 80040a2:	683a      	ldr	r2, [r7, #0]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d001      	beq.n	80040ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e0b8      	b.n	800421e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0302 	and.w	r3, r3, #2
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d020      	beq.n	80040fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0304 	and.w	r3, r3, #4
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d005      	beq.n	80040d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040c4:	4b59      	ldr	r3, [pc, #356]	; (800422c <HAL_RCC_ClockConfig+0x1bc>)
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	4a58      	ldr	r2, [pc, #352]	; (800422c <HAL_RCC_ClockConfig+0x1bc>)
 80040ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0308 	and.w	r3, r3, #8
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d005      	beq.n	80040e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040dc:	4b53      	ldr	r3, [pc, #332]	; (800422c <HAL_RCC_ClockConfig+0x1bc>)
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	4a52      	ldr	r2, [pc, #328]	; (800422c <HAL_RCC_ClockConfig+0x1bc>)
 80040e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040e8:	4b50      	ldr	r3, [pc, #320]	; (800422c <HAL_RCC_ClockConfig+0x1bc>)
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	494d      	ldr	r1, [pc, #308]	; (800422c <HAL_RCC_ClockConfig+0x1bc>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0301 	and.w	r3, r3, #1
 8004102:	2b00      	cmp	r3, #0
 8004104:	d044      	beq.n	8004190 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	2b01      	cmp	r3, #1
 800410c:	d107      	bne.n	800411e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800410e:	4b47      	ldr	r3, [pc, #284]	; (800422c <HAL_RCC_ClockConfig+0x1bc>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d119      	bne.n	800414e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e07f      	b.n	800421e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	2b02      	cmp	r3, #2
 8004124:	d003      	beq.n	800412e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800412a:	2b03      	cmp	r3, #3
 800412c:	d107      	bne.n	800413e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800412e:	4b3f      	ldr	r3, [pc, #252]	; (800422c <HAL_RCC_ClockConfig+0x1bc>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d109      	bne.n	800414e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e06f      	b.n	800421e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800413e:	4b3b      	ldr	r3, [pc, #236]	; (800422c <HAL_RCC_ClockConfig+0x1bc>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0302 	and.w	r3, r3, #2
 8004146:	2b00      	cmp	r3, #0
 8004148:	d101      	bne.n	800414e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e067      	b.n	800421e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800414e:	4b37      	ldr	r3, [pc, #220]	; (800422c <HAL_RCC_ClockConfig+0x1bc>)
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f023 0203 	bic.w	r2, r3, #3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	4934      	ldr	r1, [pc, #208]	; (800422c <HAL_RCC_ClockConfig+0x1bc>)
 800415c:	4313      	orrs	r3, r2
 800415e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004160:	f7fc ff82 	bl	8001068 <HAL_GetTick>
 8004164:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004166:	e00a      	b.n	800417e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004168:	f7fc ff7e 	bl	8001068 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	f241 3288 	movw	r2, #5000	; 0x1388
 8004176:	4293      	cmp	r3, r2
 8004178:	d901      	bls.n	800417e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e04f      	b.n	800421e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800417e:	4b2b      	ldr	r3, [pc, #172]	; (800422c <HAL_RCC_ClockConfig+0x1bc>)
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f003 020c 	and.w	r2, r3, #12
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	429a      	cmp	r2, r3
 800418e:	d1eb      	bne.n	8004168 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004190:	4b25      	ldr	r3, [pc, #148]	; (8004228 <HAL_RCC_ClockConfig+0x1b8>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0307 	and.w	r3, r3, #7
 8004198:	683a      	ldr	r2, [r7, #0]
 800419a:	429a      	cmp	r2, r3
 800419c:	d20c      	bcs.n	80041b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800419e:	4b22      	ldr	r3, [pc, #136]	; (8004228 <HAL_RCC_ClockConfig+0x1b8>)
 80041a0:	683a      	ldr	r2, [r7, #0]
 80041a2:	b2d2      	uxtb	r2, r2
 80041a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041a6:	4b20      	ldr	r3, [pc, #128]	; (8004228 <HAL_RCC_ClockConfig+0x1b8>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0307 	and.w	r3, r3, #7
 80041ae:	683a      	ldr	r2, [r7, #0]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d001      	beq.n	80041b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e032      	b.n	800421e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0304 	and.w	r3, r3, #4
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d008      	beq.n	80041d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041c4:	4b19      	ldr	r3, [pc, #100]	; (800422c <HAL_RCC_ClockConfig+0x1bc>)
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	4916      	ldr	r1, [pc, #88]	; (800422c <HAL_RCC_ClockConfig+0x1bc>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0308 	and.w	r3, r3, #8
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d009      	beq.n	80041f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041e2:	4b12      	ldr	r3, [pc, #72]	; (800422c <HAL_RCC_ClockConfig+0x1bc>)
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	00db      	lsls	r3, r3, #3
 80041f0:	490e      	ldr	r1, [pc, #56]	; (800422c <HAL_RCC_ClockConfig+0x1bc>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041f6:	f000 f82d 	bl	8004254 <HAL_RCC_GetSysClockFreq>
 80041fa:	4602      	mov	r2, r0
 80041fc:	4b0b      	ldr	r3, [pc, #44]	; (800422c <HAL_RCC_ClockConfig+0x1bc>)
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	091b      	lsrs	r3, r3, #4
 8004202:	f003 030f 	and.w	r3, r3, #15
 8004206:	490a      	ldr	r1, [pc, #40]	; (8004230 <HAL_RCC_ClockConfig+0x1c0>)
 8004208:	5ccb      	ldrb	r3, [r1, r3]
 800420a:	fa22 f303 	lsr.w	r3, r2, r3
 800420e:	4a09      	ldr	r2, [pc, #36]	; (8004234 <HAL_RCC_ClockConfig+0x1c4>)
 8004210:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004212:	4b09      	ldr	r3, [pc, #36]	; (8004238 <HAL_RCC_ClockConfig+0x1c8>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4618      	mov	r0, r3
 8004218:	f7fc fee2 	bl	8000fe0 <HAL_InitTick>

  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	40023c00 	.word	0x40023c00
 800422c:	40023800 	.word	0x40023800
 8004230:	0800919c 	.word	0x0800919c
 8004234:	20000000 	.word	0x20000000
 8004238:	20000004 	.word	0x20000004

0800423c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800423c:	b480      	push	{r7}
 800423e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8004240:	4b03      	ldr	r3, [pc, #12]	; (8004250 <HAL_RCC_EnableCSS+0x14>)
 8004242:	2201      	movs	r2, #1
 8004244:	601a      	str	r2, [r3, #0]
}
 8004246:	bf00      	nop
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr
 8004250:	4247004c 	.word	0x4247004c

08004254 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004254:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004258:	b094      	sub	sp, #80	; 0x50
 800425a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800425c:	2300      	movs	r3, #0
 800425e:	647b      	str	r3, [r7, #68]	; 0x44
 8004260:	2300      	movs	r3, #0
 8004262:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004264:	2300      	movs	r3, #0
 8004266:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004268:	2300      	movs	r3, #0
 800426a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800426c:	4b79      	ldr	r3, [pc, #484]	; (8004454 <HAL_RCC_GetSysClockFreq+0x200>)
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f003 030c 	and.w	r3, r3, #12
 8004274:	2b08      	cmp	r3, #8
 8004276:	d00d      	beq.n	8004294 <HAL_RCC_GetSysClockFreq+0x40>
 8004278:	2b08      	cmp	r3, #8
 800427a:	f200 80e1 	bhi.w	8004440 <HAL_RCC_GetSysClockFreq+0x1ec>
 800427e:	2b00      	cmp	r3, #0
 8004280:	d002      	beq.n	8004288 <HAL_RCC_GetSysClockFreq+0x34>
 8004282:	2b04      	cmp	r3, #4
 8004284:	d003      	beq.n	800428e <HAL_RCC_GetSysClockFreq+0x3a>
 8004286:	e0db      	b.n	8004440 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004288:	4b73      	ldr	r3, [pc, #460]	; (8004458 <HAL_RCC_GetSysClockFreq+0x204>)
 800428a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800428c:	e0db      	b.n	8004446 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800428e:	4b73      	ldr	r3, [pc, #460]	; (800445c <HAL_RCC_GetSysClockFreq+0x208>)
 8004290:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004292:	e0d8      	b.n	8004446 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004294:	4b6f      	ldr	r3, [pc, #444]	; (8004454 <HAL_RCC_GetSysClockFreq+0x200>)
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800429c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800429e:	4b6d      	ldr	r3, [pc, #436]	; (8004454 <HAL_RCC_GetSysClockFreq+0x200>)
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d063      	beq.n	8004372 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042aa:	4b6a      	ldr	r3, [pc, #424]	; (8004454 <HAL_RCC_GetSysClockFreq+0x200>)
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	099b      	lsrs	r3, r3, #6
 80042b0:	2200      	movs	r2, #0
 80042b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80042b4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80042b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042bc:	633b      	str	r3, [r7, #48]	; 0x30
 80042be:	2300      	movs	r3, #0
 80042c0:	637b      	str	r3, [r7, #52]	; 0x34
 80042c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80042c6:	4622      	mov	r2, r4
 80042c8:	462b      	mov	r3, r5
 80042ca:	f04f 0000 	mov.w	r0, #0
 80042ce:	f04f 0100 	mov.w	r1, #0
 80042d2:	0159      	lsls	r1, r3, #5
 80042d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042d8:	0150      	lsls	r0, r2, #5
 80042da:	4602      	mov	r2, r0
 80042dc:	460b      	mov	r3, r1
 80042de:	4621      	mov	r1, r4
 80042e0:	1a51      	subs	r1, r2, r1
 80042e2:	6139      	str	r1, [r7, #16]
 80042e4:	4629      	mov	r1, r5
 80042e6:	eb63 0301 	sbc.w	r3, r3, r1
 80042ea:	617b      	str	r3, [r7, #20]
 80042ec:	f04f 0200 	mov.w	r2, #0
 80042f0:	f04f 0300 	mov.w	r3, #0
 80042f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042f8:	4659      	mov	r1, fp
 80042fa:	018b      	lsls	r3, r1, #6
 80042fc:	4651      	mov	r1, sl
 80042fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004302:	4651      	mov	r1, sl
 8004304:	018a      	lsls	r2, r1, #6
 8004306:	4651      	mov	r1, sl
 8004308:	ebb2 0801 	subs.w	r8, r2, r1
 800430c:	4659      	mov	r1, fp
 800430e:	eb63 0901 	sbc.w	r9, r3, r1
 8004312:	f04f 0200 	mov.w	r2, #0
 8004316:	f04f 0300 	mov.w	r3, #0
 800431a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800431e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004322:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004326:	4690      	mov	r8, r2
 8004328:	4699      	mov	r9, r3
 800432a:	4623      	mov	r3, r4
 800432c:	eb18 0303 	adds.w	r3, r8, r3
 8004330:	60bb      	str	r3, [r7, #8]
 8004332:	462b      	mov	r3, r5
 8004334:	eb49 0303 	adc.w	r3, r9, r3
 8004338:	60fb      	str	r3, [r7, #12]
 800433a:	f04f 0200 	mov.w	r2, #0
 800433e:	f04f 0300 	mov.w	r3, #0
 8004342:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004346:	4629      	mov	r1, r5
 8004348:	024b      	lsls	r3, r1, #9
 800434a:	4621      	mov	r1, r4
 800434c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004350:	4621      	mov	r1, r4
 8004352:	024a      	lsls	r2, r1, #9
 8004354:	4610      	mov	r0, r2
 8004356:	4619      	mov	r1, r3
 8004358:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800435a:	2200      	movs	r2, #0
 800435c:	62bb      	str	r3, [r7, #40]	; 0x28
 800435e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004360:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004364:	f7fb ff56 	bl	8000214 <__aeabi_uldivmod>
 8004368:	4602      	mov	r2, r0
 800436a:	460b      	mov	r3, r1
 800436c:	4613      	mov	r3, r2
 800436e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004370:	e058      	b.n	8004424 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004372:	4b38      	ldr	r3, [pc, #224]	; (8004454 <HAL_RCC_GetSysClockFreq+0x200>)
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	099b      	lsrs	r3, r3, #6
 8004378:	2200      	movs	r2, #0
 800437a:	4618      	mov	r0, r3
 800437c:	4611      	mov	r1, r2
 800437e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004382:	623b      	str	r3, [r7, #32]
 8004384:	2300      	movs	r3, #0
 8004386:	627b      	str	r3, [r7, #36]	; 0x24
 8004388:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800438c:	4642      	mov	r2, r8
 800438e:	464b      	mov	r3, r9
 8004390:	f04f 0000 	mov.w	r0, #0
 8004394:	f04f 0100 	mov.w	r1, #0
 8004398:	0159      	lsls	r1, r3, #5
 800439a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800439e:	0150      	lsls	r0, r2, #5
 80043a0:	4602      	mov	r2, r0
 80043a2:	460b      	mov	r3, r1
 80043a4:	4641      	mov	r1, r8
 80043a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80043aa:	4649      	mov	r1, r9
 80043ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80043b0:	f04f 0200 	mov.w	r2, #0
 80043b4:	f04f 0300 	mov.w	r3, #0
 80043b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80043bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80043c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80043c4:	ebb2 040a 	subs.w	r4, r2, sl
 80043c8:	eb63 050b 	sbc.w	r5, r3, fp
 80043cc:	f04f 0200 	mov.w	r2, #0
 80043d0:	f04f 0300 	mov.w	r3, #0
 80043d4:	00eb      	lsls	r3, r5, #3
 80043d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043da:	00e2      	lsls	r2, r4, #3
 80043dc:	4614      	mov	r4, r2
 80043de:	461d      	mov	r5, r3
 80043e0:	4643      	mov	r3, r8
 80043e2:	18e3      	adds	r3, r4, r3
 80043e4:	603b      	str	r3, [r7, #0]
 80043e6:	464b      	mov	r3, r9
 80043e8:	eb45 0303 	adc.w	r3, r5, r3
 80043ec:	607b      	str	r3, [r7, #4]
 80043ee:	f04f 0200 	mov.w	r2, #0
 80043f2:	f04f 0300 	mov.w	r3, #0
 80043f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043fa:	4629      	mov	r1, r5
 80043fc:	028b      	lsls	r3, r1, #10
 80043fe:	4621      	mov	r1, r4
 8004400:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004404:	4621      	mov	r1, r4
 8004406:	028a      	lsls	r2, r1, #10
 8004408:	4610      	mov	r0, r2
 800440a:	4619      	mov	r1, r3
 800440c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800440e:	2200      	movs	r2, #0
 8004410:	61bb      	str	r3, [r7, #24]
 8004412:	61fa      	str	r2, [r7, #28]
 8004414:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004418:	f7fb fefc 	bl	8000214 <__aeabi_uldivmod>
 800441c:	4602      	mov	r2, r0
 800441e:	460b      	mov	r3, r1
 8004420:	4613      	mov	r3, r2
 8004422:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004424:	4b0b      	ldr	r3, [pc, #44]	; (8004454 <HAL_RCC_GetSysClockFreq+0x200>)
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	0c1b      	lsrs	r3, r3, #16
 800442a:	f003 0303 	and.w	r3, r3, #3
 800442e:	3301      	adds	r3, #1
 8004430:	005b      	lsls	r3, r3, #1
 8004432:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004434:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004436:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004438:	fbb2 f3f3 	udiv	r3, r2, r3
 800443c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800443e:	e002      	b.n	8004446 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004440:	4b05      	ldr	r3, [pc, #20]	; (8004458 <HAL_RCC_GetSysClockFreq+0x204>)
 8004442:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004444:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004446:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004448:	4618      	mov	r0, r3
 800444a:	3750      	adds	r7, #80	; 0x50
 800444c:	46bd      	mov	sp, r7
 800444e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004452:	bf00      	nop
 8004454:	40023800 	.word	0x40023800
 8004458:	00f42400 	.word	0x00f42400
 800445c:	007a1200 	.word	0x007a1200

08004460 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004460:	b480      	push	{r7}
 8004462:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004464:	4b03      	ldr	r3, [pc, #12]	; (8004474 <HAL_RCC_GetHCLKFreq+0x14>)
 8004466:	681b      	ldr	r3, [r3, #0]
}
 8004468:	4618      	mov	r0, r3
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	20000000 	.word	0x20000000

08004478 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800447c:	4b06      	ldr	r3, [pc, #24]	; (8004498 <HAL_RCC_NMI_IRQHandler+0x20>)
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004484:	2b80      	cmp	r3, #128	; 0x80
 8004486:	d104      	bne.n	8004492 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8004488:	f000 f80a 	bl	80044a0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800448c:	4b03      	ldr	r3, [pc, #12]	; (800449c <HAL_RCC_NMI_IRQHandler+0x24>)
 800448e:	2280      	movs	r2, #128	; 0x80
 8004490:	701a      	strb	r2, [r3, #0]
  }
}
 8004492:	bf00      	nop
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	40023800 	.word	0x40023800
 800449c:	4002380e 	.word	0x4002380e

080044a0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80044a0:	b480      	push	{r7}
 80044a2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80044a4:	bf00      	nop
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
	...

080044b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b086      	sub	sp, #24
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044b8:	2300      	movs	r3, #0
 80044ba:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0U;
 80044bc:	2300      	movs	r3, #0
 80044be:	60fb      	str	r3, [r7, #12]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 80044c0:	2300      	movs	r3, #0
 80044c2:	617b      	str	r3, [r7, #20]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0301 	and.w	r3, r3, #1
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d010      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80044d0:	4b87      	ldr	r3, [pc, #540]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80044d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044d6:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	4984      	ldr	r1, [pc, #528]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d101      	bne.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      plli2sused = 1U;
 80044ee:	2301      	movs	r3, #1
 80044f0:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0302 	and.w	r3, r3, #2
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d010      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80044fe:	4b7c      	ldr	r3, [pc, #496]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004500:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004504:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	4978      	ldr	r1, [pc, #480]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800450e:	4313      	orrs	r3, r2
 8004510:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	699b      	ldr	r3, [r3, #24]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d101      	bne.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x70>
    {
      plli2sused = 1U;
 800451c:	2301      	movs	r3, #1
 800451e:	617b      	str	r3, [r7, #20]
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0308 	and.w	r3, r3, #8
 8004528:	2b00      	cmp	r3, #0
 800452a:	f000 8083 	beq.w	8004634 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800452e:	2300      	movs	r3, #0
 8004530:	60bb      	str	r3, [r7, #8]
 8004532:	4b6f      	ldr	r3, [pc, #444]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004536:	4a6e      	ldr	r2, [pc, #440]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800453c:	6413      	str	r3, [r2, #64]	; 0x40
 800453e:	4b6c      	ldr	r3, [pc, #432]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004546:	60bb      	str	r3, [r7, #8]
 8004548:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800454a:	4b6a      	ldr	r3, [pc, #424]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a69      	ldr	r2, [pc, #420]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004550:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004554:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004556:	f7fc fd87 	bl	8001068 <HAL_GetTick>
 800455a:	6138      	str	r0, [r7, #16]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800455c:	e008      	b.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800455e:	f7fc fd83 	bl	8001068 <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	2b02      	cmp	r3, #2
 800456a:	d901      	bls.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e162      	b.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x386>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004570:	4b60      	ldr	r3, [pc, #384]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004578:	2b00      	cmp	r3, #0
 800457a:	d0f0      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0xae>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800457c:	4b5c      	ldr	r3, [pc, #368]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800457e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004580:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004584:	60fb      	str	r3, [r7, #12]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d02f      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	69db      	ldr	r3, [r3, #28]
 8004590:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	429a      	cmp	r2, r3
 8004598:	d028      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800459a:	4b55      	ldr	r3, [pc, #340]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800459c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800459e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045a2:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045a4:	4b54      	ldr	r3, [pc, #336]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80045a6:	2201      	movs	r2, #1
 80045a8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045aa:	4b53      	ldr	r3, [pc, #332]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80045b0:	4a4f      	ldr	r2, [pc, #316]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80045b6:	4b4e      	ldr	r3, [pc, #312]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80045b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ba:	f003 0301 	and.w	r3, r3, #1
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d114      	bne.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80045c2:	f7fc fd51 	bl	8001068 <HAL_GetTick>
 80045c6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045c8:	e00a      	b.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045ca:	f7fc fd4d 	bl	8001068 <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80045d8:	4293      	cmp	r3, r2
 80045da:	d901      	bls.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x130>
          {
            return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e12a      	b.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x386>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045e0:	4b43      	ldr	r3, [pc, #268]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80045e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e4:	f003 0302 	and.w	r3, r3, #2
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d0ee      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x11a>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	69db      	ldr	r3, [r3, #28]
 80045f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045f8:	d10d      	bne.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80045fa:	4b3d      	ldr	r3, [pc, #244]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	69db      	ldr	r3, [r3, #28]
 8004606:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800460a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800460e:	4938      	ldr	r1, [pc, #224]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004610:	4313      	orrs	r3, r2
 8004612:	608b      	str	r3, [r1, #8]
 8004614:	e005      	b.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8004616:	4b36      	ldr	r3, [pc, #216]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	4a35      	ldr	r2, [pc, #212]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800461c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004620:	6093      	str	r3, [r2, #8]
 8004622:	4b33      	ldr	r3, [pc, #204]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004624:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	69db      	ldr	r3, [r3, #28]
 800462a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800462e:	4930      	ldr	r1, [pc, #192]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004630:	4313      	orrs	r3, r2
 8004632:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0304 	and.w	r3, r3, #4
 800463c:	2b00      	cmp	r3, #0
 800463e:	d004      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8004646:	4b2d      	ldr	r3, [pc, #180]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004648:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0310 	and.w	r3, r3, #16
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00a      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004656:	4b26      	ldr	r3, [pc, #152]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004658:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800465c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004664:	4922      	ldr	r1, [pc, #136]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004666:	4313      	orrs	r3, r2
 8004668:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0320 	and.w	r3, r3, #32
 8004674:	2b00      	cmp	r3, #0
 8004676:	d011      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004678:	4b1d      	ldr	r3, [pc, #116]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800467a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800467e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004686:	491a      	ldr	r1, [pc, #104]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004688:	4313      	orrs	r3, r2
 800468a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004692:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004696:	d101      	bne.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      plli2sused = 1U;
 8004698:	2301      	movs	r3, #1
 800469a:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d00a      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80046a8:	4b11      	ldr	r3, [pc, #68]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046ae:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a1b      	ldr	r3, [r3, #32]
 80046b6:	490e      	ldr	r1, [pc, #56]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d004      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2b80      	cmp	r3, #128	; 0x80
 80046ca:	f040 8091 	bne.w	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80046ce:	4b0c      	ldr	r3, [pc, #48]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80046d0:	2200      	movs	r2, #0
 80046d2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80046d4:	f7fc fcc8 	bl	8001068 <HAL_GetTick>
 80046d8:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046da:	e013      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80046dc:	f7fc fcc4 	bl	8001068 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d90c      	bls.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x254>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e0a3      	b.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x386>
 80046ee:	bf00      	nop
 80046f0:	40023800 	.word	0x40023800
 80046f4:	40007000 	.word	0x40007000
 80046f8:	42470e40 	.word	0x42470e40
 80046fc:	424711e0 	.word	0x424711e0
 8004700:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004704:	4b4e      	ldr	r3, [pc, #312]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d1e5      	bne.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x22c>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8004710:	4a4c      	ldr	r2, [pc, #304]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004716:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0301 	and.w	r3, r3, #1
 8004720:	2b00      	cmp	r3, #0
 8004722:	d003      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	695b      	ldr	r3, [r3, #20]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d023      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004734:	2b00      	cmp	r3, #0
 8004736:	d003      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x290>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d019      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004748:	2b00      	cmp	r3, #0
 800474a:	d004      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004750:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004754:	d00e      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 800475e:	2b00      	cmp	r3, #0
 8004760:	d019      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a1b      	ldr	r3, [r3, #32]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d115      	bne.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800476e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004772:	d110      	bne.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685a      	ldr	r2, [r3, #4]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	019b      	lsls	r3, r3, #6
 800477e:	431a      	orrs	r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	061b      	lsls	r3, r3, #24
 8004786:	431a      	orrs	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	071b      	lsls	r3, r3, #28
 800478e:	492c      	ldr	r1, [pc, #176]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004790:	4313      	orrs	r3, r2
 8004792:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d010      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x314>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685a      	ldr	r2, [r3, #4]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	019b      	lsls	r3, r3, #6
 80047ac:	431a      	orrs	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	061b      	lsls	r3, r3, #24
 80047b4:	431a      	orrs	r2, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	071b      	lsls	r3, r3, #28
 80047bc:	4920      	ldr	r1, [pc, #128]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80047c4:	4b20      	ldr	r3, [pc, #128]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 80047c6:	2201      	movs	r2, #1
 80047c8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80047ca:	f7fc fc4d 	bl	8001068 <HAL_GetTick>
 80047ce:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80047d0:	e008      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80047d2:	f7fc fc49 	bl	8001068 <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	2b02      	cmp	r3, #2
 80047de:	d901      	bls.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x334>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	e028      	b.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x386>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80047e4:	4b16      	ldr	r3, [pc, #88]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d0f0      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x322>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d00a      	beq.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80047fc:	4b10      	ldr	r3, [pc, #64]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80047fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004802:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480a:	490d      	ldr	r1, [pc, #52]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800480c:	4313      	orrs	r3, r2
 800480e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00a      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800481e:	4b08      	ldr	r3, [pc, #32]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004820:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004824:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482c:	4904      	ldr	r1, [pc, #16]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800482e:	4313      	orrs	r3, r2
 8004830:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3718      	adds	r7, #24
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	40023800 	.word	0x40023800
 8004844:	424710d8 	.word	0x424710d8
 8004848:	42470068 	.word	0x42470068

0800484c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b086      	sub	sp, #24
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d101      	bne.n	800485e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e273      	b.n	8004d46 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0301 	and.w	r3, r3, #1
 8004866:	2b00      	cmp	r3, #0
 8004868:	d075      	beq.n	8004956 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800486a:	4b88      	ldr	r3, [pc, #544]	; (8004a8c <HAL_RCC_OscConfig+0x240>)
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f003 030c 	and.w	r3, r3, #12
 8004872:	2b04      	cmp	r3, #4
 8004874:	d00c      	beq.n	8004890 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004876:	4b85      	ldr	r3, [pc, #532]	; (8004a8c <HAL_RCC_OscConfig+0x240>)
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800487e:	2b08      	cmp	r3, #8
 8004880:	d112      	bne.n	80048a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004882:	4b82      	ldr	r3, [pc, #520]	; (8004a8c <HAL_RCC_OscConfig+0x240>)
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800488a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800488e:	d10b      	bne.n	80048a8 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004890:	4b7e      	ldr	r3, [pc, #504]	; (8004a8c <HAL_RCC_OscConfig+0x240>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d05b      	beq.n	8004954 <HAL_RCC_OscConfig+0x108>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d157      	bne.n	8004954 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e24e      	b.n	8004d46 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048b0:	d106      	bne.n	80048c0 <HAL_RCC_OscConfig+0x74>
 80048b2:	4b76      	ldr	r3, [pc, #472]	; (8004a8c <HAL_RCC_OscConfig+0x240>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a75      	ldr	r2, [pc, #468]	; (8004a8c <HAL_RCC_OscConfig+0x240>)
 80048b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048bc:	6013      	str	r3, [r2, #0]
 80048be:	e01d      	b.n	80048fc <HAL_RCC_OscConfig+0xb0>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048c8:	d10c      	bne.n	80048e4 <HAL_RCC_OscConfig+0x98>
 80048ca:	4b70      	ldr	r3, [pc, #448]	; (8004a8c <HAL_RCC_OscConfig+0x240>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a6f      	ldr	r2, [pc, #444]	; (8004a8c <HAL_RCC_OscConfig+0x240>)
 80048d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048d4:	6013      	str	r3, [r2, #0]
 80048d6:	4b6d      	ldr	r3, [pc, #436]	; (8004a8c <HAL_RCC_OscConfig+0x240>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a6c      	ldr	r2, [pc, #432]	; (8004a8c <HAL_RCC_OscConfig+0x240>)
 80048dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048e0:	6013      	str	r3, [r2, #0]
 80048e2:	e00b      	b.n	80048fc <HAL_RCC_OscConfig+0xb0>
 80048e4:	4b69      	ldr	r3, [pc, #420]	; (8004a8c <HAL_RCC_OscConfig+0x240>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a68      	ldr	r2, [pc, #416]	; (8004a8c <HAL_RCC_OscConfig+0x240>)
 80048ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048ee:	6013      	str	r3, [r2, #0]
 80048f0:	4b66      	ldr	r3, [pc, #408]	; (8004a8c <HAL_RCC_OscConfig+0x240>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a65      	ldr	r2, [pc, #404]	; (8004a8c <HAL_RCC_OscConfig+0x240>)
 80048f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d013      	beq.n	800492c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004904:	f7fc fbb0 	bl	8001068 <HAL_GetTick>
 8004908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800490a:	e008      	b.n	800491e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800490c:	f7fc fbac 	bl	8001068 <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	2b64      	cmp	r3, #100	; 0x64
 8004918:	d901      	bls.n	800491e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e213      	b.n	8004d46 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800491e:	4b5b      	ldr	r3, [pc, #364]	; (8004a8c <HAL_RCC_OscConfig+0x240>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d0f0      	beq.n	800490c <HAL_RCC_OscConfig+0xc0>
 800492a:	e014      	b.n	8004956 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800492c:	f7fc fb9c 	bl	8001068 <HAL_GetTick>
 8004930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004932:	e008      	b.n	8004946 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004934:	f7fc fb98 	bl	8001068 <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	2b64      	cmp	r3, #100	; 0x64
 8004940:	d901      	bls.n	8004946 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e1ff      	b.n	8004d46 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004946:	4b51      	ldr	r3, [pc, #324]	; (8004a8c <HAL_RCC_OscConfig+0x240>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d1f0      	bne.n	8004934 <HAL_RCC_OscConfig+0xe8>
 8004952:	e000      	b.n	8004956 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004954:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0302 	and.w	r3, r3, #2
 800495e:	2b00      	cmp	r3, #0
 8004960:	d063      	beq.n	8004a2a <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004962:	4b4a      	ldr	r3, [pc, #296]	; (8004a8c <HAL_RCC_OscConfig+0x240>)
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f003 030c 	and.w	r3, r3, #12
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00b      	beq.n	8004986 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800496e:	4b47      	ldr	r3, [pc, #284]	; (8004a8c <HAL_RCC_OscConfig+0x240>)
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004976:	2b08      	cmp	r3, #8
 8004978:	d11c      	bne.n	80049b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800497a:	4b44      	ldr	r3, [pc, #272]	; (8004a8c <HAL_RCC_OscConfig+0x240>)
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d116      	bne.n	80049b4 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004986:	4b41      	ldr	r3, [pc, #260]	; (8004a8c <HAL_RCC_OscConfig+0x240>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0302 	and.w	r3, r3, #2
 800498e:	2b00      	cmp	r3, #0
 8004990:	d005      	beq.n	800499e <HAL_RCC_OscConfig+0x152>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	2b01      	cmp	r3, #1
 8004998:	d001      	beq.n	800499e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e1d3      	b.n	8004d46 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800499e:	4b3b      	ldr	r3, [pc, #236]	; (8004a8c <HAL_RCC_OscConfig+0x240>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	00db      	lsls	r3, r3, #3
 80049ac:	4937      	ldr	r1, [pc, #220]	; (8004a8c <HAL_RCC_OscConfig+0x240>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049b2:	e03a      	b.n	8004a2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d020      	beq.n	80049fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049bc:	4b34      	ldr	r3, [pc, #208]	; (8004a90 <HAL_RCC_OscConfig+0x244>)
 80049be:	2201      	movs	r2, #1
 80049c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c2:	f7fc fb51 	bl	8001068 <HAL_GetTick>
 80049c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049c8:	e008      	b.n	80049dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049ca:	f7fc fb4d 	bl	8001068 <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d901      	bls.n	80049dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e1b4      	b.n	8004d46 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049dc:	4b2b      	ldr	r3, [pc, #172]	; (8004a8c <HAL_RCC_OscConfig+0x240>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0302 	and.w	r3, r3, #2
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d0f0      	beq.n	80049ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049e8:	4b28      	ldr	r3, [pc, #160]	; (8004a8c <HAL_RCC_OscConfig+0x240>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	00db      	lsls	r3, r3, #3
 80049f6:	4925      	ldr	r1, [pc, #148]	; (8004a8c <HAL_RCC_OscConfig+0x240>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	600b      	str	r3, [r1, #0]
 80049fc:	e015      	b.n	8004a2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049fe:	4b24      	ldr	r3, [pc, #144]	; (8004a90 <HAL_RCC_OscConfig+0x244>)
 8004a00:	2200      	movs	r2, #0
 8004a02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a04:	f7fc fb30 	bl	8001068 <HAL_GetTick>
 8004a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a0a:	e008      	b.n	8004a1e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a0c:	f7fc fb2c 	bl	8001068 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d901      	bls.n	8004a1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e193      	b.n	8004d46 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a1e:	4b1b      	ldr	r3, [pc, #108]	; (8004a8c <HAL_RCC_OscConfig+0x240>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0302 	and.w	r3, r3, #2
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1f0      	bne.n	8004a0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0308 	and.w	r3, r3, #8
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d036      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	695b      	ldr	r3, [r3, #20]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d016      	beq.n	8004a6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a3e:	4b15      	ldr	r3, [pc, #84]	; (8004a94 <HAL_RCC_OscConfig+0x248>)
 8004a40:	2201      	movs	r2, #1
 8004a42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a44:	f7fc fb10 	bl	8001068 <HAL_GetTick>
 8004a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a4a:	e008      	b.n	8004a5e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a4c:	f7fc fb0c 	bl	8001068 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e173      	b.n	8004d46 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a5e:	4b0b      	ldr	r3, [pc, #44]	; (8004a8c <HAL_RCC_OscConfig+0x240>)
 8004a60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a62:	f003 0302 	and.w	r3, r3, #2
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d0f0      	beq.n	8004a4c <HAL_RCC_OscConfig+0x200>
 8004a6a:	e01b      	b.n	8004aa4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a6c:	4b09      	ldr	r3, [pc, #36]	; (8004a94 <HAL_RCC_OscConfig+0x248>)
 8004a6e:	2200      	movs	r2, #0
 8004a70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a72:	f7fc faf9 	bl	8001068 <HAL_GetTick>
 8004a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a78:	e00e      	b.n	8004a98 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a7a:	f7fc faf5 	bl	8001068 <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d907      	bls.n	8004a98 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e15c      	b.n	8004d46 <HAL_RCC_OscConfig+0x4fa>
 8004a8c:	40023800 	.word	0x40023800
 8004a90:	42470000 	.word	0x42470000
 8004a94:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a98:	4b8a      	ldr	r3, [pc, #552]	; (8004cc4 <HAL_RCC_OscConfig+0x478>)
 8004a9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a9c:	f003 0302 	and.w	r3, r3, #2
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d1ea      	bne.n	8004a7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0304 	and.w	r3, r3, #4
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f000 8097 	beq.w	8004be0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ab6:	4b83      	ldr	r3, [pc, #524]	; (8004cc4 <HAL_RCC_OscConfig+0x478>)
 8004ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d10f      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	60bb      	str	r3, [r7, #8]
 8004ac6:	4b7f      	ldr	r3, [pc, #508]	; (8004cc4 <HAL_RCC_OscConfig+0x478>)
 8004ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aca:	4a7e      	ldr	r2, [pc, #504]	; (8004cc4 <HAL_RCC_OscConfig+0x478>)
 8004acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ad2:	4b7c      	ldr	r3, [pc, #496]	; (8004cc4 <HAL_RCC_OscConfig+0x478>)
 8004ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ada:	60bb      	str	r3, [r7, #8]
 8004adc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ae2:	4b79      	ldr	r3, [pc, #484]	; (8004cc8 <HAL_RCC_OscConfig+0x47c>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d118      	bne.n	8004b20 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004aee:	4b76      	ldr	r3, [pc, #472]	; (8004cc8 <HAL_RCC_OscConfig+0x47c>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a75      	ldr	r2, [pc, #468]	; (8004cc8 <HAL_RCC_OscConfig+0x47c>)
 8004af4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004af8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004afa:	f7fc fab5 	bl	8001068 <HAL_GetTick>
 8004afe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b00:	e008      	b.n	8004b14 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b02:	f7fc fab1 	bl	8001068 <HAL_GetTick>
 8004b06:	4602      	mov	r2, r0
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d901      	bls.n	8004b14 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	e118      	b.n	8004d46 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b14:	4b6c      	ldr	r3, [pc, #432]	; (8004cc8 <HAL_RCC_OscConfig+0x47c>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d0f0      	beq.n	8004b02 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d106      	bne.n	8004b36 <HAL_RCC_OscConfig+0x2ea>
 8004b28:	4b66      	ldr	r3, [pc, #408]	; (8004cc4 <HAL_RCC_OscConfig+0x478>)
 8004b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b2c:	4a65      	ldr	r2, [pc, #404]	; (8004cc4 <HAL_RCC_OscConfig+0x478>)
 8004b2e:	f043 0301 	orr.w	r3, r3, #1
 8004b32:	6713      	str	r3, [r2, #112]	; 0x70
 8004b34:	e01c      	b.n	8004b70 <HAL_RCC_OscConfig+0x324>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	2b05      	cmp	r3, #5
 8004b3c:	d10c      	bne.n	8004b58 <HAL_RCC_OscConfig+0x30c>
 8004b3e:	4b61      	ldr	r3, [pc, #388]	; (8004cc4 <HAL_RCC_OscConfig+0x478>)
 8004b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b42:	4a60      	ldr	r2, [pc, #384]	; (8004cc4 <HAL_RCC_OscConfig+0x478>)
 8004b44:	f043 0304 	orr.w	r3, r3, #4
 8004b48:	6713      	str	r3, [r2, #112]	; 0x70
 8004b4a:	4b5e      	ldr	r3, [pc, #376]	; (8004cc4 <HAL_RCC_OscConfig+0x478>)
 8004b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b4e:	4a5d      	ldr	r2, [pc, #372]	; (8004cc4 <HAL_RCC_OscConfig+0x478>)
 8004b50:	f043 0301 	orr.w	r3, r3, #1
 8004b54:	6713      	str	r3, [r2, #112]	; 0x70
 8004b56:	e00b      	b.n	8004b70 <HAL_RCC_OscConfig+0x324>
 8004b58:	4b5a      	ldr	r3, [pc, #360]	; (8004cc4 <HAL_RCC_OscConfig+0x478>)
 8004b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b5c:	4a59      	ldr	r2, [pc, #356]	; (8004cc4 <HAL_RCC_OscConfig+0x478>)
 8004b5e:	f023 0301 	bic.w	r3, r3, #1
 8004b62:	6713      	str	r3, [r2, #112]	; 0x70
 8004b64:	4b57      	ldr	r3, [pc, #348]	; (8004cc4 <HAL_RCC_OscConfig+0x478>)
 8004b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b68:	4a56      	ldr	r2, [pc, #344]	; (8004cc4 <HAL_RCC_OscConfig+0x478>)
 8004b6a:	f023 0304 	bic.w	r3, r3, #4
 8004b6e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d015      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b78:	f7fc fa76 	bl	8001068 <HAL_GetTick>
 8004b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b7e:	e00a      	b.n	8004b96 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b80:	f7fc fa72 	bl	8001068 <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d901      	bls.n	8004b96 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e0d7      	b.n	8004d46 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b96:	4b4b      	ldr	r3, [pc, #300]	; (8004cc4 <HAL_RCC_OscConfig+0x478>)
 8004b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b9a:	f003 0302 	and.w	r3, r3, #2
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d0ee      	beq.n	8004b80 <HAL_RCC_OscConfig+0x334>
 8004ba2:	e014      	b.n	8004bce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ba4:	f7fc fa60 	bl	8001068 <HAL_GetTick>
 8004ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004baa:	e00a      	b.n	8004bc2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bac:	f7fc fa5c 	bl	8001068 <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d901      	bls.n	8004bc2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e0c1      	b.n	8004d46 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bc2:	4b40      	ldr	r3, [pc, #256]	; (8004cc4 <HAL_RCC_OscConfig+0x478>)
 8004bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc6:	f003 0302 	and.w	r3, r3, #2
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1ee      	bne.n	8004bac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bce:	7dfb      	ldrb	r3, [r7, #23]
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d105      	bne.n	8004be0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bd4:	4b3b      	ldr	r3, [pc, #236]	; (8004cc4 <HAL_RCC_OscConfig+0x478>)
 8004bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd8:	4a3a      	ldr	r2, [pc, #232]	; (8004cc4 <HAL_RCC_OscConfig+0x478>)
 8004bda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bde:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	f000 80ad 	beq.w	8004d44 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004bea:	4b36      	ldr	r3, [pc, #216]	; (8004cc4 <HAL_RCC_OscConfig+0x478>)
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	f003 030c 	and.w	r3, r3, #12
 8004bf2:	2b08      	cmp	r3, #8
 8004bf4:	d060      	beq.n	8004cb8 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	699b      	ldr	r3, [r3, #24]
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d145      	bne.n	8004c8a <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bfe:	4b33      	ldr	r3, [pc, #204]	; (8004ccc <HAL_RCC_OscConfig+0x480>)
 8004c00:	2200      	movs	r2, #0
 8004c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c04:	f7fc fa30 	bl	8001068 <HAL_GetTick>
 8004c08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c0a:	e008      	b.n	8004c1e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c0c:	f7fc fa2c 	bl	8001068 <HAL_GetTick>
 8004c10:	4602      	mov	r2, r0
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d901      	bls.n	8004c1e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e093      	b.n	8004d46 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c1e:	4b29      	ldr	r3, [pc, #164]	; (8004cc4 <HAL_RCC_OscConfig+0x478>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1f0      	bne.n	8004c0c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	69da      	ldr	r2, [r3, #28]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a1b      	ldr	r3, [r3, #32]
 8004c32:	431a      	orrs	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c38:	019b      	lsls	r3, r3, #6
 8004c3a:	431a      	orrs	r2, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c40:	085b      	lsrs	r3, r3, #1
 8004c42:	3b01      	subs	r3, #1
 8004c44:	041b      	lsls	r3, r3, #16
 8004c46:	431a      	orrs	r2, r3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4c:	061b      	lsls	r3, r3, #24
 8004c4e:	431a      	orrs	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c54:	071b      	lsls	r3, r3, #28
 8004c56:	491b      	ldr	r1, [pc, #108]	; (8004cc4 <HAL_RCC_OscConfig+0x478>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c5c:	4b1b      	ldr	r3, [pc, #108]	; (8004ccc <HAL_RCC_OscConfig+0x480>)
 8004c5e:	2201      	movs	r2, #1
 8004c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c62:	f7fc fa01 	bl	8001068 <HAL_GetTick>
 8004c66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c68:	e008      	b.n	8004c7c <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c6a:	f7fc f9fd 	bl	8001068 <HAL_GetTick>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d901      	bls.n	8004c7c <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	e064      	b.n	8004d46 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c7c:	4b11      	ldr	r3, [pc, #68]	; (8004cc4 <HAL_RCC_OscConfig+0x478>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d0f0      	beq.n	8004c6a <HAL_RCC_OscConfig+0x41e>
 8004c88:	e05c      	b.n	8004d44 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c8a:	4b10      	ldr	r3, [pc, #64]	; (8004ccc <HAL_RCC_OscConfig+0x480>)
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c90:	f7fc f9ea 	bl	8001068 <HAL_GetTick>
 8004c94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c96:	e008      	b.n	8004caa <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c98:	f7fc f9e6 	bl	8001068 <HAL_GetTick>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d901      	bls.n	8004caa <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e04d      	b.n	8004d46 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004caa:	4b06      	ldr	r3, [pc, #24]	; (8004cc4 <HAL_RCC_OscConfig+0x478>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d1f0      	bne.n	8004c98 <HAL_RCC_OscConfig+0x44c>
 8004cb6:	e045      	b.n	8004d44 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	699b      	ldr	r3, [r3, #24]
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d107      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e040      	b.n	8004d46 <HAL_RCC_OscConfig+0x4fa>
 8004cc4:	40023800 	.word	0x40023800
 8004cc8:	40007000 	.word	0x40007000
 8004ccc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004cd0:	4b1f      	ldr	r3, [pc, #124]	; (8004d50 <HAL_RCC_OscConfig+0x504>)
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d030      	beq.n	8004d40 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d129      	bne.n	8004d40 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d122      	bne.n	8004d40 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d00:	4013      	ands	r3, r2
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d119      	bne.n	8004d40 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d16:	085b      	lsrs	r3, r3, #1
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d10f      	bne.n	8004d40 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d107      	bne.n	8004d40 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d001      	beq.n	8004d44 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e000      	b.n	8004d46 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3718      	adds	r7, #24
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	40023800 	.word	0x40023800

08004d54 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d54:	b084      	sub	sp, #16
 8004d56:	b580      	push	{r7, lr}
 8004d58:	b084      	sub	sp, #16
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
 8004d5e:	f107 001c 	add.w	r0, r7, #28
 8004d62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d122      	bne.n	8004db2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004d80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004d94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d105      	bne.n	8004da6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f001 fbe8 	bl	800657c <USB_CoreReset>
 8004dac:	4603      	mov	r3, r0
 8004dae:	73fb      	strb	r3, [r7, #15]
 8004db0:	e01a      	b.n	8004de8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f001 fbdc 	bl	800657c <USB_CoreReset>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004dc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d106      	bne.n	8004ddc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	639a      	str	r2, [r3, #56]	; 0x38
 8004dda:	e005      	b.n	8004de8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d10b      	bne.n	8004e06 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f043 0206 	orr.w	r2, r3, #6
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f043 0220 	orr.w	r2, r3, #32
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3710      	adds	r7, #16
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e12:	b004      	add	sp, #16
 8004e14:	4770      	bx	lr
	...

08004e18 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b087      	sub	sp, #28
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	4613      	mov	r3, r2
 8004e24:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004e26:	79fb      	ldrb	r3, [r7, #7]
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d165      	bne.n	8004ef8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	4a41      	ldr	r2, [pc, #260]	; (8004f34 <USB_SetTurnaroundTime+0x11c>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d906      	bls.n	8004e42 <USB_SetTurnaroundTime+0x2a>
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	4a40      	ldr	r2, [pc, #256]	; (8004f38 <USB_SetTurnaroundTime+0x120>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d202      	bcs.n	8004e42 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004e3c:	230f      	movs	r3, #15
 8004e3e:	617b      	str	r3, [r7, #20]
 8004e40:	e062      	b.n	8004f08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	4a3c      	ldr	r2, [pc, #240]	; (8004f38 <USB_SetTurnaroundTime+0x120>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d306      	bcc.n	8004e58 <USB_SetTurnaroundTime+0x40>
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	4a3b      	ldr	r2, [pc, #236]	; (8004f3c <USB_SetTurnaroundTime+0x124>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d202      	bcs.n	8004e58 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004e52:	230e      	movs	r3, #14
 8004e54:	617b      	str	r3, [r7, #20]
 8004e56:	e057      	b.n	8004f08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	4a38      	ldr	r2, [pc, #224]	; (8004f3c <USB_SetTurnaroundTime+0x124>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d306      	bcc.n	8004e6e <USB_SetTurnaroundTime+0x56>
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	4a37      	ldr	r2, [pc, #220]	; (8004f40 <USB_SetTurnaroundTime+0x128>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d202      	bcs.n	8004e6e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004e68:	230d      	movs	r3, #13
 8004e6a:	617b      	str	r3, [r7, #20]
 8004e6c:	e04c      	b.n	8004f08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	4a33      	ldr	r2, [pc, #204]	; (8004f40 <USB_SetTurnaroundTime+0x128>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d306      	bcc.n	8004e84 <USB_SetTurnaroundTime+0x6c>
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	4a32      	ldr	r2, [pc, #200]	; (8004f44 <USB_SetTurnaroundTime+0x12c>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d802      	bhi.n	8004e84 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004e7e:	230c      	movs	r3, #12
 8004e80:	617b      	str	r3, [r7, #20]
 8004e82:	e041      	b.n	8004f08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	4a2f      	ldr	r2, [pc, #188]	; (8004f44 <USB_SetTurnaroundTime+0x12c>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d906      	bls.n	8004e9a <USB_SetTurnaroundTime+0x82>
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	4a2e      	ldr	r2, [pc, #184]	; (8004f48 <USB_SetTurnaroundTime+0x130>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d802      	bhi.n	8004e9a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004e94:	230b      	movs	r3, #11
 8004e96:	617b      	str	r3, [r7, #20]
 8004e98:	e036      	b.n	8004f08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	4a2a      	ldr	r2, [pc, #168]	; (8004f48 <USB_SetTurnaroundTime+0x130>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d906      	bls.n	8004eb0 <USB_SetTurnaroundTime+0x98>
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	4a29      	ldr	r2, [pc, #164]	; (8004f4c <USB_SetTurnaroundTime+0x134>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d802      	bhi.n	8004eb0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004eaa:	230a      	movs	r3, #10
 8004eac:	617b      	str	r3, [r7, #20]
 8004eae:	e02b      	b.n	8004f08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	4a26      	ldr	r2, [pc, #152]	; (8004f4c <USB_SetTurnaroundTime+0x134>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d906      	bls.n	8004ec6 <USB_SetTurnaroundTime+0xae>
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	4a25      	ldr	r2, [pc, #148]	; (8004f50 <USB_SetTurnaroundTime+0x138>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d202      	bcs.n	8004ec6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004ec0:	2309      	movs	r3, #9
 8004ec2:	617b      	str	r3, [r7, #20]
 8004ec4:	e020      	b.n	8004f08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	4a21      	ldr	r2, [pc, #132]	; (8004f50 <USB_SetTurnaroundTime+0x138>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d306      	bcc.n	8004edc <USB_SetTurnaroundTime+0xc4>
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	4a20      	ldr	r2, [pc, #128]	; (8004f54 <USB_SetTurnaroundTime+0x13c>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d802      	bhi.n	8004edc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004ed6:	2308      	movs	r3, #8
 8004ed8:	617b      	str	r3, [r7, #20]
 8004eda:	e015      	b.n	8004f08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	4a1d      	ldr	r2, [pc, #116]	; (8004f54 <USB_SetTurnaroundTime+0x13c>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d906      	bls.n	8004ef2 <USB_SetTurnaroundTime+0xda>
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	4a1c      	ldr	r2, [pc, #112]	; (8004f58 <USB_SetTurnaroundTime+0x140>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d202      	bcs.n	8004ef2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004eec:	2307      	movs	r3, #7
 8004eee:	617b      	str	r3, [r7, #20]
 8004ef0:	e00a      	b.n	8004f08 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004ef2:	2306      	movs	r3, #6
 8004ef4:	617b      	str	r3, [r7, #20]
 8004ef6:	e007      	b.n	8004f08 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004ef8:	79fb      	ldrb	r3, [r7, #7]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d102      	bne.n	8004f04 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004efe:	2309      	movs	r3, #9
 8004f00:	617b      	str	r3, [r7, #20]
 8004f02:	e001      	b.n	8004f08 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004f04:	2309      	movs	r3, #9
 8004f06:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	68da      	ldr	r2, [r3, #12]
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	029b      	lsls	r3, r3, #10
 8004f1c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004f20:	431a      	orrs	r2, r3
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004f26:	2300      	movs	r3, #0
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	371c      	adds	r7, #28
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr
 8004f34:	00d8acbf 	.word	0x00d8acbf
 8004f38:	00e4e1c0 	.word	0x00e4e1c0
 8004f3c:	00f42400 	.word	0x00f42400
 8004f40:	01067380 	.word	0x01067380
 8004f44:	011a499f 	.word	0x011a499f
 8004f48:	01312cff 	.word	0x01312cff
 8004f4c:	014ca43f 	.word	0x014ca43f
 8004f50:	016e3600 	.word	0x016e3600
 8004f54:	01a6ab1f 	.word	0x01a6ab1f
 8004f58:	01e84800 	.word	0x01e84800

08004f5c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	f043 0201 	orr.w	r2, r3, #1
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	370c      	adds	r7, #12
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr

08004f7e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f7e:	b480      	push	{r7}
 8004f80:	b083      	sub	sp, #12
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	f023 0201 	bic.w	r2, r3, #1
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	370c      	adds	r7, #12
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	460b      	mov	r3, r1
 8004faa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004fac:	2300      	movs	r3, #0
 8004fae:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004fbc:	78fb      	ldrb	r3, [r7, #3]
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d115      	bne.n	8004fee <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004fce:	2001      	movs	r0, #1
 8004fd0:	f7fc f856 	bl	8001080 <HAL_Delay>
      ms++;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f001 fa3f 	bl	800645e <USB_GetMode>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d01e      	beq.n	8005024 <USB_SetCurrentMode+0x84>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2b31      	cmp	r3, #49	; 0x31
 8004fea:	d9f0      	bls.n	8004fce <USB_SetCurrentMode+0x2e>
 8004fec:	e01a      	b.n	8005024 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004fee:	78fb      	ldrb	r3, [r7, #3]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d115      	bne.n	8005020 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005000:	2001      	movs	r0, #1
 8005002:	f7fc f83d 	bl	8001080 <HAL_Delay>
      ms++;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	3301      	adds	r3, #1
 800500a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f001 fa26 	bl	800645e <USB_GetMode>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d005      	beq.n	8005024 <USB_SetCurrentMode+0x84>
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2b31      	cmp	r3, #49	; 0x31
 800501c:	d9f0      	bls.n	8005000 <USB_SetCurrentMode+0x60>
 800501e:	e001      	b.n	8005024 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e005      	b.n	8005030 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2b32      	cmp	r3, #50	; 0x32
 8005028:	d101      	bne.n	800502e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e000      	b.n	8005030 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	3710      	adds	r7, #16
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005038:	b084      	sub	sp, #16
 800503a:	b580      	push	{r7, lr}
 800503c:	b086      	sub	sp, #24
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
 8005042:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005046:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800504a:	2300      	movs	r3, #0
 800504c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005052:	2300      	movs	r3, #0
 8005054:	613b      	str	r3, [r7, #16]
 8005056:	e009      	b.n	800506c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	3340      	adds	r3, #64	; 0x40
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	4413      	add	r3, r2
 8005062:	2200      	movs	r2, #0
 8005064:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	3301      	adds	r3, #1
 800506a:	613b      	str	r3, [r7, #16]
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	2b0e      	cmp	r3, #14
 8005070:	d9f2      	bls.n	8005058 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005072:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005074:	2b00      	cmp	r3, #0
 8005076:	d11c      	bne.n	80050b2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005086:	f043 0302 	orr.w	r3, r3, #2
 800508a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005090:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	601a      	str	r2, [r3, #0]
 80050b0:	e005      	b.n	80050be <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80050c4:	461a      	mov	r2, r3
 80050c6:	2300      	movs	r3, #0
 80050c8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050d0:	4619      	mov	r1, r3
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050d8:	461a      	mov	r2, r3
 80050da:	680b      	ldr	r3, [r1, #0]
 80050dc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d10c      	bne.n	80050fe <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80050e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d104      	bne.n	80050f4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80050ea:	2100      	movs	r1, #0
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f000 f965 	bl	80053bc <USB_SetDevSpeed>
 80050f2:	e008      	b.n	8005106 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80050f4:	2101      	movs	r1, #1
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 f960 	bl	80053bc <USB_SetDevSpeed>
 80050fc:	e003      	b.n	8005106 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80050fe:	2103      	movs	r1, #3
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f000 f95b 	bl	80053bc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005106:	2110      	movs	r1, #16
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f000 f8f3 	bl	80052f4 <USB_FlushTxFifo>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d001      	beq.n	8005118 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f000 f91f 	bl	800535c <USB_FlushRxFifo>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d001      	beq.n	8005128 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800512e:	461a      	mov	r2, r3
 8005130:	2300      	movs	r3, #0
 8005132:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800513a:	461a      	mov	r2, r3
 800513c:	2300      	movs	r3, #0
 800513e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005146:	461a      	mov	r2, r3
 8005148:	2300      	movs	r3, #0
 800514a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800514c:	2300      	movs	r3, #0
 800514e:	613b      	str	r3, [r7, #16]
 8005150:	e043      	b.n	80051da <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	015a      	lsls	r2, r3, #5
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	4413      	add	r3, r2
 800515a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005164:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005168:	d118      	bne.n	800519c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d10a      	bne.n	8005186 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	015a      	lsls	r2, r3, #5
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	4413      	add	r3, r2
 8005178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800517c:	461a      	mov	r2, r3
 800517e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005182:	6013      	str	r3, [r2, #0]
 8005184:	e013      	b.n	80051ae <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	015a      	lsls	r2, r3, #5
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	4413      	add	r3, r2
 800518e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005192:	461a      	mov	r2, r3
 8005194:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005198:	6013      	str	r3, [r2, #0]
 800519a:	e008      	b.n	80051ae <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	015a      	lsls	r2, r3, #5
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	4413      	add	r3, r2
 80051a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051a8:	461a      	mov	r2, r3
 80051aa:	2300      	movs	r3, #0
 80051ac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	015a      	lsls	r2, r3, #5
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	4413      	add	r3, r2
 80051b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ba:	461a      	mov	r2, r3
 80051bc:	2300      	movs	r3, #0
 80051be:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	015a      	lsls	r2, r3, #5
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	4413      	add	r3, r2
 80051c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051cc:	461a      	mov	r2, r3
 80051ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80051d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	3301      	adds	r3, #1
 80051d8:	613b      	str	r3, [r7, #16]
 80051da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d3b7      	bcc.n	8005152 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051e2:	2300      	movs	r3, #0
 80051e4:	613b      	str	r3, [r7, #16]
 80051e6:	e043      	b.n	8005270 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	015a      	lsls	r2, r3, #5
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	4413      	add	r3, r2
 80051f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051fe:	d118      	bne.n	8005232 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d10a      	bne.n	800521c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	015a      	lsls	r2, r3, #5
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	4413      	add	r3, r2
 800520e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005212:	461a      	mov	r2, r3
 8005214:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005218:	6013      	str	r3, [r2, #0]
 800521a:	e013      	b.n	8005244 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	015a      	lsls	r2, r3, #5
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	4413      	add	r3, r2
 8005224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005228:	461a      	mov	r2, r3
 800522a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800522e:	6013      	str	r3, [r2, #0]
 8005230:	e008      	b.n	8005244 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	015a      	lsls	r2, r3, #5
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	4413      	add	r3, r2
 800523a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800523e:	461a      	mov	r2, r3
 8005240:	2300      	movs	r3, #0
 8005242:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	015a      	lsls	r2, r3, #5
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	4413      	add	r3, r2
 800524c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005250:	461a      	mov	r2, r3
 8005252:	2300      	movs	r3, #0
 8005254:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	015a      	lsls	r2, r3, #5
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	4413      	add	r3, r2
 800525e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005262:	461a      	mov	r2, r3
 8005264:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005268:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	3301      	adds	r3, #1
 800526e:	613b      	str	r3, [r7, #16]
 8005270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005272:	693a      	ldr	r2, [r7, #16]
 8005274:	429a      	cmp	r2, r3
 8005276:	d3b7      	bcc.n	80051e8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800527e:	691b      	ldr	r3, [r3, #16]
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005286:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800528a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005298:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800529a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800529c:	2b00      	cmp	r3, #0
 800529e:	d105      	bne.n	80052ac <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	699b      	ldr	r3, [r3, #24]
 80052a4:	f043 0210 	orr.w	r2, r3, #16
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	699a      	ldr	r2, [r3, #24]
 80052b0:	4b0f      	ldr	r3, [pc, #60]	; (80052f0 <USB_DevInit+0x2b8>)
 80052b2:	4313      	orrs	r3, r2
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80052b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d005      	beq.n	80052ca <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	f043 0208 	orr.w	r2, r3, #8
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80052ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d107      	bne.n	80052e0 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	699b      	ldr	r3, [r3, #24]
 80052d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052d8:	f043 0304 	orr.w	r3, r3, #4
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80052e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3718      	adds	r7, #24
 80052e6:	46bd      	mov	sp, r7
 80052e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052ec:	b004      	add	sp, #16
 80052ee:	4770      	bx	lr
 80052f0:	803c3800 	.word	0x803c3800

080052f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b085      	sub	sp, #20
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80052fe:	2300      	movs	r3, #0
 8005300:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	3301      	adds	r3, #1
 8005306:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	4a13      	ldr	r2, [pc, #76]	; (8005358 <USB_FlushTxFifo+0x64>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d901      	bls.n	8005314 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	e01b      	b.n	800534c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	2b00      	cmp	r3, #0
 800531a:	daf2      	bge.n	8005302 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800531c:	2300      	movs	r3, #0
 800531e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	019b      	lsls	r3, r3, #6
 8005324:	f043 0220 	orr.w	r2, r3, #32
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	3301      	adds	r3, #1
 8005330:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	4a08      	ldr	r2, [pc, #32]	; (8005358 <USB_FlushTxFifo+0x64>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d901      	bls.n	800533e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e006      	b.n	800534c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	f003 0320 	and.w	r3, r3, #32
 8005346:	2b20      	cmp	r3, #32
 8005348:	d0f0      	beq.n	800532c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	3714      	adds	r7, #20
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr
 8005358:	00030d40 	.word	0x00030d40

0800535c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800535c:	b480      	push	{r7}
 800535e:	b085      	sub	sp, #20
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005364:	2300      	movs	r3, #0
 8005366:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	3301      	adds	r3, #1
 800536c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	4a11      	ldr	r2, [pc, #68]	; (80053b8 <USB_FlushRxFifo+0x5c>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d901      	bls.n	800537a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	e018      	b.n	80053ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	2b00      	cmp	r3, #0
 8005380:	daf2      	bge.n	8005368 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005382:	2300      	movs	r3, #0
 8005384:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2210      	movs	r2, #16
 800538a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	3301      	adds	r3, #1
 8005390:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	4a08      	ldr	r2, [pc, #32]	; (80053b8 <USB_FlushRxFifo+0x5c>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d901      	bls.n	800539e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	e006      	b.n	80053ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	f003 0310 	and.w	r3, r3, #16
 80053a6:	2b10      	cmp	r3, #16
 80053a8:	d0f0      	beq.n	800538c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3714      	adds	r7, #20
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr
 80053b8:	00030d40 	.word	0x00030d40

080053bc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	460b      	mov	r3, r1
 80053c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	78fb      	ldrb	r3, [r7, #3]
 80053d6:	68f9      	ldr	r1, [r7, #12]
 80053d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053dc:	4313      	orrs	r3, r2
 80053de:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3714      	adds	r7, #20
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr

080053ee <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80053ee:	b480      	push	{r7}
 80053f0:	b087      	sub	sp, #28
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	f003 0306 	and.w	r3, r3, #6
 8005406:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d102      	bne.n	8005414 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800540e:	2300      	movs	r3, #0
 8005410:	75fb      	strb	r3, [r7, #23]
 8005412:	e00a      	b.n	800542a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2b02      	cmp	r3, #2
 8005418:	d002      	beq.n	8005420 <USB_GetDevSpeed+0x32>
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2b06      	cmp	r3, #6
 800541e:	d102      	bne.n	8005426 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005420:	2302      	movs	r3, #2
 8005422:	75fb      	strb	r3, [r7, #23]
 8005424:	e001      	b.n	800542a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005426:	230f      	movs	r3, #15
 8005428:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800542a:	7dfb      	ldrb	r3, [r7, #23]
}
 800542c:	4618      	mov	r0, r3
 800542e:	371c      	adds	r7, #28
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005438:	b480      	push	{r7}
 800543a:	b085      	sub	sp, #20
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	785b      	ldrb	r3, [r3, #1]
 8005450:	2b01      	cmp	r3, #1
 8005452:	d13a      	bne.n	80054ca <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800545a:	69da      	ldr	r2, [r3, #28]
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	f003 030f 	and.w	r3, r3, #15
 8005464:	2101      	movs	r1, #1
 8005466:	fa01 f303 	lsl.w	r3, r1, r3
 800546a:	b29b      	uxth	r3, r3
 800546c:	68f9      	ldr	r1, [r7, #12]
 800546e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005472:	4313      	orrs	r3, r2
 8005474:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	015a      	lsls	r2, r3, #5
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	4413      	add	r3, r2
 800547e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005488:	2b00      	cmp	r3, #0
 800548a:	d155      	bne.n	8005538 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	015a      	lsls	r2, r3, #5
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	4413      	add	r3, r2
 8005494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	791b      	ldrb	r3, [r3, #4]
 80054a6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80054a8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	059b      	lsls	r3, r3, #22
 80054ae:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80054b0:	4313      	orrs	r3, r2
 80054b2:	68ba      	ldr	r2, [r7, #8]
 80054b4:	0151      	lsls	r1, r2, #5
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	440a      	add	r2, r1
 80054ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054c6:	6013      	str	r3, [r2, #0]
 80054c8:	e036      	b.n	8005538 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054d0:	69da      	ldr	r2, [r3, #28]
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	f003 030f 	and.w	r3, r3, #15
 80054da:	2101      	movs	r1, #1
 80054dc:	fa01 f303 	lsl.w	r3, r1, r3
 80054e0:	041b      	lsls	r3, r3, #16
 80054e2:	68f9      	ldr	r1, [r7, #12]
 80054e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054e8:	4313      	orrs	r3, r2
 80054ea:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	015a      	lsls	r2, r3, #5
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	4413      	add	r3, r2
 80054f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d11a      	bne.n	8005538 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	015a      	lsls	r2, r3, #5
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	4413      	add	r3, r2
 800550a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	791b      	ldrb	r3, [r3, #4]
 800551c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800551e:	430b      	orrs	r3, r1
 8005520:	4313      	orrs	r3, r2
 8005522:	68ba      	ldr	r2, [r7, #8]
 8005524:	0151      	lsls	r1, r2, #5
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	440a      	add	r2, r1
 800552a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800552e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005532:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005536:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3714      	adds	r7, #20
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr
	...

08005548 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005548:	b480      	push	{r7}
 800554a:	b085      	sub	sp, #20
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	785b      	ldrb	r3, [r3, #1]
 8005560:	2b01      	cmp	r3, #1
 8005562:	d161      	bne.n	8005628 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	015a      	lsls	r2, r3, #5
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	4413      	add	r3, r2
 800556c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005576:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800557a:	d11f      	bne.n	80055bc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	015a      	lsls	r2, r3, #5
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	4413      	add	r3, r2
 8005584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	68ba      	ldr	r2, [r7, #8]
 800558c:	0151      	lsls	r1, r2, #5
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	440a      	add	r2, r1
 8005592:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005596:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800559a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	015a      	lsls	r2, r3, #5
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	4413      	add	r3, r2
 80055a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68ba      	ldr	r2, [r7, #8]
 80055ac:	0151      	lsls	r1, r2, #5
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	440a      	add	r2, r1
 80055b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	f003 030f 	and.w	r3, r3, #15
 80055cc:	2101      	movs	r1, #1
 80055ce:	fa01 f303 	lsl.w	r3, r1, r3
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	43db      	mvns	r3, r3
 80055d6:	68f9      	ldr	r1, [r7, #12]
 80055d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055dc:	4013      	ands	r3, r2
 80055de:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055e6:	69da      	ldr	r2, [r3, #28]
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	f003 030f 	and.w	r3, r3, #15
 80055f0:	2101      	movs	r1, #1
 80055f2:	fa01 f303 	lsl.w	r3, r1, r3
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	43db      	mvns	r3, r3
 80055fa:	68f9      	ldr	r1, [r7, #12]
 80055fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005600:	4013      	ands	r3, r2
 8005602:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	015a      	lsls	r2, r3, #5
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	4413      	add	r3, r2
 800560c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	0159      	lsls	r1, r3, #5
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	440b      	add	r3, r1
 800561a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800561e:	4619      	mov	r1, r3
 8005620:	4b35      	ldr	r3, [pc, #212]	; (80056f8 <USB_DeactivateEndpoint+0x1b0>)
 8005622:	4013      	ands	r3, r2
 8005624:	600b      	str	r3, [r1, #0]
 8005626:	e060      	b.n	80056ea <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	015a      	lsls	r2, r3, #5
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	4413      	add	r3, r2
 8005630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800563a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800563e:	d11f      	bne.n	8005680 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	015a      	lsls	r2, r3, #5
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	4413      	add	r3, r2
 8005648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68ba      	ldr	r2, [r7, #8]
 8005650:	0151      	lsls	r1, r2, #5
 8005652:	68fa      	ldr	r2, [r7, #12]
 8005654:	440a      	add	r2, r1
 8005656:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800565a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800565e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	015a      	lsls	r2, r3, #5
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	4413      	add	r3, r2
 8005668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68ba      	ldr	r2, [r7, #8]
 8005670:	0151      	lsls	r1, r2, #5
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	440a      	add	r2, r1
 8005676:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800567a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800567e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005686:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	f003 030f 	and.w	r3, r3, #15
 8005690:	2101      	movs	r1, #1
 8005692:	fa01 f303 	lsl.w	r3, r1, r3
 8005696:	041b      	lsls	r3, r3, #16
 8005698:	43db      	mvns	r3, r3
 800569a:	68f9      	ldr	r1, [r7, #12]
 800569c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056a0:	4013      	ands	r3, r2
 80056a2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056aa:	69da      	ldr	r2, [r3, #28]
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	f003 030f 	and.w	r3, r3, #15
 80056b4:	2101      	movs	r1, #1
 80056b6:	fa01 f303 	lsl.w	r3, r1, r3
 80056ba:	041b      	lsls	r3, r3, #16
 80056bc:	43db      	mvns	r3, r3
 80056be:	68f9      	ldr	r1, [r7, #12]
 80056c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056c4:	4013      	ands	r3, r2
 80056c6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	015a      	lsls	r2, r3, #5
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	4413      	add	r3, r2
 80056d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	0159      	lsls	r1, r3, #5
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	440b      	add	r3, r1
 80056de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056e2:	4619      	mov	r1, r3
 80056e4:	4b05      	ldr	r3, [pc, #20]	; (80056fc <USB_DeactivateEndpoint+0x1b4>)
 80056e6:	4013      	ands	r3, r2
 80056e8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80056ea:	2300      	movs	r3, #0
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3714      	adds	r7, #20
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr
 80056f8:	ec337800 	.word	0xec337800
 80056fc:	eff37800 	.word	0xeff37800

08005700 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b08a      	sub	sp, #40	; 0x28
 8005704:	af02      	add	r7, sp, #8
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	4613      	mov	r3, r2
 800570c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	785b      	ldrb	r3, [r3, #1]
 800571c:	2b01      	cmp	r3, #1
 800571e:	f040 815c 	bne.w	80059da <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d132      	bne.n	8005790 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	015a      	lsls	r2, r3, #5
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	4413      	add	r3, r2
 8005732:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	69ba      	ldr	r2, [r7, #24]
 800573a:	0151      	lsls	r1, r2, #5
 800573c:	69fa      	ldr	r2, [r7, #28]
 800573e:	440a      	add	r2, r1
 8005740:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005744:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005748:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800574c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800574e:	69bb      	ldr	r3, [r7, #24]
 8005750:	015a      	lsls	r2, r3, #5
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	4413      	add	r3, r2
 8005756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	69ba      	ldr	r2, [r7, #24]
 800575e:	0151      	lsls	r1, r2, #5
 8005760:	69fa      	ldr	r2, [r7, #28]
 8005762:	440a      	add	r2, r1
 8005764:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005768:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800576c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800576e:	69bb      	ldr	r3, [r7, #24]
 8005770:	015a      	lsls	r2, r3, #5
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	4413      	add	r3, r2
 8005776:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800577a:	691b      	ldr	r3, [r3, #16]
 800577c:	69ba      	ldr	r2, [r7, #24]
 800577e:	0151      	lsls	r1, r2, #5
 8005780:	69fa      	ldr	r2, [r7, #28]
 8005782:	440a      	add	r2, r1
 8005784:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005788:	0cdb      	lsrs	r3, r3, #19
 800578a:	04db      	lsls	r3, r3, #19
 800578c:	6113      	str	r3, [r2, #16]
 800578e:	e074      	b.n	800587a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	015a      	lsls	r2, r3, #5
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	4413      	add	r3, r2
 8005798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	69ba      	ldr	r2, [r7, #24]
 80057a0:	0151      	lsls	r1, r2, #5
 80057a2:	69fa      	ldr	r2, [r7, #28]
 80057a4:	440a      	add	r2, r1
 80057a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057aa:	0cdb      	lsrs	r3, r3, #19
 80057ac:	04db      	lsls	r3, r3, #19
 80057ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	015a      	lsls	r2, r3, #5
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	4413      	add	r3, r2
 80057b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	69ba      	ldr	r2, [r7, #24]
 80057c0:	0151      	lsls	r1, r2, #5
 80057c2:	69fa      	ldr	r2, [r7, #28]
 80057c4:	440a      	add	r2, r1
 80057c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057ca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80057ce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80057d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80057d4:	69bb      	ldr	r3, [r7, #24]
 80057d6:	015a      	lsls	r2, r3, #5
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	4413      	add	r3, r2
 80057dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057e0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	6999      	ldr	r1, [r3, #24]
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	440b      	add	r3, r1
 80057ec:	1e59      	subs	r1, r3, #1
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80057f6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80057f8:	4b9d      	ldr	r3, [pc, #628]	; (8005a70 <USB_EPStartXfer+0x370>)
 80057fa:	400b      	ands	r3, r1
 80057fc:	69b9      	ldr	r1, [r7, #24]
 80057fe:	0148      	lsls	r0, r1, #5
 8005800:	69f9      	ldr	r1, [r7, #28]
 8005802:	4401      	add	r1, r0
 8005804:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005808:	4313      	orrs	r3, r2
 800580a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	015a      	lsls	r2, r3, #5
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	4413      	add	r3, r2
 8005814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005818:	691a      	ldr	r2, [r3, #16]
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	699b      	ldr	r3, [r3, #24]
 800581e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005822:	69b9      	ldr	r1, [r7, #24]
 8005824:	0148      	lsls	r0, r1, #5
 8005826:	69f9      	ldr	r1, [r7, #28]
 8005828:	4401      	add	r1, r0
 800582a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800582e:	4313      	orrs	r3, r2
 8005830:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	791b      	ldrb	r3, [r3, #4]
 8005836:	2b01      	cmp	r3, #1
 8005838:	d11f      	bne.n	800587a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	015a      	lsls	r2, r3, #5
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	4413      	add	r3, r2
 8005842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005846:	691b      	ldr	r3, [r3, #16]
 8005848:	69ba      	ldr	r2, [r7, #24]
 800584a:	0151      	lsls	r1, r2, #5
 800584c:	69fa      	ldr	r2, [r7, #28]
 800584e:	440a      	add	r2, r1
 8005850:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005854:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005858:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	015a      	lsls	r2, r3, #5
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	4413      	add	r3, r2
 8005862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	69ba      	ldr	r2, [r7, #24]
 800586a:	0151      	lsls	r1, r2, #5
 800586c:	69fa      	ldr	r2, [r7, #28]
 800586e:	440a      	add	r2, r1
 8005870:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005874:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005878:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800587a:	79fb      	ldrb	r3, [r7, #7]
 800587c:	2b01      	cmp	r3, #1
 800587e:	d14b      	bne.n	8005918 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	695b      	ldr	r3, [r3, #20]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d009      	beq.n	800589c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005888:	69bb      	ldr	r3, [r7, #24]
 800588a:	015a      	lsls	r2, r3, #5
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	4413      	add	r3, r2
 8005890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005894:	461a      	mov	r2, r3
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	695b      	ldr	r3, [r3, #20]
 800589a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	791b      	ldrb	r3, [r3, #4]
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d128      	bne.n	80058f6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d110      	bne.n	80058d6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80058b4:	69bb      	ldr	r3, [r7, #24]
 80058b6:	015a      	lsls	r2, r3, #5
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	4413      	add	r3, r2
 80058bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	69ba      	ldr	r2, [r7, #24]
 80058c4:	0151      	lsls	r1, r2, #5
 80058c6:	69fa      	ldr	r2, [r7, #28]
 80058c8:	440a      	add	r2, r1
 80058ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80058d2:	6013      	str	r3, [r2, #0]
 80058d4:	e00f      	b.n	80058f6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	015a      	lsls	r2, r3, #5
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	4413      	add	r3, r2
 80058de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	69ba      	ldr	r2, [r7, #24]
 80058e6:	0151      	lsls	r1, r2, #5
 80058e8:	69fa      	ldr	r2, [r7, #28]
 80058ea:	440a      	add	r2, r1
 80058ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058f4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	015a      	lsls	r2, r3, #5
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	4413      	add	r3, r2
 80058fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	69ba      	ldr	r2, [r7, #24]
 8005906:	0151      	lsls	r1, r2, #5
 8005908:	69fa      	ldr	r2, [r7, #28]
 800590a:	440a      	add	r2, r1
 800590c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005910:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005914:	6013      	str	r3, [r2, #0]
 8005916:	e133      	b.n	8005b80 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	015a      	lsls	r2, r3, #5
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	4413      	add	r3, r2
 8005920:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	69ba      	ldr	r2, [r7, #24]
 8005928:	0151      	lsls	r1, r2, #5
 800592a:	69fa      	ldr	r2, [r7, #28]
 800592c:	440a      	add	r2, r1
 800592e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005932:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005936:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	791b      	ldrb	r3, [r3, #4]
 800593c:	2b01      	cmp	r3, #1
 800593e:	d015      	beq.n	800596c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	699b      	ldr	r3, [r3, #24]
 8005944:	2b00      	cmp	r3, #0
 8005946:	f000 811b 	beq.w	8005b80 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005950:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	781b      	ldrb	r3, [r3, #0]
 8005956:	f003 030f 	and.w	r3, r3, #15
 800595a:	2101      	movs	r1, #1
 800595c:	fa01 f303 	lsl.w	r3, r1, r3
 8005960:	69f9      	ldr	r1, [r7, #28]
 8005962:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005966:	4313      	orrs	r3, r2
 8005968:	634b      	str	r3, [r1, #52]	; 0x34
 800596a:	e109      	b.n	8005b80 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005978:	2b00      	cmp	r3, #0
 800597a:	d110      	bne.n	800599e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	015a      	lsls	r2, r3, #5
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	4413      	add	r3, r2
 8005984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	69ba      	ldr	r2, [r7, #24]
 800598c:	0151      	lsls	r1, r2, #5
 800598e:	69fa      	ldr	r2, [r7, #28]
 8005990:	440a      	add	r2, r1
 8005992:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005996:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800599a:	6013      	str	r3, [r2, #0]
 800599c:	e00f      	b.n	80059be <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800599e:	69bb      	ldr	r3, [r7, #24]
 80059a0:	015a      	lsls	r2, r3, #5
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	4413      	add	r3, r2
 80059a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	69ba      	ldr	r2, [r7, #24]
 80059ae:	0151      	lsls	r1, r2, #5
 80059b0:	69fa      	ldr	r2, [r7, #28]
 80059b2:	440a      	add	r2, r1
 80059b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059bc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	6919      	ldr	r1, [r3, #16]
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	781a      	ldrb	r2, [r3, #0]
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	699b      	ldr	r3, [r3, #24]
 80059ca:	b298      	uxth	r0, r3
 80059cc:	79fb      	ldrb	r3, [r7, #7]
 80059ce:	9300      	str	r3, [sp, #0]
 80059d0:	4603      	mov	r3, r0
 80059d2:	68f8      	ldr	r0, [r7, #12]
 80059d4:	f000 fade 	bl	8005f94 <USB_WritePacket>
 80059d8:	e0d2      	b.n	8005b80 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80059da:	69bb      	ldr	r3, [r7, #24]
 80059dc:	015a      	lsls	r2, r3, #5
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	4413      	add	r3, r2
 80059e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059e6:	691b      	ldr	r3, [r3, #16]
 80059e8:	69ba      	ldr	r2, [r7, #24]
 80059ea:	0151      	lsls	r1, r2, #5
 80059ec:	69fa      	ldr	r2, [r7, #28]
 80059ee:	440a      	add	r2, r1
 80059f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059f4:	0cdb      	lsrs	r3, r3, #19
 80059f6:	04db      	lsls	r3, r3, #19
 80059f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	015a      	lsls	r2, r3, #5
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	4413      	add	r3, r2
 8005a02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a06:	691b      	ldr	r3, [r3, #16]
 8005a08:	69ba      	ldr	r2, [r7, #24]
 8005a0a:	0151      	lsls	r1, r2, #5
 8005a0c:	69fa      	ldr	r2, [r7, #28]
 8005a0e:	440a      	add	r2, r1
 8005a10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a14:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a18:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a1c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d126      	bne.n	8005a74 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	015a      	lsls	r2, r3, #5
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a32:	691a      	ldr	r2, [r3, #16]
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a3c:	69b9      	ldr	r1, [r7, #24]
 8005a3e:	0148      	lsls	r0, r1, #5
 8005a40:	69f9      	ldr	r1, [r7, #28]
 8005a42:	4401      	add	r1, r0
 8005a44:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a4c:	69bb      	ldr	r3, [r7, #24]
 8005a4e:	015a      	lsls	r2, r3, #5
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	4413      	add	r3, r2
 8005a54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	69ba      	ldr	r2, [r7, #24]
 8005a5c:	0151      	lsls	r1, r2, #5
 8005a5e:	69fa      	ldr	r2, [r7, #28]
 8005a60:	440a      	add	r2, r1
 8005a62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a6a:	6113      	str	r3, [r2, #16]
 8005a6c:	e03a      	b.n	8005ae4 <USB_EPStartXfer+0x3e4>
 8005a6e:	bf00      	nop
 8005a70:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	699a      	ldr	r2, [r3, #24]
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	1e5a      	subs	r2, r3, #1
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a88:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	8afa      	ldrh	r2, [r7, #22]
 8005a90:	fb03 f202 	mul.w	r2, r3, r2
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	015a      	lsls	r2, r3, #5
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aa4:	691a      	ldr	r2, [r3, #16]
 8005aa6:	8afb      	ldrh	r3, [r7, #22]
 8005aa8:	04d9      	lsls	r1, r3, #19
 8005aaa:	4b38      	ldr	r3, [pc, #224]	; (8005b8c <USB_EPStartXfer+0x48c>)
 8005aac:	400b      	ands	r3, r1
 8005aae:	69b9      	ldr	r1, [r7, #24]
 8005ab0:	0148      	lsls	r0, r1, #5
 8005ab2:	69f9      	ldr	r1, [r7, #28]
 8005ab4:	4401      	add	r1, r0
 8005ab6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005aba:	4313      	orrs	r3, r2
 8005abc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	015a      	lsls	r2, r3, #5
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aca:	691a      	ldr	r2, [r3, #16]
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	69db      	ldr	r3, [r3, #28]
 8005ad0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ad4:	69b9      	ldr	r1, [r7, #24]
 8005ad6:	0148      	lsls	r0, r1, #5
 8005ad8:	69f9      	ldr	r1, [r7, #28]
 8005ada:	4401      	add	r1, r0
 8005adc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005ae4:	79fb      	ldrb	r3, [r7, #7]
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d10d      	bne.n	8005b06 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d009      	beq.n	8005b06 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	6919      	ldr	r1, [r3, #16]
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	015a      	lsls	r2, r3, #5
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	4413      	add	r3, r2
 8005afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b02:	460a      	mov	r2, r1
 8005b04:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	791b      	ldrb	r3, [r3, #4]
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d128      	bne.n	8005b60 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d110      	bne.n	8005b40 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005b1e:	69bb      	ldr	r3, [r7, #24]
 8005b20:	015a      	lsls	r2, r3, #5
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	4413      	add	r3, r2
 8005b26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	69ba      	ldr	r2, [r7, #24]
 8005b2e:	0151      	lsls	r1, r2, #5
 8005b30:	69fa      	ldr	r2, [r7, #28]
 8005b32:	440a      	add	r2, r1
 8005b34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b38:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b3c:	6013      	str	r3, [r2, #0]
 8005b3e:	e00f      	b.n	8005b60 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005b40:	69bb      	ldr	r3, [r7, #24]
 8005b42:	015a      	lsls	r2, r3, #5
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	4413      	add	r3, r2
 8005b48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	69ba      	ldr	r2, [r7, #24]
 8005b50:	0151      	lsls	r1, r2, #5
 8005b52:	69fa      	ldr	r2, [r7, #28]
 8005b54:	440a      	add	r2, r1
 8005b56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b5e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	015a      	lsls	r2, r3, #5
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	4413      	add	r3, r2
 8005b68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	69ba      	ldr	r2, [r7, #24]
 8005b70:	0151      	lsls	r1, r2, #5
 8005b72:	69fa      	ldr	r2, [r7, #28]
 8005b74:	440a      	add	r2, r1
 8005b76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b7a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b7e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3720      	adds	r7, #32
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	1ff80000 	.word	0x1ff80000

08005b90 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b087      	sub	sp, #28
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	785b      	ldrb	r3, [r3, #1]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	f040 80ce 	bne.w	8005d4e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	699b      	ldr	r3, [r3, #24]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d132      	bne.n	8005c20 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	015a      	lsls	r2, r3, #5
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	693a      	ldr	r2, [r7, #16]
 8005bca:	0151      	lsls	r1, r2, #5
 8005bcc:	697a      	ldr	r2, [r7, #20]
 8005bce:	440a      	add	r2, r1
 8005bd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bd4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005bd8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005bdc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	015a      	lsls	r2, r3, #5
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	4413      	add	r3, r2
 8005be6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bea:	691b      	ldr	r3, [r3, #16]
 8005bec:	693a      	ldr	r2, [r7, #16]
 8005bee:	0151      	lsls	r1, r2, #5
 8005bf0:	697a      	ldr	r2, [r7, #20]
 8005bf2:	440a      	add	r2, r1
 8005bf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bf8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005bfc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	015a      	lsls	r2, r3, #5
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	4413      	add	r3, r2
 8005c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c0a:	691b      	ldr	r3, [r3, #16]
 8005c0c:	693a      	ldr	r2, [r7, #16]
 8005c0e:	0151      	lsls	r1, r2, #5
 8005c10:	697a      	ldr	r2, [r7, #20]
 8005c12:	440a      	add	r2, r1
 8005c14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c18:	0cdb      	lsrs	r3, r3, #19
 8005c1a:	04db      	lsls	r3, r3, #19
 8005c1c:	6113      	str	r3, [r2, #16]
 8005c1e:	e04e      	b.n	8005cbe <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	015a      	lsls	r2, r3, #5
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	4413      	add	r3, r2
 8005c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	693a      	ldr	r2, [r7, #16]
 8005c30:	0151      	lsls	r1, r2, #5
 8005c32:	697a      	ldr	r2, [r7, #20]
 8005c34:	440a      	add	r2, r1
 8005c36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c3a:	0cdb      	lsrs	r3, r3, #19
 8005c3c:	04db      	lsls	r3, r3, #19
 8005c3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	015a      	lsls	r2, r3, #5
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	4413      	add	r3, r2
 8005c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	693a      	ldr	r2, [r7, #16]
 8005c50:	0151      	lsls	r1, r2, #5
 8005c52:	697a      	ldr	r2, [r7, #20]
 8005c54:	440a      	add	r2, r1
 8005c56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c5a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c5e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c62:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	699a      	ldr	r2, [r3, #24]
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d903      	bls.n	8005c78 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	68da      	ldr	r2, [r3, #12]
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	015a      	lsls	r2, r3, #5
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	4413      	add	r3, r2
 8005c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	693a      	ldr	r2, [r7, #16]
 8005c88:	0151      	lsls	r1, r2, #5
 8005c8a:	697a      	ldr	r2, [r7, #20]
 8005c8c:	440a      	add	r2, r1
 8005c8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c92:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c96:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	015a      	lsls	r2, r3, #5
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	4413      	add	r3, r2
 8005ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ca4:	691a      	ldr	r2, [r3, #16]
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	699b      	ldr	r3, [r3, #24]
 8005caa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cae:	6939      	ldr	r1, [r7, #16]
 8005cb0:	0148      	lsls	r0, r1, #5
 8005cb2:	6979      	ldr	r1, [r7, #20]
 8005cb4:	4401      	add	r1, r0
 8005cb6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005cbe:	79fb      	ldrb	r3, [r7, #7]
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d11e      	bne.n	8005d02 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	695b      	ldr	r3, [r3, #20]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d009      	beq.n	8005ce0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	015a      	lsls	r2, r3, #5
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cd8:	461a      	mov	r2, r3
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	695b      	ldr	r3, [r3, #20]
 8005cde:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	015a      	lsls	r2, r3, #5
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	4413      	add	r3, r2
 8005ce8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	693a      	ldr	r2, [r7, #16]
 8005cf0:	0151      	lsls	r1, r2, #5
 8005cf2:	697a      	ldr	r2, [r7, #20]
 8005cf4:	440a      	add	r2, r1
 8005cf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cfa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005cfe:	6013      	str	r3, [r2, #0]
 8005d00:	e097      	b.n	8005e32 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	015a      	lsls	r2, r3, #5
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	4413      	add	r3, r2
 8005d0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	693a      	ldr	r2, [r7, #16]
 8005d12:	0151      	lsls	r1, r2, #5
 8005d14:	697a      	ldr	r2, [r7, #20]
 8005d16:	440a      	add	r2, r1
 8005d18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d1c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d20:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	699b      	ldr	r3, [r3, #24]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	f000 8083 	beq.w	8005e32 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	f003 030f 	and.w	r3, r3, #15
 8005d3c:	2101      	movs	r1, #1
 8005d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8005d42:	6979      	ldr	r1, [r7, #20]
 8005d44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	634b      	str	r3, [r1, #52]	; 0x34
 8005d4c:	e071      	b.n	8005e32 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	015a      	lsls	r2, r3, #5
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	4413      	add	r3, r2
 8005d56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d5a:	691b      	ldr	r3, [r3, #16]
 8005d5c:	693a      	ldr	r2, [r7, #16]
 8005d5e:	0151      	lsls	r1, r2, #5
 8005d60:	697a      	ldr	r2, [r7, #20]
 8005d62:	440a      	add	r2, r1
 8005d64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d68:	0cdb      	lsrs	r3, r3, #19
 8005d6a:	04db      	lsls	r3, r3, #19
 8005d6c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	015a      	lsls	r2, r3, #5
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	4413      	add	r3, r2
 8005d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	693a      	ldr	r2, [r7, #16]
 8005d7e:	0151      	lsls	r1, r2, #5
 8005d80:	697a      	ldr	r2, [r7, #20]
 8005d82:	440a      	add	r2, r1
 8005d84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d88:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d8c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d90:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	699b      	ldr	r3, [r3, #24]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d003      	beq.n	8005da2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	68da      	ldr	r2, [r3, #12]
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	68da      	ldr	r2, [r3, #12]
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	015a      	lsls	r2, r3, #5
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	4413      	add	r3, r2
 8005db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005db6:	691b      	ldr	r3, [r3, #16]
 8005db8:	693a      	ldr	r2, [r7, #16]
 8005dba:	0151      	lsls	r1, r2, #5
 8005dbc:	697a      	ldr	r2, [r7, #20]
 8005dbe:	440a      	add	r2, r1
 8005dc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dc4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005dc8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	015a      	lsls	r2, r3, #5
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	4413      	add	r3, r2
 8005dd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dd6:	691a      	ldr	r2, [r3, #16]
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	69db      	ldr	r3, [r3, #28]
 8005ddc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005de0:	6939      	ldr	r1, [r7, #16]
 8005de2:	0148      	lsls	r0, r1, #5
 8005de4:	6979      	ldr	r1, [r7, #20]
 8005de6:	4401      	add	r1, r0
 8005de8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005dec:	4313      	orrs	r3, r2
 8005dee:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005df0:	79fb      	ldrb	r3, [r7, #7]
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d10d      	bne.n	8005e12 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d009      	beq.n	8005e12 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	6919      	ldr	r1, [r3, #16]
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	015a      	lsls	r2, r3, #5
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	4413      	add	r3, r2
 8005e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e0e:	460a      	mov	r2, r1
 8005e10:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	015a      	lsls	r2, r3, #5
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	4413      	add	r3, r2
 8005e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	693a      	ldr	r2, [r7, #16]
 8005e22:	0151      	lsls	r1, r2, #5
 8005e24:	697a      	ldr	r2, [r7, #20]
 8005e26:	440a      	add	r2, r1
 8005e28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e2c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e30:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e32:	2300      	movs	r3, #0
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	371c      	adds	r7, #28
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b087      	sub	sp, #28
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	785b      	ldrb	r3, [r3, #1]
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d14a      	bne.n	8005ef4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	015a      	lsls	r2, r3, #5
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	4413      	add	r3, r2
 8005e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e76:	f040 8086 	bne.w	8005f86 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	015a      	lsls	r2, r3, #5
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	4413      	add	r3, r2
 8005e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	683a      	ldr	r2, [r7, #0]
 8005e8c:	7812      	ldrb	r2, [r2, #0]
 8005e8e:	0151      	lsls	r1, r2, #5
 8005e90:	693a      	ldr	r2, [r7, #16]
 8005e92:	440a      	add	r2, r1
 8005e94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e98:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e9c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	015a      	lsls	r2, r3, #5
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	683a      	ldr	r2, [r7, #0]
 8005eb0:	7812      	ldrb	r2, [r2, #0]
 8005eb2:	0151      	lsls	r1, r2, #5
 8005eb4:	693a      	ldr	r2, [r7, #16]
 8005eb6:	440a      	add	r2, r1
 8005eb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ebc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ec0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f242 7210 	movw	r2, #10000	; 0x2710
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d902      	bls.n	8005ed8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	75fb      	strb	r3, [r7, #23]
          break;
 8005ed6:	e056      	b.n	8005f86 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	015a      	lsls	r2, r3, #5
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005eec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ef0:	d0e7      	beq.n	8005ec2 <USB_EPStopXfer+0x82>
 8005ef2:	e048      	b.n	8005f86 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	015a      	lsls	r2, r3, #5
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	4413      	add	r3, r2
 8005efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f0c:	d13b      	bne.n	8005f86 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	015a      	lsls	r2, r3, #5
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	4413      	add	r3, r2
 8005f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	683a      	ldr	r2, [r7, #0]
 8005f20:	7812      	ldrb	r2, [r2, #0]
 8005f22:	0151      	lsls	r1, r2, #5
 8005f24:	693a      	ldr	r2, [r7, #16]
 8005f26:	440a      	add	r2, r1
 8005f28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f2c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005f30:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	015a      	lsls	r2, r3, #5
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	4413      	add	r3, r2
 8005f3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	683a      	ldr	r2, [r7, #0]
 8005f44:	7812      	ldrb	r2, [r2, #0]
 8005f46:	0151      	lsls	r1, r2, #5
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	440a      	add	r2, r1
 8005f4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f54:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	3301      	adds	r3, #1
 8005f5a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d902      	bls.n	8005f6c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	75fb      	strb	r3, [r7, #23]
          break;
 8005f6a:	e00c      	b.n	8005f86 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	015a      	lsls	r2, r3, #5
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	4413      	add	r3, r2
 8005f76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f84:	d0e7      	beq.n	8005f56 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005f86:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	371c      	adds	r7, #28
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b089      	sub	sp, #36	; 0x24
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	4611      	mov	r1, r2
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	460b      	mov	r3, r1
 8005fa4:	71fb      	strb	r3, [r7, #7]
 8005fa6:	4613      	mov	r3, r2
 8005fa8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005fb2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d123      	bne.n	8006002 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005fba:	88bb      	ldrh	r3, [r7, #4]
 8005fbc:	3303      	adds	r3, #3
 8005fbe:	089b      	lsrs	r3, r3, #2
 8005fc0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	61bb      	str	r3, [r7, #24]
 8005fc6:	e018      	b.n	8005ffa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005fc8:	79fb      	ldrb	r3, [r7, #7]
 8005fca:	031a      	lsls	r2, r3, #12
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	4413      	add	r3, r2
 8005fd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	69fb      	ldr	r3, [r7, #28]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	3301      	adds	r3, #1
 8005fe0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005fe2:	69fb      	ldr	r3, [r7, #28]
 8005fe4:	3301      	adds	r3, #1
 8005fe6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005fe8:	69fb      	ldr	r3, [r7, #28]
 8005fea:	3301      	adds	r3, #1
 8005fec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	3301      	adds	r3, #1
 8005ff2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	61bb      	str	r3, [r7, #24]
 8005ffa:	69ba      	ldr	r2, [r7, #24]
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d3e2      	bcc.n	8005fc8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006002:	2300      	movs	r3, #0
}
 8006004:	4618      	mov	r0, r3
 8006006:	3724      	adds	r7, #36	; 0x24
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006010:	b480      	push	{r7}
 8006012:	b08b      	sub	sp, #44	; 0x2c
 8006014:	af00      	add	r7, sp, #0
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	60b9      	str	r1, [r7, #8]
 800601a:	4613      	mov	r3, r2
 800601c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006026:	88fb      	ldrh	r3, [r7, #6]
 8006028:	089b      	lsrs	r3, r3, #2
 800602a:	b29b      	uxth	r3, r3
 800602c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800602e:	88fb      	ldrh	r3, [r7, #6]
 8006030:	f003 0303 	and.w	r3, r3, #3
 8006034:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006036:	2300      	movs	r3, #0
 8006038:	623b      	str	r3, [r7, #32]
 800603a:	e014      	b.n	8006066 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006046:	601a      	str	r2, [r3, #0]
    pDest++;
 8006048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604a:	3301      	adds	r3, #1
 800604c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800604e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006050:	3301      	adds	r3, #1
 8006052:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006056:	3301      	adds	r3, #1
 8006058:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800605a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605c:	3301      	adds	r3, #1
 800605e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006060:	6a3b      	ldr	r3, [r7, #32]
 8006062:	3301      	adds	r3, #1
 8006064:	623b      	str	r3, [r7, #32]
 8006066:	6a3a      	ldr	r2, [r7, #32]
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	429a      	cmp	r2, r3
 800606c:	d3e6      	bcc.n	800603c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800606e:	8bfb      	ldrh	r3, [r7, #30]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d01e      	beq.n	80060b2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006074:	2300      	movs	r3, #0
 8006076:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006078:	69bb      	ldr	r3, [r7, #24]
 800607a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800607e:	461a      	mov	r2, r3
 8006080:	f107 0310 	add.w	r3, r7, #16
 8006084:	6812      	ldr	r2, [r2, #0]
 8006086:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006088:	693a      	ldr	r2, [r7, #16]
 800608a:	6a3b      	ldr	r3, [r7, #32]
 800608c:	b2db      	uxtb	r3, r3
 800608e:	00db      	lsls	r3, r3, #3
 8006090:	fa22 f303 	lsr.w	r3, r2, r3
 8006094:	b2da      	uxtb	r2, r3
 8006096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006098:	701a      	strb	r2, [r3, #0]
      i++;
 800609a:	6a3b      	ldr	r3, [r7, #32]
 800609c:	3301      	adds	r3, #1
 800609e:	623b      	str	r3, [r7, #32]
      pDest++;
 80060a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a2:	3301      	adds	r3, #1
 80060a4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80060a6:	8bfb      	ldrh	r3, [r7, #30]
 80060a8:	3b01      	subs	r3, #1
 80060aa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80060ac:	8bfb      	ldrh	r3, [r7, #30]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d1ea      	bne.n	8006088 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80060b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	372c      	adds	r7, #44	; 0x2c
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b085      	sub	sp, #20
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	785b      	ldrb	r3, [r3, #1]
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d12c      	bne.n	8006136 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	015a      	lsls	r2, r3, #5
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	4413      	add	r3, r2
 80060e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	db12      	blt.n	8006114 <USB_EPSetStall+0x54>
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d00f      	beq.n	8006114 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	015a      	lsls	r2, r3, #5
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	4413      	add	r3, r2
 80060fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	68ba      	ldr	r2, [r7, #8]
 8006104:	0151      	lsls	r1, r2, #5
 8006106:	68fa      	ldr	r2, [r7, #12]
 8006108:	440a      	add	r2, r1
 800610a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800610e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006112:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	015a      	lsls	r2, r3, #5
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	4413      	add	r3, r2
 800611c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	68ba      	ldr	r2, [r7, #8]
 8006124:	0151      	lsls	r1, r2, #5
 8006126:	68fa      	ldr	r2, [r7, #12]
 8006128:	440a      	add	r2, r1
 800612a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800612e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006132:	6013      	str	r3, [r2, #0]
 8006134:	e02b      	b.n	800618e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	015a      	lsls	r2, r3, #5
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	4413      	add	r3, r2
 800613e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	2b00      	cmp	r3, #0
 8006146:	db12      	blt.n	800616e <USB_EPSetStall+0xae>
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d00f      	beq.n	800616e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	015a      	lsls	r2, r3, #5
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	4413      	add	r3, r2
 8006156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68ba      	ldr	r2, [r7, #8]
 800615e:	0151      	lsls	r1, r2, #5
 8006160:	68fa      	ldr	r2, [r7, #12]
 8006162:	440a      	add	r2, r1
 8006164:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006168:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800616c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	015a      	lsls	r2, r3, #5
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	4413      	add	r3, r2
 8006176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68ba      	ldr	r2, [r7, #8]
 800617e:	0151      	lsls	r1, r2, #5
 8006180:	68fa      	ldr	r2, [r7, #12]
 8006182:	440a      	add	r2, r1
 8006184:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006188:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800618c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800618e:	2300      	movs	r3, #0
}
 8006190:	4618      	mov	r0, r3
 8006192:	3714      	adds	r7, #20
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800619c:	b480      	push	{r7}
 800619e:	b085      	sub	sp, #20
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	785b      	ldrb	r3, [r3, #1]
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d128      	bne.n	800620a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	015a      	lsls	r2, r3, #5
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	4413      	add	r3, r2
 80061c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	68ba      	ldr	r2, [r7, #8]
 80061c8:	0151      	lsls	r1, r2, #5
 80061ca:	68fa      	ldr	r2, [r7, #12]
 80061cc:	440a      	add	r2, r1
 80061ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80061d6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	791b      	ldrb	r3, [r3, #4]
 80061dc:	2b03      	cmp	r3, #3
 80061de:	d003      	beq.n	80061e8 <USB_EPClearStall+0x4c>
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	791b      	ldrb	r3, [r3, #4]
 80061e4:	2b02      	cmp	r3, #2
 80061e6:	d138      	bne.n	800625a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	015a      	lsls	r2, r3, #5
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	4413      	add	r3, r2
 80061f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	68ba      	ldr	r2, [r7, #8]
 80061f8:	0151      	lsls	r1, r2, #5
 80061fa:	68fa      	ldr	r2, [r7, #12]
 80061fc:	440a      	add	r2, r1
 80061fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006202:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006206:	6013      	str	r3, [r2, #0]
 8006208:	e027      	b.n	800625a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	015a      	lsls	r2, r3, #5
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	4413      	add	r3, r2
 8006212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	68ba      	ldr	r2, [r7, #8]
 800621a:	0151      	lsls	r1, r2, #5
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	440a      	add	r2, r1
 8006220:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006224:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006228:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	791b      	ldrb	r3, [r3, #4]
 800622e:	2b03      	cmp	r3, #3
 8006230:	d003      	beq.n	800623a <USB_EPClearStall+0x9e>
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	791b      	ldrb	r3, [r3, #4]
 8006236:	2b02      	cmp	r3, #2
 8006238:	d10f      	bne.n	800625a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	015a      	lsls	r2, r3, #5
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	4413      	add	r3, r2
 8006242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	68ba      	ldr	r2, [r7, #8]
 800624a:	0151      	lsls	r1, r2, #5
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	440a      	add	r2, r1
 8006250:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006258:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800625a:	2300      	movs	r3, #0
}
 800625c:	4618      	mov	r0, r3
 800625e:	3714      	adds	r7, #20
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006268:	b480      	push	{r7}
 800626a:	b085      	sub	sp, #20
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	460b      	mov	r3, r1
 8006272:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	68fa      	ldr	r2, [r7, #12]
 8006282:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006286:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800628a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	78fb      	ldrb	r3, [r7, #3]
 8006296:	011b      	lsls	r3, r3, #4
 8006298:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800629c:	68f9      	ldr	r1, [r7, #12]
 800629e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062a2:	4313      	orrs	r3, r2
 80062a4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80062a6:	2300      	movs	r3, #0
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3714      	adds	r7, #20
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b085      	sub	sp, #20
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80062ce:	f023 0303 	bic.w	r3, r3, #3
 80062d2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062e2:	f023 0302 	bic.w	r3, r3, #2
 80062e6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80062e8:	2300      	movs	r3, #0
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3714      	adds	r7, #20
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr

080062f6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80062f6:	b480      	push	{r7}
 80062f8:	b085      	sub	sp, #20
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	68fa      	ldr	r2, [r7, #12]
 800630c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006310:	f023 0303 	bic.w	r3, r3, #3
 8006314:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	68fa      	ldr	r2, [r7, #12]
 8006320:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006324:	f043 0302 	orr.w	r3, r3, #2
 8006328:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800632a:	2300      	movs	r3, #0
}
 800632c:	4618      	mov	r0, r3
 800632e:	3714      	adds	r7, #20
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr

08006338 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006338:	b480      	push	{r7}
 800633a:	b085      	sub	sp, #20
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	695b      	ldr	r3, [r3, #20]
 8006344:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	699b      	ldr	r3, [r3, #24]
 800634a:	68fa      	ldr	r2, [r7, #12]
 800634c:	4013      	ands	r3, r2
 800634e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006350:	68fb      	ldr	r3, [r7, #12]
}
 8006352:	4618      	mov	r0, r3
 8006354:	3714      	adds	r7, #20
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr

0800635e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800635e:	b480      	push	{r7}
 8006360:	b085      	sub	sp, #20
 8006362:	af00      	add	r7, sp, #0
 8006364:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006370:	699b      	ldr	r3, [r3, #24]
 8006372:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800637a:	69db      	ldr	r3, [r3, #28]
 800637c:	68ba      	ldr	r2, [r7, #8]
 800637e:	4013      	ands	r3, r2
 8006380:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	0c1b      	lsrs	r3, r3, #16
}
 8006386:	4618      	mov	r0, r3
 8006388:	3714      	adds	r7, #20
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr

08006392 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006392:	b480      	push	{r7}
 8006394:	b085      	sub	sp, #20
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063a4:	699b      	ldr	r3, [r3, #24]
 80063a6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063ae:	69db      	ldr	r3, [r3, #28]
 80063b0:	68ba      	ldr	r2, [r7, #8]
 80063b2:	4013      	ands	r3, r2
 80063b4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	b29b      	uxth	r3, r3
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3714      	adds	r7, #20
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr

080063c6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80063c6:	b480      	push	{r7}
 80063c8:	b085      	sub	sp, #20
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
 80063ce:	460b      	mov	r3, r1
 80063d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80063d6:	78fb      	ldrb	r3, [r7, #3]
 80063d8:	015a      	lsls	r2, r3, #5
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	4413      	add	r3, r2
 80063de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063ec:	695b      	ldr	r3, [r3, #20]
 80063ee:	68ba      	ldr	r2, [r7, #8]
 80063f0:	4013      	ands	r3, r2
 80063f2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80063f4:	68bb      	ldr	r3, [r7, #8]
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3714      	adds	r7, #20
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr

08006402 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006402:	b480      	push	{r7}
 8006404:	b087      	sub	sp, #28
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
 800640a:	460b      	mov	r3, r1
 800640c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006424:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006426:	78fb      	ldrb	r3, [r7, #3]
 8006428:	f003 030f 	and.w	r3, r3, #15
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	fa22 f303 	lsr.w	r3, r2, r3
 8006432:	01db      	lsls	r3, r3, #7
 8006434:	b2db      	uxtb	r3, r3
 8006436:	693a      	ldr	r2, [r7, #16]
 8006438:	4313      	orrs	r3, r2
 800643a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800643c:	78fb      	ldrb	r3, [r7, #3]
 800643e:	015a      	lsls	r2, r3, #5
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	4413      	add	r3, r2
 8006444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	693a      	ldr	r2, [r7, #16]
 800644c:	4013      	ands	r3, r2
 800644e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006450:	68bb      	ldr	r3, [r7, #8]
}
 8006452:	4618      	mov	r0, r3
 8006454:	371c      	adds	r7, #28
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr

0800645e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800645e:	b480      	push	{r7}
 8006460:	b083      	sub	sp, #12
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	695b      	ldr	r3, [r3, #20]
 800646a:	f003 0301 	and.w	r3, r3, #1
}
 800646e:	4618      	mov	r0, r3
 8006470:	370c      	adds	r7, #12
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr

0800647a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800647a:	b480      	push	{r7}
 800647c:	b085      	sub	sp, #20
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006494:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006498:	f023 0307 	bic.w	r3, r3, #7
 800649c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	68fa      	ldr	r2, [r7, #12]
 80064a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80064b2:	2300      	movs	r3, #0
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3714      	adds	r7, #20
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr

080064c0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b087      	sub	sp, #28
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	460b      	mov	r3, r1
 80064ca:	607a      	str	r2, [r7, #4]
 80064cc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	333c      	adds	r3, #60	; 0x3c
 80064d6:	3304      	adds	r3, #4
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	4a26      	ldr	r2, [pc, #152]	; (8006578 <USB_EP0_OutStart+0xb8>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d90a      	bls.n	80064fa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064f4:	d101      	bne.n	80064fa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80064f6:	2300      	movs	r3, #0
 80064f8:	e037      	b.n	800656a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006500:	461a      	mov	r2, r3
 8006502:	2300      	movs	r3, #0
 8006504:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	697a      	ldr	r2, [r7, #20]
 8006510:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006514:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006518:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	697a      	ldr	r2, [r7, #20]
 8006524:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006528:	f043 0318 	orr.w	r3, r3, #24
 800652c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	697a      	ldr	r2, [r7, #20]
 8006538:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800653c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006540:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006542:	7afb      	ldrb	r3, [r7, #11]
 8006544:	2b01      	cmp	r3, #1
 8006546:	d10f      	bne.n	8006568 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800654e:	461a      	mov	r2, r3
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	697a      	ldr	r2, [r7, #20]
 800655e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006562:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006566:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	371c      	adds	r7, #28
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr
 8006576:	bf00      	nop
 8006578:	4f54300a 	.word	0x4f54300a

0800657c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800657c:	b480      	push	{r7}
 800657e:	b085      	sub	sp, #20
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006584:	2300      	movs	r3, #0
 8006586:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	3301      	adds	r3, #1
 800658c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	4a13      	ldr	r2, [pc, #76]	; (80065e0 <USB_CoreReset+0x64>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d901      	bls.n	800659a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006596:	2303      	movs	r3, #3
 8006598:	e01b      	b.n	80065d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	daf2      	bge.n	8006588 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80065a2:	2300      	movs	r3, #0
 80065a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	691b      	ldr	r3, [r3, #16]
 80065aa:	f043 0201 	orr.w	r2, r3, #1
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	3301      	adds	r3, #1
 80065b6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	4a09      	ldr	r2, [pc, #36]	; (80065e0 <USB_CoreReset+0x64>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d901      	bls.n	80065c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80065c0:	2303      	movs	r3, #3
 80065c2:	e006      	b.n	80065d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	691b      	ldr	r3, [r3, #16]
 80065c8:	f003 0301 	and.w	r3, r3, #1
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d0f0      	beq.n	80065b2 <USB_CoreReset+0x36>

  return HAL_OK;
 80065d0:	2300      	movs	r3, #0
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3714      	adds	r7, #20
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr
 80065de:	bf00      	nop
 80065e0:	00030d40 	.word	0x00030d40

080065e4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	460b      	mov	r3, r1
 80065ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80065f0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80065f4:	f002 fcc2 	bl	8008f7c <USBD_static_malloc>
 80065f8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d109      	bne.n	8006614 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	32b0      	adds	r2, #176	; 0xb0
 800660a:	2100      	movs	r1, #0
 800660c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006610:	2302      	movs	r3, #2
 8006612:	e0d4      	b.n	80067be <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006614:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006618:	2100      	movs	r1, #0
 800661a:	68f8      	ldr	r0, [r7, #12]
 800661c:	f002 fd4e 	bl	80090bc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	32b0      	adds	r2, #176	; 0xb0
 800662a:	68f9      	ldr	r1, [r7, #12]
 800662c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	32b0      	adds	r2, #176	; 0xb0
 800663a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	7c1b      	ldrb	r3, [r3, #16]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d138      	bne.n	80066be <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800664c:	4b5e      	ldr	r3, [pc, #376]	; (80067c8 <USBD_CDC_Init+0x1e4>)
 800664e:	7819      	ldrb	r1, [r3, #0]
 8006650:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006654:	2202      	movs	r2, #2
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f002 fb1f 	bl	8008c9a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800665c:	4b5a      	ldr	r3, [pc, #360]	; (80067c8 <USBD_CDC_Init+0x1e4>)
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	f003 020f 	and.w	r2, r3, #15
 8006664:	6879      	ldr	r1, [r7, #4]
 8006666:	4613      	mov	r3, r2
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	4413      	add	r3, r2
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	440b      	add	r3, r1
 8006670:	3324      	adds	r3, #36	; 0x24
 8006672:	2201      	movs	r2, #1
 8006674:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006676:	4b55      	ldr	r3, [pc, #340]	; (80067cc <USBD_CDC_Init+0x1e8>)
 8006678:	7819      	ldrb	r1, [r3, #0]
 800667a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800667e:	2202      	movs	r2, #2
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f002 fb0a 	bl	8008c9a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006686:	4b51      	ldr	r3, [pc, #324]	; (80067cc <USBD_CDC_Init+0x1e8>)
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	f003 020f 	and.w	r2, r3, #15
 800668e:	6879      	ldr	r1, [r7, #4]
 8006690:	4613      	mov	r3, r2
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	4413      	add	r3, r2
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	440b      	add	r3, r1
 800669a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800669e:	2201      	movs	r2, #1
 80066a0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80066a2:	4b4b      	ldr	r3, [pc, #300]	; (80067d0 <USBD_CDC_Init+0x1ec>)
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	f003 020f 	and.w	r2, r3, #15
 80066aa:	6879      	ldr	r1, [r7, #4]
 80066ac:	4613      	mov	r3, r2
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	4413      	add	r3, r2
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	440b      	add	r3, r1
 80066b6:	3326      	adds	r3, #38	; 0x26
 80066b8:	2210      	movs	r2, #16
 80066ba:	801a      	strh	r2, [r3, #0]
 80066bc:	e035      	b.n	800672a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80066be:	4b42      	ldr	r3, [pc, #264]	; (80067c8 <USBD_CDC_Init+0x1e4>)
 80066c0:	7819      	ldrb	r1, [r3, #0]
 80066c2:	2340      	movs	r3, #64	; 0x40
 80066c4:	2202      	movs	r2, #2
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f002 fae7 	bl	8008c9a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80066cc:	4b3e      	ldr	r3, [pc, #248]	; (80067c8 <USBD_CDC_Init+0x1e4>)
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	f003 020f 	and.w	r2, r3, #15
 80066d4:	6879      	ldr	r1, [r7, #4]
 80066d6:	4613      	mov	r3, r2
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	4413      	add	r3, r2
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	440b      	add	r3, r1
 80066e0:	3324      	adds	r3, #36	; 0x24
 80066e2:	2201      	movs	r2, #1
 80066e4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80066e6:	4b39      	ldr	r3, [pc, #228]	; (80067cc <USBD_CDC_Init+0x1e8>)
 80066e8:	7819      	ldrb	r1, [r3, #0]
 80066ea:	2340      	movs	r3, #64	; 0x40
 80066ec:	2202      	movs	r2, #2
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f002 fad3 	bl	8008c9a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80066f4:	4b35      	ldr	r3, [pc, #212]	; (80067cc <USBD_CDC_Init+0x1e8>)
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	f003 020f 	and.w	r2, r3, #15
 80066fc:	6879      	ldr	r1, [r7, #4]
 80066fe:	4613      	mov	r3, r2
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	4413      	add	r3, r2
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	440b      	add	r3, r1
 8006708:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800670c:	2201      	movs	r2, #1
 800670e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006710:	4b2f      	ldr	r3, [pc, #188]	; (80067d0 <USBD_CDC_Init+0x1ec>)
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	f003 020f 	and.w	r2, r3, #15
 8006718:	6879      	ldr	r1, [r7, #4]
 800671a:	4613      	mov	r3, r2
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	4413      	add	r3, r2
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	440b      	add	r3, r1
 8006724:	3326      	adds	r3, #38	; 0x26
 8006726:	2210      	movs	r2, #16
 8006728:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800672a:	4b29      	ldr	r3, [pc, #164]	; (80067d0 <USBD_CDC_Init+0x1ec>)
 800672c:	7819      	ldrb	r1, [r3, #0]
 800672e:	2308      	movs	r3, #8
 8006730:	2203      	movs	r2, #3
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f002 fab1 	bl	8008c9a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006738:	4b25      	ldr	r3, [pc, #148]	; (80067d0 <USBD_CDC_Init+0x1ec>)
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	f003 020f 	and.w	r2, r3, #15
 8006740:	6879      	ldr	r1, [r7, #4]
 8006742:	4613      	mov	r3, r2
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	4413      	add	r3, r2
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	440b      	add	r3, r1
 800674c:	3324      	adds	r3, #36	; 0x24
 800674e:	2201      	movs	r2, #1
 8006750:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2200      	movs	r2, #0
 8006756:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	33b0      	adds	r3, #176	; 0xb0
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	4413      	add	r3, r2
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2200      	movs	r2, #0
 8006772:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2200      	movs	r2, #0
 800677a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006784:	2b00      	cmp	r3, #0
 8006786:	d101      	bne.n	800678c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006788:	2302      	movs	r3, #2
 800678a:	e018      	b.n	80067be <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	7c1b      	ldrb	r3, [r3, #16]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d10a      	bne.n	80067aa <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006794:	4b0d      	ldr	r3, [pc, #52]	; (80067cc <USBD_CDC_Init+0x1e8>)
 8006796:	7819      	ldrb	r1, [r3, #0]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800679e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f002 fb68 	bl	8008e78 <USBD_LL_PrepareReceive>
 80067a8:	e008      	b.n	80067bc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80067aa:	4b08      	ldr	r3, [pc, #32]	; (80067cc <USBD_CDC_Init+0x1e8>)
 80067ac:	7819      	ldrb	r1, [r3, #0]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80067b4:	2340      	movs	r3, #64	; 0x40
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f002 fb5e 	bl	8008e78 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80067bc:	2300      	movs	r3, #0
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3710      	adds	r7, #16
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	20000093 	.word	0x20000093
 80067cc:	20000094 	.word	0x20000094
 80067d0:	20000095 	.word	0x20000095

080067d4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b082      	sub	sp, #8
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	460b      	mov	r3, r1
 80067de:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80067e0:	4b3a      	ldr	r3, [pc, #232]	; (80068cc <USBD_CDC_DeInit+0xf8>)
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	4619      	mov	r1, r3
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f002 fa7d 	bl	8008ce6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80067ec:	4b37      	ldr	r3, [pc, #220]	; (80068cc <USBD_CDC_DeInit+0xf8>)
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	f003 020f 	and.w	r2, r3, #15
 80067f4:	6879      	ldr	r1, [r7, #4]
 80067f6:	4613      	mov	r3, r2
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	4413      	add	r3, r2
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	440b      	add	r3, r1
 8006800:	3324      	adds	r3, #36	; 0x24
 8006802:	2200      	movs	r2, #0
 8006804:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006806:	4b32      	ldr	r3, [pc, #200]	; (80068d0 <USBD_CDC_DeInit+0xfc>)
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	4619      	mov	r1, r3
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f002 fa6a 	bl	8008ce6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006812:	4b2f      	ldr	r3, [pc, #188]	; (80068d0 <USBD_CDC_DeInit+0xfc>)
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	f003 020f 	and.w	r2, r3, #15
 800681a:	6879      	ldr	r1, [r7, #4]
 800681c:	4613      	mov	r3, r2
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	4413      	add	r3, r2
 8006822:	009b      	lsls	r3, r3, #2
 8006824:	440b      	add	r3, r1
 8006826:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800682a:	2200      	movs	r2, #0
 800682c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800682e:	4b29      	ldr	r3, [pc, #164]	; (80068d4 <USBD_CDC_DeInit+0x100>)
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	4619      	mov	r1, r3
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f002 fa56 	bl	8008ce6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800683a:	4b26      	ldr	r3, [pc, #152]	; (80068d4 <USBD_CDC_DeInit+0x100>)
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	f003 020f 	and.w	r2, r3, #15
 8006842:	6879      	ldr	r1, [r7, #4]
 8006844:	4613      	mov	r3, r2
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	4413      	add	r3, r2
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	440b      	add	r3, r1
 800684e:	3324      	adds	r3, #36	; 0x24
 8006850:	2200      	movs	r2, #0
 8006852:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006854:	4b1f      	ldr	r3, [pc, #124]	; (80068d4 <USBD_CDC_DeInit+0x100>)
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	f003 020f 	and.w	r2, r3, #15
 800685c:	6879      	ldr	r1, [r7, #4]
 800685e:	4613      	mov	r3, r2
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	4413      	add	r3, r2
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	440b      	add	r3, r1
 8006868:	3326      	adds	r3, #38	; 0x26
 800686a:	2200      	movs	r2, #0
 800686c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	32b0      	adds	r2, #176	; 0xb0
 8006878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d01f      	beq.n	80068c0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	33b0      	adds	r3, #176	; 0xb0
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	4413      	add	r3, r2
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	32b0      	adds	r2, #176	; 0xb0
 800689e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068a2:	4618      	mov	r0, r3
 80068a4:	f002 fb78 	bl	8008f98 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	32b0      	adds	r2, #176	; 0xb0
 80068b2:	2100      	movs	r1, #0
 80068b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3708      	adds	r7, #8
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop
 80068cc:	20000093 	.word	0x20000093
 80068d0:	20000094 	.word	0x20000094
 80068d4:	20000095 	.word	0x20000095

080068d8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b086      	sub	sp, #24
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	32b0      	adds	r2, #176	; 0xb0
 80068ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068f0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80068f2:	2300      	movs	r3, #0
 80068f4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80068f6:	2300      	movs	r3, #0
 80068f8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80068fa:	2300      	movs	r3, #0
 80068fc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d101      	bne.n	8006908 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006904:	2303      	movs	r3, #3
 8006906:	e0bf      	b.n	8006a88 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006910:	2b00      	cmp	r3, #0
 8006912:	d050      	beq.n	80069b6 <USBD_CDC_Setup+0xde>
 8006914:	2b20      	cmp	r3, #32
 8006916:	f040 80af 	bne.w	8006a78 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	88db      	ldrh	r3, [r3, #6]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d03a      	beq.n	8006998 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	b25b      	sxtb	r3, r3
 8006928:	2b00      	cmp	r3, #0
 800692a:	da1b      	bge.n	8006964 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	33b0      	adds	r3, #176	; 0xb0
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	4413      	add	r3, r2
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	683a      	ldr	r2, [r7, #0]
 8006940:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006942:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006944:	683a      	ldr	r2, [r7, #0]
 8006946:	88d2      	ldrh	r2, [r2, #6]
 8006948:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	88db      	ldrh	r3, [r3, #6]
 800694e:	2b07      	cmp	r3, #7
 8006950:	bf28      	it	cs
 8006952:	2307      	movcs	r3, #7
 8006954:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	89fa      	ldrh	r2, [r7, #14]
 800695a:	4619      	mov	r1, r3
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f001 fd6d 	bl	800843c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006962:	e090      	b.n	8006a86 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	785a      	ldrb	r2, [r3, #1]
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	88db      	ldrh	r3, [r3, #6]
 8006972:	2b3f      	cmp	r3, #63	; 0x3f
 8006974:	d803      	bhi.n	800697e <USBD_CDC_Setup+0xa6>
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	88db      	ldrh	r3, [r3, #6]
 800697a:	b2da      	uxtb	r2, r3
 800697c:	e000      	b.n	8006980 <USBD_CDC_Setup+0xa8>
 800697e:	2240      	movs	r2, #64	; 0x40
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006986:	6939      	ldr	r1, [r7, #16]
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800698e:	461a      	mov	r2, r3
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f001 fd7f 	bl	8008494 <USBD_CtlPrepareRx>
      break;
 8006996:	e076      	b.n	8006a86 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	33b0      	adds	r3, #176	; 0xb0
 80069a2:	009b      	lsls	r3, r3, #2
 80069a4:	4413      	add	r3, r2
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	683a      	ldr	r2, [r7, #0]
 80069ac:	7850      	ldrb	r0, [r2, #1]
 80069ae:	2200      	movs	r2, #0
 80069b0:	6839      	ldr	r1, [r7, #0]
 80069b2:	4798      	blx	r3
      break;
 80069b4:	e067      	b.n	8006a86 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	785b      	ldrb	r3, [r3, #1]
 80069ba:	2b0b      	cmp	r3, #11
 80069bc:	d851      	bhi.n	8006a62 <USBD_CDC_Setup+0x18a>
 80069be:	a201      	add	r2, pc, #4	; (adr r2, 80069c4 <USBD_CDC_Setup+0xec>)
 80069c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069c4:	080069f5 	.word	0x080069f5
 80069c8:	08006a71 	.word	0x08006a71
 80069cc:	08006a63 	.word	0x08006a63
 80069d0:	08006a63 	.word	0x08006a63
 80069d4:	08006a63 	.word	0x08006a63
 80069d8:	08006a63 	.word	0x08006a63
 80069dc:	08006a63 	.word	0x08006a63
 80069e0:	08006a63 	.word	0x08006a63
 80069e4:	08006a63 	.word	0x08006a63
 80069e8:	08006a63 	.word	0x08006a63
 80069ec:	08006a1f 	.word	0x08006a1f
 80069f0:	08006a49 	.word	0x08006a49
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	2b03      	cmp	r3, #3
 80069fe:	d107      	bne.n	8006a10 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006a00:	f107 030a 	add.w	r3, r7, #10
 8006a04:	2202      	movs	r2, #2
 8006a06:	4619      	mov	r1, r3
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f001 fd17 	bl	800843c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a0e:	e032      	b.n	8006a76 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006a10:	6839      	ldr	r1, [r7, #0]
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f001 fca1 	bl	800835a <USBD_CtlError>
            ret = USBD_FAIL;
 8006a18:	2303      	movs	r3, #3
 8006a1a:	75fb      	strb	r3, [r7, #23]
          break;
 8006a1c:	e02b      	b.n	8006a76 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	2b03      	cmp	r3, #3
 8006a28:	d107      	bne.n	8006a3a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006a2a:	f107 030d 	add.w	r3, r7, #13
 8006a2e:	2201      	movs	r2, #1
 8006a30:	4619      	mov	r1, r3
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f001 fd02 	bl	800843c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a38:	e01d      	b.n	8006a76 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006a3a:	6839      	ldr	r1, [r7, #0]
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f001 fc8c 	bl	800835a <USBD_CtlError>
            ret = USBD_FAIL;
 8006a42:	2303      	movs	r3, #3
 8006a44:	75fb      	strb	r3, [r7, #23]
          break;
 8006a46:	e016      	b.n	8006a76 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	2b03      	cmp	r3, #3
 8006a52:	d00f      	beq.n	8006a74 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006a54:	6839      	ldr	r1, [r7, #0]
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f001 fc7f 	bl	800835a <USBD_CtlError>
            ret = USBD_FAIL;
 8006a5c:	2303      	movs	r3, #3
 8006a5e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006a60:	e008      	b.n	8006a74 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006a62:	6839      	ldr	r1, [r7, #0]
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f001 fc78 	bl	800835a <USBD_CtlError>
          ret = USBD_FAIL;
 8006a6a:	2303      	movs	r3, #3
 8006a6c:	75fb      	strb	r3, [r7, #23]
          break;
 8006a6e:	e002      	b.n	8006a76 <USBD_CDC_Setup+0x19e>
          break;
 8006a70:	bf00      	nop
 8006a72:	e008      	b.n	8006a86 <USBD_CDC_Setup+0x1ae>
          break;
 8006a74:	bf00      	nop
      }
      break;
 8006a76:	e006      	b.n	8006a86 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006a78:	6839      	ldr	r1, [r7, #0]
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f001 fc6d 	bl	800835a <USBD_CtlError>
      ret = USBD_FAIL;
 8006a80:	2303      	movs	r3, #3
 8006a82:	75fb      	strb	r3, [r7, #23]
      break;
 8006a84:	bf00      	nop
  }

  return (uint8_t)ret;
 8006a86:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3718      	adds	r7, #24
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b084      	sub	sp, #16
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	460b      	mov	r3, r1
 8006a9a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006aa2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	32b0      	adds	r2, #176	; 0xb0
 8006aae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d101      	bne.n	8006aba <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006ab6:	2303      	movs	r3, #3
 8006ab8:	e065      	b.n	8006b86 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	32b0      	adds	r2, #176	; 0xb0
 8006ac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ac8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006aca:	78fb      	ldrb	r3, [r7, #3]
 8006acc:	f003 020f 	and.w	r2, r3, #15
 8006ad0:	6879      	ldr	r1, [r7, #4]
 8006ad2:	4613      	mov	r3, r2
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	4413      	add	r3, r2
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	440b      	add	r3, r1
 8006adc:	3318      	adds	r3, #24
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d02f      	beq.n	8006b44 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006ae4:	78fb      	ldrb	r3, [r7, #3]
 8006ae6:	f003 020f 	and.w	r2, r3, #15
 8006aea:	6879      	ldr	r1, [r7, #4]
 8006aec:	4613      	mov	r3, r2
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	4413      	add	r3, r2
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	440b      	add	r3, r1
 8006af6:	3318      	adds	r3, #24
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	78fb      	ldrb	r3, [r7, #3]
 8006afc:	f003 010f 	and.w	r1, r3, #15
 8006b00:	68f8      	ldr	r0, [r7, #12]
 8006b02:	460b      	mov	r3, r1
 8006b04:	00db      	lsls	r3, r3, #3
 8006b06:	440b      	add	r3, r1
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	4403      	add	r3, r0
 8006b0c:	3348      	adds	r3, #72	; 0x48
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	fbb2 f1f3 	udiv	r1, r2, r3
 8006b14:	fb01 f303 	mul.w	r3, r1, r3
 8006b18:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d112      	bne.n	8006b44 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006b1e:	78fb      	ldrb	r3, [r7, #3]
 8006b20:	f003 020f 	and.w	r2, r3, #15
 8006b24:	6879      	ldr	r1, [r7, #4]
 8006b26:	4613      	mov	r3, r2
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	4413      	add	r3, r2
 8006b2c:	009b      	lsls	r3, r3, #2
 8006b2e:	440b      	add	r3, r1
 8006b30:	3318      	adds	r3, #24
 8006b32:	2200      	movs	r2, #0
 8006b34:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006b36:	78f9      	ldrb	r1, [r7, #3]
 8006b38:	2300      	movs	r3, #0
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f002 f97a 	bl	8008e36 <USBD_LL_Transmit>
 8006b42:	e01f      	b.n	8006b84 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	2200      	movs	r2, #0
 8006b48:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	33b0      	adds	r3, #176	; 0xb0
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	4413      	add	r3, r2
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	691b      	ldr	r3, [r3, #16]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d010      	beq.n	8006b84 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	33b0      	adds	r3, #176	; 0xb0
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	4413      	add	r3, r2
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	691b      	ldr	r3, [r3, #16]
 8006b74:	68ba      	ldr	r2, [r7, #8]
 8006b76:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006b7a:	68ba      	ldr	r2, [r7, #8]
 8006b7c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006b80:	78fa      	ldrb	r2, [r7, #3]
 8006b82:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006b84:	2300      	movs	r3, #0
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3710      	adds	r7, #16
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}

08006b8e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b8e:	b580      	push	{r7, lr}
 8006b90:	b084      	sub	sp, #16
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
 8006b96:	460b      	mov	r3, r1
 8006b98:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	32b0      	adds	r2, #176	; 0xb0
 8006ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ba8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	32b0      	adds	r2, #176	; 0xb0
 8006bb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d101      	bne.n	8006bc0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006bbc:	2303      	movs	r3, #3
 8006bbe:	e01a      	b.n	8006bf6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006bc0:	78fb      	ldrb	r3, [r7, #3]
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f002 f978 	bl	8008eba <USBD_LL_GetRxDataSize>
 8006bca:	4602      	mov	r2, r0
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	33b0      	adds	r3, #176	; 0xb0
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	4413      	add	r3, r2
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	68db      	ldr	r3, [r3, #12]
 8006be4:	68fa      	ldr	r2, [r7, #12]
 8006be6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006bea:	68fa      	ldr	r2, [r7, #12]
 8006bec:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006bf0:	4611      	mov	r1, r2
 8006bf2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006bf4:	2300      	movs	r3, #0
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3710      	adds	r7, #16
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}

08006bfe <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006bfe:	b580      	push	{r7, lr}
 8006c00:	b084      	sub	sp, #16
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	32b0      	adds	r2, #176	; 0xb0
 8006c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c14:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d101      	bne.n	8006c20 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006c1c:	2303      	movs	r3, #3
 8006c1e:	e025      	b.n	8006c6c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	33b0      	adds	r3, #176	; 0xb0
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	4413      	add	r3, r2
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d01a      	beq.n	8006c6a <USBD_CDC_EP0_RxReady+0x6c>
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006c3a:	2bff      	cmp	r3, #255	; 0xff
 8006c3c:	d015      	beq.n	8006c6a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	33b0      	adds	r3, #176	; 0xb0
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	4413      	add	r3, r2
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	68fa      	ldr	r2, [r7, #12]
 8006c52:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006c56:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006c58:	68fa      	ldr	r2, [r7, #12]
 8006c5a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006c5e:	b292      	uxth	r2, r2
 8006c60:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	22ff      	movs	r2, #255	; 0xff
 8006c66:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006c6a:	2300      	movs	r3, #0
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3710      	adds	r7, #16
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b086      	sub	sp, #24
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006c7c:	2182      	movs	r1, #130	; 0x82
 8006c7e:	4818      	ldr	r0, [pc, #96]	; (8006ce0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006c80:	f000 fd09 	bl	8007696 <USBD_GetEpDesc>
 8006c84:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006c86:	2101      	movs	r1, #1
 8006c88:	4815      	ldr	r0, [pc, #84]	; (8006ce0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006c8a:	f000 fd04 	bl	8007696 <USBD_GetEpDesc>
 8006c8e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006c90:	2181      	movs	r1, #129	; 0x81
 8006c92:	4813      	ldr	r0, [pc, #76]	; (8006ce0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006c94:	f000 fcff 	bl	8007696 <USBD_GetEpDesc>
 8006c98:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d002      	beq.n	8006ca6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	2210      	movs	r2, #16
 8006ca4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d006      	beq.n	8006cba <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cb4:	711a      	strb	r2, [r3, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d006      	beq.n	8006cce <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cc8:	711a      	strb	r2, [r3, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2243      	movs	r2, #67	; 0x43
 8006cd2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006cd4:	4b02      	ldr	r3, [pc, #8]	; (8006ce0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3718      	adds	r7, #24
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}
 8006cde:	bf00      	nop
 8006ce0:	20000050 	.word	0x20000050

08006ce4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b086      	sub	sp, #24
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006cec:	2182      	movs	r1, #130	; 0x82
 8006cee:	4818      	ldr	r0, [pc, #96]	; (8006d50 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006cf0:	f000 fcd1 	bl	8007696 <USBD_GetEpDesc>
 8006cf4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006cf6:	2101      	movs	r1, #1
 8006cf8:	4815      	ldr	r0, [pc, #84]	; (8006d50 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006cfa:	f000 fccc 	bl	8007696 <USBD_GetEpDesc>
 8006cfe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006d00:	2181      	movs	r1, #129	; 0x81
 8006d02:	4813      	ldr	r0, [pc, #76]	; (8006d50 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006d04:	f000 fcc7 	bl	8007696 <USBD_GetEpDesc>
 8006d08:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d002      	beq.n	8006d16 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	2210      	movs	r2, #16
 8006d14:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d006      	beq.n	8006d2a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	711a      	strb	r2, [r3, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	f042 0202 	orr.w	r2, r2, #2
 8006d28:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d006      	beq.n	8006d3e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2200      	movs	r2, #0
 8006d34:	711a      	strb	r2, [r3, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	f042 0202 	orr.w	r2, r2, #2
 8006d3c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2243      	movs	r2, #67	; 0x43
 8006d42:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006d44:	4b02      	ldr	r3, [pc, #8]	; (8006d50 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3718      	adds	r7, #24
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	20000050 	.word	0x20000050

08006d54 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b086      	sub	sp, #24
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006d5c:	2182      	movs	r1, #130	; 0x82
 8006d5e:	4818      	ldr	r0, [pc, #96]	; (8006dc0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006d60:	f000 fc99 	bl	8007696 <USBD_GetEpDesc>
 8006d64:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006d66:	2101      	movs	r1, #1
 8006d68:	4815      	ldr	r0, [pc, #84]	; (8006dc0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006d6a:	f000 fc94 	bl	8007696 <USBD_GetEpDesc>
 8006d6e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006d70:	2181      	movs	r1, #129	; 0x81
 8006d72:	4813      	ldr	r0, [pc, #76]	; (8006dc0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006d74:	f000 fc8f 	bl	8007696 <USBD_GetEpDesc>
 8006d78:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d002      	beq.n	8006d86 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	2210      	movs	r2, #16
 8006d84:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d006      	beq.n	8006d9a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d94:	711a      	strb	r2, [r3, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d006      	beq.n	8006dae <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2200      	movs	r2, #0
 8006da4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006da8:	711a      	strb	r2, [r3, #4]
 8006daa:	2200      	movs	r2, #0
 8006dac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2243      	movs	r2, #67	; 0x43
 8006db2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006db4:	4b02      	ldr	r3, [pc, #8]	; (8006dc0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3718      	adds	r7, #24
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
 8006dbe:	bf00      	nop
 8006dc0:	20000050 	.word	0x20000050

08006dc4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	220a      	movs	r2, #10
 8006dd0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006dd2:	4b03      	ldr	r3, [pc, #12]	; (8006de0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	370c      	adds	r7, #12
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr
 8006de0:	2000000c 	.word	0x2000000c

08006de4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d101      	bne.n	8006df8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006df4:	2303      	movs	r3, #3
 8006df6:	e009      	b.n	8006e0c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006dfe:	687a      	ldr	r2, [r7, #4]
 8006e00:	33b0      	adds	r3, #176	; 0xb0
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	4413      	add	r3, r2
 8006e06:	683a      	ldr	r2, [r7, #0]
 8006e08:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006e0a:	2300      	movs	r3, #0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	370c      	adds	r7, #12
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b087      	sub	sp, #28
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	32b0      	adds	r2, #176	; 0xb0
 8006e2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e32:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d101      	bne.n	8006e3e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006e3a:	2303      	movs	r3, #3
 8006e3c:	e008      	b.n	8006e50 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	68ba      	ldr	r2, [r7, #8]
 8006e42:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006e4e:	2300      	movs	r3, #0
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	371c      	adds	r7, #28
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b085      	sub	sp, #20
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	32b0      	adds	r2, #176	; 0xb0
 8006e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e74:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d101      	bne.n	8006e80 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006e7c:	2303      	movs	r3, #3
 8006e7e:	e004      	b.n	8006e8a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	683a      	ldr	r2, [r7, #0]
 8006e84:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006e88:	2300      	movs	r3, #0
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3714      	adds	r7, #20
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr
	...

08006e98 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b084      	sub	sp, #16
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	32b0      	adds	r2, #176	; 0xb0
 8006eaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eae:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	32b0      	adds	r2, #176	; 0xb0
 8006eba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d101      	bne.n	8006ec6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006ec2:	2303      	movs	r3, #3
 8006ec4:	e018      	b.n	8006ef8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	7c1b      	ldrb	r3, [r3, #16]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d10a      	bne.n	8006ee4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006ece:	4b0c      	ldr	r3, [pc, #48]	; (8006f00 <USBD_CDC_ReceivePacket+0x68>)
 8006ed0:	7819      	ldrb	r1, [r3, #0]
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ed8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f001 ffcb 	bl	8008e78 <USBD_LL_PrepareReceive>
 8006ee2:	e008      	b.n	8006ef6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006ee4:	4b06      	ldr	r3, [pc, #24]	; (8006f00 <USBD_CDC_ReceivePacket+0x68>)
 8006ee6:	7819      	ldrb	r1, [r3, #0]
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006eee:	2340      	movs	r3, #64	; 0x40
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f001 ffc1 	bl	8008e78 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006ef6:	2300      	movs	r3, #0
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3710      	adds	r7, #16
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	20000094 	.word	0x20000094

08006f04 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b086      	sub	sp, #24
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	60f8      	str	r0, [r7, #12]
 8006f0c:	60b9      	str	r1, [r7, #8]
 8006f0e:	4613      	mov	r3, r2
 8006f10:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d101      	bne.n	8006f1c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006f18:	2303      	movs	r3, #3
 8006f1a:	e01f      	b.n	8006f5c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2200      	movs	r2, #0
 8006f28:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d003      	beq.n	8006f42 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	68ba      	ldr	r2, [r7, #8]
 8006f3e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2201      	movs	r2, #1
 8006f46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	79fa      	ldrb	r2, [r7, #7]
 8006f4e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006f50:	68f8      	ldr	r0, [r7, #12]
 8006f52:	f001 fe37 	bl	8008bc4 <USBD_LL_Init>
 8006f56:	4603      	mov	r3, r0
 8006f58:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006f5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3718      	adds	r7, #24
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b084      	sub	sp, #16
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d101      	bne.n	8006f7c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006f78:	2303      	movs	r3, #3
 8006f7a:	e025      	b.n	8006fc8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	683a      	ldr	r2, [r7, #0]
 8006f80:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	32ae      	adds	r2, #174	; 0xae
 8006f8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d00f      	beq.n	8006fb8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	32ae      	adds	r2, #174	; 0xae
 8006fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa8:	f107 020e 	add.w	r2, r7, #14
 8006fac:	4610      	mov	r0, r2
 8006fae:	4798      	blx	r3
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006fbe:	1c5a      	adds	r2, r3, #1
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006fc6:	2300      	movs	r3, #0
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3710      	adds	r7, #16
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b082      	sub	sp, #8
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f001 fe43 	bl	8008c64 <USBD_LL_Start>
 8006fde:	4603      	mov	r3, r0
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3708      	adds	r7, #8
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006ff0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	370c      	adds	r7, #12
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr

08006ffe <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ffe:	b580      	push	{r7, lr}
 8007000:	b084      	sub	sp, #16
 8007002:	af00      	add	r7, sp, #0
 8007004:	6078      	str	r0, [r7, #4]
 8007006:	460b      	mov	r3, r1
 8007008:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800700a:	2300      	movs	r3, #0
 800700c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007014:	2b00      	cmp	r3, #0
 8007016:	d009      	beq.n	800702c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	78fa      	ldrb	r2, [r7, #3]
 8007022:	4611      	mov	r1, r2
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	4798      	blx	r3
 8007028:	4603      	mov	r3, r0
 800702a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800702c:	7bfb      	ldrb	r3, [r7, #15]
}
 800702e:	4618      	mov	r0, r3
 8007030:	3710      	adds	r7, #16
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}

08007036 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007036:	b580      	push	{r7, lr}
 8007038:	b084      	sub	sp, #16
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
 800703e:	460b      	mov	r3, r1
 8007040:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007042:	2300      	movs	r3, #0
 8007044:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	78fa      	ldrb	r2, [r7, #3]
 8007050:	4611      	mov	r1, r2
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	4798      	blx	r3
 8007056:	4603      	mov	r3, r0
 8007058:	2b00      	cmp	r3, #0
 800705a:	d001      	beq.n	8007060 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800705c:	2303      	movs	r3, #3
 800705e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007060:	7bfb      	ldrb	r3, [r7, #15]
}
 8007062:	4618      	mov	r0, r3
 8007064:	3710      	adds	r7, #16
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}

0800706a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800706a:	b580      	push	{r7, lr}
 800706c:	b084      	sub	sp, #16
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]
 8007072:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800707a:	6839      	ldr	r1, [r7, #0]
 800707c:	4618      	mov	r0, r3
 800707e:	f001 f932 	bl	80082e6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2201      	movs	r2, #1
 8007086:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007090:	461a      	mov	r2, r3
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800709e:	f003 031f 	and.w	r3, r3, #31
 80070a2:	2b02      	cmp	r3, #2
 80070a4:	d01a      	beq.n	80070dc <USBD_LL_SetupStage+0x72>
 80070a6:	2b02      	cmp	r3, #2
 80070a8:	d822      	bhi.n	80070f0 <USBD_LL_SetupStage+0x86>
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d002      	beq.n	80070b4 <USBD_LL_SetupStage+0x4a>
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d00a      	beq.n	80070c8 <USBD_LL_SetupStage+0x5e>
 80070b2:	e01d      	b.n	80070f0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80070ba:	4619      	mov	r1, r3
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f000 fb5f 	bl	8007780 <USBD_StdDevReq>
 80070c2:	4603      	mov	r3, r0
 80070c4:	73fb      	strb	r3, [r7, #15]
      break;
 80070c6:	e020      	b.n	800710a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80070ce:	4619      	mov	r1, r3
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f000 fbc7 	bl	8007864 <USBD_StdItfReq>
 80070d6:	4603      	mov	r3, r0
 80070d8:	73fb      	strb	r3, [r7, #15]
      break;
 80070da:	e016      	b.n	800710a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80070e2:	4619      	mov	r1, r3
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 fc29 	bl	800793c <USBD_StdEPReq>
 80070ea:	4603      	mov	r3, r0
 80070ec:	73fb      	strb	r3, [r7, #15]
      break;
 80070ee:	e00c      	b.n	800710a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80070f6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	4619      	mov	r1, r3
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f001 fe10 	bl	8008d24 <USBD_LL_StallEP>
 8007104:	4603      	mov	r3, r0
 8007106:	73fb      	strb	r3, [r7, #15]
      break;
 8007108:	bf00      	nop
  }

  return ret;
 800710a:	7bfb      	ldrb	r3, [r7, #15]
}
 800710c:	4618      	mov	r0, r3
 800710e:	3710      	adds	r7, #16
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b086      	sub	sp, #24
 8007118:	af00      	add	r7, sp, #0
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	460b      	mov	r3, r1
 800711e:	607a      	str	r2, [r7, #4]
 8007120:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007122:	2300      	movs	r3, #0
 8007124:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007126:	7afb      	ldrb	r3, [r7, #11]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d16e      	bne.n	800720a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007132:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800713a:	2b03      	cmp	r3, #3
 800713c:	f040 8098 	bne.w	8007270 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	689a      	ldr	r2, [r3, #8]
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	68db      	ldr	r3, [r3, #12]
 8007148:	429a      	cmp	r2, r3
 800714a:	d913      	bls.n	8007174 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	689a      	ldr	r2, [r3, #8]
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	68db      	ldr	r3, [r3, #12]
 8007154:	1ad2      	subs	r2, r2, r3
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	68da      	ldr	r2, [r3, #12]
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	4293      	cmp	r3, r2
 8007164:	bf28      	it	cs
 8007166:	4613      	movcs	r3, r2
 8007168:	461a      	mov	r2, r3
 800716a:	6879      	ldr	r1, [r7, #4]
 800716c:	68f8      	ldr	r0, [r7, #12]
 800716e:	f001 f9ae 	bl	80084ce <USBD_CtlContinueRx>
 8007172:	e07d      	b.n	8007270 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800717a:	f003 031f 	and.w	r3, r3, #31
 800717e:	2b02      	cmp	r3, #2
 8007180:	d014      	beq.n	80071ac <USBD_LL_DataOutStage+0x98>
 8007182:	2b02      	cmp	r3, #2
 8007184:	d81d      	bhi.n	80071c2 <USBD_LL_DataOutStage+0xae>
 8007186:	2b00      	cmp	r3, #0
 8007188:	d002      	beq.n	8007190 <USBD_LL_DataOutStage+0x7c>
 800718a:	2b01      	cmp	r3, #1
 800718c:	d003      	beq.n	8007196 <USBD_LL_DataOutStage+0x82>
 800718e:	e018      	b.n	80071c2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007190:	2300      	movs	r3, #0
 8007192:	75bb      	strb	r3, [r7, #22]
            break;
 8007194:	e018      	b.n	80071c8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800719c:	b2db      	uxtb	r3, r3
 800719e:	4619      	mov	r1, r3
 80071a0:	68f8      	ldr	r0, [r7, #12]
 80071a2:	f000 fa5e 	bl	8007662 <USBD_CoreFindIF>
 80071a6:	4603      	mov	r3, r0
 80071a8:	75bb      	strb	r3, [r7, #22]
            break;
 80071aa:	e00d      	b.n	80071c8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	4619      	mov	r1, r3
 80071b6:	68f8      	ldr	r0, [r7, #12]
 80071b8:	f000 fa60 	bl	800767c <USBD_CoreFindEP>
 80071bc:	4603      	mov	r3, r0
 80071be:	75bb      	strb	r3, [r7, #22]
            break;
 80071c0:	e002      	b.n	80071c8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80071c2:	2300      	movs	r3, #0
 80071c4:	75bb      	strb	r3, [r7, #22]
            break;
 80071c6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80071c8:	7dbb      	ldrb	r3, [r7, #22]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d119      	bne.n	8007202 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	2b03      	cmp	r3, #3
 80071d8:	d113      	bne.n	8007202 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80071da:	7dba      	ldrb	r2, [r7, #22]
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	32ae      	adds	r2, #174	; 0xae
 80071e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071e4:	691b      	ldr	r3, [r3, #16]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d00b      	beq.n	8007202 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80071ea:	7dba      	ldrb	r2, [r7, #22]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80071f2:	7dba      	ldrb	r2, [r7, #22]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	32ae      	adds	r2, #174	; 0xae
 80071f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071fc:	691b      	ldr	r3, [r3, #16]
 80071fe:	68f8      	ldr	r0, [r7, #12]
 8007200:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007202:	68f8      	ldr	r0, [r7, #12]
 8007204:	f001 f974 	bl	80084f0 <USBD_CtlSendStatus>
 8007208:	e032      	b.n	8007270 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800720a:	7afb      	ldrb	r3, [r7, #11]
 800720c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007210:	b2db      	uxtb	r3, r3
 8007212:	4619      	mov	r1, r3
 8007214:	68f8      	ldr	r0, [r7, #12]
 8007216:	f000 fa31 	bl	800767c <USBD_CoreFindEP>
 800721a:	4603      	mov	r3, r0
 800721c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800721e:	7dbb      	ldrb	r3, [r7, #22]
 8007220:	2bff      	cmp	r3, #255	; 0xff
 8007222:	d025      	beq.n	8007270 <USBD_LL_DataOutStage+0x15c>
 8007224:	7dbb      	ldrb	r3, [r7, #22]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d122      	bne.n	8007270 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007230:	b2db      	uxtb	r3, r3
 8007232:	2b03      	cmp	r3, #3
 8007234:	d117      	bne.n	8007266 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007236:	7dba      	ldrb	r2, [r7, #22]
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	32ae      	adds	r2, #174	; 0xae
 800723c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007240:	699b      	ldr	r3, [r3, #24]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d00f      	beq.n	8007266 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007246:	7dba      	ldrb	r2, [r7, #22]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800724e:	7dba      	ldrb	r2, [r7, #22]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	32ae      	adds	r2, #174	; 0xae
 8007254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007258:	699b      	ldr	r3, [r3, #24]
 800725a:	7afa      	ldrb	r2, [r7, #11]
 800725c:	4611      	mov	r1, r2
 800725e:	68f8      	ldr	r0, [r7, #12]
 8007260:	4798      	blx	r3
 8007262:	4603      	mov	r3, r0
 8007264:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007266:	7dfb      	ldrb	r3, [r7, #23]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d001      	beq.n	8007270 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800726c:	7dfb      	ldrb	r3, [r7, #23]
 800726e:	e000      	b.n	8007272 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007270:	2300      	movs	r3, #0
}
 8007272:	4618      	mov	r0, r3
 8007274:	3718      	adds	r7, #24
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}

0800727a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800727a:	b580      	push	{r7, lr}
 800727c:	b086      	sub	sp, #24
 800727e:	af00      	add	r7, sp, #0
 8007280:	60f8      	str	r0, [r7, #12]
 8007282:	460b      	mov	r3, r1
 8007284:	607a      	str	r2, [r7, #4]
 8007286:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007288:	7afb      	ldrb	r3, [r7, #11]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d16f      	bne.n	800736e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	3314      	adds	r3, #20
 8007292:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800729a:	2b02      	cmp	r3, #2
 800729c:	d15a      	bne.n	8007354 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	689a      	ldr	r2, [r3, #8]
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	68db      	ldr	r3, [r3, #12]
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d914      	bls.n	80072d4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	689a      	ldr	r2, [r3, #8]
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	68db      	ldr	r3, [r3, #12]
 80072b2:	1ad2      	subs	r2, r2, r3
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	461a      	mov	r2, r3
 80072be:	6879      	ldr	r1, [r7, #4]
 80072c0:	68f8      	ldr	r0, [r7, #12]
 80072c2:	f001 f8d6 	bl	8008472 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80072c6:	2300      	movs	r3, #0
 80072c8:	2200      	movs	r2, #0
 80072ca:	2100      	movs	r1, #0
 80072cc:	68f8      	ldr	r0, [r7, #12]
 80072ce:	f001 fdd3 	bl	8008e78 <USBD_LL_PrepareReceive>
 80072d2:	e03f      	b.n	8007354 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	68da      	ldr	r2, [r3, #12]
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	429a      	cmp	r2, r3
 80072de:	d11c      	bne.n	800731a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	685a      	ldr	r2, [r3, #4]
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d316      	bcc.n	800731a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	685a      	ldr	r2, [r3, #4]
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d20f      	bcs.n	800731a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80072fa:	2200      	movs	r2, #0
 80072fc:	2100      	movs	r1, #0
 80072fe:	68f8      	ldr	r0, [r7, #12]
 8007300:	f001 f8b7 	bl	8008472 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2200      	movs	r2, #0
 8007308:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800730c:	2300      	movs	r3, #0
 800730e:	2200      	movs	r2, #0
 8007310:	2100      	movs	r1, #0
 8007312:	68f8      	ldr	r0, [r7, #12]
 8007314:	f001 fdb0 	bl	8008e78 <USBD_LL_PrepareReceive>
 8007318:	e01c      	b.n	8007354 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007320:	b2db      	uxtb	r3, r3
 8007322:	2b03      	cmp	r3, #3
 8007324:	d10f      	bne.n	8007346 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d009      	beq.n	8007346 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2200      	movs	r2, #0
 8007336:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007340:	68db      	ldr	r3, [r3, #12]
 8007342:	68f8      	ldr	r0, [r7, #12]
 8007344:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007346:	2180      	movs	r1, #128	; 0x80
 8007348:	68f8      	ldr	r0, [r7, #12]
 800734a:	f001 fceb 	bl	8008d24 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800734e:	68f8      	ldr	r0, [r7, #12]
 8007350:	f001 f8e1 	bl	8008516 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800735a:	2b00      	cmp	r3, #0
 800735c:	d03a      	beq.n	80073d4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800735e:	68f8      	ldr	r0, [r7, #12]
 8007360:	f7ff fe42 	bl	8006fe8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2200      	movs	r2, #0
 8007368:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800736c:	e032      	b.n	80073d4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800736e:	7afb      	ldrb	r3, [r7, #11]
 8007370:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007374:	b2db      	uxtb	r3, r3
 8007376:	4619      	mov	r1, r3
 8007378:	68f8      	ldr	r0, [r7, #12]
 800737a:	f000 f97f 	bl	800767c <USBD_CoreFindEP>
 800737e:	4603      	mov	r3, r0
 8007380:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007382:	7dfb      	ldrb	r3, [r7, #23]
 8007384:	2bff      	cmp	r3, #255	; 0xff
 8007386:	d025      	beq.n	80073d4 <USBD_LL_DataInStage+0x15a>
 8007388:	7dfb      	ldrb	r3, [r7, #23]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d122      	bne.n	80073d4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007394:	b2db      	uxtb	r3, r3
 8007396:	2b03      	cmp	r3, #3
 8007398:	d11c      	bne.n	80073d4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800739a:	7dfa      	ldrb	r2, [r7, #23]
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	32ae      	adds	r2, #174	; 0xae
 80073a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073a4:	695b      	ldr	r3, [r3, #20]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d014      	beq.n	80073d4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80073aa:	7dfa      	ldrb	r2, [r7, #23]
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80073b2:	7dfa      	ldrb	r2, [r7, #23]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	32ae      	adds	r2, #174	; 0xae
 80073b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073bc:	695b      	ldr	r3, [r3, #20]
 80073be:	7afa      	ldrb	r2, [r7, #11]
 80073c0:	4611      	mov	r1, r2
 80073c2:	68f8      	ldr	r0, [r7, #12]
 80073c4:	4798      	blx	r3
 80073c6:	4603      	mov	r3, r0
 80073c8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80073ca:	7dbb      	ldrb	r3, [r7, #22]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d001      	beq.n	80073d4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80073d0:	7dbb      	ldrb	r3, [r7, #22]
 80073d2:	e000      	b.n	80073d6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3718      	adds	r7, #24
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}

080073de <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80073de:	b580      	push	{r7, lr}
 80073e0:	b084      	sub	sp, #16
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80073e6:	2300      	movs	r3, #0
 80073e8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2201      	movs	r2, #1
 80073ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2200      	movs	r2, #0
 80073f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007416:	2b00      	cmp	r3, #0
 8007418:	d014      	beq.n	8007444 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d00e      	beq.n	8007444 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	6852      	ldr	r2, [r2, #4]
 8007432:	b2d2      	uxtb	r2, r2
 8007434:	4611      	mov	r1, r2
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	4798      	blx	r3
 800743a:	4603      	mov	r3, r0
 800743c:	2b00      	cmp	r3, #0
 800743e:	d001      	beq.n	8007444 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007440:	2303      	movs	r3, #3
 8007442:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007444:	2340      	movs	r3, #64	; 0x40
 8007446:	2200      	movs	r2, #0
 8007448:	2100      	movs	r1, #0
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f001 fc25 	bl	8008c9a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2201      	movs	r2, #1
 8007454:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2240      	movs	r2, #64	; 0x40
 800745c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007460:	2340      	movs	r3, #64	; 0x40
 8007462:	2200      	movs	r2, #0
 8007464:	2180      	movs	r1, #128	; 0x80
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f001 fc17 	bl	8008c9a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2201      	movs	r2, #1
 8007470:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2240      	movs	r2, #64	; 0x40
 8007476:	621a      	str	r2, [r3, #32]

  return ret;
 8007478:	7bfb      	ldrb	r3, [r7, #15]
}
 800747a:	4618      	mov	r0, r3
 800747c:	3710      	adds	r7, #16
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}

08007482 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007482:	b480      	push	{r7}
 8007484:	b083      	sub	sp, #12
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
 800748a:	460b      	mov	r3, r1
 800748c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	78fa      	ldrb	r2, [r7, #3]
 8007492:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007494:	2300      	movs	r3, #0
}
 8007496:	4618      	mov	r0, r3
 8007498:	370c      	adds	r7, #12
 800749a:	46bd      	mov	sp, r7
 800749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a0:	4770      	bx	lr

080074a2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80074a2:	b480      	push	{r7}
 80074a4:	b083      	sub	sp, #12
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074b0:	b2da      	uxtb	r2, r3
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2204      	movs	r2, #4
 80074bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80074c0:	2300      	movs	r3, #0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	370c      	adds	r7, #12
 80074c6:	46bd      	mov	sp, r7
 80074c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074cc:	4770      	bx	lr

080074ce <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80074ce:	b480      	push	{r7}
 80074d0:	b083      	sub	sp, #12
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	2b04      	cmp	r3, #4
 80074e0:	d106      	bne.n	80074f0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80074e8:	b2da      	uxtb	r2, r3
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80074f0:	2300      	movs	r3, #0
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	370c      	adds	r7, #12
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr

080074fe <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80074fe:	b580      	push	{r7, lr}
 8007500:	b082      	sub	sp, #8
 8007502:	af00      	add	r7, sp, #0
 8007504:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800750c:	b2db      	uxtb	r3, r3
 800750e:	2b03      	cmp	r3, #3
 8007510:	d110      	bne.n	8007534 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007518:	2b00      	cmp	r3, #0
 800751a:	d00b      	beq.n	8007534 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007522:	69db      	ldr	r3, [r3, #28]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d005      	beq.n	8007534 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800752e:	69db      	ldr	r3, [r3, #28]
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007534:	2300      	movs	r3, #0
}
 8007536:	4618      	mov	r0, r3
 8007538:	3708      	adds	r7, #8
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}

0800753e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800753e:	b580      	push	{r7, lr}
 8007540:	b082      	sub	sp, #8
 8007542:	af00      	add	r7, sp, #0
 8007544:	6078      	str	r0, [r7, #4]
 8007546:	460b      	mov	r3, r1
 8007548:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	32ae      	adds	r2, #174	; 0xae
 8007554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d101      	bne.n	8007560 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800755c:	2303      	movs	r3, #3
 800755e:	e01c      	b.n	800759a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007566:	b2db      	uxtb	r3, r3
 8007568:	2b03      	cmp	r3, #3
 800756a:	d115      	bne.n	8007598 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	32ae      	adds	r2, #174	; 0xae
 8007576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800757a:	6a1b      	ldr	r3, [r3, #32]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d00b      	beq.n	8007598 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	32ae      	adds	r2, #174	; 0xae
 800758a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800758e:	6a1b      	ldr	r3, [r3, #32]
 8007590:	78fa      	ldrb	r2, [r7, #3]
 8007592:	4611      	mov	r1, r2
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007598:	2300      	movs	r3, #0
}
 800759a:	4618      	mov	r0, r3
 800759c:	3708      	adds	r7, #8
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}

080075a2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80075a2:	b580      	push	{r7, lr}
 80075a4:	b082      	sub	sp, #8
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
 80075aa:	460b      	mov	r3, r1
 80075ac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	32ae      	adds	r2, #174	; 0xae
 80075b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d101      	bne.n	80075c4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80075c0:	2303      	movs	r3, #3
 80075c2:	e01c      	b.n	80075fe <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	2b03      	cmp	r3, #3
 80075ce:	d115      	bne.n	80075fc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	32ae      	adds	r2, #174	; 0xae
 80075da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d00b      	beq.n	80075fc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	32ae      	adds	r2, #174	; 0xae
 80075ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f4:	78fa      	ldrb	r2, [r7, #3]
 80075f6:	4611      	mov	r1, r2
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80075fc:	2300      	movs	r3, #0
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3708      	adds	r7, #8
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}

08007606 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007606:	b480      	push	{r7}
 8007608:	b083      	sub	sp, #12
 800760a:	af00      	add	r7, sp, #0
 800760c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800760e:	2300      	movs	r3, #0
}
 8007610:	4618      	mov	r0, r3
 8007612:	370c      	adds	r7, #12
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr

0800761c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b084      	sub	sp, #16
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007624:	2300      	movs	r3, #0
 8007626:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2201      	movs	r2, #1
 800762c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007636:	2b00      	cmp	r3, #0
 8007638:	d00e      	beq.n	8007658 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	6852      	ldr	r2, [r2, #4]
 8007646:	b2d2      	uxtb	r2, r2
 8007648:	4611      	mov	r1, r2
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	4798      	blx	r3
 800764e:	4603      	mov	r3, r0
 8007650:	2b00      	cmp	r3, #0
 8007652:	d001      	beq.n	8007658 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007654:	2303      	movs	r3, #3
 8007656:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007658:	7bfb      	ldrb	r3, [r7, #15]
}
 800765a:	4618      	mov	r0, r3
 800765c:	3710      	adds	r7, #16
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007662:	b480      	push	{r7}
 8007664:	b083      	sub	sp, #12
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
 800766a:	460b      	mov	r3, r1
 800766c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800766e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007670:	4618      	mov	r0, r3
 8007672:	370c      	adds	r7, #12
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr

0800767c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800767c:	b480      	push	{r7}
 800767e:	b083      	sub	sp, #12
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	460b      	mov	r3, r1
 8007686:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007688:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800768a:	4618      	mov	r0, r3
 800768c:	370c      	adds	r7, #12
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr

08007696 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007696:	b580      	push	{r7, lr}
 8007698:	b086      	sub	sp, #24
 800769a:	af00      	add	r7, sp, #0
 800769c:	6078      	str	r0, [r7, #4]
 800769e:	460b      	mov	r3, r1
 80076a0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80076aa:	2300      	movs	r3, #0
 80076ac:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	885b      	ldrh	r3, [r3, #2]
 80076b2:	b29a      	uxth	r2, r3
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d920      	bls.n	8007700 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80076c6:	e013      	b.n	80076f0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80076c8:	f107 030a 	add.w	r3, r7, #10
 80076cc:	4619      	mov	r1, r3
 80076ce:	6978      	ldr	r0, [r7, #20]
 80076d0:	f000 f81b 	bl	800770a <USBD_GetNextDesc>
 80076d4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	785b      	ldrb	r3, [r3, #1]
 80076da:	2b05      	cmp	r3, #5
 80076dc:	d108      	bne.n	80076f0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	789b      	ldrb	r3, [r3, #2]
 80076e6:	78fa      	ldrb	r2, [r7, #3]
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d008      	beq.n	80076fe <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80076ec:	2300      	movs	r3, #0
 80076ee:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	885b      	ldrh	r3, [r3, #2]
 80076f4:	b29a      	uxth	r2, r3
 80076f6:	897b      	ldrh	r3, [r7, #10]
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d8e5      	bhi.n	80076c8 <USBD_GetEpDesc+0x32>
 80076fc:	e000      	b.n	8007700 <USBD_GetEpDesc+0x6a>
          break;
 80076fe:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007700:	693b      	ldr	r3, [r7, #16]
}
 8007702:	4618      	mov	r0, r3
 8007704:	3718      	adds	r7, #24
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}

0800770a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800770a:	b480      	push	{r7}
 800770c:	b085      	sub	sp, #20
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
 8007712:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	881a      	ldrh	r2, [r3, #0]
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	b29b      	uxth	r3, r3
 8007722:	4413      	add	r3, r2
 8007724:	b29a      	uxth	r2, r3
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	461a      	mov	r2, r3
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	4413      	add	r3, r2
 8007734:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007736:	68fb      	ldr	r3, [r7, #12]
}
 8007738:	4618      	mov	r0, r3
 800773a:	3714      	adds	r7, #20
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr

08007744 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007744:	b480      	push	{r7}
 8007746:	b087      	sub	sp, #28
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	3301      	adds	r3, #1
 800775a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007762:	8a3b      	ldrh	r3, [r7, #16]
 8007764:	021b      	lsls	r3, r3, #8
 8007766:	b21a      	sxth	r2, r3
 8007768:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800776c:	4313      	orrs	r3, r2
 800776e:	b21b      	sxth	r3, r3
 8007770:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007772:	89fb      	ldrh	r3, [r7, #14]
}
 8007774:	4618      	mov	r0, r3
 8007776:	371c      	adds	r7, #28
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr

08007780 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b084      	sub	sp, #16
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800778a:	2300      	movs	r3, #0
 800778c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007796:	2b40      	cmp	r3, #64	; 0x40
 8007798:	d005      	beq.n	80077a6 <USBD_StdDevReq+0x26>
 800779a:	2b40      	cmp	r3, #64	; 0x40
 800779c:	d857      	bhi.n	800784e <USBD_StdDevReq+0xce>
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d00f      	beq.n	80077c2 <USBD_StdDevReq+0x42>
 80077a2:	2b20      	cmp	r3, #32
 80077a4:	d153      	bne.n	800784e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	32ae      	adds	r2, #174	; 0xae
 80077b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	6839      	ldr	r1, [r7, #0]
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	4798      	blx	r3
 80077bc:	4603      	mov	r3, r0
 80077be:	73fb      	strb	r3, [r7, #15]
      break;
 80077c0:	e04a      	b.n	8007858 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	785b      	ldrb	r3, [r3, #1]
 80077c6:	2b09      	cmp	r3, #9
 80077c8:	d83b      	bhi.n	8007842 <USBD_StdDevReq+0xc2>
 80077ca:	a201      	add	r2, pc, #4	; (adr r2, 80077d0 <USBD_StdDevReq+0x50>)
 80077cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077d0:	08007825 	.word	0x08007825
 80077d4:	08007839 	.word	0x08007839
 80077d8:	08007843 	.word	0x08007843
 80077dc:	0800782f 	.word	0x0800782f
 80077e0:	08007843 	.word	0x08007843
 80077e4:	08007803 	.word	0x08007803
 80077e8:	080077f9 	.word	0x080077f9
 80077ec:	08007843 	.word	0x08007843
 80077f0:	0800781b 	.word	0x0800781b
 80077f4:	0800780d 	.word	0x0800780d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80077f8:	6839      	ldr	r1, [r7, #0]
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 fa3c 	bl	8007c78 <USBD_GetDescriptor>
          break;
 8007800:	e024      	b.n	800784c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007802:	6839      	ldr	r1, [r7, #0]
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f000 fbcb 	bl	8007fa0 <USBD_SetAddress>
          break;
 800780a:	e01f      	b.n	800784c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800780c:	6839      	ldr	r1, [r7, #0]
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 fc0a 	bl	8008028 <USBD_SetConfig>
 8007814:	4603      	mov	r3, r0
 8007816:	73fb      	strb	r3, [r7, #15]
          break;
 8007818:	e018      	b.n	800784c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800781a:	6839      	ldr	r1, [r7, #0]
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 fcad 	bl	800817c <USBD_GetConfig>
          break;
 8007822:	e013      	b.n	800784c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007824:	6839      	ldr	r1, [r7, #0]
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 fcde 	bl	80081e8 <USBD_GetStatus>
          break;
 800782c:	e00e      	b.n	800784c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800782e:	6839      	ldr	r1, [r7, #0]
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 fd0d 	bl	8008250 <USBD_SetFeature>
          break;
 8007836:	e009      	b.n	800784c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007838:	6839      	ldr	r1, [r7, #0]
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 fd31 	bl	80082a2 <USBD_ClrFeature>
          break;
 8007840:	e004      	b.n	800784c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007842:	6839      	ldr	r1, [r7, #0]
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 fd88 	bl	800835a <USBD_CtlError>
          break;
 800784a:	bf00      	nop
      }
      break;
 800784c:	e004      	b.n	8007858 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800784e:	6839      	ldr	r1, [r7, #0]
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 fd82 	bl	800835a <USBD_CtlError>
      break;
 8007856:	bf00      	nop
  }

  return ret;
 8007858:	7bfb      	ldrb	r3, [r7, #15]
}
 800785a:	4618      	mov	r0, r3
 800785c:	3710      	adds	r7, #16
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
 8007862:	bf00      	nop

08007864 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b084      	sub	sp, #16
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800786e:	2300      	movs	r3, #0
 8007870:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800787a:	2b40      	cmp	r3, #64	; 0x40
 800787c:	d005      	beq.n	800788a <USBD_StdItfReq+0x26>
 800787e:	2b40      	cmp	r3, #64	; 0x40
 8007880:	d852      	bhi.n	8007928 <USBD_StdItfReq+0xc4>
 8007882:	2b00      	cmp	r3, #0
 8007884:	d001      	beq.n	800788a <USBD_StdItfReq+0x26>
 8007886:	2b20      	cmp	r3, #32
 8007888:	d14e      	bne.n	8007928 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007890:	b2db      	uxtb	r3, r3
 8007892:	3b01      	subs	r3, #1
 8007894:	2b02      	cmp	r3, #2
 8007896:	d840      	bhi.n	800791a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	889b      	ldrh	r3, [r3, #4]
 800789c:	b2db      	uxtb	r3, r3
 800789e:	2b01      	cmp	r3, #1
 80078a0:	d836      	bhi.n	8007910 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	889b      	ldrh	r3, [r3, #4]
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	4619      	mov	r1, r3
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f7ff fed9 	bl	8007662 <USBD_CoreFindIF>
 80078b0:	4603      	mov	r3, r0
 80078b2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80078b4:	7bbb      	ldrb	r3, [r7, #14]
 80078b6:	2bff      	cmp	r3, #255	; 0xff
 80078b8:	d01d      	beq.n	80078f6 <USBD_StdItfReq+0x92>
 80078ba:	7bbb      	ldrb	r3, [r7, #14]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d11a      	bne.n	80078f6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80078c0:	7bba      	ldrb	r2, [r7, #14]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	32ae      	adds	r2, #174	; 0xae
 80078c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d00f      	beq.n	80078f0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80078d0:	7bba      	ldrb	r2, [r7, #14]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80078d8:	7bba      	ldrb	r2, [r7, #14]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	32ae      	adds	r2, #174	; 0xae
 80078de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	6839      	ldr	r1, [r7, #0]
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	4798      	blx	r3
 80078ea:	4603      	mov	r3, r0
 80078ec:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80078ee:	e004      	b.n	80078fa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80078f0:	2303      	movs	r3, #3
 80078f2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80078f4:	e001      	b.n	80078fa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80078f6:	2303      	movs	r3, #3
 80078f8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	88db      	ldrh	r3, [r3, #6]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d110      	bne.n	8007924 <USBD_StdItfReq+0xc0>
 8007902:	7bfb      	ldrb	r3, [r7, #15]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d10d      	bne.n	8007924 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 fdf1 	bl	80084f0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800790e:	e009      	b.n	8007924 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007910:	6839      	ldr	r1, [r7, #0]
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 fd21 	bl	800835a <USBD_CtlError>
          break;
 8007918:	e004      	b.n	8007924 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800791a:	6839      	ldr	r1, [r7, #0]
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 fd1c 	bl	800835a <USBD_CtlError>
          break;
 8007922:	e000      	b.n	8007926 <USBD_StdItfReq+0xc2>
          break;
 8007924:	bf00      	nop
      }
      break;
 8007926:	e004      	b.n	8007932 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007928:	6839      	ldr	r1, [r7, #0]
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 fd15 	bl	800835a <USBD_CtlError>
      break;
 8007930:	bf00      	nop
  }

  return ret;
 8007932:	7bfb      	ldrb	r3, [r7, #15]
}
 8007934:	4618      	mov	r0, r3
 8007936:	3710      	adds	r7, #16
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}

0800793c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b084      	sub	sp, #16
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007946:	2300      	movs	r3, #0
 8007948:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	889b      	ldrh	r3, [r3, #4]
 800794e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007958:	2b40      	cmp	r3, #64	; 0x40
 800795a:	d007      	beq.n	800796c <USBD_StdEPReq+0x30>
 800795c:	2b40      	cmp	r3, #64	; 0x40
 800795e:	f200 817f 	bhi.w	8007c60 <USBD_StdEPReq+0x324>
 8007962:	2b00      	cmp	r3, #0
 8007964:	d02a      	beq.n	80079bc <USBD_StdEPReq+0x80>
 8007966:	2b20      	cmp	r3, #32
 8007968:	f040 817a 	bne.w	8007c60 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800796c:	7bbb      	ldrb	r3, [r7, #14]
 800796e:	4619      	mov	r1, r3
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f7ff fe83 	bl	800767c <USBD_CoreFindEP>
 8007976:	4603      	mov	r3, r0
 8007978:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800797a:	7b7b      	ldrb	r3, [r7, #13]
 800797c:	2bff      	cmp	r3, #255	; 0xff
 800797e:	f000 8174 	beq.w	8007c6a <USBD_StdEPReq+0x32e>
 8007982:	7b7b      	ldrb	r3, [r7, #13]
 8007984:	2b00      	cmp	r3, #0
 8007986:	f040 8170 	bne.w	8007c6a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800798a:	7b7a      	ldrb	r2, [r7, #13]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007992:	7b7a      	ldrb	r2, [r7, #13]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	32ae      	adds	r2, #174	; 0xae
 8007998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	f000 8163 	beq.w	8007c6a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80079a4:	7b7a      	ldrb	r2, [r7, #13]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	32ae      	adds	r2, #174	; 0xae
 80079aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	6839      	ldr	r1, [r7, #0]
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	4798      	blx	r3
 80079b6:	4603      	mov	r3, r0
 80079b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80079ba:	e156      	b.n	8007c6a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	785b      	ldrb	r3, [r3, #1]
 80079c0:	2b03      	cmp	r3, #3
 80079c2:	d008      	beq.n	80079d6 <USBD_StdEPReq+0x9a>
 80079c4:	2b03      	cmp	r3, #3
 80079c6:	f300 8145 	bgt.w	8007c54 <USBD_StdEPReq+0x318>
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	f000 809b 	beq.w	8007b06 <USBD_StdEPReq+0x1ca>
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d03c      	beq.n	8007a4e <USBD_StdEPReq+0x112>
 80079d4:	e13e      	b.n	8007c54 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	2b02      	cmp	r3, #2
 80079e0:	d002      	beq.n	80079e8 <USBD_StdEPReq+0xac>
 80079e2:	2b03      	cmp	r3, #3
 80079e4:	d016      	beq.n	8007a14 <USBD_StdEPReq+0xd8>
 80079e6:	e02c      	b.n	8007a42 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079e8:	7bbb      	ldrb	r3, [r7, #14]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d00d      	beq.n	8007a0a <USBD_StdEPReq+0xce>
 80079ee:	7bbb      	ldrb	r3, [r7, #14]
 80079f0:	2b80      	cmp	r3, #128	; 0x80
 80079f2:	d00a      	beq.n	8007a0a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80079f4:	7bbb      	ldrb	r3, [r7, #14]
 80079f6:	4619      	mov	r1, r3
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f001 f993 	bl	8008d24 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80079fe:	2180      	movs	r1, #128	; 0x80
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f001 f98f 	bl	8008d24 <USBD_LL_StallEP>
 8007a06:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a08:	e020      	b.n	8007a4c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007a0a:	6839      	ldr	r1, [r7, #0]
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f000 fca4 	bl	800835a <USBD_CtlError>
              break;
 8007a12:	e01b      	b.n	8007a4c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	885b      	ldrh	r3, [r3, #2]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d10e      	bne.n	8007a3a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007a1c:	7bbb      	ldrb	r3, [r7, #14]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d00b      	beq.n	8007a3a <USBD_StdEPReq+0xfe>
 8007a22:	7bbb      	ldrb	r3, [r7, #14]
 8007a24:	2b80      	cmp	r3, #128	; 0x80
 8007a26:	d008      	beq.n	8007a3a <USBD_StdEPReq+0xfe>
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	88db      	ldrh	r3, [r3, #6]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d104      	bne.n	8007a3a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a30:	7bbb      	ldrb	r3, [r7, #14]
 8007a32:	4619      	mov	r1, r3
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f001 f975 	bl	8008d24 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 fd58 	bl	80084f0 <USBD_CtlSendStatus>

              break;
 8007a40:	e004      	b.n	8007a4c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007a42:	6839      	ldr	r1, [r7, #0]
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f000 fc88 	bl	800835a <USBD_CtlError>
              break;
 8007a4a:	bf00      	nop
          }
          break;
 8007a4c:	e107      	b.n	8007c5e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	2b02      	cmp	r3, #2
 8007a58:	d002      	beq.n	8007a60 <USBD_StdEPReq+0x124>
 8007a5a:	2b03      	cmp	r3, #3
 8007a5c:	d016      	beq.n	8007a8c <USBD_StdEPReq+0x150>
 8007a5e:	e04b      	b.n	8007af8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a60:	7bbb      	ldrb	r3, [r7, #14]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d00d      	beq.n	8007a82 <USBD_StdEPReq+0x146>
 8007a66:	7bbb      	ldrb	r3, [r7, #14]
 8007a68:	2b80      	cmp	r3, #128	; 0x80
 8007a6a:	d00a      	beq.n	8007a82 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a6c:	7bbb      	ldrb	r3, [r7, #14]
 8007a6e:	4619      	mov	r1, r3
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f001 f957 	bl	8008d24 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a76:	2180      	movs	r1, #128	; 0x80
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f001 f953 	bl	8008d24 <USBD_LL_StallEP>
 8007a7e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a80:	e040      	b.n	8007b04 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007a82:	6839      	ldr	r1, [r7, #0]
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 fc68 	bl	800835a <USBD_CtlError>
              break;
 8007a8a:	e03b      	b.n	8007b04 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	885b      	ldrh	r3, [r3, #2]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d136      	bne.n	8007b02 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007a94:	7bbb      	ldrb	r3, [r7, #14]
 8007a96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d004      	beq.n	8007aa8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007a9e:	7bbb      	ldrb	r3, [r7, #14]
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f001 f95d 	bl	8008d62 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 fd21 	bl	80084f0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007aae:	7bbb      	ldrb	r3, [r7, #14]
 8007ab0:	4619      	mov	r1, r3
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f7ff fde2 	bl	800767c <USBD_CoreFindEP>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007abc:	7b7b      	ldrb	r3, [r7, #13]
 8007abe:	2bff      	cmp	r3, #255	; 0xff
 8007ac0:	d01f      	beq.n	8007b02 <USBD_StdEPReq+0x1c6>
 8007ac2:	7b7b      	ldrb	r3, [r7, #13]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d11c      	bne.n	8007b02 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007ac8:	7b7a      	ldrb	r2, [r7, #13]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007ad0:	7b7a      	ldrb	r2, [r7, #13]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	32ae      	adds	r2, #174	; 0xae
 8007ad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d010      	beq.n	8007b02 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007ae0:	7b7a      	ldrb	r2, [r7, #13]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	32ae      	adds	r2, #174	; 0xae
 8007ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aea:	689b      	ldr	r3, [r3, #8]
 8007aec:	6839      	ldr	r1, [r7, #0]
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	4798      	blx	r3
 8007af2:	4603      	mov	r3, r0
 8007af4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007af6:	e004      	b.n	8007b02 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007af8:	6839      	ldr	r1, [r7, #0]
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 fc2d 	bl	800835a <USBD_CtlError>
              break;
 8007b00:	e000      	b.n	8007b04 <USBD_StdEPReq+0x1c8>
              break;
 8007b02:	bf00      	nop
          }
          break;
 8007b04:	e0ab      	b.n	8007c5e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	2b02      	cmp	r3, #2
 8007b10:	d002      	beq.n	8007b18 <USBD_StdEPReq+0x1dc>
 8007b12:	2b03      	cmp	r3, #3
 8007b14:	d032      	beq.n	8007b7c <USBD_StdEPReq+0x240>
 8007b16:	e097      	b.n	8007c48 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b18:	7bbb      	ldrb	r3, [r7, #14]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d007      	beq.n	8007b2e <USBD_StdEPReq+0x1f2>
 8007b1e:	7bbb      	ldrb	r3, [r7, #14]
 8007b20:	2b80      	cmp	r3, #128	; 0x80
 8007b22:	d004      	beq.n	8007b2e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007b24:	6839      	ldr	r1, [r7, #0]
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 fc17 	bl	800835a <USBD_CtlError>
                break;
 8007b2c:	e091      	b.n	8007c52 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	da0b      	bge.n	8007b4e <USBD_StdEPReq+0x212>
 8007b36:	7bbb      	ldrb	r3, [r7, #14]
 8007b38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b3c:	4613      	mov	r3, r2
 8007b3e:	009b      	lsls	r3, r3, #2
 8007b40:	4413      	add	r3, r2
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	3310      	adds	r3, #16
 8007b46:	687a      	ldr	r2, [r7, #4]
 8007b48:	4413      	add	r3, r2
 8007b4a:	3304      	adds	r3, #4
 8007b4c:	e00b      	b.n	8007b66 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007b4e:	7bbb      	ldrb	r3, [r7, #14]
 8007b50:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b54:	4613      	mov	r3, r2
 8007b56:	009b      	lsls	r3, r3, #2
 8007b58:	4413      	add	r3, r2
 8007b5a:	009b      	lsls	r3, r3, #2
 8007b5c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	4413      	add	r3, r2
 8007b64:	3304      	adds	r3, #4
 8007b66:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	2202      	movs	r2, #2
 8007b72:	4619      	mov	r1, r3
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 fc61 	bl	800843c <USBD_CtlSendData>
              break;
 8007b7a:	e06a      	b.n	8007c52 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007b7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	da11      	bge.n	8007ba8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007b84:	7bbb      	ldrb	r3, [r7, #14]
 8007b86:	f003 020f 	and.w	r2, r3, #15
 8007b8a:	6879      	ldr	r1, [r7, #4]
 8007b8c:	4613      	mov	r3, r2
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	4413      	add	r3, r2
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	440b      	add	r3, r1
 8007b96:	3324      	adds	r3, #36	; 0x24
 8007b98:	881b      	ldrh	r3, [r3, #0]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d117      	bne.n	8007bce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007b9e:	6839      	ldr	r1, [r7, #0]
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f000 fbda 	bl	800835a <USBD_CtlError>
                  break;
 8007ba6:	e054      	b.n	8007c52 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007ba8:	7bbb      	ldrb	r3, [r7, #14]
 8007baa:	f003 020f 	and.w	r2, r3, #15
 8007bae:	6879      	ldr	r1, [r7, #4]
 8007bb0:	4613      	mov	r3, r2
 8007bb2:	009b      	lsls	r3, r3, #2
 8007bb4:	4413      	add	r3, r2
 8007bb6:	009b      	lsls	r3, r3, #2
 8007bb8:	440b      	add	r3, r1
 8007bba:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007bbe:	881b      	ldrh	r3, [r3, #0]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d104      	bne.n	8007bce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007bc4:	6839      	ldr	r1, [r7, #0]
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 fbc7 	bl	800835a <USBD_CtlError>
                  break;
 8007bcc:	e041      	b.n	8007c52 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	da0b      	bge.n	8007bee <USBD_StdEPReq+0x2b2>
 8007bd6:	7bbb      	ldrb	r3, [r7, #14]
 8007bd8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007bdc:	4613      	mov	r3, r2
 8007bde:	009b      	lsls	r3, r3, #2
 8007be0:	4413      	add	r3, r2
 8007be2:	009b      	lsls	r3, r3, #2
 8007be4:	3310      	adds	r3, #16
 8007be6:	687a      	ldr	r2, [r7, #4]
 8007be8:	4413      	add	r3, r2
 8007bea:	3304      	adds	r3, #4
 8007bec:	e00b      	b.n	8007c06 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007bee:	7bbb      	ldrb	r3, [r7, #14]
 8007bf0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bf4:	4613      	mov	r3, r2
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	4413      	add	r3, r2
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	4413      	add	r3, r2
 8007c04:	3304      	adds	r3, #4
 8007c06:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007c08:	7bbb      	ldrb	r3, [r7, #14]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d002      	beq.n	8007c14 <USBD_StdEPReq+0x2d8>
 8007c0e:	7bbb      	ldrb	r3, [r7, #14]
 8007c10:	2b80      	cmp	r3, #128	; 0x80
 8007c12:	d103      	bne.n	8007c1c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	2200      	movs	r2, #0
 8007c18:	601a      	str	r2, [r3, #0]
 8007c1a:	e00e      	b.n	8007c3a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007c1c:	7bbb      	ldrb	r3, [r7, #14]
 8007c1e:	4619      	mov	r1, r3
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f001 f8bd 	bl	8008da0 <USBD_LL_IsStallEP>
 8007c26:	4603      	mov	r3, r0
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d003      	beq.n	8007c34 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	2201      	movs	r2, #1
 8007c30:	601a      	str	r2, [r3, #0]
 8007c32:	e002      	b.n	8007c3a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	2200      	movs	r2, #0
 8007c38:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	2202      	movs	r2, #2
 8007c3e:	4619      	mov	r1, r3
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 fbfb 	bl	800843c <USBD_CtlSendData>
              break;
 8007c46:	e004      	b.n	8007c52 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007c48:	6839      	ldr	r1, [r7, #0]
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 fb85 	bl	800835a <USBD_CtlError>
              break;
 8007c50:	bf00      	nop
          }
          break;
 8007c52:	e004      	b.n	8007c5e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007c54:	6839      	ldr	r1, [r7, #0]
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 fb7f 	bl	800835a <USBD_CtlError>
          break;
 8007c5c:	bf00      	nop
      }
      break;
 8007c5e:	e005      	b.n	8007c6c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007c60:	6839      	ldr	r1, [r7, #0]
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 fb79 	bl	800835a <USBD_CtlError>
      break;
 8007c68:	e000      	b.n	8007c6c <USBD_StdEPReq+0x330>
      break;
 8007c6a:	bf00      	nop
  }

  return ret;
 8007c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3710      	adds	r7, #16
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}
	...

08007c78 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007c82:	2300      	movs	r3, #0
 8007c84:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007c86:	2300      	movs	r3, #0
 8007c88:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	885b      	ldrh	r3, [r3, #2]
 8007c92:	0a1b      	lsrs	r3, r3, #8
 8007c94:	b29b      	uxth	r3, r3
 8007c96:	3b01      	subs	r3, #1
 8007c98:	2b0e      	cmp	r3, #14
 8007c9a:	f200 8152 	bhi.w	8007f42 <USBD_GetDescriptor+0x2ca>
 8007c9e:	a201      	add	r2, pc, #4	; (adr r2, 8007ca4 <USBD_GetDescriptor+0x2c>)
 8007ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca4:	08007d15 	.word	0x08007d15
 8007ca8:	08007d2d 	.word	0x08007d2d
 8007cac:	08007d6d 	.word	0x08007d6d
 8007cb0:	08007f43 	.word	0x08007f43
 8007cb4:	08007f43 	.word	0x08007f43
 8007cb8:	08007ee3 	.word	0x08007ee3
 8007cbc:	08007f0f 	.word	0x08007f0f
 8007cc0:	08007f43 	.word	0x08007f43
 8007cc4:	08007f43 	.word	0x08007f43
 8007cc8:	08007f43 	.word	0x08007f43
 8007ccc:	08007f43 	.word	0x08007f43
 8007cd0:	08007f43 	.word	0x08007f43
 8007cd4:	08007f43 	.word	0x08007f43
 8007cd8:	08007f43 	.word	0x08007f43
 8007cdc:	08007ce1 	.word	0x08007ce1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ce6:	69db      	ldr	r3, [r3, #28]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d00b      	beq.n	8007d04 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cf2:	69db      	ldr	r3, [r3, #28]
 8007cf4:	687a      	ldr	r2, [r7, #4]
 8007cf6:	7c12      	ldrb	r2, [r2, #16]
 8007cf8:	f107 0108 	add.w	r1, r7, #8
 8007cfc:	4610      	mov	r0, r2
 8007cfe:	4798      	blx	r3
 8007d00:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d02:	e126      	b.n	8007f52 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007d04:	6839      	ldr	r1, [r7, #0]
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 fb27 	bl	800835a <USBD_CtlError>
        err++;
 8007d0c:	7afb      	ldrb	r3, [r7, #11]
 8007d0e:	3301      	adds	r3, #1
 8007d10:	72fb      	strb	r3, [r7, #11]
      break;
 8007d12:	e11e      	b.n	8007f52 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	687a      	ldr	r2, [r7, #4]
 8007d1e:	7c12      	ldrb	r2, [r2, #16]
 8007d20:	f107 0108 	add.w	r1, r7, #8
 8007d24:	4610      	mov	r0, r2
 8007d26:	4798      	blx	r3
 8007d28:	60f8      	str	r0, [r7, #12]
      break;
 8007d2a:	e112      	b.n	8007f52 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	7c1b      	ldrb	r3, [r3, #16]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d10d      	bne.n	8007d50 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d3c:	f107 0208 	add.w	r2, r7, #8
 8007d40:	4610      	mov	r0, r2
 8007d42:	4798      	blx	r3
 8007d44:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	3301      	adds	r3, #1
 8007d4a:	2202      	movs	r2, #2
 8007d4c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007d4e:	e100      	b.n	8007f52 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d58:	f107 0208 	add.w	r2, r7, #8
 8007d5c:	4610      	mov	r0, r2
 8007d5e:	4798      	blx	r3
 8007d60:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	3301      	adds	r3, #1
 8007d66:	2202      	movs	r2, #2
 8007d68:	701a      	strb	r2, [r3, #0]
      break;
 8007d6a:	e0f2      	b.n	8007f52 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	885b      	ldrh	r3, [r3, #2]
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	2b05      	cmp	r3, #5
 8007d74:	f200 80ac 	bhi.w	8007ed0 <USBD_GetDescriptor+0x258>
 8007d78:	a201      	add	r2, pc, #4	; (adr r2, 8007d80 <USBD_GetDescriptor+0x108>)
 8007d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d7e:	bf00      	nop
 8007d80:	08007d99 	.word	0x08007d99
 8007d84:	08007dcd 	.word	0x08007dcd
 8007d88:	08007e01 	.word	0x08007e01
 8007d8c:	08007e35 	.word	0x08007e35
 8007d90:	08007e69 	.word	0x08007e69
 8007d94:	08007e9d 	.word	0x08007e9d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d00b      	beq.n	8007dbc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007daa:	685b      	ldr	r3, [r3, #4]
 8007dac:	687a      	ldr	r2, [r7, #4]
 8007dae:	7c12      	ldrb	r2, [r2, #16]
 8007db0:	f107 0108 	add.w	r1, r7, #8
 8007db4:	4610      	mov	r0, r2
 8007db6:	4798      	blx	r3
 8007db8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dba:	e091      	b.n	8007ee0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007dbc:	6839      	ldr	r1, [r7, #0]
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 facb 	bl	800835a <USBD_CtlError>
            err++;
 8007dc4:	7afb      	ldrb	r3, [r7, #11]
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	72fb      	strb	r3, [r7, #11]
          break;
 8007dca:	e089      	b.n	8007ee0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d00b      	beq.n	8007df0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dde:	689b      	ldr	r3, [r3, #8]
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	7c12      	ldrb	r2, [r2, #16]
 8007de4:	f107 0108 	add.w	r1, r7, #8
 8007de8:	4610      	mov	r0, r2
 8007dea:	4798      	blx	r3
 8007dec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dee:	e077      	b.n	8007ee0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007df0:	6839      	ldr	r1, [r7, #0]
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 fab1 	bl	800835a <USBD_CtlError>
            err++;
 8007df8:	7afb      	ldrb	r3, [r7, #11]
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	72fb      	strb	r3, [r7, #11]
          break;
 8007dfe:	e06f      	b.n	8007ee0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e06:	68db      	ldr	r3, [r3, #12]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d00b      	beq.n	8007e24 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e12:	68db      	ldr	r3, [r3, #12]
 8007e14:	687a      	ldr	r2, [r7, #4]
 8007e16:	7c12      	ldrb	r2, [r2, #16]
 8007e18:	f107 0108 	add.w	r1, r7, #8
 8007e1c:	4610      	mov	r0, r2
 8007e1e:	4798      	blx	r3
 8007e20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e22:	e05d      	b.n	8007ee0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007e24:	6839      	ldr	r1, [r7, #0]
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 fa97 	bl	800835a <USBD_CtlError>
            err++;
 8007e2c:	7afb      	ldrb	r3, [r7, #11]
 8007e2e:	3301      	adds	r3, #1
 8007e30:	72fb      	strb	r3, [r7, #11]
          break;
 8007e32:	e055      	b.n	8007ee0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e3a:	691b      	ldr	r3, [r3, #16]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d00b      	beq.n	8007e58 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e46:	691b      	ldr	r3, [r3, #16]
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	7c12      	ldrb	r2, [r2, #16]
 8007e4c:	f107 0108 	add.w	r1, r7, #8
 8007e50:	4610      	mov	r0, r2
 8007e52:	4798      	blx	r3
 8007e54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e56:	e043      	b.n	8007ee0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007e58:	6839      	ldr	r1, [r7, #0]
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 fa7d 	bl	800835a <USBD_CtlError>
            err++;
 8007e60:	7afb      	ldrb	r3, [r7, #11]
 8007e62:	3301      	adds	r3, #1
 8007e64:	72fb      	strb	r3, [r7, #11]
          break;
 8007e66:	e03b      	b.n	8007ee0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e6e:	695b      	ldr	r3, [r3, #20]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d00b      	beq.n	8007e8c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e7a:	695b      	ldr	r3, [r3, #20]
 8007e7c:	687a      	ldr	r2, [r7, #4]
 8007e7e:	7c12      	ldrb	r2, [r2, #16]
 8007e80:	f107 0108 	add.w	r1, r7, #8
 8007e84:	4610      	mov	r0, r2
 8007e86:	4798      	blx	r3
 8007e88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e8a:	e029      	b.n	8007ee0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007e8c:	6839      	ldr	r1, [r7, #0]
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 fa63 	bl	800835a <USBD_CtlError>
            err++;
 8007e94:	7afb      	ldrb	r3, [r7, #11]
 8007e96:	3301      	adds	r3, #1
 8007e98:	72fb      	strb	r3, [r7, #11]
          break;
 8007e9a:	e021      	b.n	8007ee0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ea2:	699b      	ldr	r3, [r3, #24]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d00b      	beq.n	8007ec0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eae:	699b      	ldr	r3, [r3, #24]
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	7c12      	ldrb	r2, [r2, #16]
 8007eb4:	f107 0108 	add.w	r1, r7, #8
 8007eb8:	4610      	mov	r0, r2
 8007eba:	4798      	blx	r3
 8007ebc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ebe:	e00f      	b.n	8007ee0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007ec0:	6839      	ldr	r1, [r7, #0]
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 fa49 	bl	800835a <USBD_CtlError>
            err++;
 8007ec8:	7afb      	ldrb	r3, [r7, #11]
 8007eca:	3301      	adds	r3, #1
 8007ecc:	72fb      	strb	r3, [r7, #11]
          break;
 8007ece:	e007      	b.n	8007ee0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007ed0:	6839      	ldr	r1, [r7, #0]
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 fa41 	bl	800835a <USBD_CtlError>
          err++;
 8007ed8:	7afb      	ldrb	r3, [r7, #11]
 8007eda:	3301      	adds	r3, #1
 8007edc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007ede:	bf00      	nop
      }
      break;
 8007ee0:	e037      	b.n	8007f52 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	7c1b      	ldrb	r3, [r3, #16]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d109      	bne.n	8007efe <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ef2:	f107 0208 	add.w	r2, r7, #8
 8007ef6:	4610      	mov	r0, r2
 8007ef8:	4798      	blx	r3
 8007efa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007efc:	e029      	b.n	8007f52 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007efe:	6839      	ldr	r1, [r7, #0]
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f000 fa2a 	bl	800835a <USBD_CtlError>
        err++;
 8007f06:	7afb      	ldrb	r3, [r7, #11]
 8007f08:	3301      	adds	r3, #1
 8007f0a:	72fb      	strb	r3, [r7, #11]
      break;
 8007f0c:	e021      	b.n	8007f52 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	7c1b      	ldrb	r3, [r3, #16]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d10d      	bne.n	8007f32 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f1e:	f107 0208 	add.w	r2, r7, #8
 8007f22:	4610      	mov	r0, r2
 8007f24:	4798      	blx	r3
 8007f26:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	3301      	adds	r3, #1
 8007f2c:	2207      	movs	r2, #7
 8007f2e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f30:	e00f      	b.n	8007f52 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007f32:	6839      	ldr	r1, [r7, #0]
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 fa10 	bl	800835a <USBD_CtlError>
        err++;
 8007f3a:	7afb      	ldrb	r3, [r7, #11]
 8007f3c:	3301      	adds	r3, #1
 8007f3e:	72fb      	strb	r3, [r7, #11]
      break;
 8007f40:	e007      	b.n	8007f52 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007f42:	6839      	ldr	r1, [r7, #0]
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f000 fa08 	bl	800835a <USBD_CtlError>
      err++;
 8007f4a:	7afb      	ldrb	r3, [r7, #11]
 8007f4c:	3301      	adds	r3, #1
 8007f4e:	72fb      	strb	r3, [r7, #11]
      break;
 8007f50:	bf00      	nop
  }

  if (err != 0U)
 8007f52:	7afb      	ldrb	r3, [r7, #11]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d11e      	bne.n	8007f96 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	88db      	ldrh	r3, [r3, #6]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d016      	beq.n	8007f8e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007f60:	893b      	ldrh	r3, [r7, #8]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d00e      	beq.n	8007f84 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	88da      	ldrh	r2, [r3, #6]
 8007f6a:	893b      	ldrh	r3, [r7, #8]
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	bf28      	it	cs
 8007f70:	4613      	movcs	r3, r2
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007f76:	893b      	ldrh	r3, [r7, #8]
 8007f78:	461a      	mov	r2, r3
 8007f7a:	68f9      	ldr	r1, [r7, #12]
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f000 fa5d 	bl	800843c <USBD_CtlSendData>
 8007f82:	e009      	b.n	8007f98 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007f84:	6839      	ldr	r1, [r7, #0]
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 f9e7 	bl	800835a <USBD_CtlError>
 8007f8c:	e004      	b.n	8007f98 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f000 faae 	bl	80084f0 <USBD_CtlSendStatus>
 8007f94:	e000      	b.n	8007f98 <USBD_GetDescriptor+0x320>
    return;
 8007f96:	bf00      	nop
  }
}
 8007f98:	3710      	adds	r7, #16
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}
 8007f9e:	bf00      	nop

08007fa0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b084      	sub	sp, #16
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	889b      	ldrh	r3, [r3, #4]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d131      	bne.n	8008016 <USBD_SetAddress+0x76>
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	88db      	ldrh	r3, [r3, #6]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d12d      	bne.n	8008016 <USBD_SetAddress+0x76>
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	885b      	ldrh	r3, [r3, #2]
 8007fbe:	2b7f      	cmp	r3, #127	; 0x7f
 8007fc0:	d829      	bhi.n	8008016 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	885b      	ldrh	r3, [r3, #2]
 8007fc6:	b2db      	uxtb	r3, r3
 8007fc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fcc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fd4:	b2db      	uxtb	r3, r3
 8007fd6:	2b03      	cmp	r3, #3
 8007fd8:	d104      	bne.n	8007fe4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007fda:	6839      	ldr	r1, [r7, #0]
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f000 f9bc 	bl	800835a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fe2:	e01d      	b.n	8008020 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	7bfa      	ldrb	r2, [r7, #15]
 8007fe8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007fec:	7bfb      	ldrb	r3, [r7, #15]
 8007fee:	4619      	mov	r1, r3
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 ff01 	bl	8008df8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 fa7a 	bl	80084f0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007ffc:	7bfb      	ldrb	r3, [r7, #15]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d004      	beq.n	800800c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2202      	movs	r2, #2
 8008006:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800800a:	e009      	b.n	8008020 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2201      	movs	r2, #1
 8008010:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008014:	e004      	b.n	8008020 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008016:	6839      	ldr	r1, [r7, #0]
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f000 f99e 	bl	800835a <USBD_CtlError>
  }
}
 800801e:	bf00      	nop
 8008020:	bf00      	nop
 8008022:	3710      	adds	r7, #16
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}

08008028 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b084      	sub	sp, #16
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008032:	2300      	movs	r3, #0
 8008034:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	885b      	ldrh	r3, [r3, #2]
 800803a:	b2da      	uxtb	r2, r3
 800803c:	4b4e      	ldr	r3, [pc, #312]	; (8008178 <USBD_SetConfig+0x150>)
 800803e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008040:	4b4d      	ldr	r3, [pc, #308]	; (8008178 <USBD_SetConfig+0x150>)
 8008042:	781b      	ldrb	r3, [r3, #0]
 8008044:	2b01      	cmp	r3, #1
 8008046:	d905      	bls.n	8008054 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008048:	6839      	ldr	r1, [r7, #0]
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f000 f985 	bl	800835a <USBD_CtlError>
    return USBD_FAIL;
 8008050:	2303      	movs	r3, #3
 8008052:	e08c      	b.n	800816e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800805a:	b2db      	uxtb	r3, r3
 800805c:	2b02      	cmp	r3, #2
 800805e:	d002      	beq.n	8008066 <USBD_SetConfig+0x3e>
 8008060:	2b03      	cmp	r3, #3
 8008062:	d029      	beq.n	80080b8 <USBD_SetConfig+0x90>
 8008064:	e075      	b.n	8008152 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008066:	4b44      	ldr	r3, [pc, #272]	; (8008178 <USBD_SetConfig+0x150>)
 8008068:	781b      	ldrb	r3, [r3, #0]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d020      	beq.n	80080b0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800806e:	4b42      	ldr	r3, [pc, #264]	; (8008178 <USBD_SetConfig+0x150>)
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	461a      	mov	r2, r3
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008078:	4b3f      	ldr	r3, [pc, #252]	; (8008178 <USBD_SetConfig+0x150>)
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	4619      	mov	r1, r3
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f7fe ffbd 	bl	8006ffe <USBD_SetClassConfig>
 8008084:	4603      	mov	r3, r0
 8008086:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008088:	7bfb      	ldrb	r3, [r7, #15]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d008      	beq.n	80080a0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800808e:	6839      	ldr	r1, [r7, #0]
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f000 f962 	bl	800835a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2202      	movs	r2, #2
 800809a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800809e:	e065      	b.n	800816c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 fa25 	bl	80084f0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2203      	movs	r2, #3
 80080aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80080ae:	e05d      	b.n	800816c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f000 fa1d 	bl	80084f0 <USBD_CtlSendStatus>
      break;
 80080b6:	e059      	b.n	800816c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80080b8:	4b2f      	ldr	r3, [pc, #188]	; (8008178 <USBD_SetConfig+0x150>)
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d112      	bne.n	80080e6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2202      	movs	r2, #2
 80080c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80080c8:	4b2b      	ldr	r3, [pc, #172]	; (8008178 <USBD_SetConfig+0x150>)
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	461a      	mov	r2, r3
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80080d2:	4b29      	ldr	r3, [pc, #164]	; (8008178 <USBD_SetConfig+0x150>)
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	4619      	mov	r1, r3
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f7fe ffac 	bl	8007036 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f000 fa06 	bl	80084f0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80080e4:	e042      	b.n	800816c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80080e6:	4b24      	ldr	r3, [pc, #144]	; (8008178 <USBD_SetConfig+0x150>)
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	461a      	mov	r2, r3
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d02a      	beq.n	800814a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	b2db      	uxtb	r3, r3
 80080fa:	4619      	mov	r1, r3
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f7fe ff9a 	bl	8007036 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008102:	4b1d      	ldr	r3, [pc, #116]	; (8008178 <USBD_SetConfig+0x150>)
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	461a      	mov	r2, r3
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800810c:	4b1a      	ldr	r3, [pc, #104]	; (8008178 <USBD_SetConfig+0x150>)
 800810e:	781b      	ldrb	r3, [r3, #0]
 8008110:	4619      	mov	r1, r3
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f7fe ff73 	bl	8006ffe <USBD_SetClassConfig>
 8008118:	4603      	mov	r3, r0
 800811a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800811c:	7bfb      	ldrb	r3, [r7, #15]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d00f      	beq.n	8008142 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008122:	6839      	ldr	r1, [r7, #0]
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f000 f918 	bl	800835a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	b2db      	uxtb	r3, r3
 8008130:	4619      	mov	r1, r3
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f7fe ff7f 	bl	8007036 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2202      	movs	r2, #2
 800813c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008140:	e014      	b.n	800816c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f000 f9d4 	bl	80084f0 <USBD_CtlSendStatus>
      break;
 8008148:	e010      	b.n	800816c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f000 f9d0 	bl	80084f0 <USBD_CtlSendStatus>
      break;
 8008150:	e00c      	b.n	800816c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008152:	6839      	ldr	r1, [r7, #0]
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f000 f900 	bl	800835a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800815a:	4b07      	ldr	r3, [pc, #28]	; (8008178 <USBD_SetConfig+0x150>)
 800815c:	781b      	ldrb	r3, [r3, #0]
 800815e:	4619      	mov	r1, r3
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f7fe ff68 	bl	8007036 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008166:	2303      	movs	r3, #3
 8008168:	73fb      	strb	r3, [r7, #15]
      break;
 800816a:	bf00      	nop
  }

  return ret;
 800816c:	7bfb      	ldrb	r3, [r7, #15]
}
 800816e:	4618      	mov	r0, r3
 8008170:	3710      	adds	r7, #16
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}
 8008176:	bf00      	nop
 8008178:	20000204 	.word	0x20000204

0800817c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b082      	sub	sp, #8
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	88db      	ldrh	r3, [r3, #6]
 800818a:	2b01      	cmp	r3, #1
 800818c:	d004      	beq.n	8008198 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800818e:	6839      	ldr	r1, [r7, #0]
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f000 f8e2 	bl	800835a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008196:	e023      	b.n	80081e0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800819e:	b2db      	uxtb	r3, r3
 80081a0:	2b02      	cmp	r3, #2
 80081a2:	dc02      	bgt.n	80081aa <USBD_GetConfig+0x2e>
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	dc03      	bgt.n	80081b0 <USBD_GetConfig+0x34>
 80081a8:	e015      	b.n	80081d6 <USBD_GetConfig+0x5a>
 80081aa:	2b03      	cmp	r3, #3
 80081ac:	d00b      	beq.n	80081c6 <USBD_GetConfig+0x4a>
 80081ae:	e012      	b.n	80081d6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2200      	movs	r2, #0
 80081b4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	3308      	adds	r3, #8
 80081ba:	2201      	movs	r2, #1
 80081bc:	4619      	mov	r1, r3
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f000 f93c 	bl	800843c <USBD_CtlSendData>
        break;
 80081c4:	e00c      	b.n	80081e0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	3304      	adds	r3, #4
 80081ca:	2201      	movs	r2, #1
 80081cc:	4619      	mov	r1, r3
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 f934 	bl	800843c <USBD_CtlSendData>
        break;
 80081d4:	e004      	b.n	80081e0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80081d6:	6839      	ldr	r1, [r7, #0]
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f000 f8be 	bl	800835a <USBD_CtlError>
        break;
 80081de:	bf00      	nop
}
 80081e0:	bf00      	nop
 80081e2:	3708      	adds	r7, #8
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b082      	sub	sp, #8
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	3b01      	subs	r3, #1
 80081fc:	2b02      	cmp	r3, #2
 80081fe:	d81e      	bhi.n	800823e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	88db      	ldrh	r3, [r3, #6]
 8008204:	2b02      	cmp	r3, #2
 8008206:	d004      	beq.n	8008212 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008208:	6839      	ldr	r1, [r7, #0]
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 f8a5 	bl	800835a <USBD_CtlError>
        break;
 8008210:	e01a      	b.n	8008248 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2201      	movs	r2, #1
 8008216:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800821e:	2b00      	cmp	r3, #0
 8008220:	d005      	beq.n	800822e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	68db      	ldr	r3, [r3, #12]
 8008226:	f043 0202 	orr.w	r2, r3, #2
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	330c      	adds	r3, #12
 8008232:	2202      	movs	r2, #2
 8008234:	4619      	mov	r1, r3
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 f900 	bl	800843c <USBD_CtlSendData>
      break;
 800823c:	e004      	b.n	8008248 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800823e:	6839      	ldr	r1, [r7, #0]
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f000 f88a 	bl	800835a <USBD_CtlError>
      break;
 8008246:	bf00      	nop
  }
}
 8008248:	bf00      	nop
 800824a:	3708      	adds	r7, #8
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}

08008250 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b082      	sub	sp, #8
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	885b      	ldrh	r3, [r3, #2]
 800825e:	2b01      	cmp	r3, #1
 8008260:	d107      	bne.n	8008272 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2201      	movs	r2, #1
 8008266:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 f940 	bl	80084f0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008270:	e013      	b.n	800829a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	885b      	ldrh	r3, [r3, #2]
 8008276:	2b02      	cmp	r3, #2
 8008278:	d10b      	bne.n	8008292 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	889b      	ldrh	r3, [r3, #4]
 800827e:	0a1b      	lsrs	r3, r3, #8
 8008280:	b29b      	uxth	r3, r3
 8008282:	b2da      	uxtb	r2, r3
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f000 f930 	bl	80084f0 <USBD_CtlSendStatus>
}
 8008290:	e003      	b.n	800829a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008292:	6839      	ldr	r1, [r7, #0]
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 f860 	bl	800835a <USBD_CtlError>
}
 800829a:	bf00      	nop
 800829c:	3708      	adds	r7, #8
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}

080082a2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082a2:	b580      	push	{r7, lr}
 80082a4:	b082      	sub	sp, #8
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]
 80082aa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082b2:	b2db      	uxtb	r3, r3
 80082b4:	3b01      	subs	r3, #1
 80082b6:	2b02      	cmp	r3, #2
 80082b8:	d80b      	bhi.n	80082d2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	885b      	ldrh	r3, [r3, #2]
 80082be:	2b01      	cmp	r3, #1
 80082c0:	d10c      	bne.n	80082dc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2200      	movs	r2, #0
 80082c6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 f910 	bl	80084f0 <USBD_CtlSendStatus>
      }
      break;
 80082d0:	e004      	b.n	80082dc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80082d2:	6839      	ldr	r1, [r7, #0]
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f000 f840 	bl	800835a <USBD_CtlError>
      break;
 80082da:	e000      	b.n	80082de <USBD_ClrFeature+0x3c>
      break;
 80082dc:	bf00      	nop
  }
}
 80082de:	bf00      	nop
 80082e0:	3708      	adds	r7, #8
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}

080082e6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80082e6:	b580      	push	{r7, lr}
 80082e8:	b084      	sub	sp, #16
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	6078      	str	r0, [r7, #4]
 80082ee:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	781a      	ldrb	r2, [r3, #0]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	3301      	adds	r3, #1
 8008300:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	781a      	ldrb	r2, [r3, #0]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	3301      	adds	r3, #1
 800830e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008310:	68f8      	ldr	r0, [r7, #12]
 8008312:	f7ff fa17 	bl	8007744 <SWAPBYTE>
 8008316:	4603      	mov	r3, r0
 8008318:	461a      	mov	r2, r3
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	3301      	adds	r3, #1
 8008322:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	3301      	adds	r3, #1
 8008328:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800832a:	68f8      	ldr	r0, [r7, #12]
 800832c:	f7ff fa0a 	bl	8007744 <SWAPBYTE>
 8008330:	4603      	mov	r3, r0
 8008332:	461a      	mov	r2, r3
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	3301      	adds	r3, #1
 800833c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	3301      	adds	r3, #1
 8008342:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008344:	68f8      	ldr	r0, [r7, #12]
 8008346:	f7ff f9fd 	bl	8007744 <SWAPBYTE>
 800834a:	4603      	mov	r3, r0
 800834c:	461a      	mov	r2, r3
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	80da      	strh	r2, [r3, #6]
}
 8008352:	bf00      	nop
 8008354:	3710      	adds	r7, #16
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}

0800835a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800835a:	b580      	push	{r7, lr}
 800835c:	b082      	sub	sp, #8
 800835e:	af00      	add	r7, sp, #0
 8008360:	6078      	str	r0, [r7, #4]
 8008362:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008364:	2180      	movs	r1, #128	; 0x80
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 fcdc 	bl	8008d24 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800836c:	2100      	movs	r1, #0
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 fcd8 	bl	8008d24 <USBD_LL_StallEP>
}
 8008374:	bf00      	nop
 8008376:	3708      	adds	r7, #8
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}

0800837c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b086      	sub	sp, #24
 8008380:	af00      	add	r7, sp, #0
 8008382:	60f8      	str	r0, [r7, #12]
 8008384:	60b9      	str	r1, [r7, #8]
 8008386:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008388:	2300      	movs	r3, #0
 800838a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d036      	beq.n	8008400 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008396:	6938      	ldr	r0, [r7, #16]
 8008398:	f000 f836 	bl	8008408 <USBD_GetLen>
 800839c:	4603      	mov	r3, r0
 800839e:	3301      	adds	r3, #1
 80083a0:	b29b      	uxth	r3, r3
 80083a2:	005b      	lsls	r3, r3, #1
 80083a4:	b29a      	uxth	r2, r3
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80083aa:	7dfb      	ldrb	r3, [r7, #23]
 80083ac:	68ba      	ldr	r2, [r7, #8]
 80083ae:	4413      	add	r3, r2
 80083b0:	687a      	ldr	r2, [r7, #4]
 80083b2:	7812      	ldrb	r2, [r2, #0]
 80083b4:	701a      	strb	r2, [r3, #0]
  idx++;
 80083b6:	7dfb      	ldrb	r3, [r7, #23]
 80083b8:	3301      	adds	r3, #1
 80083ba:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80083bc:	7dfb      	ldrb	r3, [r7, #23]
 80083be:	68ba      	ldr	r2, [r7, #8]
 80083c0:	4413      	add	r3, r2
 80083c2:	2203      	movs	r2, #3
 80083c4:	701a      	strb	r2, [r3, #0]
  idx++;
 80083c6:	7dfb      	ldrb	r3, [r7, #23]
 80083c8:	3301      	adds	r3, #1
 80083ca:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80083cc:	e013      	b.n	80083f6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80083ce:	7dfb      	ldrb	r3, [r7, #23]
 80083d0:	68ba      	ldr	r2, [r7, #8]
 80083d2:	4413      	add	r3, r2
 80083d4:	693a      	ldr	r2, [r7, #16]
 80083d6:	7812      	ldrb	r2, [r2, #0]
 80083d8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	3301      	adds	r3, #1
 80083de:	613b      	str	r3, [r7, #16]
    idx++;
 80083e0:	7dfb      	ldrb	r3, [r7, #23]
 80083e2:	3301      	adds	r3, #1
 80083e4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80083e6:	7dfb      	ldrb	r3, [r7, #23]
 80083e8:	68ba      	ldr	r2, [r7, #8]
 80083ea:	4413      	add	r3, r2
 80083ec:	2200      	movs	r2, #0
 80083ee:	701a      	strb	r2, [r3, #0]
    idx++;
 80083f0:	7dfb      	ldrb	r3, [r7, #23]
 80083f2:	3301      	adds	r3, #1
 80083f4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	781b      	ldrb	r3, [r3, #0]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d1e7      	bne.n	80083ce <USBD_GetString+0x52>
 80083fe:	e000      	b.n	8008402 <USBD_GetString+0x86>
    return;
 8008400:	bf00      	nop
  }
}
 8008402:	3718      	adds	r7, #24
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}

08008408 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008408:	b480      	push	{r7}
 800840a:	b085      	sub	sp, #20
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008410:	2300      	movs	r3, #0
 8008412:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008418:	e005      	b.n	8008426 <USBD_GetLen+0x1e>
  {
    len++;
 800841a:	7bfb      	ldrb	r3, [r7, #15]
 800841c:	3301      	adds	r3, #1
 800841e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	3301      	adds	r3, #1
 8008424:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	781b      	ldrb	r3, [r3, #0]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d1f5      	bne.n	800841a <USBD_GetLen+0x12>
  }

  return len;
 800842e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008430:	4618      	mov	r0, r3
 8008432:	3714      	adds	r7, #20
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr

0800843c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b084      	sub	sp, #16
 8008440:	af00      	add	r7, sp, #0
 8008442:	60f8      	str	r0, [r7, #12]
 8008444:	60b9      	str	r1, [r7, #8]
 8008446:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2202      	movs	r2, #2
 800844c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	687a      	ldr	r2, [r7, #4]
 8008454:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	687a      	ldr	r2, [r7, #4]
 800845a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	68ba      	ldr	r2, [r7, #8]
 8008460:	2100      	movs	r1, #0
 8008462:	68f8      	ldr	r0, [r7, #12]
 8008464:	f000 fce7 	bl	8008e36 <USBD_LL_Transmit>

  return USBD_OK;
 8008468:	2300      	movs	r3, #0
}
 800846a:	4618      	mov	r0, r3
 800846c:	3710      	adds	r7, #16
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}

08008472 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008472:	b580      	push	{r7, lr}
 8008474:	b084      	sub	sp, #16
 8008476:	af00      	add	r7, sp, #0
 8008478:	60f8      	str	r0, [r7, #12]
 800847a:	60b9      	str	r1, [r7, #8]
 800847c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	68ba      	ldr	r2, [r7, #8]
 8008482:	2100      	movs	r1, #0
 8008484:	68f8      	ldr	r0, [r7, #12]
 8008486:	f000 fcd6 	bl	8008e36 <USBD_LL_Transmit>

  return USBD_OK;
 800848a:	2300      	movs	r3, #0
}
 800848c:	4618      	mov	r0, r3
 800848e:	3710      	adds	r7, #16
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}

08008494 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b084      	sub	sp, #16
 8008498:	af00      	add	r7, sp, #0
 800849a:	60f8      	str	r0, [r7, #12]
 800849c:	60b9      	str	r1, [r7, #8]
 800849e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2203      	movs	r2, #3
 80084a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	687a      	ldr	r2, [r7, #4]
 80084b4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	68ba      	ldr	r2, [r7, #8]
 80084bc:	2100      	movs	r1, #0
 80084be:	68f8      	ldr	r0, [r7, #12]
 80084c0:	f000 fcda 	bl	8008e78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084c4:	2300      	movs	r3, #0
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3710      	adds	r7, #16
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}

080084ce <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80084ce:	b580      	push	{r7, lr}
 80084d0:	b084      	sub	sp, #16
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	60f8      	str	r0, [r7, #12]
 80084d6:	60b9      	str	r1, [r7, #8]
 80084d8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	68ba      	ldr	r2, [r7, #8]
 80084de:	2100      	movs	r1, #0
 80084e0:	68f8      	ldr	r0, [r7, #12]
 80084e2:	f000 fcc9 	bl	8008e78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084e6:	2300      	movs	r3, #0
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	3710      	adds	r7, #16
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}

080084f0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b082      	sub	sp, #8
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2204      	movs	r2, #4
 80084fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008500:	2300      	movs	r3, #0
 8008502:	2200      	movs	r2, #0
 8008504:	2100      	movs	r1, #0
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f000 fc95 	bl	8008e36 <USBD_LL_Transmit>

  return USBD_OK;
 800850c:	2300      	movs	r3, #0
}
 800850e:	4618      	mov	r0, r3
 8008510:	3708      	adds	r7, #8
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}

08008516 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008516:	b580      	push	{r7, lr}
 8008518:	b082      	sub	sp, #8
 800851a:	af00      	add	r7, sp, #0
 800851c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2205      	movs	r2, #5
 8008522:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008526:	2300      	movs	r3, #0
 8008528:	2200      	movs	r2, #0
 800852a:	2100      	movs	r1, #0
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f000 fca3 	bl	8008e78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008532:	2300      	movs	r3, #0
}
 8008534:	4618      	mov	r0, r3
 8008536:	3708      	adds	r7, #8
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008540:	2200      	movs	r2, #0
 8008542:	4912      	ldr	r1, [pc, #72]	; (800858c <MX_USB_DEVICE_Init+0x50>)
 8008544:	4812      	ldr	r0, [pc, #72]	; (8008590 <MX_USB_DEVICE_Init+0x54>)
 8008546:	f7fe fcdd 	bl	8006f04 <USBD_Init>
 800854a:	4603      	mov	r3, r0
 800854c:	2b00      	cmp	r3, #0
 800854e:	d001      	beq.n	8008554 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008550:	f7f8 fb96 	bl	8000c80 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008554:	490f      	ldr	r1, [pc, #60]	; (8008594 <MX_USB_DEVICE_Init+0x58>)
 8008556:	480e      	ldr	r0, [pc, #56]	; (8008590 <MX_USB_DEVICE_Init+0x54>)
 8008558:	f7fe fd04 	bl	8006f64 <USBD_RegisterClass>
 800855c:	4603      	mov	r3, r0
 800855e:	2b00      	cmp	r3, #0
 8008560:	d001      	beq.n	8008566 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008562:	f7f8 fb8d 	bl	8000c80 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008566:	490c      	ldr	r1, [pc, #48]	; (8008598 <MX_USB_DEVICE_Init+0x5c>)
 8008568:	4809      	ldr	r0, [pc, #36]	; (8008590 <MX_USB_DEVICE_Init+0x54>)
 800856a:	f7fe fc3b 	bl	8006de4 <USBD_CDC_RegisterInterface>
 800856e:	4603      	mov	r3, r0
 8008570:	2b00      	cmp	r3, #0
 8008572:	d001      	beq.n	8008578 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008574:	f7f8 fb84 	bl	8000c80 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008578:	4805      	ldr	r0, [pc, #20]	; (8008590 <MX_USB_DEVICE_Init+0x54>)
 800857a:	f7fe fd29 	bl	8006fd0 <USBD_Start>
 800857e:	4603      	mov	r3, r0
 8008580:	2b00      	cmp	r3, #0
 8008582:	d001      	beq.n	8008588 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008584:	f7f8 fb7c 	bl	8000c80 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008588:	bf00      	nop
 800858a:	bd80      	pop	{r7, pc}
 800858c:	200000ac 	.word	0x200000ac
 8008590:	20000208 	.word	0x20000208
 8008594:	20000018 	.word	0x20000018
 8008598:	20000098 	.word	0x20000098

0800859c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80085a0:	2200      	movs	r2, #0
 80085a2:	4905      	ldr	r1, [pc, #20]	; (80085b8 <CDC_Init_FS+0x1c>)
 80085a4:	4805      	ldr	r0, [pc, #20]	; (80085bc <CDC_Init_FS+0x20>)
 80085a6:	f7fe fc37 	bl	8006e18 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80085aa:	4905      	ldr	r1, [pc, #20]	; (80085c0 <CDC_Init_FS+0x24>)
 80085ac:	4803      	ldr	r0, [pc, #12]	; (80085bc <CDC_Init_FS+0x20>)
 80085ae:	f7fe fc55 	bl	8006e5c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80085b2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	bd80      	pop	{r7, pc}
 80085b8:	20000ce4 	.word	0x20000ce4
 80085bc:	20000208 	.word	0x20000208
 80085c0:	200004e4 	.word	0x200004e4

080085c4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80085c4:	b480      	push	{r7}
 80085c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80085c8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	46bd      	mov	sp, r7
 80085ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d2:	4770      	bx	lr

080085d4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b083      	sub	sp, #12
 80085d8:	af00      	add	r7, sp, #0
 80085da:	4603      	mov	r3, r0
 80085dc:	6039      	str	r1, [r7, #0]
 80085de:	71fb      	strb	r3, [r7, #7]
 80085e0:	4613      	mov	r3, r2
 80085e2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80085e4:	79fb      	ldrb	r3, [r7, #7]
 80085e6:	2b23      	cmp	r3, #35	; 0x23
 80085e8:	d84a      	bhi.n	8008680 <CDC_Control_FS+0xac>
 80085ea:	a201      	add	r2, pc, #4	; (adr r2, 80085f0 <CDC_Control_FS+0x1c>)
 80085ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085f0:	08008681 	.word	0x08008681
 80085f4:	08008681 	.word	0x08008681
 80085f8:	08008681 	.word	0x08008681
 80085fc:	08008681 	.word	0x08008681
 8008600:	08008681 	.word	0x08008681
 8008604:	08008681 	.word	0x08008681
 8008608:	08008681 	.word	0x08008681
 800860c:	08008681 	.word	0x08008681
 8008610:	08008681 	.word	0x08008681
 8008614:	08008681 	.word	0x08008681
 8008618:	08008681 	.word	0x08008681
 800861c:	08008681 	.word	0x08008681
 8008620:	08008681 	.word	0x08008681
 8008624:	08008681 	.word	0x08008681
 8008628:	08008681 	.word	0x08008681
 800862c:	08008681 	.word	0x08008681
 8008630:	08008681 	.word	0x08008681
 8008634:	08008681 	.word	0x08008681
 8008638:	08008681 	.word	0x08008681
 800863c:	08008681 	.word	0x08008681
 8008640:	08008681 	.word	0x08008681
 8008644:	08008681 	.word	0x08008681
 8008648:	08008681 	.word	0x08008681
 800864c:	08008681 	.word	0x08008681
 8008650:	08008681 	.word	0x08008681
 8008654:	08008681 	.word	0x08008681
 8008658:	08008681 	.word	0x08008681
 800865c:	08008681 	.word	0x08008681
 8008660:	08008681 	.word	0x08008681
 8008664:	08008681 	.word	0x08008681
 8008668:	08008681 	.word	0x08008681
 800866c:	08008681 	.word	0x08008681
 8008670:	08008681 	.word	0x08008681
 8008674:	08008681 	.word	0x08008681
 8008678:	08008681 	.word	0x08008681
 800867c:	08008681 	.word	0x08008681
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008680:	bf00      	nop
  }

  return (USBD_OK);
 8008682:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008684:	4618      	mov	r0, r3
 8008686:	370c      	adds	r7, #12
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr

08008690 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b082      	sub	sp, #8
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
 8008698:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800869a:	6879      	ldr	r1, [r7, #4]
 800869c:	4805      	ldr	r0, [pc, #20]	; (80086b4 <CDC_Receive_FS+0x24>)
 800869e:	f7fe fbdd 	bl	8006e5c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80086a2:	4804      	ldr	r0, [pc, #16]	; (80086b4 <CDC_Receive_FS+0x24>)
 80086a4:	f7fe fbf8 	bl	8006e98 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80086a8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3708      	adds	r7, #8
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}
 80086b2:	bf00      	nop
 80086b4:	20000208 	.word	0x20000208

080086b8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b087      	sub	sp, #28
 80086bc:	af00      	add	r7, sp, #0
 80086be:	60f8      	str	r0, [r7, #12]
 80086c0:	60b9      	str	r1, [r7, #8]
 80086c2:	4613      	mov	r3, r2
 80086c4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80086c6:	2300      	movs	r3, #0
 80086c8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80086ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	371c      	adds	r7, #28
 80086d2:	46bd      	mov	sp, r7
 80086d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d8:	4770      	bx	lr
	...

080086dc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086dc:	b480      	push	{r7}
 80086de:	b083      	sub	sp, #12
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	4603      	mov	r3, r0
 80086e4:	6039      	str	r1, [r7, #0]
 80086e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	2212      	movs	r2, #18
 80086ec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80086ee:	4b03      	ldr	r3, [pc, #12]	; (80086fc <USBD_FS_DeviceDescriptor+0x20>)
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	370c      	adds	r7, #12
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr
 80086fc:	200000cc 	.word	0x200000cc

08008700 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008700:	b480      	push	{r7}
 8008702:	b083      	sub	sp, #12
 8008704:	af00      	add	r7, sp, #0
 8008706:	4603      	mov	r3, r0
 8008708:	6039      	str	r1, [r7, #0]
 800870a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	2204      	movs	r2, #4
 8008710:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008712:	4b03      	ldr	r3, [pc, #12]	; (8008720 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008714:	4618      	mov	r0, r3
 8008716:	370c      	adds	r7, #12
 8008718:	46bd      	mov	sp, r7
 800871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871e:	4770      	bx	lr
 8008720:	200000ec 	.word	0x200000ec

08008724 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b082      	sub	sp, #8
 8008728:	af00      	add	r7, sp, #0
 800872a:	4603      	mov	r3, r0
 800872c:	6039      	str	r1, [r7, #0]
 800872e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008730:	79fb      	ldrb	r3, [r7, #7]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d105      	bne.n	8008742 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008736:	683a      	ldr	r2, [r7, #0]
 8008738:	4907      	ldr	r1, [pc, #28]	; (8008758 <USBD_FS_ProductStrDescriptor+0x34>)
 800873a:	4808      	ldr	r0, [pc, #32]	; (800875c <USBD_FS_ProductStrDescriptor+0x38>)
 800873c:	f7ff fe1e 	bl	800837c <USBD_GetString>
 8008740:	e004      	b.n	800874c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008742:	683a      	ldr	r2, [r7, #0]
 8008744:	4904      	ldr	r1, [pc, #16]	; (8008758 <USBD_FS_ProductStrDescriptor+0x34>)
 8008746:	4805      	ldr	r0, [pc, #20]	; (800875c <USBD_FS_ProductStrDescriptor+0x38>)
 8008748:	f7ff fe18 	bl	800837c <USBD_GetString>
  }
  return USBD_StrDesc;
 800874c:	4b02      	ldr	r3, [pc, #8]	; (8008758 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800874e:	4618      	mov	r0, r3
 8008750:	3708      	adds	r7, #8
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}
 8008756:	bf00      	nop
 8008758:	200014e4 	.word	0x200014e4
 800875c:	0800912c 	.word	0x0800912c

08008760 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b082      	sub	sp, #8
 8008764:	af00      	add	r7, sp, #0
 8008766:	4603      	mov	r3, r0
 8008768:	6039      	str	r1, [r7, #0]
 800876a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800876c:	683a      	ldr	r2, [r7, #0]
 800876e:	4904      	ldr	r1, [pc, #16]	; (8008780 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008770:	4804      	ldr	r0, [pc, #16]	; (8008784 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008772:	f7ff fe03 	bl	800837c <USBD_GetString>
  return USBD_StrDesc;
 8008776:	4b02      	ldr	r3, [pc, #8]	; (8008780 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008778:	4618      	mov	r0, r3
 800877a:	3708      	adds	r7, #8
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}
 8008780:	200014e4 	.word	0x200014e4
 8008784:	08009144 	.word	0x08009144

08008788 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b082      	sub	sp, #8
 800878c:	af00      	add	r7, sp, #0
 800878e:	4603      	mov	r3, r0
 8008790:	6039      	str	r1, [r7, #0]
 8008792:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	221a      	movs	r2, #26
 8008798:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800879a:	f000 f855 	bl	8008848 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800879e:	4b02      	ldr	r3, [pc, #8]	; (80087a8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3708      	adds	r7, #8
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}
 80087a8:	200000f0 	.word	0x200000f0

080087ac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b082      	sub	sp, #8
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	4603      	mov	r3, r0
 80087b4:	6039      	str	r1, [r7, #0]
 80087b6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80087b8:	79fb      	ldrb	r3, [r7, #7]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d105      	bne.n	80087ca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80087be:	683a      	ldr	r2, [r7, #0]
 80087c0:	4907      	ldr	r1, [pc, #28]	; (80087e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80087c2:	4808      	ldr	r0, [pc, #32]	; (80087e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80087c4:	f7ff fdda 	bl	800837c <USBD_GetString>
 80087c8:	e004      	b.n	80087d4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80087ca:	683a      	ldr	r2, [r7, #0]
 80087cc:	4904      	ldr	r1, [pc, #16]	; (80087e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80087ce:	4805      	ldr	r0, [pc, #20]	; (80087e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80087d0:	f7ff fdd4 	bl	800837c <USBD_GetString>
  }
  return USBD_StrDesc;
 80087d4:	4b02      	ldr	r3, [pc, #8]	; (80087e0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3708      	adds	r7, #8
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}
 80087de:	bf00      	nop
 80087e0:	200014e4 	.word	0x200014e4
 80087e4:	08009158 	.word	0x08009158

080087e8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b082      	sub	sp, #8
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	4603      	mov	r3, r0
 80087f0:	6039      	str	r1, [r7, #0]
 80087f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80087f4:	79fb      	ldrb	r3, [r7, #7]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d105      	bne.n	8008806 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80087fa:	683a      	ldr	r2, [r7, #0]
 80087fc:	4907      	ldr	r1, [pc, #28]	; (800881c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80087fe:	4808      	ldr	r0, [pc, #32]	; (8008820 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008800:	f7ff fdbc 	bl	800837c <USBD_GetString>
 8008804:	e004      	b.n	8008810 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008806:	683a      	ldr	r2, [r7, #0]
 8008808:	4904      	ldr	r1, [pc, #16]	; (800881c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800880a:	4805      	ldr	r0, [pc, #20]	; (8008820 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800880c:	f7ff fdb6 	bl	800837c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008810:	4b02      	ldr	r3, [pc, #8]	; (800881c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008812:	4618      	mov	r0, r3
 8008814:	3708      	adds	r7, #8
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}
 800881a:	bf00      	nop
 800881c:	200014e4 	.word	0x200014e4
 8008820:	08009164 	.word	0x08009164

08008824 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008824:	b480      	push	{r7}
 8008826:	b083      	sub	sp, #12
 8008828:	af00      	add	r7, sp, #0
 800882a:	4603      	mov	r3, r0
 800882c:	6039      	str	r1, [r7, #0]
 800882e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	220c      	movs	r2, #12
 8008834:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8008836:	4b03      	ldr	r3, [pc, #12]	; (8008844 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8008838:	4618      	mov	r0, r3
 800883a:	370c      	adds	r7, #12
 800883c:	46bd      	mov	sp, r7
 800883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008842:	4770      	bx	lr
 8008844:	200000e0 	.word	0x200000e0

08008848 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b084      	sub	sp, #16
 800884c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800884e:	4b0f      	ldr	r3, [pc, #60]	; (800888c <Get_SerialNum+0x44>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008854:	4b0e      	ldr	r3, [pc, #56]	; (8008890 <Get_SerialNum+0x48>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800885a:	4b0e      	ldr	r3, [pc, #56]	; (8008894 <Get_SerialNum+0x4c>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008860:	68fa      	ldr	r2, [r7, #12]
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	4413      	add	r3, r2
 8008866:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d009      	beq.n	8008882 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800886e:	2208      	movs	r2, #8
 8008870:	4909      	ldr	r1, [pc, #36]	; (8008898 <Get_SerialNum+0x50>)
 8008872:	68f8      	ldr	r0, [r7, #12]
 8008874:	f000 f814 	bl	80088a0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008878:	2204      	movs	r2, #4
 800887a:	4908      	ldr	r1, [pc, #32]	; (800889c <Get_SerialNum+0x54>)
 800887c:	68b8      	ldr	r0, [r7, #8]
 800887e:	f000 f80f 	bl	80088a0 <IntToUnicode>
  }
}
 8008882:	bf00      	nop
 8008884:	3710      	adds	r7, #16
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}
 800888a:	bf00      	nop
 800888c:	1fff7a10 	.word	0x1fff7a10
 8008890:	1fff7a14 	.word	0x1fff7a14
 8008894:	1fff7a18 	.word	0x1fff7a18
 8008898:	200000f2 	.word	0x200000f2
 800889c:	20000102 	.word	0x20000102

080088a0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b087      	sub	sp, #28
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	60f8      	str	r0, [r7, #12]
 80088a8:	60b9      	str	r1, [r7, #8]
 80088aa:	4613      	mov	r3, r2
 80088ac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80088ae:	2300      	movs	r3, #0
 80088b0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80088b2:	2300      	movs	r3, #0
 80088b4:	75fb      	strb	r3, [r7, #23]
 80088b6:	e027      	b.n	8008908 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	0f1b      	lsrs	r3, r3, #28
 80088bc:	2b09      	cmp	r3, #9
 80088be:	d80b      	bhi.n	80088d8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	0f1b      	lsrs	r3, r3, #28
 80088c4:	b2da      	uxtb	r2, r3
 80088c6:	7dfb      	ldrb	r3, [r7, #23]
 80088c8:	005b      	lsls	r3, r3, #1
 80088ca:	4619      	mov	r1, r3
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	440b      	add	r3, r1
 80088d0:	3230      	adds	r2, #48	; 0x30
 80088d2:	b2d2      	uxtb	r2, r2
 80088d4:	701a      	strb	r2, [r3, #0]
 80088d6:	e00a      	b.n	80088ee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	0f1b      	lsrs	r3, r3, #28
 80088dc:	b2da      	uxtb	r2, r3
 80088de:	7dfb      	ldrb	r3, [r7, #23]
 80088e0:	005b      	lsls	r3, r3, #1
 80088e2:	4619      	mov	r1, r3
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	440b      	add	r3, r1
 80088e8:	3237      	adds	r2, #55	; 0x37
 80088ea:	b2d2      	uxtb	r2, r2
 80088ec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	011b      	lsls	r3, r3, #4
 80088f2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80088f4:	7dfb      	ldrb	r3, [r7, #23]
 80088f6:	005b      	lsls	r3, r3, #1
 80088f8:	3301      	adds	r3, #1
 80088fa:	68ba      	ldr	r2, [r7, #8]
 80088fc:	4413      	add	r3, r2
 80088fe:	2200      	movs	r2, #0
 8008900:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008902:	7dfb      	ldrb	r3, [r7, #23]
 8008904:	3301      	adds	r3, #1
 8008906:	75fb      	strb	r3, [r7, #23]
 8008908:	7dfa      	ldrb	r2, [r7, #23]
 800890a:	79fb      	ldrb	r3, [r7, #7]
 800890c:	429a      	cmp	r2, r3
 800890e:	d3d3      	bcc.n	80088b8 <IntToUnicode+0x18>
  }
}
 8008910:	bf00      	nop
 8008912:	bf00      	nop
 8008914:	371c      	adds	r7, #28
 8008916:	46bd      	mov	sp, r7
 8008918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891c:	4770      	bx	lr
	...

08008920 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b098      	sub	sp, #96	; 0x60
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008928:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800892c:	2200      	movs	r2, #0
 800892e:	601a      	str	r2, [r3, #0]
 8008930:	605a      	str	r2, [r3, #4]
 8008932:	609a      	str	r2, [r3, #8]
 8008934:	60da      	str	r2, [r3, #12]
 8008936:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008938:	f107 0310 	add.w	r3, r7, #16
 800893c:	223c      	movs	r2, #60	; 0x3c
 800893e:	2100      	movs	r1, #0
 8008940:	4618      	mov	r0, r3
 8008942:	f000 fbbb 	bl	80090bc <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800894e:	d148      	bne.n	80089e2 <HAL_PCD_MspInit+0xc2>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8008950:	2320      	movs	r3, #32
 8008952:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8008954:	2300      	movs	r3, #0
 8008956:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008958:	f107 0310 	add.w	r3, r7, #16
 800895c:	4618      	mov	r0, r3
 800895e:	f7fb fda7 	bl	80044b0 <HAL_RCCEx_PeriphCLKConfig>
 8008962:	4603      	mov	r3, r0
 8008964:	2b00      	cmp	r3, #0
 8008966:	d001      	beq.n	800896c <HAL_PCD_MspInit+0x4c>
    {
      Error_Handler();
 8008968:	f7f8 f98a 	bl	8000c80 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800896c:	2300      	movs	r3, #0
 800896e:	60fb      	str	r3, [r7, #12]
 8008970:	4b1e      	ldr	r3, [pc, #120]	; (80089ec <HAL_PCD_MspInit+0xcc>)
 8008972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008974:	4a1d      	ldr	r2, [pc, #116]	; (80089ec <HAL_PCD_MspInit+0xcc>)
 8008976:	f043 0301 	orr.w	r3, r3, #1
 800897a:	6313      	str	r3, [r2, #48]	; 0x30
 800897c:	4b1b      	ldr	r3, [pc, #108]	; (80089ec <HAL_PCD_MspInit+0xcc>)
 800897e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008980:	f003 0301 	and.w	r3, r3, #1
 8008984:	60fb      	str	r3, [r7, #12]
 8008986:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008988:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800898c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800898e:	2302      	movs	r3, #2
 8008990:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008992:	2300      	movs	r3, #0
 8008994:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008996:	2303      	movs	r3, #3
 8008998:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800899a:	230a      	movs	r3, #10
 800899c:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800899e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80089a2:	4619      	mov	r1, r3
 80089a4:	4812      	ldr	r0, [pc, #72]	; (80089f0 <HAL_PCD_MspInit+0xd0>)
 80089a6:	f7f9 fee5 	bl	8002774 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80089aa:	4b10      	ldr	r3, [pc, #64]	; (80089ec <HAL_PCD_MspInit+0xcc>)
 80089ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089ae:	4a0f      	ldr	r2, [pc, #60]	; (80089ec <HAL_PCD_MspInit+0xcc>)
 80089b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089b4:	6353      	str	r3, [r2, #52]	; 0x34
 80089b6:	2300      	movs	r3, #0
 80089b8:	60bb      	str	r3, [r7, #8]
 80089ba:	4b0c      	ldr	r3, [pc, #48]	; (80089ec <HAL_PCD_MspInit+0xcc>)
 80089bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089be:	4a0b      	ldr	r2, [pc, #44]	; (80089ec <HAL_PCD_MspInit+0xcc>)
 80089c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80089c4:	6453      	str	r3, [r2, #68]	; 0x44
 80089c6:	4b09      	ldr	r3, [pc, #36]	; (80089ec <HAL_PCD_MspInit+0xcc>)
 80089c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80089ce:	60bb      	str	r3, [r7, #8]
 80089d0:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80089d2:	2200      	movs	r2, #0
 80089d4:	2100      	movs	r1, #0
 80089d6:	2043      	movs	r0, #67	; 0x43
 80089d8:	f7f9 fe95 	bl	8002706 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80089dc:	2043      	movs	r0, #67	; 0x43
 80089de:	f7f9 feae 	bl	800273e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80089e2:	bf00      	nop
 80089e4:	3760      	adds	r7, #96	; 0x60
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}
 80089ea:	bf00      	nop
 80089ec:	40023800 	.word	0x40023800
 80089f0:	40020000 	.word	0x40020000

080089f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b082      	sub	sp, #8
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008a08:	4619      	mov	r1, r3
 8008a0a:	4610      	mov	r0, r2
 8008a0c:	f7fe fb2d 	bl	800706a <USBD_LL_SetupStage>
}
 8008a10:	bf00      	nop
 8008a12:	3708      	adds	r7, #8
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}

08008a18 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b082      	sub	sp, #8
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	460b      	mov	r3, r1
 8008a22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008a2a:	78fa      	ldrb	r2, [r7, #3]
 8008a2c:	6879      	ldr	r1, [r7, #4]
 8008a2e:	4613      	mov	r3, r2
 8008a30:	00db      	lsls	r3, r3, #3
 8008a32:	4413      	add	r3, r2
 8008a34:	009b      	lsls	r3, r3, #2
 8008a36:	440b      	add	r3, r1
 8008a38:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008a3c:	681a      	ldr	r2, [r3, #0]
 8008a3e:	78fb      	ldrb	r3, [r7, #3]
 8008a40:	4619      	mov	r1, r3
 8008a42:	f7fe fb67 	bl	8007114 <USBD_LL_DataOutStage>
}
 8008a46:	bf00      	nop
 8008a48:	3708      	adds	r7, #8
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}

08008a4e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a4e:	b580      	push	{r7, lr}
 8008a50:	b082      	sub	sp, #8
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	6078      	str	r0, [r7, #4]
 8008a56:	460b      	mov	r3, r1
 8008a58:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008a60:	78fa      	ldrb	r2, [r7, #3]
 8008a62:	6879      	ldr	r1, [r7, #4]
 8008a64:	4613      	mov	r3, r2
 8008a66:	00db      	lsls	r3, r3, #3
 8008a68:	4413      	add	r3, r2
 8008a6a:	009b      	lsls	r3, r3, #2
 8008a6c:	440b      	add	r3, r1
 8008a6e:	334c      	adds	r3, #76	; 0x4c
 8008a70:	681a      	ldr	r2, [r3, #0]
 8008a72:	78fb      	ldrb	r3, [r7, #3]
 8008a74:	4619      	mov	r1, r3
 8008a76:	f7fe fc00 	bl	800727a <USBD_LL_DataInStage>
}
 8008a7a:	bf00      	nop
 8008a7c:	3708      	adds	r7, #8
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}

08008a82 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a82:	b580      	push	{r7, lr}
 8008a84:	b082      	sub	sp, #8
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a90:	4618      	mov	r0, r3
 8008a92:	f7fe fd34 	bl	80074fe <USBD_LL_SOF>
}
 8008a96:	bf00      	nop
 8008a98:	3708      	adds	r7, #8
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}

08008a9e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a9e:	b580      	push	{r7, lr}
 8008aa0:	b084      	sub	sp, #16
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	68db      	ldr	r3, [r3, #12]
 8008aae:	2b02      	cmp	r3, #2
 8008ab0:	d001      	beq.n	8008ab6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008ab2:	f7f8 f8e5 	bl	8000c80 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008abc:	7bfa      	ldrb	r2, [r7, #15]
 8008abe:	4611      	mov	r1, r2
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f7fe fcde 	bl	8007482 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008acc:	4618      	mov	r0, r3
 8008ace:	f7fe fc86 	bl	80073de <USBD_LL_Reset>
}
 8008ad2:	bf00      	nop
 8008ad4:	3710      	adds	r7, #16
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}
	...

08008adc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b082      	sub	sp, #8
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008aea:	4618      	mov	r0, r3
 8008aec:	f7fe fcd9 	bl	80074a2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	687a      	ldr	r2, [r7, #4]
 8008afc:	6812      	ldr	r2, [r2, #0]
 8008afe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008b02:	f043 0301 	orr.w	r3, r3, #1
 8008b06:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6a1b      	ldr	r3, [r3, #32]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d005      	beq.n	8008b1c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008b10:	4b04      	ldr	r3, [pc, #16]	; (8008b24 <HAL_PCD_SuspendCallback+0x48>)
 8008b12:	691b      	ldr	r3, [r3, #16]
 8008b14:	4a03      	ldr	r2, [pc, #12]	; (8008b24 <HAL_PCD_SuspendCallback+0x48>)
 8008b16:	f043 0306 	orr.w	r3, r3, #6
 8008b1a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008b1c:	bf00      	nop
 8008b1e:	3708      	adds	r7, #8
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}
 8008b24:	e000ed00 	.word	0xe000ed00

08008b28 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b082      	sub	sp, #8
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b36:	4618      	mov	r0, r3
 8008b38:	f7fe fcc9 	bl	80074ce <USBD_LL_Resume>
}
 8008b3c:	bf00      	nop
 8008b3e:	3708      	adds	r7, #8
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}

08008b44 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b082      	sub	sp, #8
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	460b      	mov	r3, r1
 8008b4e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b56:	78fa      	ldrb	r2, [r7, #3]
 8008b58:	4611      	mov	r1, r2
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f7fe fd21 	bl	80075a2 <USBD_LL_IsoOUTIncomplete>
}
 8008b60:	bf00      	nop
 8008b62:	3708      	adds	r7, #8
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}

08008b68 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b082      	sub	sp, #8
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	460b      	mov	r3, r1
 8008b72:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b7a:	78fa      	ldrb	r2, [r7, #3]
 8008b7c:	4611      	mov	r1, r2
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f7fe fcdd 	bl	800753e <USBD_LL_IsoINIncomplete>
}
 8008b84:	bf00      	nop
 8008b86:	3708      	adds	r7, #8
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}

08008b8c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b082      	sub	sp, #8
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f7fe fd33 	bl	8007606 <USBD_LL_DevConnected>
}
 8008ba0:	bf00      	nop
 8008ba2:	3708      	adds	r7, #8
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b082      	sub	sp, #8
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f7fe fd30 	bl	800761c <USBD_LL_DevDisconnected>
}
 8008bbc:	bf00      	nop
 8008bbe:	3708      	adds	r7, #8
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}

08008bc4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b082      	sub	sp, #8
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	781b      	ldrb	r3, [r3, #0]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d13f      	bne.n	8008c54 <USBD_LL_Init+0x90>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008bd4:	4a22      	ldr	r2, [pc, #136]	; (8008c60 <USBD_LL_Init+0x9c>)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	4a20      	ldr	r2, [pc, #128]	; (8008c60 <USBD_LL_Init+0x9c>)
 8008be0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008be4:	4b1e      	ldr	r3, [pc, #120]	; (8008c60 <USBD_LL_Init+0x9c>)
 8008be6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008bea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8008bec:	4b1c      	ldr	r3, [pc, #112]	; (8008c60 <USBD_LL_Init+0x9c>)
 8008bee:	2206      	movs	r2, #6
 8008bf0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008bf2:	4b1b      	ldr	r3, [pc, #108]	; (8008c60 <USBD_LL_Init+0x9c>)
 8008bf4:	2202      	movs	r2, #2
 8008bf6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008bf8:	4b19      	ldr	r3, [pc, #100]	; (8008c60 <USBD_LL_Init+0x9c>)
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008bfe:	4b18      	ldr	r3, [pc, #96]	; (8008c60 <USBD_LL_Init+0x9c>)
 8008c00:	2202      	movs	r2, #2
 8008c02:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008c04:	4b16      	ldr	r3, [pc, #88]	; (8008c60 <USBD_LL_Init+0x9c>)
 8008c06:	2200      	movs	r2, #0
 8008c08:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008c0a:	4b15      	ldr	r3, [pc, #84]	; (8008c60 <USBD_LL_Init+0x9c>)
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008c10:	4b13      	ldr	r3, [pc, #76]	; (8008c60 <USBD_LL_Init+0x9c>)
 8008c12:	2200      	movs	r2, #0
 8008c14:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8008c16:	4b12      	ldr	r3, [pc, #72]	; (8008c60 <USBD_LL_Init+0x9c>)
 8008c18:	2200      	movs	r2, #0
 8008c1a:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008c1c:	4b10      	ldr	r3, [pc, #64]	; (8008c60 <USBD_LL_Init+0x9c>)
 8008c1e:	2200      	movs	r2, #0
 8008c20:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008c22:	4b0f      	ldr	r3, [pc, #60]	; (8008c60 <USBD_LL_Init+0x9c>)
 8008c24:	2200      	movs	r2, #0
 8008c26:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008c28:	480d      	ldr	r0, [pc, #52]	; (8008c60 <USBD_LL_Init+0x9c>)
 8008c2a:	f7f9 ff58 	bl	8002ade <HAL_PCD_Init>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d001      	beq.n	8008c38 <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 8008c34:	f7f8 f824 	bl	8000c80 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008c38:	2180      	movs	r1, #128	; 0x80
 8008c3a:	4809      	ldr	r0, [pc, #36]	; (8008c60 <USBD_LL_Init+0x9c>)
 8008c3c:	f7fb f9e3 	bl	8004006 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008c40:	2240      	movs	r2, #64	; 0x40
 8008c42:	2100      	movs	r1, #0
 8008c44:	4806      	ldr	r0, [pc, #24]	; (8008c60 <USBD_LL_Init+0x9c>)
 8008c46:	f7fb f997 	bl	8003f78 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008c4a:	2280      	movs	r2, #128	; 0x80
 8008c4c:	2101      	movs	r1, #1
 8008c4e:	4804      	ldr	r0, [pc, #16]	; (8008c60 <USBD_LL_Init+0x9c>)
 8008c50:	f7fb f992 	bl	8003f78 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008c54:	2300      	movs	r3, #0
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3708      	adds	r7, #8
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}
 8008c5e:	bf00      	nop
 8008c60:	200016e4 	.word	0x200016e4

08008c64 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b084      	sub	sp, #16
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c70:	2300      	movs	r3, #0
 8008c72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f7fa f853 	bl	8002d26 <HAL_PCD_Start>
 8008c80:	4603      	mov	r3, r0
 8008c82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c84:	7bfb      	ldrb	r3, [r7, #15]
 8008c86:	4618      	mov	r0, r3
 8008c88:	f000 f990 	bl	8008fac <USBD_Get_USB_Status>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c90:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3710      	adds	r7, #16
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}

08008c9a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008c9a:	b580      	push	{r7, lr}
 8008c9c:	b084      	sub	sp, #16
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	6078      	str	r0, [r7, #4]
 8008ca2:	4608      	mov	r0, r1
 8008ca4:	4611      	mov	r1, r2
 8008ca6:	461a      	mov	r2, r3
 8008ca8:	4603      	mov	r3, r0
 8008caa:	70fb      	strb	r3, [r7, #3]
 8008cac:	460b      	mov	r3, r1
 8008cae:	70bb      	strb	r3, [r7, #2]
 8008cb0:	4613      	mov	r3, r2
 8008cb2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008cc2:	78bb      	ldrb	r3, [r7, #2]
 8008cc4:	883a      	ldrh	r2, [r7, #0]
 8008cc6:	78f9      	ldrb	r1, [r7, #3]
 8008cc8:	f7fa fd51 	bl	800376e <HAL_PCD_EP_Open>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cd0:	7bfb      	ldrb	r3, [r7, #15]
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f000 f96a 	bl	8008fac <USBD_Get_USB_Status>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cdc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3710      	adds	r7, #16
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}

08008ce6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ce6:	b580      	push	{r7, lr}
 8008ce8:	b084      	sub	sp, #16
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	6078      	str	r0, [r7, #4]
 8008cee:	460b      	mov	r3, r1
 8008cf0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d00:	78fa      	ldrb	r2, [r7, #3]
 8008d02:	4611      	mov	r1, r2
 8008d04:	4618      	mov	r0, r3
 8008d06:	f7fa fd9a 	bl	800383e <HAL_PCD_EP_Close>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d0e:	7bfb      	ldrb	r3, [r7, #15]
 8008d10:	4618      	mov	r0, r3
 8008d12:	f000 f94b 	bl	8008fac <USBD_Get_USB_Status>
 8008d16:	4603      	mov	r3, r0
 8008d18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d1a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3710      	adds	r7, #16
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b084      	sub	sp, #16
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	460b      	mov	r3, r1
 8008d2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d30:	2300      	movs	r3, #0
 8008d32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d34:	2300      	movs	r3, #0
 8008d36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d3e:	78fa      	ldrb	r2, [r7, #3]
 8008d40:	4611      	mov	r1, r2
 8008d42:	4618      	mov	r0, r3
 8008d44:	f7fa fe72 	bl	8003a2c <HAL_PCD_EP_SetStall>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d4c:	7bfb      	ldrb	r3, [r7, #15]
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f000 f92c 	bl	8008fac <USBD_Get_USB_Status>
 8008d54:	4603      	mov	r3, r0
 8008d56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d58:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3710      	adds	r7, #16
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}

08008d62 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d62:	b580      	push	{r7, lr}
 8008d64:	b084      	sub	sp, #16
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	6078      	str	r0, [r7, #4]
 8008d6a:	460b      	mov	r3, r1
 8008d6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d72:	2300      	movs	r3, #0
 8008d74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d7c:	78fa      	ldrb	r2, [r7, #3]
 8008d7e:	4611      	mov	r1, r2
 8008d80:	4618      	mov	r0, r3
 8008d82:	f7fa feb7 	bl	8003af4 <HAL_PCD_EP_ClrStall>
 8008d86:	4603      	mov	r3, r0
 8008d88:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d8a:	7bfb      	ldrb	r3, [r7, #15]
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f000 f90d 	bl	8008fac <USBD_Get_USB_Status>
 8008d92:	4603      	mov	r3, r0
 8008d94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d96:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3710      	adds	r7, #16
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}

08008da0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b085      	sub	sp, #20
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	460b      	mov	r3, r1
 8008daa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008db2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008db4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	da0b      	bge.n	8008dd4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008dbc:	78fb      	ldrb	r3, [r7, #3]
 8008dbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008dc2:	68f9      	ldr	r1, [r7, #12]
 8008dc4:	4613      	mov	r3, r2
 8008dc6:	00db      	lsls	r3, r3, #3
 8008dc8:	4413      	add	r3, r2
 8008dca:	009b      	lsls	r3, r3, #2
 8008dcc:	440b      	add	r3, r1
 8008dce:	333e      	adds	r3, #62	; 0x3e
 8008dd0:	781b      	ldrb	r3, [r3, #0]
 8008dd2:	e00b      	b.n	8008dec <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008dd4:	78fb      	ldrb	r3, [r7, #3]
 8008dd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008dda:	68f9      	ldr	r1, [r7, #12]
 8008ddc:	4613      	mov	r3, r2
 8008dde:	00db      	lsls	r3, r3, #3
 8008de0:	4413      	add	r3, r2
 8008de2:	009b      	lsls	r3, r3, #2
 8008de4:	440b      	add	r3, r1
 8008de6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008dea:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	3714      	adds	r7, #20
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr

08008df8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b084      	sub	sp, #16
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	460b      	mov	r3, r1
 8008e02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e04:	2300      	movs	r3, #0
 8008e06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008e12:	78fa      	ldrb	r2, [r7, #3]
 8008e14:	4611      	mov	r1, r2
 8008e16:	4618      	mov	r0, r3
 8008e18:	f7fa fc84 	bl	8003724 <HAL_PCD_SetAddress>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e20:	7bfb      	ldrb	r3, [r7, #15]
 8008e22:	4618      	mov	r0, r3
 8008e24:	f000 f8c2 	bl	8008fac <USBD_Get_USB_Status>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3710      	adds	r7, #16
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}

08008e36 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008e36:	b580      	push	{r7, lr}
 8008e38:	b086      	sub	sp, #24
 8008e3a:	af00      	add	r7, sp, #0
 8008e3c:	60f8      	str	r0, [r7, #12]
 8008e3e:	607a      	str	r2, [r7, #4]
 8008e40:	603b      	str	r3, [r7, #0]
 8008e42:	460b      	mov	r3, r1
 8008e44:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e46:	2300      	movs	r3, #0
 8008e48:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008e54:	7af9      	ldrb	r1, [r7, #11]
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	687a      	ldr	r2, [r7, #4]
 8008e5a:	f7fa fd9d 	bl	8003998 <HAL_PCD_EP_Transmit>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e62:	7dfb      	ldrb	r3, [r7, #23]
 8008e64:	4618      	mov	r0, r3
 8008e66:	f000 f8a1 	bl	8008fac <USBD_Get_USB_Status>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008e6e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3718      	adds	r7, #24
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}

08008e78 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b086      	sub	sp, #24
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	60f8      	str	r0, [r7, #12]
 8008e80:	607a      	str	r2, [r7, #4]
 8008e82:	603b      	str	r3, [r7, #0]
 8008e84:	460b      	mov	r3, r1
 8008e86:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008e96:	7af9      	ldrb	r1, [r7, #11]
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	687a      	ldr	r2, [r7, #4]
 8008e9c:	f7fa fd19 	bl	80038d2 <HAL_PCD_EP_Receive>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ea4:	7dfb      	ldrb	r3, [r7, #23]
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f000 f880 	bl	8008fac <USBD_Get_USB_Status>
 8008eac:	4603      	mov	r3, r0
 8008eae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008eb0:	7dbb      	ldrb	r3, [r7, #22]
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3718      	adds	r7, #24
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}

08008eba <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008eba:	b580      	push	{r7, lr}
 8008ebc:	b082      	sub	sp, #8
 8008ebe:	af00      	add	r7, sp, #0
 8008ec0:	6078      	str	r0, [r7, #4]
 8008ec2:	460b      	mov	r3, r1
 8008ec4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008ecc:	78fa      	ldrb	r2, [r7, #3]
 8008ece:	4611      	mov	r1, r2
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f7fa fd49 	bl	8003968 <HAL_PCD_EP_GetRxCount>
 8008ed6:	4603      	mov	r3, r0
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3708      	adds	r7, #8
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b082      	sub	sp, #8
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	460b      	mov	r3, r1
 8008eea:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008eec:	78fb      	ldrb	r3, [r7, #3]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d002      	beq.n	8008ef8 <HAL_PCDEx_LPM_Callback+0x18>
 8008ef2:	2b01      	cmp	r3, #1
 8008ef4:	d01f      	beq.n	8008f36 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8008ef6:	e03b      	b.n	8008f70 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6a1b      	ldr	r3, [r3, #32]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d007      	beq.n	8008f10 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8008f00:	f7f7 fce0 	bl	80008c4 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008f04:	4b1c      	ldr	r3, [pc, #112]	; (8008f78 <HAL_PCDEx_LPM_Callback+0x98>)
 8008f06:	691b      	ldr	r3, [r3, #16]
 8008f08:	4a1b      	ldr	r2, [pc, #108]	; (8008f78 <HAL_PCDEx_LPM_Callback+0x98>)
 8008f0a:	f023 0306 	bic.w	r3, r3, #6
 8008f0e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	687a      	ldr	r2, [r7, #4]
 8008f1c:	6812      	ldr	r2, [r2, #0]
 8008f1e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008f22:	f023 0301 	bic.w	r3, r3, #1
 8008f26:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f7fe facd 	bl	80074ce <USBD_LL_Resume>
    break;
 8008f34:	e01c      	b.n	8008f70 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	687a      	ldr	r2, [r7, #4]
 8008f42:	6812      	ldr	r2, [r2, #0]
 8008f44:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008f48:	f043 0301 	orr.w	r3, r3, #1
 8008f4c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008f54:	4618      	mov	r0, r3
 8008f56:	f7fe faa4 	bl	80074a2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6a1b      	ldr	r3, [r3, #32]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d005      	beq.n	8008f6e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008f62:	4b05      	ldr	r3, [pc, #20]	; (8008f78 <HAL_PCDEx_LPM_Callback+0x98>)
 8008f64:	691b      	ldr	r3, [r3, #16]
 8008f66:	4a04      	ldr	r2, [pc, #16]	; (8008f78 <HAL_PCDEx_LPM_Callback+0x98>)
 8008f68:	f043 0306 	orr.w	r3, r3, #6
 8008f6c:	6113      	str	r3, [r2, #16]
    break;
 8008f6e:	bf00      	nop
}
 8008f70:	bf00      	nop
 8008f72:	3708      	adds	r7, #8
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}
 8008f78:	e000ed00 	.word	0xe000ed00

08008f7c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b083      	sub	sp, #12
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008f84:	4b03      	ldr	r3, [pc, #12]	; (8008f94 <USBD_static_malloc+0x18>)
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	370c      	adds	r7, #12
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f90:	4770      	bx	lr
 8008f92:	bf00      	nop
 8008f94:	20001bf0 	.word	0x20001bf0

08008f98 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b083      	sub	sp, #12
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]

}
 8008fa0:	bf00      	nop
 8008fa2:	370c      	adds	r7, #12
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr

08008fac <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b085      	sub	sp, #20
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008fba:	79fb      	ldrb	r3, [r7, #7]
 8008fbc:	2b03      	cmp	r3, #3
 8008fbe:	d817      	bhi.n	8008ff0 <USBD_Get_USB_Status+0x44>
 8008fc0:	a201      	add	r2, pc, #4	; (adr r2, 8008fc8 <USBD_Get_USB_Status+0x1c>)
 8008fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fc6:	bf00      	nop
 8008fc8:	08008fd9 	.word	0x08008fd9
 8008fcc:	08008fdf 	.word	0x08008fdf
 8008fd0:	08008fe5 	.word	0x08008fe5
 8008fd4:	08008feb 	.word	0x08008feb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	73fb      	strb	r3, [r7, #15]
    break;
 8008fdc:	e00b      	b.n	8008ff6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008fde:	2303      	movs	r3, #3
 8008fe0:	73fb      	strb	r3, [r7, #15]
    break;
 8008fe2:	e008      	b.n	8008ff6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	73fb      	strb	r3, [r7, #15]
    break;
 8008fe8:	e005      	b.n	8008ff6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008fea:	2303      	movs	r3, #3
 8008fec:	73fb      	strb	r3, [r7, #15]
    break;
 8008fee:	e002      	b.n	8008ff6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008ff0:	2303      	movs	r3, #3
 8008ff2:	73fb      	strb	r3, [r7, #15]
    break;
 8008ff4:	bf00      	nop
  }
  return usb_status;
 8008ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3714      	adds	r7, #20
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr

08009004 <__itoa>:
 8009004:	1e93      	subs	r3, r2, #2
 8009006:	2b22      	cmp	r3, #34	; 0x22
 8009008:	b510      	push	{r4, lr}
 800900a:	460c      	mov	r4, r1
 800900c:	d904      	bls.n	8009018 <__itoa+0x14>
 800900e:	2300      	movs	r3, #0
 8009010:	700b      	strb	r3, [r1, #0]
 8009012:	461c      	mov	r4, r3
 8009014:	4620      	mov	r0, r4
 8009016:	bd10      	pop	{r4, pc}
 8009018:	2a0a      	cmp	r2, #10
 800901a:	d109      	bne.n	8009030 <__itoa+0x2c>
 800901c:	2800      	cmp	r0, #0
 800901e:	da07      	bge.n	8009030 <__itoa+0x2c>
 8009020:	232d      	movs	r3, #45	; 0x2d
 8009022:	700b      	strb	r3, [r1, #0]
 8009024:	4240      	negs	r0, r0
 8009026:	2101      	movs	r1, #1
 8009028:	4421      	add	r1, r4
 800902a:	f000 f805 	bl	8009038 <__utoa>
 800902e:	e7f1      	b.n	8009014 <__itoa+0x10>
 8009030:	2100      	movs	r1, #0
 8009032:	e7f9      	b.n	8009028 <__itoa+0x24>

08009034 <itoa>:
 8009034:	f7ff bfe6 	b.w	8009004 <__itoa>

08009038 <__utoa>:
 8009038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800903a:	4c1f      	ldr	r4, [pc, #124]	; (80090b8 <__utoa+0x80>)
 800903c:	b08b      	sub	sp, #44	; 0x2c
 800903e:	4605      	mov	r5, r0
 8009040:	460b      	mov	r3, r1
 8009042:	466e      	mov	r6, sp
 8009044:	f104 0c20 	add.w	ip, r4, #32
 8009048:	6820      	ldr	r0, [r4, #0]
 800904a:	6861      	ldr	r1, [r4, #4]
 800904c:	4637      	mov	r7, r6
 800904e:	c703      	stmia	r7!, {r0, r1}
 8009050:	3408      	adds	r4, #8
 8009052:	4564      	cmp	r4, ip
 8009054:	463e      	mov	r6, r7
 8009056:	d1f7      	bne.n	8009048 <__utoa+0x10>
 8009058:	7921      	ldrb	r1, [r4, #4]
 800905a:	7139      	strb	r1, [r7, #4]
 800905c:	1e91      	subs	r1, r2, #2
 800905e:	6820      	ldr	r0, [r4, #0]
 8009060:	6038      	str	r0, [r7, #0]
 8009062:	2922      	cmp	r1, #34	; 0x22
 8009064:	f04f 0100 	mov.w	r1, #0
 8009068:	d904      	bls.n	8009074 <__utoa+0x3c>
 800906a:	7019      	strb	r1, [r3, #0]
 800906c:	460b      	mov	r3, r1
 800906e:	4618      	mov	r0, r3
 8009070:	b00b      	add	sp, #44	; 0x2c
 8009072:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009074:	1e58      	subs	r0, r3, #1
 8009076:	4684      	mov	ip, r0
 8009078:	fbb5 f7f2 	udiv	r7, r5, r2
 800907c:	fb02 5617 	mls	r6, r2, r7, r5
 8009080:	3628      	adds	r6, #40	; 0x28
 8009082:	446e      	add	r6, sp
 8009084:	460c      	mov	r4, r1
 8009086:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800908a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800908e:	462e      	mov	r6, r5
 8009090:	42b2      	cmp	r2, r6
 8009092:	f101 0101 	add.w	r1, r1, #1
 8009096:	463d      	mov	r5, r7
 8009098:	d9ee      	bls.n	8009078 <__utoa+0x40>
 800909a:	2200      	movs	r2, #0
 800909c:	545a      	strb	r2, [r3, r1]
 800909e:	1919      	adds	r1, r3, r4
 80090a0:	1aa5      	subs	r5, r4, r2
 80090a2:	42aa      	cmp	r2, r5
 80090a4:	dae3      	bge.n	800906e <__utoa+0x36>
 80090a6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80090aa:	780e      	ldrb	r6, [r1, #0]
 80090ac:	7006      	strb	r6, [r0, #0]
 80090ae:	3201      	adds	r2, #1
 80090b0:	f801 5901 	strb.w	r5, [r1], #-1
 80090b4:	e7f4      	b.n	80090a0 <__utoa+0x68>
 80090b6:	bf00      	nop
 80090b8:	080091ac 	.word	0x080091ac

080090bc <memset>:
 80090bc:	4402      	add	r2, r0
 80090be:	4603      	mov	r3, r0
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d100      	bne.n	80090c6 <memset+0xa>
 80090c4:	4770      	bx	lr
 80090c6:	f803 1b01 	strb.w	r1, [r3], #1
 80090ca:	e7f9      	b.n	80090c0 <memset+0x4>

080090cc <__libc_init_array>:
 80090cc:	b570      	push	{r4, r5, r6, lr}
 80090ce:	4d0d      	ldr	r5, [pc, #52]	; (8009104 <__libc_init_array+0x38>)
 80090d0:	4c0d      	ldr	r4, [pc, #52]	; (8009108 <__libc_init_array+0x3c>)
 80090d2:	1b64      	subs	r4, r4, r5
 80090d4:	10a4      	asrs	r4, r4, #2
 80090d6:	2600      	movs	r6, #0
 80090d8:	42a6      	cmp	r6, r4
 80090da:	d109      	bne.n	80090f0 <__libc_init_array+0x24>
 80090dc:	4d0b      	ldr	r5, [pc, #44]	; (800910c <__libc_init_array+0x40>)
 80090de:	4c0c      	ldr	r4, [pc, #48]	; (8009110 <__libc_init_array+0x44>)
 80090e0:	f000 f818 	bl	8009114 <_init>
 80090e4:	1b64      	subs	r4, r4, r5
 80090e6:	10a4      	asrs	r4, r4, #2
 80090e8:	2600      	movs	r6, #0
 80090ea:	42a6      	cmp	r6, r4
 80090ec:	d105      	bne.n	80090fa <__libc_init_array+0x2e>
 80090ee:	bd70      	pop	{r4, r5, r6, pc}
 80090f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80090f4:	4798      	blx	r3
 80090f6:	3601      	adds	r6, #1
 80090f8:	e7ee      	b.n	80090d8 <__libc_init_array+0xc>
 80090fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80090fe:	4798      	blx	r3
 8009100:	3601      	adds	r6, #1
 8009102:	e7f2      	b.n	80090ea <__libc_init_array+0x1e>
 8009104:	080091dc 	.word	0x080091dc
 8009108:	080091dc 	.word	0x080091dc
 800910c:	080091dc 	.word	0x080091dc
 8009110:	080091e0 	.word	0x080091e0

08009114 <_init>:
 8009114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009116:	bf00      	nop
 8009118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800911a:	bc08      	pop	{r3}
 800911c:	469e      	mov	lr, r3
 800911e:	4770      	bx	lr

08009120 <_fini>:
 8009120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009122:	bf00      	nop
 8009124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009126:	bc08      	pop	{r3}
 8009128:	469e      	mov	lr, r3
 800912a:	4770      	bx	lr
